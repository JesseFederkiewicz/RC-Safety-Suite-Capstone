# 1 "A:\\Github\\RC-Safety-Suite-Capstone\\Jesse test code projects\\Active\\GroundSpeedSensor\\GroundSpeedSensor.cpp"
# 1 "A:\\Program Files (x86)\\Arduino\\java\\bin//"
# 1 "<built-in>"
#define __STDC__ 1
#define __cplusplus 201103L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 5
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 0
#define __VERSION__ "5.2.0"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __OPTIMIZE_SIZE__ 1
#define __OPTIMIZE__ 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 8
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __GNUG__ 5
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ short unsigned int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ long unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ long int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ long unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ long int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ long unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ int
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned int
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_WEAK__ 1
#define __DEPRECATED 1
#define __GXX_EXPERIMENTAL_CXX0X__ 1
#define __cpp_binary_literals 201304
#define __cpp_runtime_arrays 198712
#define __cpp_unicode_characters 200704
#define __cpp_raw_strings 200710
#define __cpp_unicode_literals 200710
#define __cpp_user_defined_literals 200809
#define __cpp_lambdas 200907
#define __cpp_constexpr 200704
#define __cpp_range_based_for 200907
#define __cpp_static_assert 200410
#define __cpp_decltype 200707
#define __cpp_attributes 200809
#define __cpp_rvalue_reference 200610
#define __cpp_variadic_templates 200704
#define __cpp_initializer_lists 200806
#define __cpp_delegating_constructors 200604
#define __cpp_nsdmi 200809
#define __cpp_inheriting_constructors 200802
#define __cpp_ref_qualifiers 200710
#define __cpp_alias_templates 200704
#define __EXCEPTIONS 1
#define __cpp_exceptions 199711
#define __GXX_ABI_VERSION 1009
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0xffff
#define __WCHAR_MIN__ 0
#define __WINT_MAX__ 0xffffffffU
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 0x7fffffff
#define __SIZE_MAX__ 0xffffffffU
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
#define __UINTMAX_C(c) c ## ULL
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffffL
#define __INT64_MAX__ 0x7fffffffffffffffLL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffUL
#define __UINT64_MAX__ 0xffffffffffffffffULL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST32_MAX__ 0x7fffffffL
#define __INT32_C(c) c ## L
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
#define __INT64_C(c) c ## LL
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffUL
#define __UINT32_C(c) c ## UL
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 0x7fffffff
#define __INT_FAST16_MAX__ 0x7fffffff
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
#define __UINT_FAST8_MAX__ 0xffffffffU
#define __UINT_FAST16_MAX__ 0xffffffffU
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
#define __INTPTR_MAX__ 0x7fffffff
#define __UINTPTR_MAX__ 0xffffffffU
#define __GCC_IEC_559 0
#define __GCC_IEC_559_COMPLEX 0
#define __FLT_EVAL_METHOD__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.4028234663852886e+38F
#define __FLT_MIN__ 1.1754943508222875e-38F
#define __FLT_EPSILON__ 1.1920928955078125e-7F
#define __FLT_DENORM_MIN__ 1.4012984643248171e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMAF 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ double(1.7976931348623157e+308L)
#define __DBL_MIN__ double(2.2250738585072014e-308L)
#define __DBL_EPSILON__ double(2.2204460492503131e-16L)
#define __DBL_DENORM_MIN__ double(4.9406564584124654e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 53
#define __LDBL_DIG__ 15
#define __LDBL_MIN_EXP__ (-1021)
#define __LDBL_MIN_10_EXP__ (-307)
#define __LDBL_MAX_EXP__ 1024
#define __LDBL_MAX_10_EXP__ 308
#define __DECIMAL_DIG__ 17
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __CHAR_UNSIGNED__ 1
#define __WCHAR_UNSIGNED__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SSP__ 1
#define __SIZEOF_WCHAR_T__ 2
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 4
#define __xtensa__ 1
#define __XTENSA__ 1
#define __XTENSA_WINDOWED_ABI__ 1
#define __XTENSA_EL__ 1
#define __ELF__ 1
# 1 "<command-line>"
#define ESP_PLATFORM 1
#define MBEDTLS_CONFIG_FILE "mbedtls/esp_config.h"
#define HAVE_CONFIG_H 1
#define GCC_NOT_5_2_0 0
#define WITH_POSIX 1
#define F_CPU 240000000L
#define ARDUINO 108013
#define ARDUINO_ESP32_DEV 1
#define ARDUINO_ARCH_ESP32 1
#define ARDUINO_BOARD "ESP32_DEV"
#define ARDUINO_VARIANT "esp32"
#define ESP32 1
#define CORE_DEBUG_LEVEL 0
# 1 "A:\\Github\\RC-Safety-Suite-Capstone\\Jesse test code projects\\Active\\GroundSpeedSensor\\GroundSpeedSensor.cpp"




# 1 "A:\\Github\\RC-Safety-Suite-Capstone\\Jesse test code projects\\Active\\GroundSpeedSensor\\GroundSpeedSensor.h" 1



#define _GROUNDSPEEDSENSOR_h 


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h"
#define Arduino_h 

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4




























#define _STDBOOL_H 
# 39 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4

#define _Bool bool
# 51 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4

#define __bool_true_false_are_defined 1
# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"













# 10 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define _STDINT_H 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/_default_types.h" 1











# 9 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/_default_types.h"
#define _MACHINE__DEFAULT_TYPES_H 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h" 1





































# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h"
#define _SYS_FEATURES_H 


extern "C" {







# 31 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h"
#define __NEWLIB__ 2
#define __NEWLIB_MINOR__ 1




#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))






#define __GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)


# 99 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h"

# 213 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h"


#define _POSIX_THREADS 1
#define _UNIX98_THREAD_MUTEX_ATTRIBUTES 1






















}
# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/_default_types.h" 2


extern "C" {


typedef signed char __int8_t ;
typedef unsigned char __uint8_t ;
#define ___int8_t_defined 1

typedef signed short __int16_t;
typedef unsigned short __uint16_t;
#define ___int16_t_defined 1

typedef signed int __int32_t;
typedef unsigned int __uint32_t;
#define ___int32_t_defined 1

typedef signed long long __int64_t;
typedef unsigned long long __uint64_t;
#define ___int64_t_defined 1

typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
#define ___int_least8_t_defined 

typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
#define ___int_least16_t_defined 

typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
#define ___int_least32_t_defined 

typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;
#define ___int_least64_t_defined 

typedef int __intptr_t;
typedef unsigned int __uintptr_t;


}
# 13 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_intsup.h" 1

















# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_intsup.h"
#define _SYS__INTSUP_H 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h" 1





































# 15 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_intsup.h" 2

#define __STDINT_EXP(x) __ ##x ##__

#define __have_longlong64 1
# 14 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 2


extern "C" {



typedef __int8_t int8_t ;
typedef __uint8_t uint8_t ;
#define __int8_t_defined 1



typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;
#define __int_least8_t_defined 1



typedef __int16_t int16_t ;
typedef __uint16_t uint16_t ;
#define __int16_t_defined 1



typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;
#define __int_least16_t_defined 1



typedef __int32_t int32_t ;
typedef __uint32_t uint32_t ;
#define __int32_t_defined 1



typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;
#define __int_least32_t_defined 1



typedef __int64_t int64_t ;
typedef __uint64_t uint64_t ;
#define __int64_t_defined 1



typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
#define __int_least64_t_defined 1













# 74 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
#define __int_fast8_t_defined 1







  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
#define __int_fast16_t_defined 1







  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
#define __int_fast32_t_defined 1







  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
#define __int_fast64_t_defined 1















# 150 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"



  typedef long long int intmax_t;








  typedef long long unsigned int uintmax_t;






typedef __intptr_t intptr_t;
typedef __uintptr_t uintptr_t;


#define INTPTR_MIN (-__INTPTR_MAX__ - 1)
#define INTPTR_MAX __INTPTR_MAX__
#define UINTPTR_MAX __UINTPTR_MAX__
# 194 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"



#define INT8_MIN (-__INT8_MAX__ - 1)
#define INT8_MAX __INT8_MAX__
#define UINT8_MAX __UINT8_MAX__







#define INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)
#define INT_LEAST8_MAX __INT_LEAST8_MAX__
#define UINT_LEAST8_MAX __UINT_LEAST8_MAX__
# 219 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT16_MIN (-__INT16_MAX__ - 1)
#define INT16_MAX __INT16_MAX__
#define UINT16_MAX __UINT16_MAX__







#define INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)
#define INT_LEAST16_MAX __INT_LEAST16_MAX__
#define UINT_LEAST16_MAX __UINT_LEAST16_MAX__
# 241 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT32_MIN (-__INT32_MAX__ - 1)
#define INT32_MAX __INT32_MAX__
#define UINT32_MAX __UINT32_MAX__
# 257 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)
#define INT_LEAST32_MAX __INT_LEAST32_MAX__
#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__
# 275 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT64_MIN (-__INT64_MAX__ - 1)
#define INT64_MAX __INT64_MAX__
#define UINT64_MAX __UINT64_MAX__
# 291 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)
#define INT_LEAST64_MAX __INT_LEAST64_MAX__
#define UINT_LEAST64_MAX __UINT_LEAST64_MAX__
# 307 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)
#define INT_FAST8_MAX __INT_FAST8_MAX__
#define UINT_FAST8_MAX __UINT_FAST8_MAX__
# 323 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)
#define INT_FAST16_MAX __INT_FAST16_MAX__
#define UINT_FAST16_MAX __UINT_FAST16_MAX__
# 339 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)
#define INT_FAST32_MAX __INT_FAST32_MAX__
#define UINT_FAST32_MAX __UINT_FAST32_MAX__
# 355 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)
#define INT_FAST64_MAX __INT_FAST64_MAX__
#define UINT_FAST64_MAX __UINT_FAST64_MAX__
# 371 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INTMAX_MAX __INTMAX_MAX__
#define INTMAX_MIN (-INTMAX_MAX - 1)







#define UINTMAX_MAX __UINTMAX_MAX__







#define SIZE_MAX __SIZE_MAX__





#define SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)
#define SIG_ATOMIC_MAX __STDINT_EXP(INT_MAX)



#define PTRDIFF_MAX __PTRDIFF_MAX__



#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)




#define WCHAR_MIN __WCHAR_MIN__










#define WCHAR_MAX __WCHAR_MAX__









#define WINT_MAX __WINT_MAX__




#define WINT_MIN __WINT_MIN__






#define INT8_C(x) __INT8_C(x)
#define UINT8_C(x) __UINT8_C(x)
# 453 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT16_C(x) __INT16_C(x)
#define UINT16_C(x) __UINT16_C(x)
# 465 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT32_C(x) __INT32_C(x)
#define UINT32_C(x) __UINT32_C(x)
# 478 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
#define INT64_C(x) __INT64_C(x)
#define UINT64_C(x) __UINT64_C(x)
# 492 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"


#define INTMAX_C(x) __INTMAX_C(x)
#define UINTMAX_C(x) __UINTMAX_C(x)
# 508 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h"
}
# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdarg.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdarg.h" 3 4






























#define _STDARG_H 
#define _ANSI_STDARG_H_ 

#undef __need___va_list




#define __GNUC_VA_LIST 
typedef __builtin_va_list __gnuc_va_list;






#define va_start(v,l) __builtin_va_start(v,l)
#define va_end(v) __builtin_va_end(v)
#define va_arg(v,l) __builtin_va_arg(v,l)

#define va_copy(d,s) __builtin_va_copy(d,s)

#define __va_copy(d,s) __builtin_va_copy(d,s)







# 85 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdarg.h" 3 4













typedef __gnuc_va_list va_list;





#define _VA_LIST_ 


#define _VA_LIST 


#define _VA_LIST_DEFINED 


#define _VA_LIST_T_H 


#define __va_list__ 
# 26 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4






































#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 




















# 92 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4












# 117 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4










# 137 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 



typedef int ptrdiff_t;
# 160 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

#undef __need_ptrdiff_t







# 187 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 







#define __size_t 





typedef unsigned int size_t;
# 238 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_size_t










# 267 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 












#undef _BSD_WCHAR_T_
# 310 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



# 347 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 362 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4




# 398 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



#undef NULL

#define NULL __null
# 412 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)




#define _GCC_MAX_ALIGN_T 



typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;





#define _GXX_NULLPTR_T 
  typedef decltype(nullptr) nullptr_t;
# 27 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"



































# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"









# 27 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
#define _STDIO_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1

















# 13 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h"
#define _ANSIDECL_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/newlib.h" 1








# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/newlib.h"
#define __NEWLIB_H__ 1





#define _NEWLIB_VERSION "2.2.0"




# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/newlib.h"

















# 34 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/newlib.h"
#define _WANT_REENT_SMALL 1





#define _MB_LEN_MAX 1










# 50 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/newlib.h"
#define HAVE_INITFINI_ARRAY 1




# 54 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/newlib.h"
#define _ATEXIT_DYNAMIC_ALLOC 1


#define _HAVE_LONG_DOUBLE 1


#define _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1


#define _LDBL_EQ_DBL 1








#define _FVWRITE_IN_STREAMIO 1


#define _FSEEK_OPTIMIZATION 1


#define _WIDE_ORIENT 1


#define _UNBUF_STREAM_OPT 1








#define _NANO_FORMATTED_IO 1






# 95 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/newlib.h"
























































# 149 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/newlib.h"


















































# 16 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h" 1

#define __SYS_CONFIG_H__ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/ieeefp.h" 1


































































































# 217 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/ieeefp.h"

# 422 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/ieeefp.h"
#define __IEEE_LITTLE_ENDIAN 
# 5 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h" 1





































# 6 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h" 2














# 116 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h"

# 126 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h"

# 189 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h"
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h" 1











# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"











































# 32 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"
#define _XTENSA_CORE_CONFIGURATION_H 







# 39 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"







# 45 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"





# 49 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"
#define XCHAL_HAVE_BE 0 
#define XCHAL_HAVE_WINDOWED 1 
#define XCHAL_NUM_AREGS 64 
#define XCHAL_NUM_AREGS_LOG2 6 
#define XCHAL_MAX_INSTRUCTION_SIZE 3 
#define XCHAL_HAVE_DEBUG 1 
#define XCHAL_HAVE_DENSITY 1 
#define XCHAL_HAVE_LOOPS 1 
#define XCHAL_LOOP_BUFFER_SIZE 256 
#define XCHAL_HAVE_NSA 1 
#define XCHAL_HAVE_MINMAX 1 
#define XCHAL_HAVE_SEXT 1 
#define XCHAL_HAVE_DEPBITS 0 
#define XCHAL_HAVE_CLAMPS 1 
#define XCHAL_HAVE_MUL16 1 
#define XCHAL_HAVE_MUL32 1 
#define XCHAL_HAVE_MUL32_HIGH 1 
#define XCHAL_HAVE_DIV32 1 
#define XCHAL_HAVE_L32R 1 
#define XCHAL_HAVE_ABSOLUTE_LITERALS 0 
#define XCHAL_HAVE_CONST16 0 
#define XCHAL_HAVE_ADDX 1 
#define XCHAL_HAVE_WIDE_BRANCHES 0 
#define XCHAL_HAVE_PREDICTED_BRANCHES 0 
#define XCHAL_HAVE_CALL4AND12 1 
#define XCHAL_HAVE_ABS 1 
 
 
#define XCHAL_HAVE_RELEASE_SYNC 1 
#define XCHAL_HAVE_S32C1I 1 
#define XCHAL_HAVE_SPECULATION 0 
#define XCHAL_HAVE_FULL_RESET 1 
#define XCHAL_NUM_CONTEXTS 1 
#define XCHAL_NUM_MISC_REGS 4 
#define XCHAL_HAVE_TAP_MASTER 0 
#define XCHAL_HAVE_PRID 1 
#define XCHAL_HAVE_EXTERN_REGS 1 
#define XCHAL_HAVE_MX 0 
#define XCHAL_HAVE_MP_INTERRUPTS 0 
#define XCHAL_HAVE_MP_RUNSTALL 0 
#define XCHAL_HAVE_PSO 0 
#define XCHAL_HAVE_PSO_CDM 0 
#define XCHAL_HAVE_PSO_FULL_RETENTION 0 
#define XCHAL_HAVE_THREADPTR 1 
#define XCHAL_HAVE_BOOLEANS 1 
#define XCHAL_HAVE_CP 1 
#define XCHAL_CP_MAXCFG 8 
#define XCHAL_HAVE_MAC16 1 

#define XCHAL_HAVE_FUSION 0 
#define XCHAL_HAVE_FUSION_FP 0 
#define XCHAL_HAVE_FUSION_LOW_POWER 0 
#define XCHAL_HAVE_FUSION_AES 0 
#define XCHAL_HAVE_FUSION_CONVENC 0 
#define XCHAL_HAVE_FUSION_LFSR_CRC 0 
#define XCHAL_HAVE_FUSION_BITOPS 0 
#define XCHAL_HAVE_FUSION_AVS 0 
#define XCHAL_HAVE_FUSION_16BIT_BASEBAND 0 
#define XCHAL_HAVE_FUSION_VITERBI 0 
#define XCHAL_HAVE_FUSION_SOFTDEMAP 0 
#define XCHAL_HAVE_HIFIPRO 0 
#define XCHAL_HAVE_HIFI4 0 
#define XCHAL_HAVE_HIFI4_VFPU 0 
#define XCHAL_HAVE_HIFI3 0 
#define XCHAL_HAVE_HIFI3_VFPU 0 
#define XCHAL_HAVE_HIFI2 0 
#define XCHAL_HAVE_HIFI2EP 0 
#define XCHAL_HAVE_HIFI_MINI 0


#define XCHAL_HAVE_VECTORFPU2005 0 
#define XCHAL_HAVE_USER_DPFPU 0 
#define XCHAL_HAVE_USER_SPFPU 0 
#define XCHAL_HAVE_FP 1 
#define XCHAL_HAVE_FP_DIV 1 
#define XCHAL_HAVE_FP_RECIP 1 
#define XCHAL_HAVE_FP_SQRT 1 
#define XCHAL_HAVE_FP_RSQRT 1 
#define XCHAL_HAVE_DFP 0 
#define XCHAL_HAVE_DFP_DIV 0 
#define XCHAL_HAVE_DFP_RECIP 0 
#define XCHAL_HAVE_DFP_SQRT 0 
#define XCHAL_HAVE_DFP_RSQRT 0 
#define XCHAL_HAVE_DFP_ACCEL 1 
#define XCHAL_HAVE_DFP_accel XCHAL_HAVE_DFP_ACCEL 

#define XCHAL_HAVE_DFPU_SINGLE_ONLY 1 
#define XCHAL_HAVE_DFPU_SINGLE_DOUBLE 0 
#define XCHAL_HAVE_VECTRA1 0 
#define XCHAL_HAVE_VECTRALX 0 
#define XCHAL_HAVE_PDX4 0 
#define XCHAL_HAVE_CONNXD2 0 
#define XCHAL_HAVE_CONNXD2_DUALLSFLIX 0 
#define XCHAL_HAVE_BBE16 0 
#define XCHAL_HAVE_BBE16_RSQRT 0 
#define XCHAL_HAVE_BBE16_VECDIV 0 
#define XCHAL_HAVE_BBE16_DESPREAD 0 
#define XCHAL_HAVE_BBENEP 0 
#define XCHAL_HAVE_BSP3 0 
#define XCHAL_HAVE_BSP3_TRANSPOSE 0 
#define XCHAL_HAVE_SSP16 0 
#define XCHAL_HAVE_SSP16_VITERBI 0 
#define XCHAL_HAVE_TURBO16 0 
#define XCHAL_HAVE_BBP16 0 
#define XCHAL_HAVE_FLIX3 0 
#define XCHAL_HAVE_GRIVPEP 0 
#define XCHAL_HAVE_GRIVPEP_HISTOGRAM 0 







# 162 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"
#define XCHAL_NUM_LOADSTORE_UNITS 1 
#define XCHAL_NUM_WRITEBUFFER_ENTRIES 4 
#define XCHAL_INST_FETCH_WIDTH 4 
#define XCHAL_DATA_WIDTH 4 
#define XCHAL_DATA_PIPE_DELAY 2 



#define XCHAL_CLOCK_GATING_GLOBAL 1 
#define XCHAL_CLOCK_GATING_FUNCUNIT 1 

#define XCHAL_UNALIGNED_LOAD_EXCEPTION 0 
#define XCHAL_UNALIGNED_STORE_EXCEPTION 0 
#define XCHAL_UNALIGNED_LOAD_HW 1 
#define XCHAL_UNALIGNED_STORE_HW 1 

#define XCHAL_SW_VERSION 1100003 

#define XCHAL_CORE_ID "esp32_v3_49_prod" 







#define XCHAL_BUILD_UNIQUE_ID 0x0005FE96 






# 187 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"
#define XCHAL_HW_CONFIGID0 0xC2BCFFFE 
#define XCHAL_HW_CONFIGID1 0x1CC5FE96 
#define XCHAL_HW_VERSION_NAME "LX6.0.3" 
#define XCHAL_HW_VERSION_MAJOR 2600 
#define XCHAL_HW_VERSION_MINOR 3 
#define XCHAL_HW_VERSION 260003 
#define XCHAL_HW_REL_LX6 1
#define XCHAL_HW_REL_LX6_0 1
#define XCHAL_HW_REL_LX6_0_3 1
#define XCHAL_HW_CONFIGID_RELIABLE 1

#define XCHAL_HW_MIN_VERSION_MAJOR 2600 
#define XCHAL_HW_MIN_VERSION_MINOR 3 
#define XCHAL_HW_MIN_VERSION 260003 
#define XCHAL_HW_MAX_VERSION_MAJOR 2600 
#define XCHAL_HW_MAX_VERSION_MINOR 3 
#define XCHAL_HW_MAX_VERSION 260003 







# 210 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"
#define XCHAL_ICACHE_LINESIZE 4 
#define XCHAL_DCACHE_LINESIZE 4 
#define XCHAL_ICACHE_LINEWIDTH 2 
#define XCHAL_DCACHE_LINEWIDTH 2 

#define XCHAL_ICACHE_SIZE 0 
#define XCHAL_DCACHE_SIZE 0 

#define XCHAL_DCACHE_IS_WRITEBACK 0 
#define XCHAL_DCACHE_IS_COHERENT 0 

#define XCHAL_HAVE_PREFETCH 0 
#define XCHAL_HAVE_PREFETCH_L1 0 
#define XCHAL_PREFETCH_CASTOUT_LINES 0 
#define XCHAL_PREFETCH_ENTRIES 0 
#define XCHAL_PREFETCH_BLOCK_ENTRIES 0 
#define XCHAL_HAVE_CACHE_BLOCKOPS 0 
#define XCHAL_HAVE_ICACHE_TEST 0 
#define XCHAL_HAVE_DCACHE_TEST 0 
#define XCHAL_HAVE_ICACHE_DYN_WAYS 0 
#define XCHAL_HAVE_DCACHE_DYN_WAYS 0 
















# 246 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"
#define XCHAL_HAVE_PIF 1 
#define XCHAL_HAVE_AXI 0 

#define XCHAL_HAVE_PIF_WR_RESP 0 
#define XCHAL_HAVE_PIF_REQ_ATTR 0 




#define XCHAL_ICACHE_SETWIDTH 0
#define XCHAL_DCACHE_SETWIDTH 0


#define XCHAL_ICACHE_WAYS 1
#define XCHAL_DCACHE_WAYS 1


#define XCHAL_ICACHE_LINE_LOCKABLE 0
#define XCHAL_DCACHE_LINE_LOCKABLE 0
#define XCHAL_ICACHE_ECC_PARITY 0
#define XCHAL_DCACHE_ECC_PARITY 0


#define XCHAL_ICACHE_ACCESS_SIZE 1
#define XCHAL_DCACHE_ACCESS_SIZE 1

#define XCHAL_DCACHE_BANKS 0 


#define XCHAL_CA_BITS 4







# 282 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"
#define XCHAL_NUM_INSTROM 1 
#define XCHAL_NUM_INSTRAM 2 
#define XCHAL_NUM_DATAROM 1 
#define XCHAL_NUM_DATARAM 2 
#define XCHAL_NUM_URAM 0 
#define XCHAL_NUM_XLMI 1 


#define XCHAL_INSTROM0_VADDR 0x40800000 
#define XCHAL_INSTROM0_PADDR 0x40800000 
#define XCHAL_INSTROM0_SIZE 4194304 
#define XCHAL_INSTROM0_ECC_PARITY 0 


#define XCHAL_INSTRAM0_VADDR 0x40000000 
#define XCHAL_INSTRAM0_PADDR 0x40000000 
#define XCHAL_INSTRAM0_SIZE 4194304 
#define XCHAL_INSTRAM0_ECC_PARITY 0 


#define XCHAL_INSTRAM1_VADDR 0x40400000 
#define XCHAL_INSTRAM1_PADDR 0x40400000 
#define XCHAL_INSTRAM1_SIZE 4194304 
#define XCHAL_INSTRAM1_ECC_PARITY 0 


#define XCHAL_DATAROM0_VADDR 0x3F400000 
#define XCHAL_DATAROM0_PADDR 0x3F400000 
#define XCHAL_DATAROM0_SIZE 4194304 
#define XCHAL_DATAROM0_ECC_PARITY 0 
#define XCHAL_DATAROM0_BANKS 1 


#define XCHAL_DATARAM0_VADDR 0x3FF80000 
#define XCHAL_DATARAM0_PADDR 0x3FF80000 
#define XCHAL_DATARAM0_SIZE 524288 
#define XCHAL_DATARAM0_ECC_PARITY 0 
#define XCHAL_DATARAM0_BANKS 1 


#define XCHAL_DATARAM1_VADDR 0x3F800000 
#define XCHAL_DATARAM1_PADDR 0x3F800000 
#define XCHAL_DATARAM1_SIZE 4194304 
#define XCHAL_DATARAM1_ECC_PARITY 0 
#define XCHAL_DATARAM1_BANKS 1 


#define XCHAL_XLMI0_VADDR 0x3FF00000 
#define XCHAL_XLMI0_PADDR 0x3FF00000 
#define XCHAL_XLMI0_SIZE 524288 
#define XCHAL_XLMI0_ECC_PARITY 0 

#define XCHAL_HAVE_IMEM_LOADSTORE 1 







# 341 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"
#define XCHAL_HAVE_INTERRUPTS 1 
#define XCHAL_HAVE_HIGHPRI_INTERRUPTS 1 
#define XCHAL_HAVE_NMI 1 
#define XCHAL_HAVE_CCOUNT 1 
#define XCHAL_NUM_TIMERS 3 
#define XCHAL_NUM_INTERRUPTS 32 
#define XCHAL_NUM_INTERRUPTS_LOG2 5 
#define XCHAL_NUM_EXTINTERRUPTS 26 
#define XCHAL_NUM_INTLEVELS 6 



#define XCHAL_EXCM_LEVEL 3 
 


#define XCHAL_INTLEVEL1_MASK 0x000637FF
#define XCHAL_INTLEVEL2_MASK 0x00380000
#define XCHAL_INTLEVEL3_MASK 0x28C08800
#define XCHAL_INTLEVEL4_MASK 0x53000000
#define XCHAL_INTLEVEL5_MASK 0x84010000
#define XCHAL_INTLEVEL6_MASK 0x00000000
#define XCHAL_INTLEVEL7_MASK 0x00004000


#define XCHAL_INTLEVEL1_ANDBELOW_MASK 0x000637FF
#define XCHAL_INTLEVEL2_ANDBELOW_MASK 0x003E37FF
#define XCHAL_INTLEVEL3_ANDBELOW_MASK 0x28FEBFFF
#define XCHAL_INTLEVEL4_ANDBELOW_MASK 0x7BFEBFFF
#define XCHAL_INTLEVEL5_ANDBELOW_MASK 0xFFFFBFFF
#define XCHAL_INTLEVEL6_ANDBELOW_MASK 0xFFFFBFFF
#define XCHAL_INTLEVEL7_ANDBELOW_MASK 0xFFFFFFFF


#define XCHAL_INT0_LEVEL 1
#define XCHAL_INT1_LEVEL 1
#define XCHAL_INT2_LEVEL 1
#define XCHAL_INT3_LEVEL 1
#define XCHAL_INT4_LEVEL 1
#define XCHAL_INT5_LEVEL 1
#define XCHAL_INT6_LEVEL 1
#define XCHAL_INT7_LEVEL 1
#define XCHAL_INT8_LEVEL 1
#define XCHAL_INT9_LEVEL 1
#define XCHAL_INT10_LEVEL 1
#define XCHAL_INT11_LEVEL 3
#define XCHAL_INT12_LEVEL 1
#define XCHAL_INT13_LEVEL 1
#define XCHAL_INT14_LEVEL 7
#define XCHAL_INT15_LEVEL 3
#define XCHAL_INT16_LEVEL 5
#define XCHAL_INT17_LEVEL 1
#define XCHAL_INT18_LEVEL 1
#define XCHAL_INT19_LEVEL 2
#define XCHAL_INT20_LEVEL 2
#define XCHAL_INT21_LEVEL 2
#define XCHAL_INT22_LEVEL 3
#define XCHAL_INT23_LEVEL 3
#define XCHAL_INT24_LEVEL 4
#define XCHAL_INT25_LEVEL 4
#define XCHAL_INT26_LEVEL 5
#define XCHAL_INT27_LEVEL 3
#define XCHAL_INT28_LEVEL 4
#define XCHAL_INT29_LEVEL 3
#define XCHAL_INT30_LEVEL 4
#define XCHAL_INT31_LEVEL 5
#define XCHAL_DEBUGLEVEL 6 
#define XCHAL_HAVE_DEBUG_EXTERN_INT 1 
#define XCHAL_NMILEVEL 7 





#define XCHAL_INT0_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT1_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT2_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT3_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT4_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT5_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT6_TYPE XTHAL_INTTYPE_TIMER
#define XCHAL_INT7_TYPE XTHAL_INTTYPE_SOFTWARE
#define XCHAL_INT8_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT9_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT10_TYPE XTHAL_INTTYPE_EXTERN_EDGE
#define XCHAL_INT11_TYPE XTHAL_INTTYPE_PROFILING
#define XCHAL_INT12_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT13_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT14_TYPE XTHAL_INTTYPE_NMI
#define XCHAL_INT15_TYPE XTHAL_INTTYPE_TIMER
#define XCHAL_INT16_TYPE XTHAL_INTTYPE_TIMER
#define XCHAL_INT17_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT18_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT19_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT20_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT21_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT22_TYPE XTHAL_INTTYPE_EXTERN_EDGE
#define XCHAL_INT23_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT24_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT25_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT26_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT27_TYPE XTHAL_INTTYPE_EXTERN_LEVEL
#define XCHAL_INT28_TYPE XTHAL_INTTYPE_EXTERN_EDGE
#define XCHAL_INT29_TYPE XTHAL_INTTYPE_SOFTWARE
#define XCHAL_INT30_TYPE XTHAL_INTTYPE_EXTERN_EDGE
#define XCHAL_INT31_TYPE XTHAL_INTTYPE_EXTERN_LEVEL


#define XCHAL_INTTYPE_MASK_UNCONFIGURED 0x00000000
#define XCHAL_INTTYPE_MASK_SOFTWARE 0x20000080
#define XCHAL_INTTYPE_MASK_EXTERN_EDGE 0x50400400
#define XCHAL_INTTYPE_MASK_EXTERN_LEVEL 0x8FBE333F
#define XCHAL_INTTYPE_MASK_TIMER 0x00018040
#define XCHAL_INTTYPE_MASK_NMI 0x00004000
#define XCHAL_INTTYPE_MASK_WRITE_ERROR 0x00000000
#define XCHAL_INTTYPE_MASK_PROFILING 0x00000800


#define XCHAL_TIMER0_INTERRUPT 6 
#define XCHAL_TIMER1_INTERRUPT 15 
#define XCHAL_TIMER2_INTERRUPT 16 
#define XCHAL_TIMER3_INTERRUPT XTHAL_TIMER_UNCONFIGURED
#define XCHAL_NMI_INTERRUPT 14 
#define XCHAL_PROFILING_INTERRUPT 11 


#define XCHAL_INTLEVEL7_NUM 14


















# 476 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"

#define XCHAL_EXTINT0_NUM 0 
#define XCHAL_EXTINT1_NUM 1 
#define XCHAL_EXTINT2_NUM 2 
#define XCHAL_EXTINT3_NUM 3 
#define XCHAL_EXTINT4_NUM 4 
#define XCHAL_EXTINT5_NUM 5 
#define XCHAL_EXTINT6_NUM 8 
#define XCHAL_EXTINT7_NUM 9 
#define XCHAL_EXTINT8_NUM 10 
#define XCHAL_EXTINT9_NUM 12 
#define XCHAL_EXTINT10_NUM 13 
#define XCHAL_EXTINT11_NUM 14 
#define XCHAL_EXTINT12_NUM 17 
#define XCHAL_EXTINT13_NUM 18 
#define XCHAL_EXTINT14_NUM 19 
#define XCHAL_EXTINT15_NUM 20 
#define XCHAL_EXTINT16_NUM 21 
#define XCHAL_EXTINT17_NUM 22 
#define XCHAL_EXTINT18_NUM 23 
#define XCHAL_EXTINT19_NUM 24 
#define XCHAL_EXTINT20_NUM 25 
#define XCHAL_EXTINT21_NUM 26 
#define XCHAL_EXTINT22_NUM 27 
#define XCHAL_EXTINT23_NUM 28 
#define XCHAL_EXTINT24_NUM 30 
#define XCHAL_EXTINT25_NUM 31 

#define XCHAL_INT0_EXTNUM 0 
#define XCHAL_INT1_EXTNUM 1 
#define XCHAL_INT2_EXTNUM 2 
#define XCHAL_INT3_EXTNUM 3 
#define XCHAL_INT4_EXTNUM 4 
#define XCHAL_INT5_EXTNUM 5 
#define XCHAL_INT8_EXTNUM 6 
#define XCHAL_INT9_EXTNUM 7 
#define XCHAL_INT10_EXTNUM 8 
#define XCHAL_INT12_EXTNUM 9 
#define XCHAL_INT13_EXTNUM 10 
#define XCHAL_INT14_EXTNUM 11 
#define XCHAL_INT17_EXTNUM 12 
#define XCHAL_INT18_EXTNUM 13 
#define XCHAL_INT19_EXTNUM 14 
#define XCHAL_INT20_EXTNUM 15 
#define XCHAL_INT21_EXTNUM 16 
#define XCHAL_INT22_EXTNUM 17 
#define XCHAL_INT23_EXTNUM 18 
#define XCHAL_INT24_EXTNUM 19 
#define XCHAL_INT25_EXTNUM 20 
#define XCHAL_INT26_EXTNUM 21 
#define XCHAL_INT27_EXTNUM 22 
#define XCHAL_INT28_EXTNUM 23 
#define XCHAL_INT30_EXTNUM 24 
#define XCHAL_INT31_EXTNUM 25 







# 536 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"
#define XCHAL_XEA_VERSION 2 









#define XCHAL_HAVE_XEA1 0 
#define XCHAL_HAVE_XEA2 1 
#define XCHAL_HAVE_XEAX 0 
#define XCHAL_HAVE_EXCEPTIONS 1 
#define XCHAL_HAVE_HALT 0 
#define XCHAL_HAVE_BOOTLOADER 0 
#define XCHAL_HAVE_MEM_ECC_PARITY 0 
#define XCHAL_HAVE_VECTOR_SELECT 1 
#define XCHAL_HAVE_VECBASE 1 
#define XCHAL_VECBASE_RESET_VADDR 0x40000000 
#define XCHAL_VECBASE_RESET_PADDR 0x40000000
#define XCHAL_RESET_VECBASE_OVERLAP 0

#define XCHAL_RESET_VECTOR0_VADDR 0x50000000
#define XCHAL_RESET_VECTOR0_PADDR 0x50000000
#define XCHAL_RESET_VECTOR1_VADDR 0x40000400
#define XCHAL_RESET_VECTOR1_PADDR 0x40000400
#define XCHAL_RESET_VECTOR_VADDR 0x40000400
#define XCHAL_RESET_VECTOR_PADDR 0x40000400
#define XCHAL_USER_VECOFS 0x00000340
#define XCHAL_USER_VECTOR_VADDR 0x40000340
#define XCHAL_USER_VECTOR_PADDR 0x40000340
#define XCHAL_KERNEL_VECOFS 0x00000300
#define XCHAL_KERNEL_VECTOR_VADDR 0x40000300
#define XCHAL_KERNEL_VECTOR_PADDR 0x40000300
#define XCHAL_DOUBLEEXC_VECOFS 0x000003C0
#define XCHAL_DOUBLEEXC_VECTOR_VADDR 0x400003C0
#define XCHAL_DOUBLEEXC_VECTOR_PADDR 0x400003C0
#define XCHAL_WINDOW_OF4_VECOFS 0x00000000
#define XCHAL_WINDOW_UF4_VECOFS 0x00000040
#define XCHAL_WINDOW_OF8_VECOFS 0x00000080
#define XCHAL_WINDOW_UF8_VECOFS 0x000000C0
#define XCHAL_WINDOW_OF12_VECOFS 0x00000100
#define XCHAL_WINDOW_UF12_VECOFS 0x00000140
#define XCHAL_WINDOW_VECTORS_VADDR 0x40000000
#define XCHAL_WINDOW_VECTORS_PADDR 0x40000000
#define XCHAL_INTLEVEL2_VECOFS 0x00000180
#define XCHAL_INTLEVEL2_VECTOR_VADDR 0x40000180
#define XCHAL_INTLEVEL2_VECTOR_PADDR 0x40000180
#define XCHAL_INTLEVEL3_VECOFS 0x000001C0
#define XCHAL_INTLEVEL3_VECTOR_VADDR 0x400001C0
#define XCHAL_INTLEVEL3_VECTOR_PADDR 0x400001C0
#define XCHAL_INTLEVEL4_VECOFS 0x00000200
#define XCHAL_INTLEVEL4_VECTOR_VADDR 0x40000200
#define XCHAL_INTLEVEL4_VECTOR_PADDR 0x40000200
#define XCHAL_INTLEVEL5_VECOFS 0x00000240
#define XCHAL_INTLEVEL5_VECTOR_VADDR 0x40000240
#define XCHAL_INTLEVEL5_VECTOR_PADDR 0x40000240
#define XCHAL_INTLEVEL6_VECOFS 0x00000280
#define XCHAL_INTLEVEL6_VECTOR_VADDR 0x40000280
#define XCHAL_INTLEVEL6_VECTOR_PADDR 0x40000280
#define XCHAL_DEBUG_VECOFS XCHAL_INTLEVEL6_VECOFS
#define XCHAL_DEBUG_VECTOR_VADDR XCHAL_INTLEVEL6_VECTOR_VADDR
#define XCHAL_DEBUG_VECTOR_PADDR XCHAL_INTLEVEL6_VECTOR_PADDR
#define XCHAL_NMI_VECOFS 0x000002C0
#define XCHAL_NMI_VECTOR_VADDR 0x400002C0
#define XCHAL_NMI_VECTOR_PADDR 0x400002C0
#define XCHAL_INTLEVEL7_VECOFS XCHAL_NMI_VECOFS
#define XCHAL_INTLEVEL7_VECTOR_VADDR XCHAL_NMI_VECTOR_VADDR
#define XCHAL_INTLEVEL7_VECTOR_PADDR XCHAL_NMI_VECTOR_PADDR







# 606 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"

#define XCHAL_HAVE_DEBUG_ERI 1 
#define XCHAL_HAVE_DEBUG_APB 1 
#define XCHAL_HAVE_DEBUG_JTAG 1 


#define XCHAL_HAVE_OCD 1 
#define XCHAL_NUM_IBREAK 2 
#define XCHAL_NUM_DBREAK 2 
#define XCHAL_HAVE_OCD_DIR_ARRAY 0 
#define XCHAL_HAVE_OCD_LS32DDR 1 


#define XCHAL_HAVE_TRAX 1 
#define XCHAL_TRAX_MEM_SIZE 16384 
#define XCHAL_TRAX_MEM_SHAREABLE 1 
#define XCHAL_TRAX_ATB_WIDTH 32 
#define XCHAL_TRAX_TIME_WIDTH 0 


#define XCHAL_NUM_PERF_COUNTERS 2 







# 633 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"


#define XCHAL_HAVE_TLBS 1 
#define XCHAL_HAVE_SPANNING_WAY 1 
#define XCHAL_SPANNING_WAY 0 
#define XCHAL_HAVE_IDENTITY_MAP 1 
#define XCHAL_HAVE_CACHEATTR 0 
#define XCHAL_HAVE_MIMIC_CACHEATTR 1 
#define XCHAL_HAVE_XLT_CACHEATTR 0 
#define XCHAL_HAVE_PTP_MMU 0 








#define XCHAL_MMU_ASID_BITS 0 
#define XCHAL_MMU_RINGS 1 
#define XCHAL_MMU_RING_BITS 0 
# 190 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h" 2
#define MALLOC_ALIGNMENT ((XCHAL_DATA_WIDTH) < 16 ? 16 : (XCHAL_DATA_WIDTH))

#define __BUFSIZ__ 128

#define __DYNAMIC_REENT__ 


#define _REENT_SMALL 

#define HAVE_GETOPT 











# 227 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h"



#define _POINTER_INT long





#undef __RAND_MAX



#define __RAND_MAX 0x7fffffff
# 258 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h"
#define __EXPORT 



#define __IMPORT 







# 269 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h"
#define _READ_WRITE_RETURN_TYPE int






# 275 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h"
#define _READ_WRITE_BUFSIZE_TYPE int
# 284 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/config.h"













# 17 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 2






#define _HAVE_STDC 










#define _BEGIN_STD_C extern "C" {
#define _END_STD_C }


#define _NOTHROW __attribute__ ((__nothrow__))
# 50 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h"
#define _PTR void *
#define _AND ,
#define _NOARGS void
#define _CONST const
#define _VOLATILE volatile
#define _SIGNED signed
#define _DOTS , ...
#define _VOID void






#define _EXFUN_NOTHROW(name,proto) name proto _NOTHROW
#define _EXFUN(name,proto) name proto
#define _EXPARM(name,proto) (* name) proto
#define _EXFNPTR(name,proto) (* name) proto

#define _DEFUN(name,arglist,args) name(args)
#define _DEFUN_VOID(name) name(_NOARGS)
#define _CAST_VOID (void)

#define _LONG_DOUBLE long double


#define _PARAMS(paramlist) paramlist
# 98 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h"



#define _ATTRIBUTE(attrs) __attribute__ (attrs)

































# 125 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h"



# 127 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h"
#define _ELIDABLE_INLINE static __inline__



#define _NOINLINE __attribute__ ((__noinline__))
#define _NOINLINE_STATIC _NOINLINE static
# 30 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h" 2

#define _FSTDIO 

#define __need_size_t 
#define __need_NULL 
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h" 1







































































# 41 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"
#define _SYS_CDEFS_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/_default_types.h" 1











# 44 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h" 1





































# 45 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



































# 46 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

















# 92 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4












# 117 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4










# 160 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

#undef __need_ptrdiff_t







# 238 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_size_t










# 347 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 362 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4




# 398 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



#undef NULL

#define NULL __null
# 412 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 46 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h" 2

#define __PMT(args) args
#define __DOTS , ...
#define __THROW 


#define __ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) cname


#define __ptr_t void *
#define __long_double_t long double

#define __attribute_malloc__ 
#define __attribute_pure__ 
#define __attribute_format_strfmon__(a,b) 
#define __flexarr [0]


#define __bounded 
#define __unbounded 
#define __ptrvalue 



# 69 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"





#define __has_extension __has_feature


#define __has_feature(x) 0





#define __has_builtin(x) 0



#define __BEGIN_DECLS extern "C" {
#define __END_DECLS }














#define __GNUCLIKE_ASM 3
#define __GNUCLIKE_MATH_BUILTIN_CONSTANTS 



#define __GNUCLIKE___TYPEOF 1
#define __GNUCLIKE___OFFSETOF 1
#define __GNUCLIKE___SECTION 1


#define __GNUCLIKE_CTOR_SECTION_HANDLING 1


#define __GNUCLIKE_BUILTIN_CONSTANT_P 1






#define __GNUCLIKE_BUILTIN_VARARGS 1
#define __GNUCLIKE_BUILTIN_STDARG 1
#define __GNUCLIKE_BUILTIN_VAALIST 1



#define __GNUC_VA_LIST_COMPATIBILITY 1







# 136 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"
#define __compiler_membar() __asm __volatile(" " : : : "memory")



#define __GNUCLIKE_BUILTIN_NEXT_ARG 1
#define __GNUCLIKE_MATH_BUILTIN_RELOPS 


#define __GNUCLIKE_BUILTIN_MEMCPY 1


#define __CC_SUPPORTS_INLINE 1
#define __CC_SUPPORTS___INLINE 1
#define __CC_SUPPORTS___INLINE__ 1

#define __CC_SUPPORTS___FUNC__ 1
#define __CC_SUPPORTS_WARNING 1

#define __CC_SUPPORTS_VARADIC_XXX 1 

#define __CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1


























# 173 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"
#define __P(protos) protos 
#define __CONCAT1(x,y) x ## y
#define __CONCAT(x,y) __CONCAT1(x,y)
#define __STRING(x) #x 
#define __XSTRING(x) __STRING(x) 

#define __const const 
#define __signed signed
#define __volatile volatile

#define __inline inline 
# 217 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"

















# 246 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))
#define __unused __attribute__((__unused__))
#define __used __attribute__((__used__))
#define __packed __attribute__((__packed__))
#define __aligned(x) __attribute__((__aligned__(x)))
#define __section(x) __attribute__((__section__(x)))
# 269 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"









#define _Alignas(x) alignas(x)







#define _Alignof(x) alignof(x)












# 296 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"
#define _Atomic(T) struct { T volatile __val; }



#define _Noreturn [[noreturn]]
# 310 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"
#define _Static_assert(x,y) static_assert(x, y)
# 321 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"





#define _Thread_local __thread
























#define __malloc_like __attribute__((__malloc__))
#define __pure __attribute__((__pure__))






#define __always_inline __attribute__((__always_inline__))





#define __noinline __attribute__ ((__noinline__))





#define __nonnull(x) __attribute__((__nonnull__(x)))





#define __fastcall __attribute__((__fastcall__))





#define __returns_twice __attribute__((__returns_twice__))




















# 401 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"
#define __restrict 




























































# 436 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"
#define __predict_true(exp) __builtin_expect((exp), 1)
#define __predict_false(exp) __builtin_expect((exp), 0)






#define __hidden __attribute__((__visibility__("hidden")))
#define __exported __attribute__((__visibility__("default")))





#define __offsetof(type,field) offsetof(type, field)
#define __rangeof(type,start,end) (__offsetof(type, end) - __offsetof(type, start))













# 462 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"
#define __containerof(x,s,m) ({ const volatile __typeof__(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
# 471 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"













#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))

#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))

#define __format_arg(fmtarg) __attribute__((__format_arg__ (fmtarg)))
#define __strfmonlike(fmtarg,firstvararg) __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))

#define __strftimelike(fmtarg,firstvararg) __attribute__((__format__ (__strftime__, fmtarg, firstvararg)))









#define __printf0like(fmtarg,firstvararg) 




#define __strong_reference(sym,aliassym) extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))




#define __weak_reference(sym,alias) __asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)


#define __warn_references(sym,msg) __asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")



#define __sym_compat(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@" #verid)

#define __sym_default(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@@" #verid)
# 555 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"
#define __FBSDID(s) struct __hack



#define __RCSID(s) struct __hack



#define __RCSID_SOURCE(s) struct __hack



#define __SCCSID(s) struct __hack



#define __COPYRIGHT(s) struct __hack



#define __DECONST(type,var) ((type)(__uintptr_t)(const void *)(var))



#define __DEVOLATILE(type,var) ((type)(__uintptr_t)(volatile void *)(var))



#define __DEQUALIFY(type,var) ((type)(__uintptr_t)(const volatile void *)(var))













































# 609 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"













# 638 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"







# 669 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"























# 703 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h"
#define __POSIX_VISIBLE 200809
#define __XSI_VISIBLE 700
#define __BSD_VISIBLE 1
#define __ISO_C_VISIBLE 2011
# 36 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4


























# 37 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h" 2

#define __need___va_list 
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdarg.h" 1 3 4


























# 40 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h" 2


# 41 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"









# 47 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 1








extern "C" {

#define _SYS_REENT_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1

















# 14 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4


























# 15 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h"











# 10 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h"
#define _SYS__TYPES_H 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/_types.h" 1





#define _MACHINE__TYPES_H 
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/_default_types.h" 1











# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/_types.h" 2
# 13 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/lock.h" 1

#define _XTENSA_LOCK_H__ 












# 11 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/lock.h"
typedef int _lock_t;
typedef _lock_t _LOCK_RECURSIVE_T;
typedef _lock_t _LOCK_T;

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1

















# 16 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/lock.h" 2
















# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/lock.h"
#define __LOCK_INIT(CLASS,NAME) CLASS _lock_t NAME = 0;
#define __LOCK_INIT_RECURSIVE(CLASS,NAME) CLASS _lock_t NAME = 0;

void _lock_init(_lock_t *lock);
void _lock_init_recursive(_lock_t *lock);
void _lock_close(_lock_t *lock);
void _lock_close_recursive(_lock_t *lock);
void _lock_acquire(_lock_t *lock);
void _lock_acquire_recursive(_lock_t *lock);
int _lock_try_acquire(_lock_t *lock);
int _lock_try_acquire_recursive(_lock_t *lock);
void _lock_release(_lock_t *lock);
void _lock_release_recursive(_lock_t *lock);

#define __lock_init(lock) _lock_init(&(lock))
#define __lock_init_recursive(lock) _lock_init_recursive(&(lock))
#define __lock_close(lock) _lock_close(&(lock))
#define __lock_close_recursive(lock) _lock_close_recursive(&(lock))
#define __lock_acquire(lock) _lock_acquire(&(lock))
#define __lock_acquire_recursive(lock) _lock_acquire_recursive(&(lock))
#define __lock_try_acquire(lock) _lock_try_acquire(&(lock))
#define __lock_try_acquire_recursive(lock) _lock_try_acquire_recursive(&(lock))
#define __lock_release(lock) _lock_release(&(lock))
#define __lock_release_recursive(lock) _lock_release_recursive(&(lock))
# 14 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h" 2


typedef long _off_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



__extension__ typedef long long _off64_t;









# 39 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h"
typedef long _fpos_t; 
    
# 51 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h"





# 54 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h"
#define unsigned signed
typedef signed int _ssize_t;
#undef unsigned
# 66 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h"
#define __need_wint_t 
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



































# 46 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

















# 92 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4












# 117 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4










# 160 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

#undef __need_ptrdiff_t







# 238 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_size_t










# 347 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t




#define _WINT_T 




typedef unsigned int wint_t;

#undef __need_wint_t






# 398 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



#undef NULL

#define NULL __null
# 412 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 68 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h" 2



# 70 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h"

typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value; 
} _mbstate_t;



typedef _LOCK_RECURSIVE_T _flock_t;




typedef void *_iconv_t;
# 16 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 2

#define _NULL 0



#define __Long long
typedef unsigned long __ULong;
# 38 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
struct _reent;








# 45 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};






# 70 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
#define _ATEXIT_SIZE 32 

struct _on_exit_args {
 void * _fnargs[32 ]; 
 void * _dso_handle[32 ];
 
 __ULong _fntypes; 


# 78 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
 
 __ULong _is_cxa;
};


struct _atexit {
 struct _atexit *_next; 
 int _ind; 
 void (*_fns[32 ])(void); 
        struct _on_exit_args * _on_exit_args_ptr;
};
#define _ATEXIT_INIT {_NULL, 0, {_NULL}, _NULL}
# 104 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
#define _REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,














# 115 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
struct __sbuf {
 unsigned char *_base;
 int _size;
};
















































# 146 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"









# 151 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
struct __sFILE_fake {
  unsigned char *_p; 
  int _r; 
  int _w; 
  short _flags; 
  short _file; 
  struct __sbuf _bf; 
  int _lbfsize; 

  struct _reent *_data;
};




extern void __sinit (struct _reent *);

#define _REENT_SMALL_CHECK_INIT(ptr) do { if ((ptr) && !(ptr)->__sdidinit) __sinit (ptr); } while (0)
# 179 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
struct __sFILE {
  unsigned char *_p; 
  int _r; 
  int _w; 
  short _flags; 
  short _file; 
  struct __sbuf _bf; 
  int _lbfsize; 


  struct _reent *_data;


  
  void * _cookie; 

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);

  
  struct __sbuf _ub; 
  unsigned char *_up; 
  int _ur; 

  
  unsigned char _ubuf[3]; 
  unsigned char _nbuf[1]; 

  
  struct __sbuf _lb; 

  
  int _blksize; 
  _off_t _offset; 






  _flock_t _lock; 

  _mbstate_t _mbstate; 
  int _flags2; 
};
# 285 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};




























# 310 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
#define _RAND48_SEED_0 (0x330e)
#define _RAND48_SEED_1 (0xabcd)
#define _RAND48_SEED_2 (0x1234)
#define _RAND48_MULT_0 (0xe66d)
#define _RAND48_MULT_1 (0xdeec)
#define _RAND48_MULT_2 (0x0005)
#define _RAND48_ADD (0x000b)
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;

  
  __extension__ unsigned long long _rand_next;

};


#define _REENT_EMERGENCY_SIZE 25
#define _REENT_ASCTIME_SIZE 26
#define _REENT_SIGNAL_SIZE 24














# 342 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
struct _mprec
{
  
  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;
};


struct _misc_reent
{
  
  char *_strtok_last;
  _mbstate_t _mblen_state;
  _mbstate_t _wctomb_state;
  _mbstate_t _mbtowc_state;
  char _l64a_buf[8];
  int _getdate_err;
  _mbstate_t _mbrlen_state;
  _mbstate_t _mbrtowc_state;
  _mbstate_t _mbsrtowcs_state;
  _mbstate_t _wcrtomb_state;
  _mbstate_t _wcsrtombs_state;
};




# 370 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
struct _reent
{
  


# 374 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
  int _errno; 

  




# 379 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
  __FILE *_stdin, *_stdout, *_stderr; 

  int _inc; 

  char *_emergency;

  int __sdidinit; 

  int _current_category; 
  const char *_current_locale; 

  struct _mprec *_mp;

  void (* __cleanup) (struct _reent *);

  int _gamma_signgam;

  
  int _cvtlen; 
  char *_cvtbuf;

  struct _rand48 *_r48;
  struct __tm *_localtime_buf;
  char *_asctime_buf;

  
  void (**_sig_func)(int);


  
  struct _atexit *_atexit;
  struct _atexit _atexit0;


  struct _glue __sglue; 
  __FILE *__sf; 
  struct _misc_reent *_misc; 
  char *_signal_buf; 
};

extern const struct __sFILE_fake __sf_fake_stdin;
extern const struct __sFILE_fake __sf_fake_stdout;
extern const struct __sFILE_fake __sf_fake_stderr;

#define _REENT_INIT(var) { 0, (__FILE *)&__sf_fake_stdin, (__FILE *)&__sf_fake_stdout, (__FILE *)&__sf_fake_stderr, 0, _NULL, 0, 0, "C", _NULL, _NULL, 0, 0, _NULL, _NULL, _NULL, _NULL, _NULL, _REENT_INIT_ATEXIT {_NULL, 0, _NULL}, _NULL, _NULL, _NULL }
# 458 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
extern void esp_reent_init(struct _reent* reent);
#define _REENT_INIT_PTR(var) esp_reent_init(var)







#define __reent_assert(x) ((void)0)







#define _REENT_CHECK(var,what,type,size,init) do { struct _reent *_r = (var); if (_r->what == NULL) { _r->what = (type)malloc(size); __reent_assert(_r->what); init; } } while (0)
# 484 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
#define _REENT_CHECK_TM(var) _REENT_CHECK(var, _localtime_buf, struct __tm *, sizeof *((var)->_localtime_buf), )



#define _REENT_CHECK_ASCTIME_BUF(var) _REENT_CHECK(var, _asctime_buf, char *, _REENT_ASCTIME_SIZE, memset((var)->_asctime_buf, 0, _REENT_ASCTIME_SIZE))




#define _REENT_INIT_RAND48(var) do { struct _reent *_r = (var); _r->_r48->_seed[0] = _RAND48_SEED_0; _r->_r48->_seed[1] = _RAND48_SEED_1; _r->_r48->_seed[2] = _RAND48_SEED_2; _r->_r48->_mult[0] = _RAND48_MULT_0; _r->_r48->_mult[1] = _RAND48_MULT_1; _r->_r48->_mult[2] = _RAND48_MULT_2; _r->_r48->_add = _RAND48_ADD; _r->_r48->_rand_next = 1; } while (0)
# 504 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
#define _REENT_CHECK_RAND48(var) _REENT_CHECK(var, _r48, struct _rand48 *, sizeof *((var)->_r48), _REENT_INIT_RAND48((var)))


#define _REENT_INIT_MP(var) do { struct _reent *_r = (var); _r->_mp->_result_k = 0; _r->_mp->_result = _r->_mp->_p5s = _NULL; _r->_mp->_freelist = _NULL; } while (0)





#define _REENT_CHECK_MP(var) _REENT_CHECK(var, _mp, struct _mprec *, sizeof *((var)->_mp), _REENT_INIT_MP(var))


#define _REENT_CHECK_EMERGENCY(var) _REENT_CHECK(var, _emergency, char *, _REENT_EMERGENCY_SIZE, )


#define _REENT_INIT_MISC(var) do { struct _reent *_r = (var); _r->_misc->_strtok_last = _NULL; _r->_misc->_mblen_state.__count = 0; _r->_misc->_mblen_state.__value.__wch = 0; _r->_misc->_wctomb_state.__count = 0; _r->_misc->_wctomb_state.__value.__wch = 0; _r->_misc->_mbtowc_state.__count = 0; _r->_misc->_mbtowc_state.__value.__wch = 0; _r->_misc->_mbrlen_state.__count = 0; _r->_misc->_mbrlen_state.__value.__wch = 0; _r->_misc->_mbrtowc_state.__count = 0; _r->_misc->_mbrtowc_state.__value.__wch = 0; _r->_misc->_mbsrtowcs_state.__count = 0; _r->_misc->_mbsrtowcs_state.__value.__wch = 0; _r->_misc->_wcrtomb_state.__count = 0; _r->_misc->_wcrtomb_state.__value.__wch = 0; _r->_misc->_wcsrtombs_state.__count = 0; _r->_misc->_wcsrtombs_state.__value.__wch = 0; _r->_misc->_l64a_buf[0] = '\0'; _r->_misc->_getdate_err = 0; } while (0)
# 541 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
#define _REENT_CHECK_MISC(var) _REENT_CHECK(var, _misc, struct _misc_reent *, sizeof *((var)->_misc), _REENT_INIT_MISC(var))


#define _REENT_CHECK_SIGNAL_BUF(var) _REENT_CHECK(var, _signal_buf, char *, _REENT_SIGNAL_SIZE, )


#define _REENT_SIGNGAM(ptr) ((ptr)->_gamma_signgam)
#define _REENT_RAND_NEXT(ptr) ((ptr)->_r48->_rand_next)
#define _REENT_RAND48_SEED(ptr) ((ptr)->_r48->_seed)
#define _REENT_RAND48_MULT(ptr) ((ptr)->_r48->_mult)
#define _REENT_RAND48_ADD(ptr) ((ptr)->_r48->_add)
#define _REENT_MP_RESULT(ptr) ((ptr)->_mp->_result)
#define _REENT_MP_RESULT_K(ptr) ((ptr)->_mp->_result_k)
#define _REENT_MP_P5S(ptr) ((ptr)->_mp->_p5s)
#define _REENT_MP_FREELIST(ptr) ((ptr)->_mp->_freelist)
#define _REENT_ASCTIME_BUF(ptr) ((ptr)->_asctime_buf)
#define _REENT_TM(ptr) ((ptr)->_localtime_buf)
#define _REENT_EMERGENCY(ptr) ((ptr)->_emergency)
#define _REENT_STRTOK_LAST(ptr) ((ptr)->_misc->_strtok_last)
#define _REENT_MBLEN_STATE(ptr) ((ptr)->_misc->_mblen_state)
#define _REENT_MBTOWC_STATE(ptr) ((ptr)->_misc->_mbtowc_state)
#define _REENT_WCTOMB_STATE(ptr) ((ptr)->_misc->_wctomb_state)
#define _REENT_MBRLEN_STATE(ptr) ((ptr)->_misc->_mbrlen_state)
#define _REENT_MBRTOWC_STATE(ptr) ((ptr)->_misc->_mbrtowc_state)
#define _REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_misc->_mbsrtowcs_state)
#define _REENT_WCRTOMB_STATE(ptr) ((ptr)->_misc->_wcrtomb_state)
#define _REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_misc->_wcsrtombs_state)
#define _REENT_L64A_BUF(ptr) ((ptr)->_misc->_l64a_buf)
#define _REENT_GETDATE_ERR_P(ptr) (&((ptr)->_misc->_getdate_err))
#define _REENT_SIGNAL_BUF(ptr) ((ptr)->_signal_buf)
# 753 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"





# 756 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
#define _Kmax (sizeof (size_t) << 3)








# 764 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"
#define __ATTRIBUTE_IMPURE_PTR__ 






extern struct _reent *_global_impure_ptr ;

void _reclaim_reent (struct _reent *);





  struct _reent * __getreent (void);

#define _REENT (__getreent())




#define _GLOBAL_REENT _global_impure_ptr





#define _GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)



}
# 48 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h" 1































# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1

















# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h" 2


#define __INTTYPES_DEFINED__ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/_types.h" 1





# 26 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h" 2
# 60 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
#define _SYS_TYPES_H 
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h" 1











# 62 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h" 2







# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4


























# 70 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/types.h" 1

#define _MACHTYPES_H_ 


# 4 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/types.h"









#define _CLOCK_T_ unsigned long 
#define _TIME_T_ long 
#define _CLOCKID_T_ unsigned long
#define _TIMER_T_ unsigned long


typedef long int __off_t;
typedef int __pid_t;

__extension__ typedef long long int __loff_t;
# 71 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h" 2














# 80 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
#define _ST_INT32 __attribute__ ((__mode__ (__SI__)))






#define physadr physadr_t
#define quad quad_t




typedef unsigned char u_char;
#define __u_char_defined 


typedef unsigned short u_short;
#define __u_short_defined 


typedef unsigned int u_int;
#define __u_int_defined 


typedef unsigned long u_long;
#define __u_long_defined 

#define _BSDTYPES_DEFINED 


typedef unsigned short ushort; 
typedef unsigned int uint; 
typedef unsigned long ulong; 



typedef unsigned long  clock_t;
#define __clock_t_defined 



typedef long  time_t;
#define __time_t_defined 



#define __timespec_defined 


struct timespec {
  time_t tv_sec; 
  long tv_nsec; 
};


struct itimerspec {
  struct timespec it_interval; 
  struct timespec it_value; 
};


typedef long daddr_t;
#define __daddr_t_defined 


typedef char * caddr_t;
#define __caddr_t_defined 







typedef unsigned short ino_t;
# 176 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"











# 184 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
typedef _off_t off_t;
typedef __dev_t dev_t;
typedef __uid_t uid_t;
typedef __gid_t gid_t;





typedef int pid_t;







typedef long key_t;

typedef _ssize_t ssize_t;
# 217 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
typedef unsigned int mode_t __attribute__ ((__mode__ (__SI__)));




typedef unsigned short nlink_t;














# 232 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
#define _SYS_TYPES_FD_SET 
#define NBBY 8 











# 241 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
#define FD_SETSIZE 64


typedef long fd_mask;
#define NFDBITS (sizeof (fd_mask) * NBBY) 

#define howmany(x,y) (((x)+((y)-1))/(y))





# 252 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8 ) )-1))/((sizeof (fd_mask) * 8 ) ))];
} _types_fd_set;

#define fd_set _types_fd_set

#define FD_SET(n,p) ((p)->fds_bits[(n)/NFDBITS] |= (1L << ((n) % NFDBITS)))
#define FD_CLR(n,p) ((p)->fds_bits[(n)/NFDBITS] &= ~(1L << ((n) % NFDBITS)))
#define FD_ISSET(n,p) ((p)->fds_bits[(n)/NFDBITS] & (1L << ((n) % NFDBITS)))
#define FD_ZERO(p) (__extension__ (void)({ size_t __i; char *__tmp = (char *)p; for (__i = 0; __i < sizeof (*(p)); ++__i) *__tmp++ = 0; }))
# 270 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
#undef __MS_types__
#undef _ST_INT32



typedef unsigned long clockid_t;
#define __clockid_t_defined 



typedef unsigned long timer_t;
#define __timer_t_defined 


typedef unsigned long useconds_t;
typedef long suseconds_t;

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h" 1





































# 288 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h" 2















# 299 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/sched.h" 1



































# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/sched.h"
#define _SYS_SCHED_H_ 


extern "C" {







#define SCHED_OTHER 0


#define SCHED_FIFO 1
#define SCHED_RR 2








struct sched_param {
  int sched_priority; 
# 59 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/sched.h"
};

int sched_yield( void );


}




# 300 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h" 2








typedef __uint32_t pthread_t; 



#define PTHREAD_SCOPE_PROCESS 0
#define PTHREAD_SCOPE_SYSTEM 1


#define PTHREAD_INHERIT_SCHED 1 
                                      
                                      
#define PTHREAD_EXPLICIT_SCHED 2 


#define PTHREAD_CREATE_DETACHED 0
#define PTHREAD_CREATE_JOINABLE 1
# 341 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
typedef struct {
  int is_initialized;
  void *stackaddr;
  int stacksize;
  int contentionscope;
  int inheritsched;
  int schedpolicy;
  struct sched_param schedparam;




  



  int detachstate;





} pthread_attr_t;
# 388 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"

















# 399 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
#define PTHREAD_MUTEX_NORMAL 0




















# 411 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
#define PTHREAD_MUTEX_RECURSIVE 1














# 420 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
#define PTHREAD_MUTEX_ERRORCHECK 2
















# 430 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
#define PTHREAD_MUTEX_DEFAULT 3
# 442 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
typedef __uint32_t pthread_mutex_t; 

typedef struct {
  int is_initialized;
# 454 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
  int type;

  int recursive;
} pthread_mutexattr_t;




typedef __uint32_t pthread_cond_t; 

typedef struct {
  int is_initialized;



} pthread_condattr_t; 



typedef __uint32_t pthread_key_t; 

typedef struct {
  int is_initialized; 
  int init_executed; 
} pthread_once_t; 







# 497 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"








# 519 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h"
#undef __need_inttypes
# 49 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h" 2

extern "C" {

typedef __FILE FILE;




typedef _fpos_t fpos_t;





# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/stdio.h" 1

#define _NEWLIB_STDIO_H 


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 1







# 6 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/stdio.h" 2








# 13 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/stdio.h"
#define _flockfile(fp) (((fp)->_flags & __SSTR) ? 0 : __lock_acquire_recursive((fp)->_lock))







#define _funlockfile(fp) (((fp)->_flags & __SSTR) ? 0 : __lock_release_recursive((fp)->_lock))
# 64 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h" 2

#define __SLBF 0x0001 
#define __SNBF 0x0002 
#define __SRD 0x0004 
#define __SWR 0x0008 
 
#define __SRW 0x0010 
#define __SEOF 0x0020 
#define __SERR 0x0040 
#define __SMBF 0x0080 
#define __SAPP 0x0100 
#define __SSTR 0x0200 
#define __SOPT 0x0400 
#define __SNPT 0x0800 
#define __SOFF 0x1000 
#define __SORD 0x2000 



#define __SL64 0x8000 


#define __SNLK 0x0001 
#define __SWID 0x2000 


















# 98 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
#define _IOFBF 0 
#define _IOLBF 1 
#define _IONBF 2 

#define EOF (-1)


#define BUFSIZ __BUFSIZ__







#define FOPEN_MAX 20





#define FILENAME_MAX 1024





#define L_tmpnam FILENAME_MAX



#define P_tmpdir "/tmp"



#define SEEK_SET 0 


#define SEEK_CUR 1 


#define SEEK_END 2 


#define TMP_MAX 26

#define stdin (_REENT->_stdin)
#define stdout (_REENT->_stdout)
#define stderr (_REENT->_stderr)

#define _stdin_r(x) ((x)->_stdin)
#define _stdout_r(x) ((x)->_stdout)
#define _stderr_r(x) ((x)->_stderr)







#define __VALIST __gnuc_va_list





FILE * tmpfile (void);
char * tmpnam (char *);

char * tempnam (const char *, const char *);

int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *, const char *, FILE *);
void setbuf (FILE *, char *);
int setvbuf (FILE *, char *, int, size_t);
int fprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int printf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int scanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int sscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int vfprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int vsprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int fgetc (FILE *);
char * fgets (char *, int, FILE *);
int fputc (int, FILE *);
int fputs (const char *, FILE *);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void * , size_t _size, size_t _n, FILE *);
size_t fwrite (const void * , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *, fpos_t *);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char * _name, const char * _type);
int sprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int remove (const char *);
int rename (const char *, const char *);
# 235 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
int fseeko (FILE *, off_t, int);
off_t ftello ( FILE *);







int asiprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
char * asniprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * asnprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int asprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int diprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int fiprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fiscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int iprintf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int iscanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int siprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int siscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int snprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int sniprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vasiprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vasprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vdiprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vfscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int viprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int viscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsiprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vsiscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vsniprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vsnprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vsscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;









FILE * fdopen (int, const char *);

int fileno (FILE *);
int getw (FILE *);
int pclose (FILE *);
FILE * popen (const char *, const char *);
int putw (int, FILE *);
void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);
int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);









int dprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

FILE * fmemopen (void *, size_t, const char *);


FILE * open_memstream (char **, size_t *);

int renameat (int, const char *, int, const char *);

int vdprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;








# 357 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
int _asiprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
char * _asnprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _asprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _diprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _dprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *, int, FILE *);
char * _fgets_unlocked_r (struct _reent *, char *, int, FILE *);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fiscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
FILE * _fmemopen_r (struct _reent *, void *, size_t, const char *);
FILE * _fopen_r (struct _reent *, const char *, const char *);
FILE * _freopen_r (struct _reent *, const char *, const char *, FILE *);
int _fprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *, FILE *);
int _fputs_unlocked_r (struct _reent *, const char *, FILE *);
size_t _fread_r (struct _reent *, void * , size_t _size, size_t _n, FILE *);
size_t _fread_unlocked_r (struct _reent *, void * , size_t _size, size_t _n, FILE *);
int _fscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void * , size_t _size, size_t _n, FILE *);
size_t _fwrite_unlocked_r (struct _reent *, const void * , size_t _size, size_t _n, FILE *);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _iscanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *, const char *_old, const char *_new)
                                          ;
int _scanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int _siprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _siscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _snprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _sprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _sscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vfprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _vscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsnprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;



int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);


void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void * , size_t _size, size_t _n, FILE *);
size_t fwrite_unlocked (const void * , size_t _size, size_t _n, FILE *);
# 534 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"





# 538 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);






# 562 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
FILE *funopen (const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
FILE *_funopen_r (struct _reent *, const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;


#define fropen(__cookie,__fn) funopen(__cookie, __fn, (int (*)())0, (fpos_t (*)())0, (int (*)())0)

#define fwopen(__cookie,__fn) funopen(__cookie, (int (*)())0, __fn, (fpos_t (*)())0, (int (*)())0)


typedef ssize_t cookie_read_function_t(void *__cookie, char *__buf, size_t __n);
typedef ssize_t cookie_write_function_t(void *__cookie, const char *__buf,
     size_t __n);




typedef int cookie_seek_function_t(void *__cookie, off_t *__off, int __whence);

typedef int cookie_close_function_t(void *__cookie);
typedef struct
{
  


# 597 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
FILE *fopencookie (void *__cookie, const char *__mode, cookie_io_functions_t __functions)
                                                         ;
FILE *_fopencookie_r (struct _reent *, void *__cookie, const char *__mode, cookie_io_functions_t __functions)
                                                         ;










# 613 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
#define __sgetc_raw_r(__ptr,__f) (--(__f)->_r < 0 ? __srget_r(__ptr, __f) : (int)(*(__f)->_p++))
# 642 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
#define __sgetc_r(__ptr,__p) __sgetc_raw_r(__ptr, __p)
# 655 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"





# 658 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
#define __sputc_raw_r(__ptr,__c,__p) (--(__p)->_w < 0 ? (__p)->_w >= (__p)->_lbfsize ? (*(__p)->_p = (__c)), *(__p)->_p != '\n' ? (int)*(__p)->_p++ : __swbuf_r(__ptr, '\n', __p) : __swbuf_r(__ptr, (int)(__c), __p) : (*(__p)->_p = (__c), (int)*(__p)->_p++))
# 672 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
#define __sputc_r(__ptr,__c,__p) __sputc_raw_r(__ptr, __c, __p)



#define __sfeof(p) ((int)(((p)->_flags & __SEOF) != 0))
#define __sferror(p) ((int)(((p)->_flags & __SERR) != 0))
#define __sclearerr(p) ((void)((p)->_flags &= ~(__SERR|__SEOF)))
#define __sfileno(p) ((p)->_file)
# 707 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"

#define fast_putc(x,p) (--(p)->_w < 0 ? __swbuf_r(_REENT, (int)(x), p) == EOF : (*(p)->_p = (x), (p)->_p++, 0))


#define L_cuserid 9 
# 725 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"
#define getchar_unlocked() getc_unlocked(stdin)
#define putchar_unlocked(x) putc_unlocked(x, stdout)


}
# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 1









# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h"
#define _STDLIB_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/ieeefp.h" 1
# 11 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1

















# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 2

#define __need_size_t 
#define __need_wchar_t 
#define __need_NULL 
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



































# 46 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

















# 92 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4












# 117 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4










# 160 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

#undef __need_ptrdiff_t







# 238 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_size_t










# 347 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 362 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4




# 398 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



#undef NULL

#define NULL __null
# 412 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 17 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"







# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h" 1







































































# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/stdlib.h" 1

#define _MACHSTDLIB_H_ 


# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/alloca.h" 1







#define _NEWLIB_ALLOCA_H 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1

















# 11 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/alloca.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 1







# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/alloca.h" 2

#undef alloca


#define alloca(size) __builtin_alloca(size)
# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 2






extern "C" {

typedef struct
{
  int quot; 
  int rem; 
} div_t;

typedef struct
{
  long quot; 
  long rem; 
} ldiv_t;




typedef struct
{
  long long int quot; 
  long long int rem; 
} lldiv_t;



#define __compar_fn_t_defined 
typedef int (*__compar_fn_t) (const void *, const void *);






#define EXIT_FAILURE 1
#define EXIT_SUCCESS 0

#define RAND_MAX __RAND_MAX

int __locale_mb_cur_max (void);

#define MB_CUR_MAX __locale_mb_cur_max()

void abort (void) __attribute__ ((__noreturn__));
int abs (int);
int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar)



                                ;
void * calloc (size_t __nmemb, size_t __size) __attribute__ ((__nothrow__));
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) __attribute__ ((__nothrow__));
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg; 
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void * malloc (size_t __size) __attribute__ ((__nothrow__));
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *, const char *, size_t);
int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *, const char *, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t wcstombs (char *, const wchar_t *, size_t);
size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);


char * mkdtemp (char *);
int mkostemp (char *, int);
int mkostemps (char *, int, int);
int mkstemp (char *);
int mkstemps (char *, int);

char * mktemp (char *);




char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);

char * _mktemp_r (struct _reent *, char *);




void qsort (void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void * realloc (void * __r, size_t __size) __attribute__ ((__nothrow__));

void * reallocf (void * __r, size_t __size);
char * realpath (const char * path, char * resolved_path);

void srand (unsigned __seed);
double strtod (const char * __n, char ** __end_PTR);
double _strtod_r (struct _reent *,const char * __n, char ** __end_PTR);



float strtof (const char * __n, char ** __end_PTR);




#define strtodf strtof


long strtol (const char * __n, char ** __end_PTR, int __base);
long _strtol_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
unsigned long strtoul (const char * __n, char ** __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);

int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);
int on_exit (void (*__func)(int, void *),void * __arg);




void _Exit (int __status) __attribute__ ((__noreturn__));


int putenv (char *__string);
int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);
int setenv (const char *__string, const char *__value, int __overwrite);
int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);

char * gcvt (double,int,char *);
char * gcvtf (float,int,char *);
char * fcvt (double,int,int *,int *);
char * fcvtf (float,int,int *,int *);
char * ecvt (double,int,int *,int *);
char * ecvtbuf (double, int, int*, int*, char *);
char * fcvtbuf (double, int, int*, int*, char *);
char * ecvtf (float,int,int *,int *);
char * dtoa (double, int, int, int *, int*, char**);

char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);

char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);
int rand_r (unsigned *__seed);

double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);




long long atoll (const char *__nptr);


long long _atoll_r (struct _reent *, const char *__nptr);




long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char * __n, char ** __end_PTR, int __base);


long long _strtoll_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);




unsigned long long strtoull (const char * __n, char ** __end_PTR, int __base);


unsigned long long _strtoull_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);


void cfree (void *);
int unsetenv (const char *__string);
int _unsetenv_r (struct _reent *, const char *__string);
# 258 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h"
char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) __attribute__ ((__nothrow__));
void * _calloc_r (struct _reent *, size_t, size_t) __attribute__ ((__nothrow__));
void _free_r (struct _reent *, void *) __attribute__ ((__nothrow__));
void * _realloc_r (struct _reent *, void *, size_t) __attribute__ ((__nothrow__));
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);








# 286 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h"





extern long double strtold (const char *, char **);



}
# 29 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h" 1









# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h"
#define _STRING_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1

















# 11 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 1







# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h" 1







































































# 13 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h" 1





































# 14 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h" 2

#define __need_size_t 
#define __need_NULL 
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



































# 46 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

















# 92 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4












# 117 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4










# 160 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

#undef __need_ptrdiff_t







# 238 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_size_t










# 347 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 362 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4




# 398 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



#undef NULL

#define NULL __null
# 412 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h" 2


# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h"
extern "C" {

void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void * , const void * , size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *, const char *);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *, const char *, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *, const char *, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *, const char *);

size_t strxfrm (char *, const char *, size_t);


char *strtok_r (char *, const char *, char **);


int bcmp (const void *, const void *, size_t);
void bcopy (const void *, void *, size_t);
void bzero (void *, size_t);
int ffs (int);
char *index (const char *, int);


void * memccpy (void * , const void * , int, size_t);





void * memrchr (const void *, int, size_t);




char *rindex (const char *, int);

char *stpcpy (char *, const char *);
char *stpncpy (char *, const char *, size_t);

int strcasecmp (const char *, const char *);






char *strdup (const char *);


char *_strdup_r (struct _reent *, const char *);


char *strndup (const char *, size_t);



char *_strndup_r (struct _reent *, const char *, size_t);















int strerror_r (int, char *, size_t)
             __asm__ (""   "__xpg_strerror_r");







char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


int strncasecmp (const char *, const char *, size_t);



size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);









# 137 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h"
char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 163 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h"
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/string.h" 1



# 164 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h" 2

}
# 30 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h" 1













# 9 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h"





#define _INTTYPES_H 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/newlib.h" 1








# 17 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_intsup.h" 1

















# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h" 2
#define __need_wchar_t 
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



































# 46 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

















# 92 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4












# 117 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4










# 160 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

#undef __need_ptrdiff_t







# 238 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_size_t










# 347 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 362 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4




# 398 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



#undef NULL

#define NULL __null
# 412 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h" 2

#define __STRINGIFY(a) #a


# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h"

#define __PRI8(x) __STRINGIFY(x)


















# 42 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h"
#define PRId8 __PRI8(d)
#define PRIi8 __PRI8(i)
#define PRIo8 __PRI8(o)
#define PRIu8 __PRI8(u)
#define PRIx8 __PRI8(x)
#define PRIX8 __PRI8(X)


# 61 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h"
#define PRIdLEAST8 __PRI8(d)
#define PRIiLEAST8 __PRI8(i)
#define PRIoLEAST8 __PRI8(o)
#define PRIuLEAST8 __PRI8(u)
#define PRIxLEAST8 __PRI8(x)
#define PRIXLEAST8 __PRI8(X)


# 79 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h"
#define PRIdFAST8 __PRI8(d)
#define PRIiFAST8 __PRI8(i)
#define PRIoFAST8 __PRI8(o)
#define PRIuFAST8 __PRI8(u)
#define PRIxFAST8 __PRI8(x)
#define PRIXFAST8 __PRI8(X)


# 97 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h"

#define __PRI16(x) __STRINGIFY(x)
#define __SCN16(x) __STRINGIFY(h ##x)


#define PRId16 __PRI16(d)
#define PRIi16 __PRI16(i)
#define PRIo16 __PRI16(o)
#define PRIu16 __PRI16(u)
#define PRIx16 __PRI16(x)
#define PRIX16 __PRI16(X)

#define SCNd16 __SCN16(d)
#define SCNi16 __SCN16(i)
#define SCNo16 __SCN16(o)
#define SCNu16 __SCN16(u)
#define SCNx16 __SCN16(x)


#define PRIdLEAST16 __PRI16(d)
#define PRIiLEAST16 __PRI16(i)
#define PRIoLEAST16 __PRI16(o)
#define PRIuLEAST16 __PRI16(u)
#define PRIxLEAST16 __PRI16(x)
#define PRIXLEAST16 __PRI16(X)

#define SCNdLEAST16 __SCN16(d)
#define SCNiLEAST16 __SCN16(i)
#define SCNoLEAST16 __SCN16(o)
#define SCNuLEAST16 __SCN16(u)
#define SCNxLEAST16 __SCN16(x)


#define PRIdFAST16 __PRI16(d)
#define PRIiFAST16 __PRI16(i)
#define PRIoFAST16 __PRI16(o)
#define PRIuFAST16 __PRI16(u)
#define PRIxFAST16 __PRI16(x)
#define PRIXFAST16 __PRI16(X)

#define SCNdFAST16 __SCN16(d)
#define SCNiFAST16 __SCN16(i)
#define SCNoFAST16 __SCN16(o)
#define SCNuFAST16 __SCN16(u)
#define SCNxFAST16 __SCN16(x)






#define __PRI32(x) __STRINGIFY(x)
#define __SCN32(x) __STRINGIFY(x)


#define PRId32 __PRI32(d)
#define PRIi32 __PRI32(i)
#define PRIo32 __PRI32(o)
#define PRIu32 __PRI32(u)
#define PRIx32 __PRI32(x)
#define PRIX32 __PRI32(X)

#define SCNd32 __SCN32(d)
#define SCNi32 __SCN32(i)
#define SCNo32 __SCN32(o)
#define SCNu32 __SCN32(u)
#define SCNx32 __SCN32(x)


#define PRIdLEAST32 __PRI32(d)
#define PRIiLEAST32 __PRI32(i)
#define PRIoLEAST32 __PRI32(o)
#define PRIuLEAST32 __PRI32(u)
#define PRIxLEAST32 __PRI32(x)
#define PRIXLEAST32 __PRI32(X)

#define SCNdLEAST32 __SCN32(d)
#define SCNiLEAST32 __SCN32(i)
#define SCNoLEAST32 __SCN32(o)
#define SCNuLEAST32 __SCN32(u)
#define SCNxLEAST32 __SCN32(x)


#define PRIdFAST32 __PRI32(d)
#define PRIiFAST32 __PRI32(i)
#define PRIoFAST32 __PRI32(o)
#define PRIuFAST32 __PRI32(u)
#define PRIxFAST32 __PRI32(x)
#define PRIXFAST32 __PRI32(X)

#define SCNdFAST32 __SCN32(d)
#define SCNiFAST32 __SCN32(i)
#define SCNoFAST32 __SCN32(o)
#define SCNuFAST32 __SCN32(u)
#define SCNxFAST32 __SCN32(x)







#define __PRI64(x) __STRINGIFY(ll ##x)
#define __SCN64(x) __STRINGIFY(ll ##x)





#define PRId64 __PRI64(d)
#define PRIi64 __PRI64(i)
#define PRIo64 __PRI64(o)
#define PRIu64 __PRI64(u)
#define PRIx64 __PRI64(x)
#define PRIX64 __PRI64(X)

#define SCNd64 __SCN64(d)
#define SCNi64 __SCN64(i)
#define SCNo64 __SCN64(o)
#define SCNu64 __SCN64(u)
#define SCNx64 __SCN64(x)


#define PRIdLEAST64 __PRI64(d)
#define PRIiLEAST64 __PRI64(i)
#define PRIoLEAST64 __PRI64(o)
#define PRIuLEAST64 __PRI64(u)
#define PRIxLEAST64 __PRI64(x)
#define PRIXLEAST64 __PRI64(X)

#define SCNdLEAST64 __SCN64(d)
#define SCNiLEAST64 __SCN64(i)
#define SCNoLEAST64 __SCN64(o)
#define SCNuLEAST64 __SCN64(u)
#define SCNxLEAST64 __SCN64(x)


#define PRIdFAST64 __PRI64(d)
#define PRIiFAST64 __PRI64(i)
#define PRIoFAST64 __PRI64(o)
#define PRIuFAST64 __PRI64(u)
#define PRIxFAST64 __PRI64(x)
#define PRIXFAST64 __PRI64(X)

#define SCNdFAST64 __SCN64(d)
#define SCNiFAST64 __SCN64(i)
#define SCNoFAST64 __SCN64(o)
#define SCNuFAST64 __SCN64(u)
#define SCNxFAST64 __SCN64(x)







#define __PRIMAX(x) __STRINGIFY(ll ##x)
#define __SCNMAX(x) __STRINGIFY(ll ##x)





#define PRIdMAX __PRIMAX(d)
#define PRIiMAX __PRIMAX(i)
#define PRIoMAX __PRIMAX(o)
#define PRIuMAX __PRIMAX(u)
#define PRIxMAX __PRIMAX(x)
#define PRIXMAX __PRIMAX(X)

#define SCNdMAX __SCNMAX(d)
#define SCNiMAX __SCNMAX(i)
#define SCNoMAX __SCNMAX(o)
#define SCNuMAX __SCNMAX(u)
#define SCNxMAX __SCNMAX(x)









#define __PRIPTR(x) __STRINGIFY(x)
#define __SCNPTR(x) __STRINGIFY(x)


#define PRIdPTR __PRIPTR(d)
#define PRIiPTR __PRIPTR(i)
#define PRIoPTR __PRIPTR(o)
#define PRIuPTR __PRIPTR(u)
#define PRIxPTR __PRIPTR(x)
#define PRIXPTR __PRIPTR(X)

#define SCNdPTR __SCNPTR(d)
#define SCNiPTR __SCNPTR(i)
#define SCNoPTR __SCNPTR(o)
#define SCNuPTR __SCNPTR(u)
#define SCNxPTR __SCNPTR(x)


typedef struct {
  intmax_t quot;
  intmax_t rem;
} imaxdiv_t;


extern "C" {


extern intmax_t imaxabs(intmax_t j);
extern imaxdiv_t imaxdiv(intmax_t numer, intmax_t denomer);
extern intmax_t strtoimax(const char *, char **, int);
extern uintmax_t strtoumax(const char *, char **, int);
extern intmax_t wcstoimax(const wchar_t *, wchar_t **, int);
extern uintmax_t wcstoumax(const wchar_t *, wchar_t **, int);


}
# 31 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h" 1







































































































































# 71 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define INC_FREERTOS_H 






# 76 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4


























# 77 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h"







# 78 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h" 2


























# 92 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 93 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h" 2


extern "C" {



# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h" 1







































































































































# 71 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h"
#define FREERTOS_CONFIG_H 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h" 1











# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h"
#define CONFIG_GATTC_ENABLE 1
#define CONFIG_ESP32_PHY_MAX_TX_POWER 20
#define CONFIG_TRACEMEM_RESERVE_DRAM 0x0
#define CONFIG_FREERTOS_MAX_TASK_NAME_LEN 16
#define CONFIG_MQTT_TRANSPORT_SSL 1
#define CONFIG_BLE_SMP_ENABLE 1
#define CONFIG_SPIRAM_TYPE_AUTO 1
#define CONFIG_STACK_CHECK 1
#define CONFIG_MB_SERIAL_TASK_PRIO 10
#define CONFIG_MQTT_PROTOCOL_311 1
#define CONFIG_TCP_RECVMBOX_SIZE 6
#define CONFIG_LWIP_ETHARP_TRUST_IP_MAC 1
#define CONFIG_BLE_SCAN_DUPLICATE 1
#define CONFIG_STACK_CHECK_NORM 1
#define CONFIG_TCP_WND_DEFAULT 5744
#define CONFIG_PARTITION_TABLE_OFFSET 0x8000
#define CONFIG_SW_COEXIST_ENABLE 1
#define CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE 3
#define CONFIG_SPIFFS_USE_MAGIC_LENGTH 1
#define CONFIG_ESPTOOLPY_FLASHSIZE_4MB 1
#define CONFIG_IPC_TASK_STACK_SIZE 1024
#define CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES 16
#define CONFIG_FATFS_PER_FILE_CACHE 1
#define CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY 1
#define CONFIG_ESPTOOLPY_FLASHFREQ "40m"
#define CONFIG_LWIP_TCP_RTO_TIME 3000
#define CONFIG_SCCB_HARDWARE_I2C_PORT1 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA 1
#define CONFIG_UDP_RECVMBOX_SIZE 6
#define CONFIG_APP_RETRIEVE_LEN_ELF_SHA 16
#define CONFIG_ARDUHAL_PARTITION_SCHEME_DEFAULT 1
#define CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE 0
#define CONFIG_MBEDTLS_AES_C 1
#define CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED 1
#define CONFIG_A2DP_SINK_TASK_STACK_SIZE 2048
#define CONFIG_ESP32_WIFI_SOFTAP_BEACON_MAX_LEN 752
#define CONFIG_MBEDTLS_GCM_C 1
#define CONFIG_ESPTOOLPY_FLASHSIZE "4MB"
#define CONFIG_SPIFFS_CACHE_WR 1
#define CONFIG_SPIRAM_CACHE_WORKAROUND 1
#define CONFIG_BROWNOUT_DET_LVL_SEL_0 1
#define CONFIG_D0WD_PSRAM_CS_IO 16
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER 1
#define CONFIG_EMAC_L2_TO_L3_RX_BUF_MODE 1
#define CONFIG_BTDM_CONTROLLER_MODEM_SLEEP 1
#define CONFIG_SPIFFS_CACHE 1
#define CONFIG_INT_WDT 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN 3
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1 1
#define CONFIG_BT_STACK_NO_LOG 1
#define CONFIG_ESP_GRATUITOUS_ARP 1
#define CONFIG_MBEDTLS_ECDSA_C 1
#define CONFIG_ESPTOOLPY_FLASHFREQ_40M 1
#define CONFIG_HTTPD_MAX_REQ_HDR_LEN 512
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE 0
#define CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS 1
#define CONFIG_MBEDTLS_ECDH_C 1
#define CONFIG_SPIRAM_USE_CAPS_ALLOC 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE 1
#define CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM 16
#define CONFIG_MBEDTLS_SSL_ALPN 1
#define CONFIG_MBEDTLS_PEM_WRITE_C 1
#define CONFIG_BT_SPP_ENABLED 1
#define CONFIG_BT_RESERVE_DRAM 0xdb5c
#define CONFIG_APP_COMPILE_TIME_DATE 1
#define CONFIG_CXX_EXCEPTIONS 1
#define CONFIG_D2WD_PSRAM_CLK_IO 9
#define CONFIG_FATFS_FS_LOCK 0
#define CONFIG_IP_LOST_TIMER_INTERVAL 120
#define CONFIG_SPIFFS_META_LENGTH 4
#define CONFIG_ESP32_PANIC_PRINT_REBOOT 1
#define CONFIG_MB_CONTROLLER_NOTIFY_QUEUE_SIZE 20
#define CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED 1
#define CONFIG_CAMERA_CORE1 1
#define CONFIG_ESP32_DPORT_DIS_INTERRUPT_LVL 5
#define CONFIG_MB_SERIAL_BUF_SIZE 256
#define CONFIG_CONSOLE_UART_BAUDRATE 115200
#define CONFIG_SPIRAM_SUPPORT 1
#define CONFIG_MFN56_1X 1
#define CONFIG_LWIP_MAX_SOCKETS 10
#define CONFIG_LWIP_NETIF_LOOPBACK 1
#define CONFIG_LWIP_TCP_ISN_HOOK 1
#define CONFIG_ESP32_PTHREAD_TASK_NAME_DEFAULT "pthread"
#define CONFIG_EMAC_TASK_PRIORITY 20
#define CONFIG_TIMER_TASK_STACK_DEPTH 2048
#define CONFIG_TCP_MSS 1436
#define CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED 1
#define CONFIG_BTDM_CONTROLLER_MODE_BTDM 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN_EFF 3
#define CONFIG_EFUSE_CODE_SCHEME_COMPAT_3_4 1
#define CONFIG_TCPIP_TASK_AFFINITY_CPU0 1
#define CONFIG_FATFS_CODEPAGE 850
#define CONFIG_SPIRAM_SPIWP_SD3_PIN 7
#define CONFIG_ULP_COPROC_RESERVE_MEM 512
#define CONFIG_LWIP_MAX_UDP_PCBS 16
#define CONFIG_ESPTOOLPY_BAUD 921600
#define CONFIG_INT_WDT_CHECK_CPU1 1
#define CONFIG_ADC_CAL_LUT_ENABLE 1
#define CONFIG_FLASHMODE_DIO 1
#define CONFIG_LWIP_ESP_LWIP_ASSERT 1
#define CONFIG_ESPTOOLPY_AFTER_RESET 1
#define CONFIG_OPTIMIZATION_ASSERTIONS_ENABLED 1
#define CONFIG_LWIP_DHCPS_MAX_STATION_NUM 8
#define CONFIG_TOOLPREFIX "xtensa-esp32-elf-"
#define CONFIG_MBEDTLS_ECP_C 1
#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024
#define CONFIG_MBEDTLS_RC4_DISABLED 1
#define CONFIG_FATFS_LFN_STACK 1
#define CONFIG_BTDM_CONTROLLER_FULL_SCAN_SUPPORTED 1
#define CONFIG_CONSOLE_UART_NUM 0
#define CONFIG_ARDUINO_EVENT_RUNNING_CORE 1
#define CONFIG_ESP32_APPTRACE_LOCK_ENABLE 1
#define CONFIG_PTHREAD_STACK_MIN 768
#define CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC 1
#define CONFIG_TCP_OVERSIZE_MSS 1
#define CONFIG_FOUR_UNIVERSAL_MAC_ADDRESS 1
#define CONFIG_CONSOLE_UART_DEFAULT 1
#define CONFIG_A2DP_SOURCE_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN 16384
#define CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS 4
#define CONFIG_ESPTOOLPY_FLASHSIZE_DETECT 1
#define CONFIG_AUTOSTART_ARDUINO 1
#define CONFIG_ARDUINO_RUNNING_CORE 1
#define CONFIG_ESP32_ECO3_CACHE_LOCK_FIX 1
#define CONFIG_PPP_CHAP_SUPPORT 1
#define CONFIG_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_TIMER_TASK_STACK_SIZE 4096
#define CONFIG_ESP32_ENABLE_COREDUMP_TO_NONE 1
#define CONFIG_SPIRAM_BANKSWITCH_ENABLE 1
#define CONFIG_MBEDTLS_X509_CRL_PARSE_C 1
#define CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER 1
#define CONFIG_HTTPD_PURGE_BUF_LEN 32
#define CONFIG_SCAN_DUPLICATE_BY_DEVICE_ADDR 1
#define CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER 1
#define CONFIG_MB_SERIAL_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_PSK_MODES 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_AUTO 1
#define CONFIG_LWIP_DHCPS_LEASE_UNIT 60
#define CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION 1
#define CONFIG_EFUSE_MAX_BLK_LEN 192
#define CONFIG_SPIFFS_USE_MAGIC 1
#define CONFIG_OV7725_SUPPORT 1
#define CONFIG_TCPIP_TASK_STACK_SIZE 2560
#define CONFIG_BLUEDROID_PINNED_TO_CORE_0 1
#define CONFIG_FATFS_CODEPAGE_850 1
#define CONFIG_TASK_WDT 1
#define CONFIG_MTMN_LITE_QUANT 1
#define CONFIG_MAIN_TASK_STACK_SIZE 4096
#define CONFIG_SPIFFS_PAGE_CHECK 1
#define CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_0 1
#define CONFIG_LWIP_MAX_ACTIVE_TCP 16
#define CONFIG_TASK_WDT_TIMEOUT_S 5
#define CONFIG_INT_WDT_TIMEOUT_MS 300
#define CONFIG_ARDUINO_EVENT_RUN_CORE1 1
#define CONFIG_ESPTOOLPY_FLASHMODE "dio"
#define CONFIG_BTC_TASK_STACK_SIZE 8192
#define CONFIG_BLUEDROID_ENABLED 1
#define CONFIG_NEWLIB_STDIN_LINE_ENDING_CR 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA 1
#define CONFIG_ESPTOOLPY_BEFORE "default_reset"
#define CONFIG_ADC2_DISABLE_DAC 1
#define CONFIG_HFP_ENABLE 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_NUM 100
#define CONFIG_ESP32_REV_MIN_0 1
#define CONFIG_LOG_DEFAULT_LEVEL 1
#define CONFIG_TIMER_QUEUE_LENGTH 10
#define CONFIG_ARDUINO_LOOP_STACK_SIZE 8192
#define CONFIG_ESP32_REV_MIN 0
#define CONFIG_SUPPRESS_SELECT_DEBUG_OUTPUT 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_MODE 0
#define CONFIG_OV5640_SUPPORT 1
#define CONFIG_MAKE_WARN_UNDEFINED_VARIABLES 1
#define CONFIG_FATFS_TIMEOUT_MS 10000
#define CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM 32
#define CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS 1
#define CONFIG_MBEDTLS_CCM_C 1
#define CONFIG_SPI_MASTER_ISR_IN_IRAM 1
#define CONFIG_ARDUHAL_PARTITION_SCHEME "default"
#define CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER 20
#define CONFIG_ESP32_RTC_CLK_CAL_CYCLES 1024
#define CONFIG_ESP32_WIFI_TX_BA_WIN 6
#define CONFIG_ESP32_WIFI_NVS_ENABLED 1
#define CONFIG_MDNS_MAX_SERVICES 10
#define CONFIG_ULP_COPROC_ENABLED 1
#define CONFIG_HFP_AUDIO_DATA_PATH_PCM 1
#define CONFIG_IDF_TARGET_ESP32 1
#define CONFIG_EMAC_CHECK_LINK_PERIOD_MS 2000
#define CONFIG_BTDM_LPCLK_SEL_MAIN_XTAL 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED 1
#define CONFIG_LWIP_SNTP_UPDATE_DELAY 3600000
#define CONFIG_LIBSODIUM_USE_MBEDTLS_SHA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK 1
#define CONFIG_DMA_RX_BUF_NUM 10
#define CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_PSK 1
#define CONFIG_TCP_SYNMAXRTX 6
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF 0
#define CONFIG_HEAP_POISONING_LIGHT 1
#define CONFIG_PYTHON "python"
#define CONFIG_SPIRAM_BANKSWITCH_RESERVE 8
#define CONFIG_MBEDTLS_ECP_NIST_OPTIM 1
#define CONFIG_ESP32_TIME_SYSCALL_USE_RTC_FRC1 1
#define CONFIG_ESPTOOLPY_COMPRESSED 1
#define CONFIG_PARTITION_TABLE_FILENAME "partitions_singleapp.csv"
#define CONFIG_MB_CONTROLLER_STACK_SIZE 4096
#define CONFIG_TCP_SND_BUF_DEFAULT 5744
#define CONFIG_GARP_TMR_INTERVAL 60
#define CONFIG_LWIP_DHCP_MAX_NTP_SERVERS 1
#define CONFIG_TCP_MSL 60000
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_1 1
#define CONFIG_LWIP_SO_REUSE_RXTOALL 1
#define CONFIG_MB_CONTROLLER_NOTIFY_TIMEOUT 20
#define CONFIG_ESP32_WIFI_MGMT_SBUF_NUM 32
#define CONFIG_PARTITION_TABLE_SINGLE_APP 1
#define CONFIG_XTENSA_IMPL 1
#define CONFIG_UNITY_ENABLE_FLOAT 1
#define CONFIG_ESP32_WIFI_RX_BA_WIN 16
#define CONFIG_MBEDTLS_X509_CSR_PARSE_C 1
#define CONFIG_SPIFFS_USE_MTIME 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN 0
#define CONFIG_LWIP_DHCP_RESTORE_LAST_IP 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN 2
#define CONFIG_PICO_PSRAM_CS_IO 10
#define CONFIG_EMAC_TASK_STACK_SIZE 3072
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT 1
#define CONFIG_MB_QUEUE_LENGTH 20
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA 1
#define CONFIG_OV2640_SUPPORT 1
#define CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_PSK 1
#define CONFIG_PPP_SUPPORT 1
#define CONFIG_SPIRAM_SPEED_40M 1
#define CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE 2048
#define CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V 1
#define CONFIG_ESP32_DEEP_SLEEP_WAKEUP_DELAY 2000
#define CONFIG_BROWNOUT_DET_LVL 0
#define CONFIG_MBEDTLS_PEM_PARSE_C 1
#define CONFIG_SPIFFS_GC_MAX_RUNS 10
#define CONFIG_ARDUINO_RUN_CORE1 1
#define CONFIG_ESP32_APPTRACE_DEST_NONE 1
#define CONFIG_HP_NANO1 1
#define CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC 1
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA 1
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM 32
#define CONFIG_HTTPD_MAX_URI_LEN 512
#define CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED 1
#define CONFIG_OV7670_SUPPORT 1
#define CONFIG_ARDUHAL_ESP_LOG 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED 1
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ 240
#define CONFIG_MBEDTLS_HARDWARE_AES 1
#define CONFIG_FREERTOS_HZ 1000
#define CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE 1
#define CONFIG_ADC_CAL_EFUSE_TP_ENABLE 1
#define CONFIG_FREERTOS_ASSERT_FAIL_ABORT 1
#define CONFIG_BROWNOUT_DET 1
#define CONFIG_ESP32_XTAL_FREQ 0
#define CONFIG_MONITOR_BAUD_115200B 1
#define CONFIG_LOG_BOOTLOADER_LEVEL 0
#define CONFIG_D2WD_PSRAM_CS_IO 10
#define CONFIG_MBEDTLS_TLS_ENABLED 1
#define CONFIG_LWIP_MAX_RAW_PCBS 16
#define CONFIG_BTU_TASK_STACK_SIZE 4096
#define CONFIG_SMP_ENABLE 1
#define CONFIG_SPIRAM_SIZE -1
#define CONFIG_ARDUINO_UDP_TASK_PRIORITY 3
#define CONFIG_MBEDTLS_SSL_SESSION_TICKETS 1
#define CONFIG_SPIFFS_MAX_PARTITIONS 3
#define CONFIG_ESP_ERR_TO_NAME_LOOKUP 1
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE_0 1
#define CONFIG_MBEDTLS_SSL_RENEGOTIATION 1
#define CONFIG_ESPTOOLPY_BEFORE_RESET 1
#define CONFIG_MB_EVENT_QUEUE_TIMEOUT 20
#define CONFIG_ESPTOOLPY_BAUD_OTHER_VAL 115200
#define CONFIG_PPP_MPPE_SUPPORT 1
#define CONFIG_ENABLE_ARDUINO_DEPENDS 1
#define CONFIG_WARN_WRITE_STRINGS 1
#define CONFIG_SPIFFS_OBJ_NAME_LEN 32
#define CONFIG_ESP32_PTHREAD_TASK_PRIO_DEFAULT 5
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN_EFF 2
#define CONFIG_LOG_BOOTLOADER_LEVEL_NONE 1
#define CONFIG_PARTITION_TABLE_MD5 1
#define CONFIG_TCPIP_RECVMBOX_SIZE 32
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_240 1
#define CONFIG_ESP32_XTAL_FREQ_AUTO 1
#define CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST 1
#define CONFIG_TCP_MAXRTX 12
#define CONFIG_ESPTOOLPY_AFTER "hard_reset"
#define CONFIG_LWIP_IP4_FRAG 1
#define CONFIG_TCPIP_TASK_AFFINITY 0x0
#define CONFIG_LWIP_SO_REUSE 1
#define CONFIG_ARDUINO_UDP_RUN_CORE1 1
#define CONFIG_DMA_TX_BUF_NUM 10
#define CONFIG_LWIP_MAX_LISTENING_TCP 16
#define CONFIG_FREERTOS_INTERRUPT_BACKTRACE 1
#define CONFIG_WL_SECTOR_SIZE 4096
#define CONFIG_ESP32_DEBUG_OCDAWARE 1
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET 1
#define CONFIG_TIMER_TASK_PRIORITY 1
#define CONFIG_PPP_PAP_SUPPORT 1
#define CONFIG_MBEDTLS_TLS_CLIENT 1
#define CONFIG_BTDM_CONTROLLER_HCI_MODE_VHCI 1
#define CONFIG_BT_ENABLED 1
#define CONFIG_ESP32_DEFAULT_PTHREAD_CORE_NO_AFFINITY 1
#define CONFIG_D0WD_PSRAM_CLK_IO 17
#define CONFIG_BT_SSP_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED 1
#define CONFIG_MONITOR_BAUD 115200
#define CONFIG_ESP32_PTHREAD_TASK_CORE_DEFAULT -1
#define CONFIG_ESP32_DEBUG_STUBS_ENABLE 1
#define CONFIG_BLE_ESTABLISH_LINK_CONNECTION_TIMEOUT 30
#define CONFIG_TCPIP_LWIP 1
#define CONFIG_REDUCE_PHY_TX_POWER 1
#define CONFIG_BOOTLOADER_WDT_TIME_MS 9000
#define CONFIG_FREERTOS_CORETIMER_0 1
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT_EFF 1
#define CONFIG_LWIP_IP6_FRAG 1
#define CONFIG_IDF_FIRMWARE_CHIP_ID 0x0000
#define CONFIG_PARTITION_TABLE_CUSTOM_FILENAME "partitions.csv"
#define CONFIG_MBEDTLS_HAVE_TIME 1
#define CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY 1
#define CONFIG_TCP_QUEUE_OOSEQ 1
#define CONFIG_FATFS_ALLOC_PREFER_EXTRAM 1
#define CONFIG_GATTS_ENABLE 1
#define CONFIG_CXX_EXCEPTIONS_EMG_POOL_SIZE 0
#define CONFIG_ADC_CAL_EFUSE_VREF_ENABLE 1
#define CONFIG_MBEDTLS_TLS_SERVER 1
#define CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_SUPPORTED 1
#define CONFIG_FREERTOS_ISR_STACKSIZE 1536
#define CONFIG_SUPPORT_TERMIOS 1
#define CONFIG_CLASSIC_BT_ENABLED 1
#define CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA_PSK 1
#define CONFIG_OPENSSL_ASSERT_DO_NOTHING 1
#define CONFIG_IDF_TARGET "esp32"
#define CONFIG_WL_SECTOR_SIZE_4096 1
#define CONFIG_OPTIMIZATION_LEVEL_DEBUG 1
#define CONFIG_FREERTOS_NO_AFFINITY 0x7FFFFFFF
#define CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED 1
#define CONFIG_HTTPD_ERR_RESP_NO_DELAY 1
#define CONFIG_MB_TIMER_INDEX 0
#define CONFIG_SCAN_DUPLICATE_TYPE 0
#define CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED 1
#define CONFIG_HFP_CLIENT_ENABLE 1
#define CONFIG_NT99141_SUPPORT 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA 1
#define CONFIG_SPI_SLAVE_ISR_IN_IRAM 1
#define CONFIG_SYSTEM_EVENT_QUEUE_SIZE 32
#define CONFIG_BT_ACL_CONNECTIONS 4
#define CONFIG_FATFS_MAX_LFN 255
#define CONFIG_ESP32_WIFI_TX_BUFFER_TYPE 1
#define CONFIG_ESPTOOLPY_BAUD_921600B 1
#define CONFIG_BOOTLOADER_WDT_ENABLE 1
#define CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED 1
#define CONFIG_LWIP_LOOPBACK_MAX_PBUFS 8
#define CONFIG_A2DP_ENABLE 1
#define CONFIG_MB_TIMER_GROUP 0
#define CONFIG_SPI_FLASH_ROM_DRIVER_PATCH 1
#define CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS 5
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE 1
#define CONFIG_SPIFFS_PAGE_SIZE 256
#define CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED 1
#define CONFIG_ESP32_DPORT_WORKAROUND 1
#define CONFIG_GATTS_BLUFI_ENABLE 1
#define CONFIG_PPP_MSCHAP_SUPPORT 1
#define CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU0 1
#define CONFIG_ESP32_PTHREAD_TASK_STACK_SIZE_DEFAULT 2048
#define CONFIG_LWIP_SO_RCVBUF 1
#define CONFIG_MB_TIMER_PORT_ENABLED 1
#define CONFIG_DUPLICATE_SCAN_CACHE_SIZE 20
#define CONFIG_ARDUINO_UDP_RUNNING_CORE 1
#define CONFIG_MONITOR_BAUD_OTHER_VAL 115200
#define CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF 1
#define CONFIG_ESPTOOLPY_PORT "/dev/cu.usbserial-DO00EAB0"
#define CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS 1
#define CONFIG_BTDM_CTRL_BR_EDR_SCO_DATA_PATH_EFF 0
#define CONFIG_LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 1
#define CONFIG_TASK_WDT_PANIC 1
#define CONFIG_OV3660_SUPPORT 1
#define CONFIG_UNITY_ENABLE_DOUBLE 1
#define CONFIG_BLE_ADV_REPORT_DISCARD_THRSHOLD 20
#define CONFIG_BLUEDROID_PINNED_TO_CORE 0
#define CONFIG_HD_NANO1 1
#define CONFIG_BTDM_MODEM_SLEEP_MODE_ORIG 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_FATFS_API_ENCODING_ANSI_OEM 1
#define CONFIG_ARDUINO_IDF_COMMIT "7e63061fa"
#define CONFIG_ARDUINO_IDF_BRANCH "release/v3.3"
# 74 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h" 2




#define portNUM_PROCESSORS 2




#define XT_USE_THREAD_SAFE_CLIB 0
#define configASSERT_2 0
#define portUSING_MPU_WRAPPERS 0
#define configUSE_MUTEX 1
#undef XT_USE_SWPRI


#define XT_TIMER_INDEX 0




#define configNUM_THREAD_LOCAL_STORAGE_POINTERS CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS
#define configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS 1














# 106 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h"
int xt_clock_freq(void) __attribute__((deprecated));

#define XT_CLOCK_FREQ (xt_clock_freq())





# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_config.h" 1





























































# 34 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_config.h"
#define XTENSA_CONFIG_H 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h" 1









































































# 40 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
#define XTENSA_HAL_H 












# 52 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

















# 61 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
#define XTHAL_RELEASE_MAJOR 11000
#define XTHAL_RELEASE_MINOR 3
#define XTHAL_RELEASE_NAME "11.0.3"
#define XTHAL_REL_11 1
#define XTHAL_REL_11_0 1
#define XTHAL_REL_11_0_3 1


#define XTHAL_MAJOR_REV XTHAL_RELEASE_MAJOR
#define XTHAL_MINOR_REV XTHAL_RELEASE_MINOR









































































# 109 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

#define XTHAL_REL_GE(maja,mina,majb,minb) ((maja) > (majb) || ((maja) == (majb) && (mina) >= (minb)))

#define XTHAL_REL_GT(maja,mina,majb,minb) ((maja) > (majb) || ((maja) == (majb) && (mina) > (minb)))

#define XTHAL_REL_LE(maja,mina,majb,minb) ((maja) < (majb) || ((maja) == (majb) && (mina) <= (minb)))

#define XTHAL_REL_LT(maja,mina,majb,minb) ((maja) < (majb) || ((maja) == (majb) && (mina) < (minb)))

#define XTHAL_REL_EQ(maja,mina,majb,minb) ((maja) == (majb) && (mina) == (minb))


#define XTHAL_MAYBE -1 
#define XTHAL_FUZZY_AND(a,b) (((a)==0 || (b)==0) ? 0 : ((a)==1 && (b)==1) ? 1 : XTHAL_MAYBE)
#define XTHAL_FUZZY_OR(a,b) (((a)==1 || (b)==1) ? 1 : ((a)==0 && (b)==0) ? 0 : XTHAL_MAYBE)
#define XTHAL_FUZZY_NOT(a) (((a)==0 || (a)==1) ? (1-(a)) : XTHAL_MAYBE)







# 130 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
#define XTHAL_MAX_CPS 8 


#define XTHAL_LITTLEENDIAN 0
#define XTHAL_BIGENDIAN 1





extern "C" {







# 147 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern const unsigned int Xthal_rev_no;







# 155 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern void xthal_save_extra(void *base);
extern void xthal_restore_extra(void *base);

extern void xthal_save_cpregs(void *base, int);
extern void xthal_restore_cpregs(void *base, int);

extern void xthal_save_cp0(void *base);
extern void xthal_save_cp1(void *base);
extern void xthal_save_cp2(void *base);
extern void xthal_save_cp3(void *base);
extern void xthal_save_cp4(void *base);
extern void xthal_save_cp5(void *base);
extern void xthal_save_cp6(void *base);
extern void xthal_save_cp7(void *base);
extern void xthal_restore_cp0(void *base);
extern void xthal_restore_cp1(void *base);
extern void xthal_restore_cp2(void *base);
extern void xthal_restore_cp3(void *base);
extern void xthal_restore_cp4(void *base);
extern void xthal_restore_cp5(void *base);
extern void xthal_restore_cp6(void *base);
extern void xthal_restore_cp7(void *base);

extern void* Xthal_cpregs_save_fn[8 ];
extern void* Xthal_cpregs_restore_fn[8 ];

extern void* Xthal_cpregs_save_nw_fn[8 ];
extern void* Xthal_cpregs_restore_nw_fn[8 ];





extern const unsigned int Xthal_extra_size;
extern const unsigned int Xthal_extra_align;
extern const unsigned int Xthal_cpregs_size[8 ];
extern const unsigned int Xthal_cpregs_align[8 ];
extern const unsigned int Xthal_all_extra_size;
extern const unsigned int Xthal_all_extra_align;

extern const char * const Xthal_cp_names[8 ];







extern void xthal_init_mem_extra(void *);

extern void xthal_init_mem_cp(void *, int);


extern const unsigned int Xthal_num_coprocessors;


extern const unsigned char Xthal_cp_num;

extern const unsigned char Xthal_cp_max;



extern const unsigned int Xthal_cp_mask;


















# 236 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern const unsigned int Xthal_num_aregs;
extern const unsigned char Xthal_num_aregs_log2;







# 245 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern const unsigned char Xthal_icache_linewidth;
extern const unsigned char Xthal_dcache_linewidth;

extern const unsigned short Xthal_icache_linesize;
extern const unsigned short Xthal_dcache_linesize;


extern const unsigned int Xthal_icache_size;
extern const unsigned int Xthal_dcache_size;

extern const unsigned char Xthal_dcache_is_writeback;



extern void xthal_icache_region_invalidate( void *addr, unsigned size );
extern void xthal_dcache_region_invalidate( void *addr, unsigned size );

extern void xthal_icache_line_invalidate(void *addr);
extern void xthal_dcache_line_invalidate(void *addr);


extern void xthal_dcache_region_writeback( void *addr, unsigned size );

extern void xthal_dcache_line_writeback(void *addr);


extern void xthal_dcache_region_writeback_inv( void *addr, unsigned size );

extern void xthal_dcache_line_writeback_inv(void *addr);

extern void xthal_icache_sync( void );

extern void xthal_dcache_sync( void );



extern unsigned int xthal_icache_get_ways(void);

extern void xthal_icache_set_ways(unsigned int ways);

extern unsigned int xthal_dcache_get_ways(void);

extern void xthal_dcache_set_ways(unsigned int ways);


extern void xthal_cache_coherence_on( void );
extern void xthal_cache_coherence_off( void );

extern void xthal_cache_coherence_optin( void );
extern void xthal_cache_coherence_optout( void );












































# 319 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
#define XTHAL_PREFETCH_ENABLE -1 
#define XTHAL_PREFETCH_DISABLE 0xFFFF0000 
#define XTHAL_DCACHE_PREFETCH(n) (0x800F0000+((n)&0xF)) 
#define XTHAL_DCACHE_PREFETCH_OFF XTHAL_DCACHE_PREFETCH(0) 
#define XTHAL_DCACHE_PREFETCH_LOW XTHAL_DCACHE_PREFETCH(4) 
#define XTHAL_DCACHE_PREFETCH_MEDIUM XTHAL_DCACHE_PREFETCH(5) 
#define XTHAL_DCACHE_PREFETCH_HIGH XTHAL_DCACHE_PREFETCH(8) 
#define XTHAL_DCACHE_PREFETCH_L1_OFF 0x90000000 
#define XTHAL_DCACHE_PREFETCH_L1 0x90001000 
#define XTHAL_ICACHE_PREFETCH(n) (0x80F00000+(((n)&0xF)<<4)) 
#define XTHAL_ICACHE_PREFETCH_OFF XTHAL_ICACHE_PREFETCH(0) 
#define XTHAL_ICACHE_PREFETCH_LOW XTHAL_ICACHE_PREFETCH(4) 
#define XTHAL_ICACHE_PREFETCH_MEDIUM XTHAL_ICACHE_PREFETCH(5) 
#define XTHAL_ICACHE_PREFETCH_HIGH XTHAL_ICACHE_PREFETCH(8) 
#define XTHAL_ICACHE_PREFETCH_L1_OFF 0xA0000000 
#define XTHAL_ICACHE_PREFETCH_L1 0xA0002000 
#define _XTHAL_PREFETCH_BLOCKS(n) ((n)<0?0:(n)<5?(n):(n)<15?((n)>>1)+2:9)
#define XTHAL_PREFETCH_BLOCKS(n) (0x0000000F80000000ULL + (((unsigned long long)_XTHAL_PREFETCH_BLOCKS(n))<<48))


extern int xthal_get_cache_prefetch( void );
extern int xthal_set_cache_prefetch( int );
extern int xthal_set_cache_prefetch_long( unsigned long long );

#define xthal_set_cache_prefetch xthal_set_cache_prefetch_long
#define xthal_set_cache_prefetch_nw xthal_set_cache_prefetch_long_nw







# 351 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern const int Xthal_debug_configured;


extern unsigned int xthal_set_soft_break(void *addr);
extern void xthal_remove_soft_break(void *addr, unsigned int);







# 363 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

#define XTHAL_DISASM_BUFSIZE 80


#define XTHAL_DISASM_OPT_ADDR 0x0001 
#define XTHAL_DISASM_OPT_OPHEX 0x0002 
#define XTHAL_DISASM_OPT_OPCODE 0x0004 
#define XTHAL_DISASM_OPT_PARMS 0x0008 
#define XTHAL_DISASM_OPT_ALL 0x0FFF 


extern int xthal_disassemble( unsigned char *instr_buf, void *tgt_addr,
         char *buffer, unsigned buflen, unsigned options );




# 379 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
extern int xthal_disassemble_size( unsigned char *instr_buf );







# 386 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
extern void* xthal_memcpy(void *dst, const void *src, unsigned len);
extern void* xthal_bcopy(const void *src, void *dst, unsigned len);







# 394 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
extern int xthal_compare_and_set( int *addr, int test_val, int compare_val );









# 403 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
extern const unsigned int Xthal_release_major;
extern const unsigned int Xthal_release_minor;
extern const char * const Xthal_release_name;
extern const char * const Xthal_release_internal;

extern const unsigned char Xthal_memory_order;
extern const unsigned char Xthal_have_windowed;
extern const unsigned char Xthal_have_density;
extern const unsigned char Xthal_have_booleans;
extern const unsigned char Xthal_have_loops;
extern const unsigned char Xthal_have_nsa;
extern const unsigned char Xthal_have_minmax;
extern const unsigned char Xthal_have_sext;
extern const unsigned char Xthal_have_clamps;
extern const unsigned char Xthal_have_mac16;
extern const unsigned char Xthal_have_mul16;
extern const unsigned char Xthal_have_fp;
extern const unsigned char Xthal_have_speculation;
extern const unsigned char Xthal_have_threadptr;

extern const unsigned char Xthal_have_pif;
extern const unsigned short Xthal_num_writebuffer_entries;

extern const unsigned int Xthal_build_unique_id;

extern const unsigned int Xthal_hw_configid0;
extern const unsigned int Xthal_hw_configid1;
extern const unsigned int Xthal_hw_release_major;
extern const unsigned int Xthal_hw_release_minor;
extern const char * const Xthal_hw_release_name;
extern const char * const Xthal_hw_release_internal;


extern void xthal_clear_regcached_code( void );


}



















# 458 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"











# 464 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
#define XTHAL_MAX_INTERRUPTS 32 
#define XTHAL_MAX_INTLEVELS 16 
     
#define XTHAL_MAX_TIMERS 4 
     


#define XTHAL_INTTYPE_UNCONFIGURED 0
#define XTHAL_INTTYPE_SOFTWARE 1
#define XTHAL_INTTYPE_EXTERN_EDGE 2
#define XTHAL_INTTYPE_EXTERN_LEVEL 3
#define XTHAL_INTTYPE_TIMER 4
#define XTHAL_INTTYPE_NMI 5
#define XTHAL_INTTYPE_WRITE_ERROR 6
#define XTHAL_INTTYPE_PROFILING 7
#define XTHAL_MAX_INTTYPES 8 


#define XTHAL_TIMER_UNCONFIGURED -1 
#define XTHAL_TIMER_UNASSIGNED XTHAL_TIMER_UNCONFIGURED 


#define XTHAL_MEMEP_PARITY 1
#define XTHAL_MEMEP_ECC 2

#define XTHAL_MEMEP_F_LOCAL 0 
#define XTHAL_MEMEP_F_DCACHE_DATA 4 
#define XTHAL_MEMEP_F_DCACHE_TAG 5 
#define XTHAL_MEMEP_F_ICACHE_DATA 6 
#define XTHAL_MEMEP_F_ICACHE_TAG 7 
#define XTHAL_MEMEP_F_CORRECTABLE 16 





 
#define XTHAL_AMB_EXCEPTION 0 



#define XTHAL_AMB_HITCACHE 1 






#define XTHAL_AMB_ALLOCATE 2 






#define XTHAL_AMB_WRITETHRU 3 



#define XTHAL_AMB_ISOLATE 4 






#define XTHAL_AMB_GUARD 5 



#define XTHAL_AMB_COHERENT 6 




# 535 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
#define XTHAL_AM_EXCEPTION (1<<XTHAL_AMB_EXCEPTION)
#define XTHAL_AM_HITCACHE (1<<XTHAL_AMB_HITCACHE)
#define XTHAL_AM_ALLOCATE (1<<XTHAL_AMB_ALLOCATE)
#define XTHAL_AM_WRITETHRU (1<<XTHAL_AMB_WRITETHRU)
#define XTHAL_AM_ISOLATE (1<<XTHAL_AMB_ISOLATE)
#define XTHAL_AM_GUARD (1<<XTHAL_AMB_GUARD)
#define XTHAL_AM_COHERENT (1<<XTHAL_AMB_COHERENT)
# 551 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"



















































# 577 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
      

#define XTHAL_FAM_EXCEPTION 0x001 
  
#define XTHAL_FAM_BYPASS 0x000 
  
#define XTHAL_FAM_CACHED 0x006 

#define XTHAL_LAM_EXCEPTION 0x001 
#define XTHAL_LAM_ISOLATE 0x012 
#define XTHAL_LAM_BYPASS 0x000 
#define XTHAL_LAM_BYPASSG 0x020 
#define XTHAL_LAM_CACHED_NOALLOC 0x002 
#define XTHAL_LAM_NACACHED XTHAL_LAM_CACHED_NOALLOC
#define XTHAL_LAM_NACACHEDG 0x022 
#define XTHAL_LAM_CACHED 0x006 
#define XTHAL_LAM_COHCACHED 0x046 

#define XTHAL_SAM_EXCEPTION 0x001 
#define XTHAL_SAM_ISOLATE 0x032 
#define XTHAL_SAM_BYPASS 0x028 
#define XTHAL_SAM_WRITETHRU 0x02A 
  
#define XTHAL_SAM_WRITEBACK 0x026 
#define XTHAL_SAM_WRITEBACK_NOALLOC 0x022 
#define XTHAL_SAM_COHWRITEBACK 0x066 
 
#define XTHAL_PAM_BYPASS 0x000 
#define XTHAL_PAM_BYPASS_BUF 0x010 
#define XTHAL_PAM_CACHED_NOALLOC 0x030 
#define XTHAL_PAM_WRITETHRU 0x0B0 
#define XTHAL_PAM_WRITEBACK_NOALLOC 0x0F0 
#define XTHAL_PAM_WRITEBACK 0x1F0 
  
  
  
  
# 642 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
extern "C" {








# 650 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"





# 653 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
extern void xthal_window_spill( void );







# 660 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern void xthal_validate_cp(int);
extern void xthal_invalidate_cp(int);


extern void xthal_set_cpenable(unsigned);
extern unsigned xthal_get_cpenable(void);







# 673 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern const unsigned char Xthal_num_intlevels;

extern const unsigned char Xthal_num_interrupts;

extern const unsigned char Xthal_excm_level;


extern const unsigned int Xthal_intlevel_mask[16 ];

extern const unsigned int Xthal_intlevel_andbelow_mask[16 ];


extern const unsigned char Xthal_intlevel[32 ];


extern const unsigned char Xthal_inttype[32 ];


extern const unsigned int Xthal_inttype_mask[8 ];


extern const int Xthal_timer_interrupt[4 ];


extern unsigned xthal_get_intenable( void );
extern void xthal_set_intenable( unsigned );
extern unsigned xthal_get_interrupt( void );
#define xthal_get_intread xthal_get_interrupt 
extern void xthal_set_intset( unsigned );
extern void xthal_set_intclear( unsigned );







# 710 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern const int Xthal_num_ibreak;
extern const int Xthal_num_dbreak;







# 719 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern const unsigned char Xthal_have_ccount; 
extern const unsigned char Xthal_num_ccompare; 


extern unsigned xthal_get_ccount(void);


extern void xthal_set_ccompare(int, unsigned);
extern unsigned xthal_get_ccompare(int);







# 735 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
extern const unsigned char Xthal_have_prid;
extern const unsigned char Xthal_have_exceptions;
extern const unsigned char Xthal_xea_version;
extern const unsigned char Xthal_have_interrupts;
extern const unsigned char Xthal_have_highlevel_interrupts;
extern const unsigned char Xthal_have_nmi;

extern unsigned xthal_get_prid( void );







# 749 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern unsigned xthal_vpri_to_intlevel(unsigned vpri);
extern unsigned xthal_intlevel_to_vpri(unsigned intlevel);


extern unsigned xthal_int_enable(unsigned);
extern unsigned xthal_int_disable(unsigned);


extern int xthal_set_int_vpri(int intnum, int vpri);
extern int xthal_get_int_vpri(int intnum);


extern void xthal_set_vpri_locklevel(unsigned intlevel);
extern unsigned xthal_get_vpri_locklevel(void);


extern unsigned xthal_set_vpri(unsigned vpri);
extern unsigned xthal_get_vpri(void);
extern unsigned xthal_set_vpri_intlevel(unsigned intlevel);
extern unsigned xthal_set_vpri_lock(void);







# 776 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
typedef void (XtHalVoidFunc)(void);


extern unsigned Xthal_tram_pending;
















# 789 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
extern unsigned Xthal_tram_enabled;


extern unsigned Xthal_tram_sync;


extern unsigned xthal_tram_pending_to_service( void );
extern void xthal_tram_done( unsigned serviced_mask );
extern int xthal_tram_set_sync( int intnum, int sync );
extern XtHalVoidFunc* xthal_set_tram_trigger_func( XtHalVoidFunc *trigger_fn );







# 805 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
extern const unsigned char Xthal_num_instrom;
extern const unsigned char Xthal_num_instram;
extern const unsigned char Xthal_num_datarom;
extern const unsigned char Xthal_num_dataram;
extern const unsigned char Xthal_num_xlmi;




# 813 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
extern const unsigned int Xthal_instrom_vaddr[];
extern const unsigned int Xthal_instrom_paddr[];
extern const unsigned int Xthal_instrom_size [];
extern const unsigned int Xthal_instram_vaddr[];
extern const unsigned int Xthal_instram_paddr[];
extern const unsigned int Xthal_instram_size [];
extern const unsigned int Xthal_datarom_vaddr[];
extern const unsigned int Xthal_datarom_paddr[];
extern const unsigned int Xthal_datarom_size [];
extern const unsigned int Xthal_dataram_vaddr[];
extern const unsigned int Xthal_dataram_paddr[];
extern const unsigned int Xthal_dataram_size [];
extern const unsigned int Xthal_xlmi_vaddr[];
extern const unsigned int Xthal_xlmi_paddr[];
extern const unsigned int Xthal_xlmi_size [];







# 834 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern const unsigned char Xthal_icache_setwidth;
extern const unsigned char Xthal_dcache_setwidth;

extern const unsigned int Xthal_icache_ways;
extern const unsigned int Xthal_dcache_ways;

extern const unsigned char Xthal_icache_line_lockable;
extern const unsigned char Xthal_dcache_line_lockable;


extern unsigned xthal_get_cacheattr( void );
extern unsigned xthal_get_icacheattr( void );
extern unsigned xthal_get_dcacheattr( void );
extern void xthal_set_cacheattr( unsigned );
extern void xthal_set_icacheattr( unsigned );
extern void xthal_set_dcacheattr( unsigned );

extern int xthal_set_region_attribute( void *addr, unsigned size,
         unsigned cattr, unsigned flags );

#define XTHAL_CAFLAG_EXPAND 0x000100 
#define XTHAL_CAFLAG_EXACT 0x000200 
#define XTHAL_CAFLAG_NO_PARTIAL 0x000400 
#define XTHAL_CAFLAG_NO_AUTO_WB 0x000800 
#define XTHAL_CAFLAG_NO_AUTO_INV 0x001000 


extern void xthal_icache_enable( void ); 
extern void xthal_dcache_enable( void ); 

extern void xthal_icache_disable( void ); 
extern void xthal_dcache_disable( void ); 


extern void xthal_icache_all_invalidate( void );
extern void xthal_dcache_all_invalidate( void );

extern void xthal_dcache_all_writeback( void );

extern void xthal_dcache_all_writeback_inv( void );

extern void xthal_icache_region_lock( void *addr, unsigned size );
extern void xthal_dcache_region_lock( void *addr, unsigned size );

extern void xthal_icache_line_lock(void *addr);
extern void xthal_dcache_line_lock(void *addr);


extern void xthal_icache_all_unlock( void );
extern void xthal_dcache_all_unlock( void );
extern void xthal_icache_region_unlock( void *addr, unsigned size );
extern void xthal_dcache_region_unlock( void *addr, unsigned size );

extern void xthal_icache_line_unlock(void *addr);
extern void xthal_dcache_line_unlock(void *addr);









# 898 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"

extern void xthal_memep_inject_error(void *addr, int size, int flags);








# 907 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
extern const unsigned char Xthal_have_spanning_way;
extern const unsigned char Xthal_have_identity_map;
extern const unsigned char Xthal_have_mimic_cacheattr;
extern const unsigned char Xthal_have_xlt_cacheattr;
extern const unsigned char Xthal_have_cacheattr;
extern const unsigned char Xthal_have_tlbs;

extern const unsigned char Xthal_mmu_asid_bits; 
extern const unsigned char Xthal_mmu_asid_kernel;
extern const unsigned char Xthal_mmu_rings; 
extern const unsigned char Xthal_mmu_ring_bits;
extern const unsigned char Xthal_mmu_sr_bits;
extern const unsigned char Xthal_mmu_ca_bits;
extern const unsigned int Xthal_mmu_max_pte_page_size;
extern const unsigned int Xthal_mmu_min_pte_page_size;

extern const unsigned char Xthal_itlb_way_bits;
extern const unsigned char Xthal_itlb_ways;
extern const unsigned char Xthal_itlb_arf_ways;
extern const unsigned char Xthal_dtlb_way_bits;
extern const unsigned char Xthal_dtlb_ways;
extern const unsigned char Xthal_dtlb_arf_ways;



extern int xthal_static_v2p( unsigned vaddr, unsigned *paddrp );
extern int xthal_static_p2v( unsigned paddr, unsigned *vaddrp, unsigned cached );

#define XCHAL_SUCCESS 0
#define XCHAL_ADDRESS_MISALIGNED -1
#define XCHAL_INEXACT -2
#define XCHAL_INVALID_ADDRESS -3
#define XCHAL_UNSUPPORTED_ON_THIS_ARCH -4
#define XCHAL_NO_PAGES_MAPPED -5
#define XTHAL_NO_MAPPING -6

#define XCHAL_CA_R (0xC0 | 0x40000000)
#define XCHAL_CA_RX (0xD0 | 0x40000000)
#define XCHAL_CA_RW (0xE0 | 0x40000000)
#define XCHAL_CA_RWX (0xF0 | 0x40000000)

extern int xthal_set_region_translation(void* vaddr, void* paddr, unsigned size, unsigned cache_atr, unsigned flags);
extern int xthal_v2p(void*, void**, unsigned*, unsigned*);
extern int xthal_invalidate_region(void* addr);
extern int xthal_set_region_translation_raw(void *vaddr, void *paddr, unsigned cattr);


}
# 963 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"







extern "C" {
# 1019 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h"
}
# 41 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_config.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h" 1



















# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"











































# 37 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
#define XTENSA_CONFIG_CORE_H 



# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h" 1









































































# 42 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtensa-versions.h" 1































































# 35 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtensa-versions.h"
#define XTENSA_VERSIONS_H 















# 47 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtensa-versions.h"

#define XTENSA_HWVERSION_T1020_0 102000 
#define XTENSA_HWCIDSCHEME_T1020_0 10
#define XTENSA_HWCIDVERS_T1020_0 2
#define XTENSA_HWVERSION_T1020_1 102001 
#define XTENSA_HWCIDSCHEME_T1020_1 10
#define XTENSA_HWCIDVERS_T1020_1 3
#define XTENSA_HWVERSION_T1020_2B 102002 
#define XTENSA_HWCIDSCHEME_T1020_2B 10
#define XTENSA_HWCIDVERS_T1020_2B 5
#define XTENSA_HWVERSION_T1020_2 102002 
#define XTENSA_HWCIDSCHEME_T1020_2 10
#define XTENSA_HWCIDVERS_T1020_2 4
#define XTENSA_HWVERSION_T1020_3 102003 
#define XTENSA_HWCIDSCHEME_T1020_3 10
#define XTENSA_HWCIDVERS_T1020_3 6
#define XTENSA_HWVERSION_T1020_4 102004 
#define XTENSA_HWCIDSCHEME_T1020_4 10
#define XTENSA_HWCIDVERS_T1020_4 7
#define XTENSA_HWVERSION_T1030_0 103000 
#define XTENSA_HWCIDSCHEME_T1030_0 10
#define XTENSA_HWCIDVERS_T1030_0 9
#define XTENSA_HWVERSION_T1030_1 103001 
#define XTENSA_HWCIDSCHEME_T1030_1 10
#define XTENSA_HWCIDVERS_T1030_1 10
#define XTENSA_HWVERSION_T1030_2 103002 
#define XTENSA_HWCIDSCHEME_T1030_2 10
#define XTENSA_HWCIDVERS_T1030_2 11
#define XTENSA_HWVERSION_T1030_3 103003 
#define XTENSA_HWCIDSCHEME_T1030_3 10
#define XTENSA_HWCIDVERS_T1030_3 12
#define XTENSA_HWVERSION_T1040_0 104000 
#define XTENSA_HWCIDSCHEME_T1040_0 10
#define XTENSA_HWCIDVERS_T1040_0 15
#define XTENSA_HWVERSION_T1040_1 104001 
#define XTENSA_HWCIDSCHEME_T1040_1 01
#define XTENSA_HWCIDVERS_T1040_1 32
#define XTENSA_HWVERSION_T1040_1P 104001 
#define XTENSA_HWCIDSCHEME_T1040_1P 10
#define XTENSA_HWCIDVERS_T1040_1P 16
#define XTENSA_HWVERSION_T1040_2 104002 
#define XTENSA_HWCIDSCHEME_T1040_2 01
#define XTENSA_HWCIDVERS_T1040_2 33
#define XTENSA_HWVERSION_T1040_3 104003 
#define XTENSA_HWCIDSCHEME_T1040_3 01
#define XTENSA_HWCIDVERS_T1040_3 34
#define XTENSA_HWVERSION_T1050_0 105000 
#define XTENSA_HWCIDSCHEME_T1050_0 1100
#define XTENSA_HWCIDVERS_T1050_0 1
#define XTENSA_HWVERSION_T1050_1 105001 
#define XTENSA_HWCIDSCHEME_T1050_1 1100
#define XTENSA_HWCIDVERS_T1050_1 2
#define XTENSA_HWVERSION_T1050_2 105002 
#define XTENSA_HWCIDSCHEME_T1050_2 1100
#define XTENSA_HWCIDVERS_T1050_2 4
#define XTENSA_HWVERSION_T1050_3 105003 
#define XTENSA_HWCIDSCHEME_T1050_3 1100
#define XTENSA_HWCIDVERS_T1050_3 6
#define XTENSA_HWVERSION_T1050_4 105004 
#define XTENSA_HWCIDSCHEME_T1050_4 1100
#define XTENSA_HWCIDVERS_T1050_4 7
#define XTENSA_HWVERSION_T1050_5 105005 
#define XTENSA_HWCIDSCHEME_T1050_5 1100
#define XTENSA_HWCIDVERS_T1050_5 8
#define XTENSA_HWVERSION_RA_2004_1 210000 
#define XTENSA_HWCIDSCHEME_RA_2004_1 1100
#define XTENSA_HWCIDVERS_RA_2004_1 3
#define XTENSA_HWVERSION_RA_2005_1 210001 
#define XTENSA_HWCIDSCHEME_RA_2005_1 1100
#define XTENSA_HWCIDVERS_RA_2005_1 20
#define XTENSA_HWVERSION_RA_2005_2 210002 
#define XTENSA_HWCIDSCHEME_RA_2005_2 1100
#define XTENSA_HWCIDVERS_RA_2005_2 21
#define XTENSA_HWVERSION_RA_2005_3 210003 
#define XTENSA_HWCIDSCHEME_RA_2005_3 1100
#define XTENSA_HWCIDVERS_RA_2005_3 22
#define XTENSA_HWVERSION_RA_2006_4 210004 
#define XTENSA_HWCIDSCHEME_RA_2006_4 1100
#define XTENSA_HWCIDVERS_RA_2006_4 23
#define XTENSA_HWVERSION_RA_2006_5 210005 
#define XTENSA_HWCIDSCHEME_RA_2006_5 1100
#define XTENSA_HWCIDVERS_RA_2006_5 24
#define XTENSA_HWVERSION_RA_2006_6 210006 
#define XTENSA_HWCIDSCHEME_RA_2006_6 1100
#define XTENSA_HWCIDVERS_RA_2006_6 25
#define XTENSA_HWVERSION_RA_2007_7 210007 
#define XTENSA_HWCIDSCHEME_RA_2007_7 1100
#define XTENSA_HWCIDVERS_RA_2007_7 26
#define XTENSA_HWVERSION_RA_2008_8 210008 
#define XTENSA_HWCIDSCHEME_RA_2008_8 1100
#define XTENSA_HWCIDVERS_RA_2008_8 27
#define XTENSA_HWVERSION_RB_2006_0 220000 
#define XTENSA_HWCIDSCHEME_RB_2006_0 1100
#define XTENSA_HWCIDVERS_RB_2006_0 48
#define XTENSA_HWVERSION_RB_2007_1 220001 
#define XTENSA_HWCIDSCHEME_RB_2007_1 1100
#define XTENSA_HWCIDVERS_RB_2007_1 49
#define XTENSA_HWVERSION_RB_2007_2 221000 
#define XTENSA_HWCIDSCHEME_RB_2007_2 1100
#define XTENSA_HWCIDVERS_RB_2007_2 52
#define XTENSA_HWVERSION_RB_2008_3 221001 
#define XTENSA_HWCIDSCHEME_RB_2008_3 1100
#define XTENSA_HWCIDVERS_RB_2008_3 53
#define XTENSA_HWVERSION_RB_2008_4 221002 
#define XTENSA_HWCIDSCHEME_RB_2008_4 1100
#define XTENSA_HWCIDVERS_RB_2008_4 54
#define XTENSA_HWVERSION_RB_2009_5 221003 
#define XTENSA_HWCIDSCHEME_RB_2009_5 1100
#define XTENSA_HWCIDVERS_RB_2009_5 55
#define XTENSA_HWVERSION_RB_2007_2_MP 221100 
#define XTENSA_HWCIDSCHEME_RB_2007_2_MP 1100
#define XTENSA_HWCIDVERS_RB_2007_2_MP 64
#define XTENSA_HWVERSION_RC_2009_0 230000 
#define XTENSA_HWCIDSCHEME_RC_2009_0 1100
#define XTENSA_HWCIDVERS_RC_2009_0 65
#define XTENSA_HWVERSION_RC_2010_1 230001 
#define XTENSA_HWCIDSCHEME_RC_2010_1 1100
#define XTENSA_HWCIDVERS_RC_2010_1 66
#define XTENSA_HWVERSION_RC_2010_2 230002 
#define XTENSA_HWCIDSCHEME_RC_2010_2 1100
#define XTENSA_HWCIDVERS_RC_2010_2 67
#define XTENSA_HWVERSION_RC_2011_3 230003 
#define XTENSA_HWCIDSCHEME_RC_2011_3 1100
#define XTENSA_HWCIDVERS_RC_2011_3 68
#define XTENSA_HWVERSION_RD_2010_0 240000 
#define XTENSA_HWCIDSCHEME_RD_2010_0 1100
#define XTENSA_HWCIDVERS_RD_2010_0 80
#define XTENSA_HWVERSION_RD_2011_1 240001 
#define XTENSA_HWCIDSCHEME_RD_2011_1 1100
#define XTENSA_HWCIDVERS_RD_2011_1 81
#define XTENSA_HWVERSION_RD_2011_2 240002 
#define XTENSA_HWCIDSCHEME_RD_2011_2 1100
#define XTENSA_HWCIDVERS_RD_2011_2 82
#define XTENSA_HWVERSION_RD_2011_3 240003 
#define XTENSA_HWCIDSCHEME_RD_2011_3 1100
#define XTENSA_HWCIDVERS_RD_2011_3 83
#define XTENSA_HWVERSION_RD_2012_4 240004 
#define XTENSA_HWCIDSCHEME_RD_2012_4 1100
#define XTENSA_HWCIDVERS_RD_2012_4 84
#define XTENSA_HWVERSION_RD_2012_5 240005 
#define XTENSA_HWCIDSCHEME_RD_2012_5 1100
#define XTENSA_HWCIDVERS_RD_2012_5 85
#define XTENSA_HWVERSION_RE_2012_0 250000 
#define XTENSA_HWCIDSCHEME_RE_2012_0 1100
#define XTENSA_HWCIDVERS_RE_2012_0 96
#define XTENSA_HWVERSION_RE_2012_1 250001 
#define XTENSA_HWCIDSCHEME_RE_2012_1 1100
#define XTENSA_HWCIDVERS_RE_2012_1 97
#define XTENSA_HWVERSION_RE_2013_2 250002 
#define XTENSA_HWCIDSCHEME_RE_2013_2 1100
#define XTENSA_HWCIDVERS_RE_2013_2 98
#define XTENSA_HWVERSION_RE_2013_3 250003 
#define XTENSA_HWCIDSCHEME_RE_2013_3 1100
#define XTENSA_HWCIDVERS_RE_2013_3 99
#define XTENSA_HWVERSION_RE_2013_4 250004 
#define XTENSA_HWCIDSCHEME_RE_2013_4 1100
#define XTENSA_HWCIDVERS_RE_2013_4 100
#define XTENSA_HWVERSION_RE_2014_5 250005 
#define XTENSA_HWCIDSCHEME_RE_2014_5 1100
#define XTENSA_HWCIDVERS_RE_2014_5 101
#define XTENSA_HWVERSION_RE_2015_6 250006 
#define XTENSA_HWCIDSCHEME_RE_2015_6 1100
#define XTENSA_HWCIDVERS_RE_2015_6 102
#define XTENSA_HWVERSION_RF_2014_0 260000 
#define XTENSA_HWCIDSCHEME_RF_2014_0 1100
#define XTENSA_HWCIDVERS_RF_2014_0 112
#define XTENSA_HWVERSION_RF_2014_1 260001 
#define XTENSA_HWCIDSCHEME_RF_2014_1 1100
#define XTENSA_HWCIDVERS_RF_2014_1 113
#define XTENSA_HWVERSION_RF_2015_2 260002 
#define XTENSA_HWCIDSCHEME_RF_2015_2 1100
#define XTENSA_HWCIDVERS_RF_2015_2 114
#define XTENSA_HWVERSION_RF_2015_3 260003 
#define XTENSA_HWCIDSCHEME_RF_2015_3 1100
#define XTENSA_HWCIDVERS_RF_2015_3 115
#define XTENSA_HWVERSION_RG_2015_0 270000 
#define XTENSA_HWCIDSCHEME_RG_2015_0 1100
#define XTENSA_HWCIDVERS_RG_2015_0 128


#define XTENSA_SWVERSION_T1020_0 102000 
#define XTENSA_SWVERSION_T1020_1 102001 
#define XTENSA_SWVERSION_T1020_2B 102002 
#define XTENSA_SWVERSION_T1020_2 102002 
#define XTENSA_SWVERSION_T1020_3 102003 
#define XTENSA_SWVERSION_T1020_4 102004 
#define XTENSA_SWVERSION_T1030_0 103000 
#define XTENSA_SWVERSION_T1030_1 103001 
#define XTENSA_SWVERSION_T1030_2 103002 
#define XTENSA_SWVERSION_T1030_3 103003 
#define XTENSA_SWVERSION_T1040_0 104000 
#define XTENSA_SWVERSION_T1040_1 104001 
#define XTENSA_SWVERSION_T1040_1P 104001 
#define XTENSA_SWVERSION_T1040_2 104002 
#define XTENSA_SWVERSION_T1040_3 104003 
#define XTENSA_SWVERSION_T1050_0 105000 
#define XTENSA_SWVERSION_T1050_1 105001 
#define XTENSA_SWVERSION_T1050_2 105002 
#define XTENSA_SWVERSION_T1050_3 105003 
#define XTENSA_SWVERSION_T1050_4 105004 
#define XTENSA_SWVERSION_T1050_5 105005 
#define XTENSA_SWVERSION_RA_2004_1 600000 
#define XTENSA_SWVERSION_RA_2005_1 600001 
#define XTENSA_SWVERSION_RA_2005_2 600002 
#define XTENSA_SWVERSION_RA_2005_3 600003 
#define XTENSA_SWVERSION_RA_2006_4 600004 
#define XTENSA_SWVERSION_RA_2006_5 600005 
#define XTENSA_SWVERSION_RA_2006_6 600006 
#define XTENSA_SWVERSION_RA_2007_7 600007 
#define XTENSA_SWVERSION_RA_2008_8 600008 
#define XTENSA_SWVERSION_RB_2006_0 700000 
#define XTENSA_SWVERSION_RB_2007_1 700001 
#define XTENSA_SWVERSION_RB_2007_2 701000 
#define XTENSA_SWVERSION_RB_2008_3 701001 
#define XTENSA_SWVERSION_RB_2008_4 701002 
#define XTENSA_SWVERSION_RB_2009_5 701003 
#define XTENSA_SWVERSION_RB_2007_2_MP 701100 
#define XTENSA_SWVERSION_RC_2009_0 800000 
#define XTENSA_SWVERSION_RC_2010_1 800001 
#define XTENSA_SWVERSION_RC_2010_2 800002 
#define XTENSA_SWVERSION_RC_2011_3 800003 
#define XTENSA_SWVERSION_RD_2010_0 900000 
#define XTENSA_SWVERSION_RD_2011_1 900001 
#define XTENSA_SWVERSION_RD_2011_2 900002 
#define XTENSA_SWVERSION_RD_2011_3 900003 
#define XTENSA_SWVERSION_RD_2012_4 900004 
#define XTENSA_SWVERSION_RD_2012_5 900005 
#define XTENSA_SWVERSION_RE_2012_0 1000000 
#define XTENSA_SWVERSION_RE_2012_1 1000001 
#define XTENSA_SWVERSION_RE_2013_2 1000002 
#define XTENSA_SWVERSION_RE_2013_3 1000003 
#define XTENSA_SWVERSION_RE_2013_4 1000004 
#define XTENSA_SWVERSION_RE_2014_5 1000005 
#define XTENSA_SWVERSION_RE_2015_6 1000006 
#define XTENSA_SWVERSION_RF_2014_0 1100000 
#define XTENSA_SWVERSION_RF_2014_1 1100001 
#define XTENSA_SWVERSION_RF_2015_2 1100002 
#define XTENSA_SWVERSION_RF_2015_3 1100003 
#define XTENSA_SWVERSION_RG_2015_0 1200000 
#define XTENSA_SWVERSION_T1040_1_PREHOTFIX XTENSA_SWVERSION_T1040_1P 
#define XTENSA_SWVERSION_6_0_0 XTENSA_SWVERSION_RA_2004_1 
#define XTENSA_SWVERSION_6_0_1 XTENSA_SWVERSION_RA_2005_1 
#define XTENSA_SWVERSION_6_0_2 XTENSA_SWVERSION_RA_2005_2 
#define XTENSA_SWVERSION_6_0_3 XTENSA_SWVERSION_RA_2005_3 
#define XTENSA_SWVERSION_6_0_4 XTENSA_SWVERSION_RA_2006_4 
#define XTENSA_SWVERSION_6_0_5 XTENSA_SWVERSION_RA_2006_5 
#define XTENSA_SWVERSION_6_0_6 XTENSA_SWVERSION_RA_2006_6 
#define XTENSA_SWVERSION_6_0_7 XTENSA_SWVERSION_RA_2007_7 
#define XTENSA_SWVERSION_6_0_8 XTENSA_SWVERSION_RA_2008_8 
#define XTENSA_SWVERSION_7_0_0 XTENSA_SWVERSION_RB_2006_0 
#define XTENSA_SWVERSION_7_0_1 XTENSA_SWVERSION_RB_2007_1 
#define XTENSA_SWVERSION_7_1_0 XTENSA_SWVERSION_RB_2007_2 
#define XTENSA_SWVERSION_7_1_1 XTENSA_SWVERSION_RB_2008_3 
#define XTENSA_SWVERSION_7_1_2 XTENSA_SWVERSION_RB_2008_4 
#define XTENSA_SWVERSION_7_1_3 XTENSA_SWVERSION_RB_2009_5 
#define XTENSA_SWVERSION_7_1_8_MP XTENSA_SWVERSION_RB_2007_2_MP 
#define XTENSA_SWVERSION_8_0_0 XTENSA_SWVERSION_RC_2009_0 
#define XTENSA_SWVERSION_8_0_1 XTENSA_SWVERSION_RC_2010_1 
#define XTENSA_SWVERSION_8_0_2 XTENSA_SWVERSION_RC_2010_2 
#define XTENSA_SWVERSION_8_0_3 XTENSA_SWVERSION_RC_2011_3 
#define XTENSA_SWVERSION_9_0_0 XTENSA_SWVERSION_RD_2010_0 
#define XTENSA_SWVERSION_9_0_1 XTENSA_SWVERSION_RD_2011_1 
#define XTENSA_SWVERSION_9_0_2 XTENSA_SWVERSION_RD_2011_2 
#define XTENSA_SWVERSION_9_0_3 XTENSA_SWVERSION_RD_2011_3 
#define XTENSA_SWVERSION_9_0_4 XTENSA_SWVERSION_RD_2012_4 
#define XTENSA_SWVERSION_9_0_5 XTENSA_SWVERSION_RD_2012_5 
#define XTENSA_SWVERSION_10_0_0 XTENSA_SWVERSION_RE_2012_0 
#define XTENSA_SWVERSION_10_0_1 XTENSA_SWVERSION_RE_2012_1 
#define XTENSA_SWVERSION_10_0_2 XTENSA_SWVERSION_RE_2013_2 
#define XTENSA_SWVERSION_10_0_3 XTENSA_SWVERSION_RE_2013_3 
#define XTENSA_SWVERSION_10_0_4 XTENSA_SWVERSION_RE_2013_4 
#define XTENSA_SWVERSION_10_0_5 XTENSA_SWVERSION_RE_2014_5 
#define XTENSA_SWVERSION_10_0_6 XTENSA_SWVERSION_RE_2015_6 
#define XTENSA_SWVERSION_11_0_0 XTENSA_SWVERSION_RF_2014_0 
#define XTENSA_SWVERSION_11_0_1 XTENSA_SWVERSION_RF_2014_1 
#define XTENSA_SWVERSION_11_0_2 XTENSA_SWVERSION_RF_2015_2 
#define XTENSA_SWVERSION_11_0_3 XTENSA_SWVERSION_RF_2015_3 
#define XTENSA_SWVERSION_12_0_0 XTENSA_SWVERSION_RG_2015_0 



#define XTENSA_RELEASE_NAME "RF-2015.3"
#define XTENSA_RELEASE_CANONICAL_NAME "RF-2015.3"


#define XTENSA_SWVERSION XTENSA_SWVERSION_RF_2015_3
#define XTENSA_SWVERSION_NAME "11.0.3"
#define XTENSA_SWVERSION_CANONICAL_NAME "11.0.3"
#define XTENSA_SWVERSION_MAJORMID_NAME "11.0"
#define XTENSA_SWVERSION_MAJOR_NAME "11"

#define XTENSA_SWVERSION_LICENSE_NAME "11.0"










# 43 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h" 2







# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h" 1











# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-isa.h"











































# 51 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-matmap.h" 1













































# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-matmap.h"







































# 48 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-matmap.h"
#define XTENSA_CONFIG_CORE_MATMAP_H 








#define XCHAL_FCA_LIST XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_BYPASS XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION XCHAL_SEP XTHAL_FAM_EXCEPTION
# 73 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-matmap.h"
#define XCHAL_LCA_LIST XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_EXCEPTION XCHAL_SEP XTHAL_LAM_BYPASSG XCHAL_SEP XTHAL_LAM_EXCEPTION
# 89 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-matmap.h"
#define XCHAL_SCA_LIST XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_EXCEPTION XCHAL_SEP XTHAL_SAM_BYPASS XCHAL_SEP XTHAL_SAM_EXCEPTION
# 107 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-matmap.h"











# 113 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-matmap.h"
#define XCHAL_CA_BYPASS 2 
#define XCHAL_CA_BYPASSBUF 6 
#define XCHAL_CA_WRITETHRU 2 
#define XCHAL_CA_WRITEBACK 2 
#define XCHAL_HAVE_CA_WRITEBACK_NOALLOC 0 
#define XCHAL_CA_WRITEBACK_NOALLOC 2 
#define XCHAL_CA_BYPASS_RW 0 
#define XCHAL_CA_WRITETHRU_RW 0 
#define XCHAL_CA_WRITEBACK_RW 0 
#define XCHAL_CA_WRITEBACK_NOALLOC_RW 0 
#define XCHAL_CA_ILLEGAL 15 
#define XCHAL_CA_ISOLATE 0 







# 131 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-matmap.h"





















































































# 175 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core-matmap.h"
#define XCHAL_MMU_ASID_INVALID 0 
#define XCHAL_MMU_ASID_KERNEL 0 
#define XCHAL_MMU_SR_BITS 0 
#define XCHAL_MMU_CA_BITS 4 
#define XCHAL_MMU_MAX_PTE_PAGE_SIZE 29 
#define XCHAL_MMU_MIN_PTE_PAGE_SIZE 29 




#define XCHAL_ITLB_WAY_BITS 0 
#define XCHAL_ITLB_WAYS 1 
#define XCHAL_ITLB_ARF_WAYS 0 
#define XCHAL_ITLB_SETS 1 


#define XCHAL_ITLB_WAY0_SET 0


#define XCHAL_ITLB_ARF_SETS 0 


#define XCHAL_ITLB_MINWIRED_SETS 0 



#define XCHAL_ITLB_SET0_WAY 0 
#define XCHAL_ITLB_SET0_WAYS 1 
#define XCHAL_ITLB_SET0_ENTRIES_LOG2 3 
#define XCHAL_ITLB_SET0_ENTRIES 8 
#define XCHAL_ITLB_SET0_ARF 0 
#define XCHAL_ITLB_SET0_PAGESIZES 1 
#define XCHAL_ITLB_SET0_PAGESZ_BITS 0 
#define XCHAL_ITLB_SET0_PAGESZ_LOG2_MIN 29 
#define XCHAL_ITLB_SET0_PAGESZ_LOG2_MAX 29 
#define XCHAL_ITLB_SET0_PAGESZ_LOG2_LIST 29 



#define XCHAL_ITLB_SET0_ASID_CONSTMASK 0 
#define XCHAL_ITLB_SET0_VPN_CONSTMASK 0x00000000 
#define XCHAL_ITLB_SET0_PPN_CONSTMASK 0xE0000000 
#define XCHAL_ITLB_SET0_CA_CONSTMASK 0 
#define XCHAL_ITLB_SET0_ASID_RESET 0 
#define XCHAL_ITLB_SET0_VPN_RESET 0 
#define XCHAL_ITLB_SET0_PPN_RESET 0 
#define XCHAL_ITLB_SET0_CA_RESET 1 

#define XCHAL_ITLB_SET0_E0_VPN_CONST 0x00000000
#define XCHAL_ITLB_SET0_E1_VPN_CONST 0x20000000
#define XCHAL_ITLB_SET0_E2_VPN_CONST 0x40000000
#define XCHAL_ITLB_SET0_E3_VPN_CONST 0x60000000
#define XCHAL_ITLB_SET0_E4_VPN_CONST 0x80000000
#define XCHAL_ITLB_SET0_E5_VPN_CONST 0xA0000000
#define XCHAL_ITLB_SET0_E6_VPN_CONST 0xC0000000
#define XCHAL_ITLB_SET0_E7_VPN_CONST 0xE0000000

#define XCHAL_ITLB_SET0_E0_PPN_CONST 0x00000000
#define XCHAL_ITLB_SET0_E1_PPN_CONST 0x20000000
#define XCHAL_ITLB_SET0_E2_PPN_CONST 0x40000000
#define XCHAL_ITLB_SET0_E3_PPN_CONST 0x60000000
#define XCHAL_ITLB_SET0_E4_PPN_CONST 0x80000000
#define XCHAL_ITLB_SET0_E5_PPN_CONST 0xA0000000
#define XCHAL_ITLB_SET0_E6_PPN_CONST 0xC0000000
#define XCHAL_ITLB_SET0_E7_PPN_CONST 0xE0000000

#define XCHAL_ITLB_SET0_E0_CA_RESET 0x02
#define XCHAL_ITLB_SET0_E1_CA_RESET 0x02
#define XCHAL_ITLB_SET0_E2_CA_RESET 0x02
#define XCHAL_ITLB_SET0_E3_CA_RESET 0x02
#define XCHAL_ITLB_SET0_E4_CA_RESET 0x02
#define XCHAL_ITLB_SET0_E5_CA_RESET 0x02
#define XCHAL_ITLB_SET0_E6_CA_RESET 0x02
#define XCHAL_ITLB_SET0_E7_CA_RESET 0x02




#define XCHAL_DTLB_WAY_BITS 0 
#define XCHAL_DTLB_WAYS 1 
#define XCHAL_DTLB_ARF_WAYS 0 
#define XCHAL_DTLB_SETS 1 


#define XCHAL_DTLB_WAY0_SET 0


#define XCHAL_DTLB_ARF_SETS 0 


#define XCHAL_DTLB_MINWIRED_SETS 0 



#define XCHAL_DTLB_SET0_WAY 0 
#define XCHAL_DTLB_SET0_WAYS 1 
#define XCHAL_DTLB_SET0_ENTRIES_LOG2 3 
#define XCHAL_DTLB_SET0_ENTRIES 8 
#define XCHAL_DTLB_SET0_ARF 0 
#define XCHAL_DTLB_SET0_PAGESIZES 1 
#define XCHAL_DTLB_SET0_PAGESZ_BITS 0 
#define XCHAL_DTLB_SET0_PAGESZ_LOG2_MIN 29 
#define XCHAL_DTLB_SET0_PAGESZ_LOG2_MAX 29 
#define XCHAL_DTLB_SET0_PAGESZ_LOG2_LIST 29 



#define XCHAL_DTLB_SET0_ASID_CONSTMASK 0 
#define XCHAL_DTLB_SET0_VPN_CONSTMASK 0x00000000 
#define XCHAL_DTLB_SET0_PPN_CONSTMASK 0xE0000000 
#define XCHAL_DTLB_SET0_CA_CONSTMASK 0 
#define XCHAL_DTLB_SET0_ASID_RESET 0 
#define XCHAL_DTLB_SET0_VPN_RESET 0 
#define XCHAL_DTLB_SET0_PPN_RESET 0 
#define XCHAL_DTLB_SET0_CA_RESET 1 

#define XCHAL_DTLB_SET0_E0_VPN_CONST 0x00000000
#define XCHAL_DTLB_SET0_E1_VPN_CONST 0x20000000
#define XCHAL_DTLB_SET0_E2_VPN_CONST 0x40000000
#define XCHAL_DTLB_SET0_E3_VPN_CONST 0x60000000
#define XCHAL_DTLB_SET0_E4_VPN_CONST 0x80000000
#define XCHAL_DTLB_SET0_E5_VPN_CONST 0xA0000000
#define XCHAL_DTLB_SET0_E6_VPN_CONST 0xC0000000
#define XCHAL_DTLB_SET0_E7_VPN_CONST 0xE0000000

#define XCHAL_DTLB_SET0_E0_PPN_CONST 0x00000000
#define XCHAL_DTLB_SET0_E1_PPN_CONST 0x20000000
#define XCHAL_DTLB_SET0_E2_PPN_CONST 0x40000000
#define XCHAL_DTLB_SET0_E3_PPN_CONST 0x60000000
#define XCHAL_DTLB_SET0_E4_PPN_CONST 0x80000000
#define XCHAL_DTLB_SET0_E5_PPN_CONST 0xA0000000
#define XCHAL_DTLB_SET0_E6_PPN_CONST 0xC0000000
#define XCHAL_DTLB_SET0_E7_PPN_CONST 0xE0000000

#define XCHAL_DTLB_SET0_E0_CA_RESET 0x02
#define XCHAL_DTLB_SET0_E1_CA_RESET 0x02
#define XCHAL_DTLB_SET0_E2_CA_RESET 0x02
#define XCHAL_DTLB_SET0_E3_CA_RESET 0x02
#define XCHAL_DTLB_SET0_E4_CA_RESET 0x02
#define XCHAL_DTLB_SET0_E5_CA_RESET 0x02
#define XCHAL_DTLB_SET0_E6_CA_RESET 0x02
#define XCHAL_DTLB_SET0_E7_CA_RESET 0x02
# 52 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/tie.h" 1









# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/tie.h"















































# 33 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/tie.h"
#define _XTENSA_CORE_TIE_H 

#define XCHAL_CP_NUM 1 
#define XCHAL_CP_MAX 1 
#define XCHAL_CP_MASK 0x01 
#define XCHAL_CP_PORT_MASK 0x00 


#define XCHAL_CP0_NAME "FPU"
#define XCHAL_CP0_IDENT FPU
#define XCHAL_CP0_SA_SIZE 72 
#define XCHAL_CP0_SA_ALIGN 4 
#define XCHAL_CP_ID_FPU 0 


#define XCHAL_CP1_SA_SIZE 0
#define XCHAL_CP1_SA_ALIGN 1
#define XCHAL_CP2_SA_SIZE 0
#define XCHAL_CP2_SA_ALIGN 1
#define XCHAL_CP3_SA_SIZE 0
#define XCHAL_CP3_SA_ALIGN 1
#define XCHAL_CP4_SA_SIZE 0
#define XCHAL_CP4_SA_ALIGN 1
#define XCHAL_CP5_SA_SIZE 0
#define XCHAL_CP5_SA_ALIGN 1
#define XCHAL_CP6_SA_SIZE 0
#define XCHAL_CP6_SA_ALIGN 1
#define XCHAL_CP7_SA_SIZE 0
#define XCHAL_CP7_SA_ALIGN 1


#define XCHAL_NCP_SA_SIZE 48
#define XCHAL_NCP_SA_ALIGN 4


#define XCHAL_TOTAL_SA_SIZE 128 
#define XCHAL_TOTAL_SA_ALIGN 4 












































































# 111 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/tie.h"
#define XCHAL_NCP_SA_NUM 12
#define XCHAL_NCP_SA_LIST(s) XCHAL_SA_REG(s,1,2,1,1, threadptr, 4, 4, 4,0x03E7, ur,231, 32,0,0,0) XCHAL_SA_REG(s,1,0,0,1, acclo, 4, 4, 4,0x0210, sr,16 , 32,0,0,0) XCHAL_SA_REG(s,1,0,0,1, acchi, 4, 4, 4,0x0211, sr,17 , 8,0,0,0) XCHAL_SA_REG(s,0,0,0,1, br, 4, 4, 4,0x0204, sr,4 , 16,0,0,0) XCHAL_SA_REG(s,0,0,0,1, scompare1, 4, 4, 4,0x020C, sr,12 , 32,0,0,0) XCHAL_SA_REG(s,0,0,0,1, m0, 4, 4, 4,0x0220, sr,32 , 32,0,0,0) XCHAL_SA_REG(s,0,0,0,1, m1, 4, 4, 4,0x0221, sr,33 , 32,0,0,0) XCHAL_SA_REG(s,0,0,0,1, m2, 4, 4, 4,0x0222, sr,34 , 32,0,0,0) XCHAL_SA_REG(s,0,0,0,1, m3, 4, 4, 4,0x0223, sr,35 , 32,0,0,0) XCHAL_SA_REG(s,0,0,1,0, f64r_lo, 4, 4, 4,0x03EA, ur,234, 32,0,0,0) XCHAL_SA_REG(s,0,0,1,0, f64r_hi, 4, 4, 4,0x03EB, ur,235, 32,0,0,0) XCHAL_SA_REG(s,0,0,1,0, f64s, 4, 4, 4,0x03EC, ur,236, 32,0,0,0)
# 126 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/tie.h"
#define XCHAL_CP0_SA_NUM 18
#define XCHAL_CP0_SA_LIST(s) XCHAL_SA_REG(s,0,0,1,0, fcr, 4, 4, 4,0x03E8, ur,232, 32,0,0,0) XCHAL_SA_REG(s,0,0,1,0, fsr, 4, 4, 4,0x03E9, ur,233, 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f0, 4, 4, 4,0x0030, f,0 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f1, 4, 4, 4,0x0031, f,1 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f2, 4, 4, 4,0x0032, f,2 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f3, 4, 4, 4,0x0033, f,3 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f4, 4, 4, 4,0x0034, f,4 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f5, 4, 4, 4,0x0035, f,5 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f6, 4, 4, 4,0x0036, f,6 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f7, 4, 4, 4,0x0037, f,7 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f8, 4, 4, 4,0x0038, f,8 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f9, 4, 4, 4,0x0039, f,9 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f10, 4, 4, 4,0x003A, f,10 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f11, 4, 4, 4,0x003B, f,11 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f12, 4, 4, 4,0x003C, f,12 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f13, 4, 4, 4,0x003D, f,13 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f14, 4, 4, 4,0x003E, f,14 , 32,0,0,0) XCHAL_SA_REG(s,0,0,2,0, f15, 4, 4, 4,0x003F, f,15 , 32,0,0,0)
# 147 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/tie.h"
#define XCHAL_CP1_SA_NUM 0
#define XCHAL_CP1_SA_LIST(s) 

#define XCHAL_CP2_SA_NUM 0
#define XCHAL_CP2_SA_LIST(s) 

#define XCHAL_CP3_SA_NUM 0
#define XCHAL_CP3_SA_LIST(s) 

#define XCHAL_CP4_SA_NUM 0
#define XCHAL_CP4_SA_LIST(s) 

#define XCHAL_CP5_SA_NUM 0
#define XCHAL_CP5_SA_LIST(s) 

#define XCHAL_CP6_SA_NUM 0
#define XCHAL_CP6_SA_LIST(s) 

#define XCHAL_CP7_SA_NUM 0
#define XCHAL_CP7_SA_LIST(s) 


#define XCHAL_OP0_FORMAT_LENGTHS 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3

#define XCHAL_BYTE0_FORMAT_LENGTHS 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3, 3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3
# 53 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h" 2
# 68 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"





# 72 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"









# 77 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"


#define XCHAL_SEP ,



#define XCHAL_SEP2 },{












#define XCHAL_HAVE_LE 1
#define XCHAL_MEMORY_ORDER XTHAL_LITTLEENDIAN









# 106 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"

#define _XCHAL_INTLEVEL_MASK(n) XCHAL_INTLEVEL ## n ## _MASK
#define XCHAL_INTLEVEL_MASK(n) _XCHAL_INTLEVEL_MASK(n) 
#define _XCHAL_INTLEVEL_ANDBELOWMASK(n) XCHAL_INTLEVEL ## n ## _ANDBELOW_MASK
#define XCHAL_INTLEVEL_ANDBELOW_MASK(n) _XCHAL_INTLEVEL_ANDBELOWMASK(n) 
#define _XCHAL_INTLEVEL_NUM(n) XCHAL_INTLEVEL ## n ## _NUM
#define XCHAL_INTLEVEL_NUM(n) _XCHAL_INTLEVEL_NUM(n) 
#define _XCHAL_INT_LEVEL(n) XCHAL_INT ## n ## _LEVEL
#define XCHAL_INT_LEVEL(n) _XCHAL_INT_LEVEL(n) 
#define _XCHAL_INT_TYPE(n) XCHAL_INT ## n ## _TYPE
#define XCHAL_INT_TYPE(n) _XCHAL_INT_TYPE(n) 
#define _XCHAL_TIMER_INTERRUPT(n) XCHAL_TIMER ## n ## _INTERRUPT
#define XCHAL_TIMER_INTERRUPT(n) _XCHAL_TIMER_INTERRUPT(n) 


#define XCHAL_HAVE_HIGHLEVEL_INTERRUPTS XCHAL_HAVE_HIGHPRI_INTERRUPTS
#define XCHAL_NUM_LOWPRI_LEVELS 1 
#define XCHAL_FIRST_HIGHPRI_LEVEL (XCHAL_NUM_LOWPRI_LEVELS+1) 



#define XCHAL_INTLEVEL0_MASK 0x00000000
#define XCHAL_INTLEVEL8_MASK 0x00000000
#define XCHAL_INTLEVEL9_MASK 0x00000000
#define XCHAL_INTLEVEL10_MASK 0x00000000
#define XCHAL_INTLEVEL11_MASK 0x00000000
#define XCHAL_INTLEVEL12_MASK 0x00000000
#define XCHAL_INTLEVEL13_MASK 0x00000000
#define XCHAL_INTLEVEL14_MASK 0x00000000
#define XCHAL_INTLEVEL15_MASK 0x00000000


#define XCHAL_INTLEVEL_MASKS XCHAL_INTLEVEL0_MASK XCHAL_SEP XCHAL_INTLEVEL1_MASK XCHAL_SEP XCHAL_INTLEVEL2_MASK XCHAL_SEP XCHAL_INTLEVEL3_MASK XCHAL_SEP XCHAL_INTLEVEL4_MASK XCHAL_SEP XCHAL_INTLEVEL5_MASK XCHAL_SEP XCHAL_INTLEVEL6_MASK XCHAL_SEP XCHAL_INTLEVEL7_MASK XCHAL_SEP XCHAL_INTLEVEL8_MASK XCHAL_SEP XCHAL_INTLEVEL9_MASK XCHAL_SEP XCHAL_INTLEVEL10_MASK XCHAL_SEP XCHAL_INTLEVEL11_MASK XCHAL_SEP XCHAL_INTLEVEL12_MASK XCHAL_SEP XCHAL_INTLEVEL13_MASK XCHAL_SEP XCHAL_INTLEVEL14_MASK XCHAL_SEP XCHAL_INTLEVEL15_MASK
# 155 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"

#define XCHAL_INTLEVEL0_ANDBELOW_MASK 0x00000000
#define XCHAL_INTLEVEL8_ANDBELOW_MASK XCHAL_INTLEVEL7_ANDBELOW_MASK
#define XCHAL_INTLEVEL9_ANDBELOW_MASK XCHAL_INTLEVEL7_ANDBELOW_MASK
#define XCHAL_INTLEVEL10_ANDBELOW_MASK XCHAL_INTLEVEL7_ANDBELOW_MASK
#define XCHAL_INTLEVEL11_ANDBELOW_MASK XCHAL_INTLEVEL7_ANDBELOW_MASK
#define XCHAL_INTLEVEL12_ANDBELOW_MASK XCHAL_INTLEVEL7_ANDBELOW_MASK
#define XCHAL_INTLEVEL13_ANDBELOW_MASK XCHAL_INTLEVEL7_ANDBELOW_MASK
#define XCHAL_INTLEVEL14_ANDBELOW_MASK XCHAL_INTLEVEL7_ANDBELOW_MASK
#define XCHAL_INTLEVEL15_ANDBELOW_MASK XCHAL_INTLEVEL7_ANDBELOW_MASK


#define XCHAL_LOWPRI_MASK XCHAL_INTLEVEL1_ANDBELOW_MASK


#define XCHAL_EXCM_MASK XCHAL_INTLEVEL_ANDBELOW_MASK(XCHAL_EXCM_LEVEL)


#define XCHAL_INTLEVEL_ANDBELOW_MASKS XCHAL_INTLEVEL0_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL1_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL2_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL3_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL4_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL5_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL6_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL7_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL8_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL9_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL10_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL11_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL12_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL13_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL14_ANDBELOW_MASK XCHAL_SEP XCHAL_INTLEVEL15_ANDBELOW_MASK
# 195 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"

#define XCHAL_INT_LEVELS XCHAL_INT0_LEVEL XCHAL_SEP XCHAL_INT1_LEVEL XCHAL_SEP XCHAL_INT2_LEVEL XCHAL_SEP XCHAL_INT3_LEVEL XCHAL_SEP XCHAL_INT4_LEVEL XCHAL_SEP XCHAL_INT5_LEVEL XCHAL_SEP XCHAL_INT6_LEVEL XCHAL_SEP XCHAL_INT7_LEVEL XCHAL_SEP XCHAL_INT8_LEVEL XCHAL_SEP XCHAL_INT9_LEVEL XCHAL_SEP XCHAL_INT10_LEVEL XCHAL_SEP XCHAL_INT11_LEVEL XCHAL_SEP XCHAL_INT12_LEVEL XCHAL_SEP XCHAL_INT13_LEVEL XCHAL_SEP XCHAL_INT14_LEVEL XCHAL_SEP XCHAL_INT15_LEVEL XCHAL_SEP XCHAL_INT16_LEVEL XCHAL_SEP XCHAL_INT17_LEVEL XCHAL_SEP XCHAL_INT18_LEVEL XCHAL_SEP XCHAL_INT19_LEVEL XCHAL_SEP XCHAL_INT20_LEVEL XCHAL_SEP XCHAL_INT21_LEVEL XCHAL_SEP XCHAL_INT22_LEVEL XCHAL_SEP XCHAL_INT23_LEVEL XCHAL_SEP XCHAL_INT24_LEVEL XCHAL_SEP XCHAL_INT25_LEVEL XCHAL_SEP XCHAL_INT26_LEVEL XCHAL_SEP XCHAL_INT27_LEVEL XCHAL_SEP XCHAL_INT28_LEVEL XCHAL_SEP XCHAL_INT29_LEVEL XCHAL_SEP XCHAL_INT30_LEVEL XCHAL_SEP XCHAL_INT31_LEVEL
# 229 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"

#define XCHAL_INT_TYPES XCHAL_INT0_TYPE XCHAL_SEP XCHAL_INT1_TYPE XCHAL_SEP XCHAL_INT2_TYPE XCHAL_SEP XCHAL_INT3_TYPE XCHAL_SEP XCHAL_INT4_TYPE XCHAL_SEP XCHAL_INT5_TYPE XCHAL_SEP XCHAL_INT6_TYPE XCHAL_SEP XCHAL_INT7_TYPE XCHAL_SEP XCHAL_INT8_TYPE XCHAL_SEP XCHAL_INT9_TYPE XCHAL_SEP XCHAL_INT10_TYPE XCHAL_SEP XCHAL_INT11_TYPE XCHAL_SEP XCHAL_INT12_TYPE XCHAL_SEP XCHAL_INT13_TYPE XCHAL_SEP XCHAL_INT14_TYPE XCHAL_SEP XCHAL_INT15_TYPE XCHAL_SEP XCHAL_INT16_TYPE XCHAL_SEP XCHAL_INT17_TYPE XCHAL_SEP XCHAL_INT18_TYPE XCHAL_SEP XCHAL_INT19_TYPE XCHAL_SEP XCHAL_INT20_TYPE XCHAL_SEP XCHAL_INT21_TYPE XCHAL_SEP XCHAL_INT22_TYPE XCHAL_SEP XCHAL_INT23_TYPE XCHAL_SEP XCHAL_INT24_TYPE XCHAL_SEP XCHAL_INT25_TYPE XCHAL_SEP XCHAL_INT26_TYPE XCHAL_SEP XCHAL_INT27_TYPE XCHAL_SEP XCHAL_INT28_TYPE XCHAL_SEP XCHAL_INT29_TYPE XCHAL_SEP XCHAL_INT30_TYPE XCHAL_SEP XCHAL_INT31_TYPE
# 263 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"

#define XCHAL_INTTYPE_MASKS XCHAL_INTTYPE_MASK_UNCONFIGURED XCHAL_SEP XCHAL_INTTYPE_MASK_SOFTWARE XCHAL_SEP XCHAL_INTTYPE_MASK_EXTERN_EDGE XCHAL_SEP XCHAL_INTTYPE_MASK_EXTERN_LEVEL XCHAL_SEP XCHAL_INTTYPE_MASK_TIMER XCHAL_SEP XCHAL_INTTYPE_MASK_NMI XCHAL_SEP XCHAL_INTTYPE_MASK_WRITE_ERROR








#define XCHAL_INTCLEARABLE_MASK (XCHAL_INTTYPE_MASK_SOFTWARE+XCHAL_INTTYPE_MASK_EXTERN_EDGE+XCHAL_INTTYPE_MASK_WRITE_ERROR)

#define XCHAL_INTSETTABLE_MASK XCHAL_INTTYPE_MASK_SOFTWARE


#define XCHAL_TIMER_INTERRUPTS XCHAL_TIMER0_INTERRUPT XCHAL_SEP XCHAL_TIMER1_INTERRUPT XCHAL_SEP XCHAL_TIMER2_INTERRUPT XCHAL_SEP XCHAL_TIMER3_INTERRUPT











# 418 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"





# 422 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
#define XCHAL_EXTINT0_MASK (1 << XCHAL_EXTINT0_NUM)
#define XCHAL_EXTINT0_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT0_NUM)
#define XCHAL_EXTINT1_MASK (1 << XCHAL_EXTINT1_NUM)
#define XCHAL_EXTINT1_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT1_NUM)
#define XCHAL_EXTINT2_MASK (1 << XCHAL_EXTINT2_NUM)
#define XCHAL_EXTINT2_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT2_NUM)
#define XCHAL_EXTINT3_MASK (1 << XCHAL_EXTINT3_NUM)
#define XCHAL_EXTINT3_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT3_NUM)
#define XCHAL_EXTINT4_MASK (1 << XCHAL_EXTINT4_NUM)
#define XCHAL_EXTINT4_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT4_NUM)
#define XCHAL_EXTINT5_MASK (1 << XCHAL_EXTINT5_NUM)
#define XCHAL_EXTINT5_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT5_NUM)
#define XCHAL_EXTINT6_MASK (1 << XCHAL_EXTINT6_NUM)
#define XCHAL_EXTINT6_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT6_NUM)
#define XCHAL_EXTINT7_MASK (1 << XCHAL_EXTINT7_NUM)
#define XCHAL_EXTINT7_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT7_NUM)
#define XCHAL_EXTINT8_MASK (1 << XCHAL_EXTINT8_NUM)
#define XCHAL_EXTINT8_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT8_NUM)
#define XCHAL_EXTINT9_MASK (1 << XCHAL_EXTINT9_NUM)
#define XCHAL_EXTINT9_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT9_NUM)
#define XCHAL_EXTINT10_MASK (1 << XCHAL_EXTINT10_NUM)
#define XCHAL_EXTINT10_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT10_NUM)
#define XCHAL_EXTINT11_MASK (1 << XCHAL_EXTINT11_NUM)
#define XCHAL_EXTINT11_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT11_NUM)
#define XCHAL_EXTINT12_MASK (1 << XCHAL_EXTINT12_NUM)
#define XCHAL_EXTINT12_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT12_NUM)
#define XCHAL_EXTINT13_MASK (1 << XCHAL_EXTINT13_NUM)
#define XCHAL_EXTINT13_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT13_NUM)
#define XCHAL_EXTINT14_MASK (1 << XCHAL_EXTINT14_NUM)
#define XCHAL_EXTINT14_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT14_NUM)
#define XCHAL_EXTINT15_MASK (1 << XCHAL_EXTINT15_NUM)
#define XCHAL_EXTINT15_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT15_NUM)
#define XCHAL_EXTINT16_MASK (1 << XCHAL_EXTINT16_NUM)
#define XCHAL_EXTINT16_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT16_NUM)
#define XCHAL_EXTINT17_MASK (1 << XCHAL_EXTINT17_NUM)
#define XCHAL_EXTINT17_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT17_NUM)
#define XCHAL_EXTINT18_MASK (1 << XCHAL_EXTINT18_NUM)
#define XCHAL_EXTINT18_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT18_NUM)
#define XCHAL_EXTINT19_MASK (1 << XCHAL_EXTINT19_NUM)
#define XCHAL_EXTINT19_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT19_NUM)
#define XCHAL_EXTINT20_MASK (1 << XCHAL_EXTINT20_NUM)
#define XCHAL_EXTINT20_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT20_NUM)
#define XCHAL_EXTINT21_MASK (1 << XCHAL_EXTINT21_NUM)
#define XCHAL_EXTINT21_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT21_NUM)
#define XCHAL_EXTINT22_MASK (1 << XCHAL_EXTINT22_NUM)
#define XCHAL_EXTINT22_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT22_NUM)
#define XCHAL_EXTINT23_MASK (1 << XCHAL_EXTINT23_NUM)
#define XCHAL_EXTINT23_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT23_NUM)
#define XCHAL_EXTINT24_MASK (1 << XCHAL_EXTINT24_NUM)
#define XCHAL_EXTINT24_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT24_NUM)
#define XCHAL_EXTINT25_MASK (1 << XCHAL_EXTINT25_NUM)
#define XCHAL_EXTINT25_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT25_NUM)
#define XCHAL_EXTINT26_MASK (1 << XCHAL_EXTINT26_NUM)
#define XCHAL_EXTINT26_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT26_NUM)
#define XCHAL_EXTINT27_MASK (1 << XCHAL_EXTINT27_NUM)
#define XCHAL_EXTINT27_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT27_NUM)
#define XCHAL_EXTINT28_MASK (1 << XCHAL_EXTINT28_NUM)
#define XCHAL_EXTINT28_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT28_NUM)
#define XCHAL_EXTINT29_MASK (1 << XCHAL_EXTINT29_NUM)
#define XCHAL_EXTINT29_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT29_NUM)
#define XCHAL_EXTINT30_MASK (1 << XCHAL_EXTINT30_NUM)
#define XCHAL_EXTINT30_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT30_NUM)
#define XCHAL_EXTINT31_MASK (1 << XCHAL_EXTINT31_NUM)
#define XCHAL_EXTINT31_LEVEL XCHAL_INT_LEVEL(XCHAL_EXTINT31_NUM)







# 492 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"

#define XCHAL_HAVE_OLD_EXC_ARCH XCHAL_HAVE_XEA1 
#define XCHAL_HAVE_EXCM XCHAL_HAVE_XEA2 

#define XCHAL_PROGRAMEXC_VECTOR_VADDR XCHAL_USER_VECTOR_VADDR
#define XCHAL_USEREXC_VECTOR_VADDR XCHAL_USER_VECTOR_VADDR


#define XCHAL_PROGRAMEXC_VECTOR_PADDR XCHAL_USER_VECTOR_PADDR
#define XCHAL_USEREXC_VECTOR_PADDR XCHAL_USER_VECTOR_PADDR


#define XCHAL_STACKEDEXC_VECTOR_VADDR XCHAL_KERNEL_VECTOR_VADDR
#define XCHAL_KERNELEXC_VECTOR_VADDR XCHAL_KERNEL_VECTOR_VADDR


#define XCHAL_STACKEDEXC_VECTOR_PADDR XCHAL_KERNEL_VECTOR_PADDR
#define XCHAL_KERNELEXC_VECTOR_PADDR XCHAL_KERNEL_VECTOR_PADDR
# 520 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"

#define _XCHAL_INTLEVEL_VECTOR_VADDR(n) XCHAL_INTLEVEL ## n ## _VECTOR_VADDR
#define XCHAL_INTLEVEL_VECTOR_VADDR(n) _XCHAL_INTLEVEL_VECTOR_VADDR(n) 


















# 533 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
#define XCHAL_EXCCAUSE_ILLEGAL_INSTRUCTION 0 
#define XCHAL_EXCCAUSE_SYSTEM_CALL 1 
#define XCHAL_EXCCAUSE_INSTRUCTION_FETCH_ERROR 2 
#define XCHAL_EXCCAUSE_LOAD_STORE_ERROR 3 
#define XCHAL_EXCCAUSE_LEVEL1_INTERRUPT 4 
#define XCHAL_EXCCAUSE_ALLOCA 5 
#define XCHAL_EXCCAUSE_INTEGER_DIVIDE_BY_ZERO 6 
#define XCHAL_EXCCAUSE_SPECULATION 7 
#define XCHAL_EXCCAUSE_PRIVILEGED 8 
#define XCHAL_EXCCAUSE_UNALIGNED 9 

#define XCHAL_EXCCAUSE_ITLB_MISS 16 
#define XCHAL_EXCCAUSE_ITLB_MULTIHIT 17 
#define XCHAL_EXCCAUSE_ITLB_PRIVILEGE 18 
#define XCHAL_EXCCAUSE_ITLB_SIZE_RESTRICTION 19 
#define XCHAL_EXCCAUSE_FETCH_CACHE_ATTRIBUTE 20 

#define XCHAL_EXCCAUSE_DTLB_MISS 24 
#define XCHAL_EXCCAUSE_DTLB_MULTIHIT 25 
#define XCHAL_EXCCAUSE_DTLB_PRIVILEGE 26 
#define XCHAL_EXCCAUSE_DTLB_SIZE_RESTRICTION 27 
#define XCHAL_EXCCAUSE_LOAD_CACHE_ATTRIBUTE 28 
#define XCHAL_EXCCAUSE_STORE_CACHE_ATTRIBUTE 29 

#define XCHAL_EXCCAUSE_COPROCESSOR0_DISABLED 32 
#define XCHAL_EXCCAUSE_COPROCESSOR1_DISABLED 33 
#define XCHAL_EXCCAUSE_COPROCESSOR2_DISABLED 34 
#define XCHAL_EXCCAUSE_COPROCESSOR3_DISABLED 35 
#define XCHAL_EXCCAUSE_COPROCESSOR4_DISABLED 36 
#define XCHAL_EXCCAUSE_COPROCESSOR5_DISABLED 37 
#define XCHAL_EXCCAUSE_COPROCESSOR6_DISABLED 38 
#define XCHAL_EXCCAUSE_COPROCESSOR7_DISABLED 39 






























# 583 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"

#define XCHAL_DBREAKC_VALIDMASK 0xC000003F
#define XCHAL_DBREAKC_MASK_BITS 6
#define XCHAL_DBREAKC_MASK_NUM 64
#define XCHAL_DBREAKC_MASK_SHIFT 0
#define XCHAL_DBREAKC_MASK_MASK 0x0000003F
#define XCHAL_DBREAKC_LOADBREAK_BITS 1
#define XCHAL_DBREAKC_LOADBREAK_NUM 2
#define XCHAL_DBREAKC_LOADBREAK_SHIFT 30
#define XCHAL_DBREAKC_LOADBREAK_MASK 0x40000000
#define XCHAL_DBREAKC_STOREBREAK_BITS 1
#define XCHAL_DBREAKC_STOREBREAK_NUM 2
#define XCHAL_DBREAKC_STOREBREAK_SHIFT 31
#define XCHAL_DBREAKC_STOREBREAK_MASK 0x80000000

#define XCHAL_PS_VALIDMASK 0x00070F3F
#define XCHAL_PS_INTLEVEL_BITS 4
#define XCHAL_PS_INTLEVEL_NUM 16
#define XCHAL_PS_INTLEVEL_SHIFT 0
#define XCHAL_PS_INTLEVEL_MASK 0x0000000F
#define XCHAL_PS_EXCM_BITS 1
#define XCHAL_PS_EXCM_NUM 2
#define XCHAL_PS_EXCM_SHIFT 4
#define XCHAL_PS_EXCM_MASK 0x00000010
#define XCHAL_PS_UM_BITS 1
#define XCHAL_PS_UM_NUM 2
#define XCHAL_PS_UM_SHIFT 5
#define XCHAL_PS_UM_MASK 0x00000020
#define XCHAL_PS_RING_BITS 2
#define XCHAL_PS_RING_NUM 4
#define XCHAL_PS_RING_SHIFT 6
#define XCHAL_PS_RING_MASK 0x000000C0
#define XCHAL_PS_OWB_BITS 4
#define XCHAL_PS_OWB_NUM 16
#define XCHAL_PS_OWB_SHIFT 8
#define XCHAL_PS_OWB_MASK 0x00000F00
#define XCHAL_PS_CALLINC_BITS 2
#define XCHAL_PS_CALLINC_NUM 4
#define XCHAL_PS_CALLINC_SHIFT 16
#define XCHAL_PS_CALLINC_MASK 0x00030000
#define XCHAL_PS_WOE_BITS 1
#define XCHAL_PS_WOE_NUM 2
#define XCHAL_PS_WOE_SHIFT 18
#define XCHAL_PS_WOE_MASK 0x00040000

#define XCHAL_EXCCAUSE_VALIDMASK 0x0000003F
#define XCHAL_EXCCAUSE_BITS 6
#define XCHAL_EXCCAUSE_NUM 64
#define XCHAL_EXCCAUSE_SHIFT 0
#define XCHAL_EXCCAUSE_MASK 0x0000003F

#define XCHAL_DEBUGCAUSE_VALIDMASK 0x0000003F
#define XCHAL_DEBUGCAUSE_ICOUNT_BITS 1
#define XCHAL_DEBUGCAUSE_ICOUNT_NUM 2
#define XCHAL_DEBUGCAUSE_ICOUNT_SHIFT 0
#define XCHAL_DEBUGCAUSE_ICOUNT_MASK 0x00000001
#define XCHAL_DEBUGCAUSE_IBREAK_BITS 1
#define XCHAL_DEBUGCAUSE_IBREAK_NUM 2
#define XCHAL_DEBUGCAUSE_IBREAK_SHIFT 1
#define XCHAL_DEBUGCAUSE_IBREAK_MASK 0x00000002
#define XCHAL_DEBUGCAUSE_DBREAK_BITS 1
#define XCHAL_DEBUGCAUSE_DBREAK_NUM 2
#define XCHAL_DEBUGCAUSE_DBREAK_SHIFT 2
#define XCHAL_DEBUGCAUSE_DBREAK_MASK 0x00000004
#define XCHAL_DEBUGCAUSE_BREAK_BITS 1
#define XCHAL_DEBUGCAUSE_BREAK_NUM 2
#define XCHAL_DEBUGCAUSE_BREAK_SHIFT 3
#define XCHAL_DEBUGCAUSE_BREAK_MASK 0x00000008
#define XCHAL_DEBUGCAUSE_BREAKN_BITS 1
#define XCHAL_DEBUGCAUSE_BREAKN_NUM 2
#define XCHAL_DEBUGCAUSE_BREAKN_SHIFT 4
#define XCHAL_DEBUGCAUSE_BREAKN_MASK 0x00000010
#define XCHAL_DEBUGCAUSE_DEBUGINT_BITS 1
#define XCHAL_DEBUGCAUSE_DEBUGINT_NUM 2
#define XCHAL_DEBUGCAUSE_DEBUGINT_SHIFT 5
#define XCHAL_DEBUGCAUSE_DEBUGINT_MASK 0x00000020









# 667 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"









# 675 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
#define XCHAL_NUM_IROM XCHAL_NUM_INSTROM 
#define XCHAL_NUM_IRAM XCHAL_NUM_INSTRAM 
#define XCHAL_NUM_DROM XCHAL_NUM_DATAROM 
#define XCHAL_NUM_DRAM XCHAL_NUM_DATARAM 

#define XCHAL_IROM0_VADDR XCHAL_INSTROM0_VADDR 
#define XCHAL_IROM0_PADDR XCHAL_INSTROM0_PADDR 
#define XCHAL_IROM0_SIZE XCHAL_INSTROM0_SIZE 
#define XCHAL_IROM1_VADDR XCHAL_INSTROM1_VADDR 
#define XCHAL_IROM1_PADDR XCHAL_INSTROM1_PADDR 
#define XCHAL_IROM1_SIZE XCHAL_INSTROM1_SIZE 
#define XCHAL_IRAM0_VADDR XCHAL_INSTRAM0_VADDR 
#define XCHAL_IRAM0_PADDR XCHAL_INSTRAM0_PADDR 
#define XCHAL_IRAM0_SIZE XCHAL_INSTRAM0_SIZE 
#define XCHAL_IRAM1_VADDR XCHAL_INSTRAM1_VADDR 
#define XCHAL_IRAM1_PADDR XCHAL_INSTRAM1_PADDR 
#define XCHAL_IRAM1_SIZE XCHAL_INSTRAM1_SIZE 
#define XCHAL_DROM0_VADDR XCHAL_DATAROM0_VADDR 
#define XCHAL_DROM0_PADDR XCHAL_DATAROM0_PADDR 
#define XCHAL_DROM0_SIZE XCHAL_DATAROM0_SIZE 
#define XCHAL_DROM1_VADDR XCHAL_DATAROM1_VADDR 
#define XCHAL_DROM1_PADDR XCHAL_DATAROM1_PADDR 
#define XCHAL_DROM1_SIZE XCHAL_DATAROM1_SIZE 
#define XCHAL_DRAM0_VADDR XCHAL_DATARAM0_VADDR 
#define XCHAL_DRAM0_PADDR XCHAL_DATARAM0_PADDR 
#define XCHAL_DRAM0_SIZE XCHAL_DATARAM0_SIZE 
#define XCHAL_DRAM1_VADDR XCHAL_DATARAM1_VADDR 
#define XCHAL_DRAM1_PADDR XCHAL_DATARAM1_PADDR 
#define XCHAL_DRAM1_SIZE XCHAL_DATARAM1_SIZE 









# 722 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
#define XCHAL_CACHE_PREFCTL_DEFAULT 0x01044 








#define XCHAL_CACHE_LINEWIDTH_MAX XCHAL_DCACHE_LINEWIDTH
#define XCHAL_CACHE_LINESIZE_MAX XCHAL_DCACHE_LINESIZE


#define XCHAL_ICACHE_SETSIZE (1<<XCHAL_ICACHE_SETWIDTH)
#define XCHAL_DCACHE_SETSIZE (1<<XCHAL_DCACHE_SETWIDTH)





#define XCHAL_CACHE_SETWIDTH_MAX XCHAL_DCACHE_SETWIDTH
#define XCHAL_CACHE_SETSIZE_MAX XCHAL_DCACHE_SETSIZE



#define XCHAL_ICACHE_TAG_V_SHIFT 0
#define XCHAL_ICACHE_TAG_V 0x1 




#define XCHAL_ICACHE_TAG_F_SHIFT 0
#define XCHAL_ICACHE_TAG_F 0 





#define XCHAL_ICACHE_TAG_L_SHIFT XCHAL_ICACHE_TAG_F_SHIFT
#define XCHAL_ICACHE_TAG_L 0 


#define XCHAL_DCACHE_TAG_V_SHIFT 0
#define XCHAL_DCACHE_TAG_V 0x1 




#define XCHAL_DCACHE_TAG_F_SHIFT 0
#define XCHAL_DCACHE_TAG_F 0 





#define XCHAL_DCACHE_TAG_D_SHIFT XCHAL_DCACHE_TAG_F_SHIFT
#define XCHAL_DCACHE_TAG_D 0 





#define XCHAL_DCACHE_TAG_L_SHIFT XCHAL_DCACHE_TAG_D_SHIFT
#define XCHAL_DCACHE_TAG_L 0 



#define XCHAL_USE_MEMCTL (((XCHAL_LOOP_BUFFER_SIZE > 0) || XCHAL_DCACHE_IS_COHERENT || XCHAL_HAVE_ICACHE_DYN_WAYS || XCHAL_HAVE_DCACHE_DYN_WAYS) && (XCHAL_HW_MIN_VERSION >= XTENSA_HWVERSION_RE_2012_0))










#define XCHAL_CACHE_MEMCTL_DEFAULT 0x00000000 





#define _MEMCTL_SNOOP_EN 0x00 





#define _MEMCTL_L0IBUF_EN 0x01 


#define XCHAL_SNOOP_LB_MEMCTL_DEFAULT (_MEMCTL_SNOOP_EN | _MEMCTL_L0IBUF_EN)







# 822 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"







# 827 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
 


#define _XCHAL_ITLB_SET(n,_what) XCHAL_ITLB_SET ## n ## _what
#define XCHAL_ITLB_SET(n,what) _XCHAL_ITLB_SET(n, _ ## what )
#define _XCHAL_ITLB_SET_E(n,i,_what) XCHAL_ITLB_SET ## n ## _E ## i ## _what
#define XCHAL_ITLB_SET_E(n,i,what) _XCHAL_ITLB_SET_E(n,i, _ ## what )
#define _XCHAL_DTLB_SET(n,_what) XCHAL_DTLB_SET ## n ## _what
#define XCHAL_DTLB_SET(n,what) _XCHAL_DTLB_SET(n, _ ## what )
#define _XCHAL_DTLB_SET_E(n,i,_what) XCHAL_DTLB_SET ## n ## _E ## i ## _what
#define XCHAL_DTLB_SET_E(n,i,what) _XCHAL_DTLB_SET_E(n,i, _ ## what )







# 843 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"

#define XCHAL_ITLB_ARF_ENTRIES (1<<XCHAL_ITLB_ARF_ENTRIES_LOG2)
#define XCHAL_DTLB_ARF_ENTRIES (1<<XCHAL_DTLB_ARF_ENTRIES_LOG2)


















# 883 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"





# 887 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"




#define XCHAL_ALIGN_MAX XCHAL_DATA_WIDTH











# 899 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
#define XCHAL_HW_RELEASE_MAJOR XCHAL_HW_VERSION_MAJOR
#define XCHAL_HW_RELEASE_MINOR XCHAL_HW_VERSION_MINOR
#define XCHAL_HW_RELEASE_NAME XCHAL_HW_VERSION_NAME









# 910 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
#define XCHAL_EXTRA_SA_SIZE XCHAL_NCP_SA_SIZE
#define XCHAL_EXTRA_SA_ALIGN XCHAL_NCP_SA_ALIGN
#define XCHAL_CPEXTRA_SA_SIZE XCHAL_TOTAL_SA_SIZE
#define XCHAL_CPEXTRA_SA_ALIGN XCHAL_TOTAL_SA_ALIGN
# 1202 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"







#define XCHAL_CP1_NAME 0
#define XCHAL_CP1_SA_CONTENTS_LIBDB_NUM 0
#define XCHAL_CP1_SA_CONTENTS_LIBDB 


#define XCHAL_CP2_NAME 0
#define XCHAL_CP2_SA_CONTENTS_LIBDB_NUM 0
#define XCHAL_CP2_SA_CONTENTS_LIBDB 


#define XCHAL_CP3_NAME 0
#define XCHAL_CP3_SA_CONTENTS_LIBDB_NUM 0
#define XCHAL_CP3_SA_CONTENTS_LIBDB 


#define XCHAL_CP4_NAME 0
#define XCHAL_CP4_SA_CONTENTS_LIBDB_NUM 0
#define XCHAL_CP4_SA_CONTENTS_LIBDB 


#define XCHAL_CP5_NAME 0
#define XCHAL_CP5_SA_CONTENTS_LIBDB_NUM 0
#define XCHAL_CP5_SA_CONTENTS_LIBDB 


#define XCHAL_CP6_NAME 0
#define XCHAL_CP6_SA_CONTENTS_LIBDB_NUM 0
#define XCHAL_CP6_SA_CONTENTS_LIBDB 


#define XCHAL_CP7_NAME 0
#define XCHAL_CP7_SA_CONTENTS_LIBDB_NUM 0
#define XCHAL_CP7_SA_CONTENTS_LIBDB 
# 1265 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"

#define _XCHAL_CP_SA_SIZE(n) XCHAL_CP ## n ## _SA_SIZE
#define XCHAL_CP_SA_SIZE(n) _XCHAL_CP_SA_SIZE(n) 
#define _XCHAL_CP_SA_ALIGN(n) XCHAL_CP ## n ## _SA_ALIGN
#define XCHAL_CP_SA_ALIGN(n) _XCHAL_CP_SA_ALIGN(n) 

#define XCHAL_CPEXTRA_SA_SIZE_TOR2 XCHAL_CPEXTRA_SA_SIZE 




#define _XCJOIN(a,b) a ## b
#define XCJOIN(a,b) _XCJOIN(a,b)

extern const unsigned char Xthal_cp_id_FPU;
extern const unsigned int Xthal_cp_mask_FPU;


extern const unsigned char Xthal_cp_id_XCHAL_CP1_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP1_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP2_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP2_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP3_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP3_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP4_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP4_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP5_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP5_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP6_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP6_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP7_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP7_IDENT;















#define XCHAL_INST_ILLN 0xF06D 
#define XCHAL_INST_ILLN_BYTE0 0x6D 
#define XCHAL_INST_ILLN_BYTE1 0xF0 


#define XTHAL_INST_ILL 0x000000 















# 1340 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
#define XCHAL_HW_RELEASE_AT_OR_BELOW(major,minor) (XTHAL_REL_LE( XCHAL_HW_VERSION_MAJOR,XCHAL_HW_VERSION_MINOR, major,minor ) ? 1 : 0)
#define XCHAL_HW_RELEASE_AT_OR_ABOVE(major,minor) (XTHAL_REL_GE( XCHAL_HW_VERSION_MAJOR,XCHAL_HW_VERSION_MINOR, major,minor ) ? 1 : 0)
#define XCHAL_HW_RELEASE_AT(major,minor) (XTHAL_REL_EQ( XCHAL_HW_VERSION_MAJOR,XCHAL_HW_VERSION_MINOR, major,minor ) ? 1 : 0)
#define XCHAL_HW_RELEASE_MAJOR_AT(major) ((XCHAL_HW_VERSION_MAJOR == (major)) ? 1 : 0)
# 1356 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"





# 1360 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"







# 1364 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
#define XCHAL_MAYHAVE_ERRATUM_XEA1KWIN (XCHAL_HAVE_XEA1 && (XCHAL_HW_RELEASE_AT_OR_BELOW(1040,2) != 0 || XCHAL_HW_RELEASE_AT(1050,0)))
















#define XCHAL_ERRATUM_453 0











# 1401 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
#define XCHAL_ERRATUM_497 0











# 1410 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"
#define XCHAL_ERRATUM_572 1
# 42 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_config.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h" 1





















# 13 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"







































# 36 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"
#define XTENSA_CONFIG_SYSTEM_H 










# 46 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"
#define XSHAL_USE_ABSOLUTE_LITERALS 0 
#define XSHAL_HAVE_TEXT_SECTION_LITERALS 1 

#define XSHAL_ABI XTHAL_ABI_WINDOWED 

#define XTHAL_ABI_WINDOWED 0
#define XTHAL_ABI_CALL0 1

 
 

#define XSHAL_CLIB XTHAL_CLIB_NEWLIB 

#define XTHAL_CLIB_NEWLIB 0
#define XTHAL_CLIB_UCLIBC 1
#define XTHAL_CLIB_XCLIB 2

 
 
 

#define XSHAL_USE_FLOATING_POINT 1

#define XSHAL_FLOATING_POINT_ABI 0








# 77 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"











# 84 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"

#define XSHAL_IOBLOCK_CACHED_VADDR 0x70000000
#define XSHAL_IOBLOCK_CACHED_PADDR 0x70000000
#define XSHAL_IOBLOCK_CACHED_SIZE 0x0E000000

#define XSHAL_IOBLOCK_BYPASS_VADDR 0x90000000
#define XSHAL_IOBLOCK_BYPASS_PADDR 0x90000000
#define XSHAL_IOBLOCK_BYPASS_SIZE 0x0E000000


#define XSHAL_ROM_VADDR 0x50000000
#define XSHAL_ROM_PADDR 0x50000000
#define XSHAL_ROM_SIZE 0x01000000

#define XSHAL_ROM_AVAIL_VADDR 0x50000000
#define XSHAL_ROM_AVAIL_VSIZE 0x01000000


#define XSHAL_RAM_VADDR 0x60000000
#define XSHAL_RAM_PADDR 0x60000000
#define XSHAL_RAM_VSIZE 0x20000000
#define XSHAL_RAM_PSIZE 0x20000000
#define XSHAL_RAM_SIZE XSHAL_RAM_PSIZE

#define XSHAL_RAM_AVAIL_VADDR 0x60000000
#define XSHAL_RAM_AVAIL_VSIZE 0x20000000


















# 120 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"
#define XSHAL_RAM_BYPASS_VADDR 0xA0000000
#define XSHAL_RAM_BYPASS_PADDR 0xA0000000
#define XSHAL_RAM_BYPASS_PSIZE 0x20000000






#define XSHAL_SIMIO_CACHED_VADDR 0xC0000000
#define XSHAL_SIMIO_BYPASS_VADDR 0xC0000000
#define XSHAL_SIMIO_PADDR 0xC0000000
#define XSHAL_SIMIO_SIZE 0x20000000







# 138 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"
#define XSHAL_MAGIC_EXIT 0x0












# 147 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"





# 151 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"









# 156 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"
#define XSHAL_CACHEATTR_BYPASS XSHAL_XT2000_CACHEATTR_BYPASS 
#define XSHAL_CACHEATTR_DEFAULT XSHAL_XT2000_CACHEATTR_DEFAULT 






# 163 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"




#define XSHAL_ALLVALID_CACHEATTR_WRITEBACK 0x22221112 
#define XSHAL_ALLVALID_CACHEATTR_WRITEALLOC 0x22221112 
#define XSHAL_ALLVALID_CACHEATTR_WRITETHRU 0x22221112 
#define XSHAL_ALLVALID_CACHEATTR_BYPASS 0x22222222 
#define XSHAL_ALLVALID_CACHEATTR_DEFAULT XSHAL_ALLVALID_CACHEATTR_WRITEBACK 


#define XSHAL_STRICT_CACHEATTR_WRITEBACK 0xFFFF111F 
#define XSHAL_STRICT_CACHEATTR_WRITEALLOC 0xFFFF111F 
#define XSHAL_STRICT_CACHEATTR_WRITETHRU 0xFFFF111F 
#define XSHAL_STRICT_CACHEATTR_BYPASS 0xFFFF222F 
#define XSHAL_STRICT_CACHEATTR_DEFAULT XSHAL_STRICT_CACHEATTR_WRITEBACK 






# 183 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"
#define XSHAL_TRAPNULL_CACHEATTR_WRITEBACK 0x2222111F 
#define XSHAL_TRAPNULL_CACHEATTR_WRITEALLOC 0x2222111F 
#define XSHAL_TRAPNULL_CACHEATTR_WRITETHRU 0x2222111F 
#define XSHAL_TRAPNULL_CACHEATTR_BYPASS 0x2222222F 
#define XSHAL_TRAPNULL_CACHEATTR_DEFAULT XSHAL_TRAPNULL_CACHEATTR_WRITEBACK 






# 193 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"

#define XSHAL_ISS_CACHEATTR_WRITEBACK XSHAL_TRAPNULL_CACHEATTR_WRITEBACK
#define XSHAL_ISS_CACHEATTR_WRITEALLOC XSHAL_TRAPNULL_CACHEATTR_WRITEALLOC
#define XSHAL_ISS_CACHEATTR_WRITETHRU XSHAL_TRAPNULL_CACHEATTR_WRITETHRU
#define XSHAL_ISS_CACHEATTR_BYPASS XSHAL_TRAPNULL_CACHEATTR_BYPASS
#define XSHAL_ISS_CACHEATTR_DEFAULT XSHAL_TRAPNULL_CACHEATTR_WRITEBACK

#define XSHAL_ISS_PIPE_REGIONS 0
#define XSHAL_ISS_SDRAM_REGIONS 0







# 208 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"







# 213 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"

#define XSHAL_XT2000_CACHEATTR_WRITEBACK 0xFF22111F 
#define XSHAL_XT2000_CACHEATTR_WRITEALLOC 0xFF22111F 
#define XSHAL_XT2000_CACHEATTR_WRITETHRU 0xFF22111F 
#define XSHAL_XT2000_CACHEATTR_BYPASS 0xFF22222F 
#define XSHAL_XT2000_CACHEATTR_DEFAULT XSHAL_XT2000_CACHEATTR_WRITEBACK 

#define XSHAL_XT2000_PIPE_REGIONS 0x00000000 
#define XSHAL_XT2000_SDRAM_REGIONS 0x00000440 







# 228 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"
#define XSHAL_VECTORS_PACKED 0
#define XSHAL_STATIC_VECTOR_SELECT 1
#define XSHAL_RESET_VECTOR_VADDR 0x40000400
#define XSHAL_RESET_VECTOR_PADDR 0x40000400


















# 242 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"
#define XSHAL_RESET_VECTOR_SIZE 0x00000300
#define XSHAL_RESET_VECTOR_ISROM 0
#define XSHAL_USER_VECTOR_SIZE 0x00000038
#define XSHAL_USER_VECTOR_ISROM 0
#define XSHAL_PROGRAMEXC_VECTOR_SIZE XSHAL_USER_VECTOR_SIZE 
#define XSHAL_USEREXC_VECTOR_SIZE XSHAL_USER_VECTOR_SIZE 
#define XSHAL_KERNEL_VECTOR_SIZE 0x00000038
#define XSHAL_KERNEL_VECTOR_ISROM 0
#define XSHAL_STACKEDEXC_VECTOR_SIZE XSHAL_KERNEL_VECTOR_SIZE 
#define XSHAL_KERNELEXC_VECTOR_SIZE XSHAL_KERNEL_VECTOR_SIZE 
#define XSHAL_DOUBLEEXC_VECTOR_SIZE 0x00000040
#define XSHAL_DOUBLEEXC_VECTOR_ISROM 0
#define XSHAL_WINDOW_VECTORS_SIZE 0x00000178
#define XSHAL_WINDOW_VECTORS_ISROM 0
#define XSHAL_INTLEVEL2_VECTOR_SIZE 0x00000038
#define XSHAL_INTLEVEL2_VECTOR_ISROM 0
#define XSHAL_INTLEVEL3_VECTOR_SIZE 0x00000038
#define XSHAL_INTLEVEL3_VECTOR_ISROM 0
#define XSHAL_INTLEVEL4_VECTOR_SIZE 0x00000038
#define XSHAL_INTLEVEL4_VECTOR_ISROM 0
#define XSHAL_INTLEVEL5_VECTOR_SIZE 0x00000038
#define XSHAL_INTLEVEL5_VECTOR_ISROM 0
#define XSHAL_INTLEVEL6_VECTOR_SIZE 0x00000038
#define XSHAL_INTLEVEL6_VECTOR_ISROM 0
#define XSHAL_DEBUG_VECTOR_SIZE XSHAL_INTLEVEL6_VECTOR_SIZE
#define XSHAL_DEBUG_VECTOR_ISROM XSHAL_INTLEVEL6_VECTOR_ISROM
#define XSHAL_NMI_VECTOR_SIZE 0x00000038
#define XSHAL_NMI_VECTOR_ISROM 0
#define XSHAL_INTLEVEL7_VECTOR_SIZE XSHAL_NMI_VECTOR_SIZE
# 43 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_config.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h" 1





































































# 38 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h"
#define XTENSA_CONTEXT_H 





# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/tie.h" 1









# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/tie.h"















































# 45 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/corebits.h" 1











# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/corebits.h"













































# 34 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/corebits.h"
#define XTENSA_COREBITS_H 


#define EXCCAUSE_EXCCAUSE_SHIFT 0
#define EXCCAUSE_EXCCAUSE_MASK 0x3F










# 45 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/corebits.h"
#define EXCCAUSE_ILLEGAL 0 
#define EXCCAUSE_SYSCALL 1 
#define EXCCAUSE_INSTR_ERROR 2 
#define EXCCAUSE_IFETCHERROR 2 
#define EXCCAUSE_LOAD_STORE_ERROR 3 
#define EXCCAUSE_LOADSTOREERROR 3 
#define EXCCAUSE_LEVEL1_INTERRUPT 4 
#define EXCCAUSE_LEVEL1INTERRUPT 4 
#define EXCCAUSE_ALLOCA 5 
#define EXCCAUSE_DIVIDE_BY_ZERO 6 
#define EXCCAUSE_SPECULATION 7 
#define EXCCAUSE_PRIVILEGED 8 
#define EXCCAUSE_UNALIGNED 9 

#define EXCCAUSE_INSTR_DATA_ERROR 12 
#define EXCCAUSE_LOAD_STORE_DATA_ERROR 13 
#define EXCCAUSE_INSTR_ADDR_ERROR 14 
#define EXCCAUSE_LOAD_STORE_ADDR_ERROR 15 
#define EXCCAUSE_ITLB_MISS 16 
#define EXCCAUSE_ITLB_MULTIHIT 17 
#define EXCCAUSE_INSTR_RING 18 
 
#define EXCCAUSE_INSTR_PROHIBITED 20 

#define EXCCAUSE_DTLB_MISS 24 
#define EXCCAUSE_DTLB_MULTIHIT 25 
#define EXCCAUSE_LOAD_STORE_RING 26 
 
#define EXCCAUSE_LOAD_PROHIBITED 28 
#define EXCCAUSE_STORE_PROHIBITED 29 

#define EXCCAUSE_CP_DISABLED(n) (32+(n)) 
#define EXCCAUSE_CP0_DISABLED 32 
#define EXCCAUSE_CP1_DISABLED 33 
#define EXCCAUSE_CP2_DISABLED 34 
#define EXCCAUSE_CP3_DISABLED 35 
#define EXCCAUSE_CP4_DISABLED 36 
#define EXCCAUSE_CP5_DISABLED 37 
#define EXCCAUSE_CP6_DISABLED 38 
#define EXCCAUSE_CP7_DISABLED 39 



#define PS_WOE_SHIFT 18
#define PS_WOE_MASK 0x00040000
#define PS_WOE PS_WOE_MASK
#define PS_CALLINC_SHIFT 16
#define PS_CALLINC_MASK 0x00030000
#define PS_CALLINC(n) (((n)&3)<<PS_CALLINC_SHIFT) 
#define PS_OWB_SHIFT 8
#define PS_OWB_MASK 0x00000F00
#define PS_OWB(n) (((n)&15)<<PS_OWB_SHIFT) 
#define PS_RING_SHIFT 6
#define PS_RING_MASK 0x000000C0
#define PS_RING(n) (((n)&3)<<PS_RING_SHIFT) 
#define PS_UM_SHIFT 5
#define PS_UM_MASK 0x00000020
#define PS_UM PS_UM_MASK
#define PS_EXCM_SHIFT 4
#define PS_EXCM_MASK 0x00000010
#define PS_EXCM PS_EXCM_MASK
#define PS_INTLEVEL_SHIFT 0
#define PS_INTLEVEL_MASK 0x0000000F
#define PS_INTLEVEL(n) ((n)&PS_INTLEVEL_MASK) 

#define PS_PROGSTACK_SHIFT PS_UM_SHIFT
#define PS_PROGSTACK_MASK PS_UM_MASK
#define PS_PROG_SHIFT PS_UM_SHIFT
#define PS_PROG_MASK PS_UM_MASK
#define PS_PROG PS_UM


#define DBREAKC_MASK_SHIFT 0
#define DBREAKC_MASK_MASK 0x0000003F
#define DBREAKC_LOADBREAK_SHIFT 30
#define DBREAKC_LOADBREAK_MASK 0x40000000
#define DBREAKC_STOREBREAK_SHIFT 31
#define DBREAKC_STOREBREAK_MASK 0x80000000


#define DEBUGCAUSE_DEBUGINT_SHIFT 5
#define DEBUGCAUSE_DEBUGINT_MASK 0x20 
#define DEBUGCAUSE_BREAKN_SHIFT 4
#define DEBUGCAUSE_BREAKN_MASK 0x10 
#define DEBUGCAUSE_BREAK_SHIFT 3
#define DEBUGCAUSE_BREAK_MASK 0x08 
#define DEBUGCAUSE_DBREAK_SHIFT 2
#define DEBUGCAUSE_DBREAK_MASK 0x04 
#define DEBUGCAUSE_IBREAK_SHIFT 1
#define DEBUGCAUSE_IBREAK_MASK 0x02 
#define DEBUGCAUSE_ICOUNT_SHIFT 0
#define DEBUGCAUSE_ICOUNT_MASK 0x01 


#define MESR_MEME 0x00000001 
#define MESR_MEME_SHIFT 0
#define MESR_DME 0x00000002 
#define MESR_DME_SHIFT 1
#define MESR_RCE 0x00000010 
#define MESR_RCE_SHIFT 4
#define MESR_LCE 
#define MESR_LCE_SHIFT ?
#define MESR_LCE_L 
#define MESR_ERRENAB 0x00000100
#define MESR_ERRENAB_SHIFT 8
#define MESR_ERRTEST 0x00000200
#define MESR_ERRTEST_SHIFT 9
#define MESR_DATEXC 0x00000400
#define MESR_DATEXC_SHIFT 10
#define MESR_INSEXC 0x00000800
#define MESR_INSEXC_SHIFT 11
#define MESR_WAYNUM_SHIFT 16
#define MESR_ACCTYPE_SHIFT 20
#define MESR_MEMTYPE_SHIFT 24
#define MESR_ERRTYPE_SHIFT 30


#define MEMCTL_SNOOP_EN_SHIFT 1
#define MEMCTL_SNOOP_EN 0x02 
#define MEMCTL_L0IBUF_EN_SHIFT 0
#define MEMCTL_L0IBUF_EN 0x01 
#define MEMCTL_INV_EN_SHIFT 23
#define MEMCTL_INV_EN 0x00800000 
#define MEMCTL_DCWU_SHIFT 8
#define MEMCTL_DCWU_BITS 5
#define MEMCTL_DCWA_SHIFT 13
#define MEMCTL_DCWA_BITS 5
#define MEMCTL_ICWU_SHIFT 18
#define MEMCTL_ICWU_BITS 5
#define MEMCTL_DCWU_MASK 0x00001F00 
#define MEMCTL_DCWA_MASK 0x0003E000 
#define MEMCTL_ICWU_MASK 0x007C0000 
#define MEMCTL_DCWU_CLR_MASK ~(MEMCTL_DCWU_MASK)
#define MEMCTL_DCWA_CLR_MASK ~(MEMCTL_DCWA_MASK)
#define MEMCTL_ICWU_CLR_MASK ~(MEMCTL_ICWU_MASK)
#define MEMCTL_DCW_CLR_MASK (MEMCTL_DCWU_CLR_MASK | MEMCTL_DCWA_CLR_MASK)
#define MEMCTL_IDCW_CLR_MASK (MEMCTL_DCW_CLR_MASK | MEMCTL_ICWU_CLR_MASK)
# 46 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h" 1





















# 13 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"







































# 47 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-frames.h" 1














































# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-frames.h"
#define _XTRUNTIME_FRAMES_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h" 1



















# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"











































# 31 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-frames.h" 2









#define STRUCT_BEGIN typedef struct {
#define STRUCT_FIELD(ctype,size,pre,name) ctype name;
#define STRUCT_AFIELD(ctype,size,pre,name,n) ctype name[n];
#define STRUCT_AFIELD_A(ctype,size,align,pre,name,n) ctype name[n] __attribute__((aligned(align)));
#define STRUCT_END(sname) } sname;


















# 56 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-frames.h"
typedef struct {
long pc; 
long ps;
long areg[4]; 
long sar; 

long lcount;
long lbeg;
long lend;


long acclo;
long acchi;
long mr[4];

} KernelFrame;













# 80 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-frames.h"
typedef struct {
long pc;
long ps;
long sar;
long vpri;



long a2;
long a3;
long a4;
long a5;
# 104 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-frames.h"
long exccause; 

long lcount;
long lbeg;
long lend;


long acclo;
long acchi;
long mr[4];





#define CALL0_ABI 0

#define ALIGNPAD ((3 + XCHAL_HAVE_LOOPS*1 + XCHAL_HAVE_MAC16*2 + CALL0_ABI*1) & 3)

long pad[((3 + 1 *1 + 1 *2 + 0*1) & 3)]; 

 
} UserFrame;
# 158 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-frames.h"
#define KERNELSTACKSIZE 1024
# 48 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h" 2



#define ALIGNUP(n,val) (((val) + (n)-1) & -(n))











# 61 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h"
#undef STRUCT_BEGIN
#undef STRUCT_FIELD
#undef STRUCT_AFIELD
#undef STRUCT_END
# 76 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h"
#define STRUCT_BEGIN typedef struct {
#define STRUCT_FIELD(ctype,size,asname,name) ctype name;
#define STRUCT_AFIELD(ctype,size,asname,name,n) ctype name[n];
#define STRUCT_END(sname) } sname;







































# 103 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h"
typedef struct {
long exit; 
long pc; 
long ps; 
long a0;
long a1; 
long a2;
long a3;
long a4;
long a5;
long a6;
long a7;
long a8;
long a9;
long a10;
long a11;
long a12;
long a13;
long a14;
long a15;
long sar;
long exccause;
long excvaddr;

long lbeg;
long lend;
long lcount;



long tmp0;
long tmp1;
long tmp2;
# 145 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h"
} XtExcFrame;




#define XT_STK_NEXT1 sizeof(XtExcFrame)






#define XT_STK_EXTRA ALIGNUP(XCHAL_EXTRA_SA_ALIGN, XT_STK_NEXT1)




#define XT_STK_NEXT2 (XT_STK_EXTRA + XCHAL_EXTRA_SA_SIZE)


















# 176 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h"
#define XT_STK_FRMSZ (ALIGNUP(0x10, XT_STK_NEXT2) + 0x20)













































# 202 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h"
typedef struct {
# 213 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h"
long exit;
long pc;
long ps;
long next;
long a0; 
long a1;
long a2;
long a3;

} XtSolFrame;


#define XT_SOL_FRMSZ ALIGNUP(0x10, XtSolFrameSize)



























































































































# 292 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h"

#define XT_CP0_SA 0
#define XT_CP1_SA ALIGNUP(XCHAL_CP1_SA_ALIGN, XT_CP0_SA + XCHAL_CP0_SA_SIZE)
#define XT_CP2_SA ALIGNUP(XCHAL_CP2_SA_ALIGN, XT_CP1_SA + XCHAL_CP1_SA_SIZE)
#define XT_CP3_SA ALIGNUP(XCHAL_CP3_SA_ALIGN, XT_CP2_SA + XCHAL_CP2_SA_SIZE)
#define XT_CP4_SA ALIGNUP(XCHAL_CP4_SA_ALIGN, XT_CP3_SA + XCHAL_CP3_SA_SIZE)
#define XT_CP5_SA ALIGNUP(XCHAL_CP5_SA_ALIGN, XT_CP4_SA + XCHAL_CP4_SA_SIZE)
#define XT_CP6_SA ALIGNUP(XCHAL_CP6_SA_ALIGN, XT_CP5_SA + XCHAL_CP5_SA_SIZE)
#define XT_CP7_SA ALIGNUP(XCHAL_CP7_SA_ALIGN, XT_CP6_SA + XCHAL_CP6_SA_SIZE)
#define XT_CP_SA_SIZE ALIGNUP(16, XT_CP7_SA + XCHAL_CP7_SA_SIZE)


#define XT_CPENABLE 0 
#define XT_CPSTORED 2 
#define XT_CP_CS_ST 4 
#define XT_CP_ASA 8 

#define XT_CP_SIZE (12 + XT_CP_SA_SIZE + XCHAL_TOTAL_SA_ALIGN)


















#define CORE_ID_PRO 0xCDCD
#define CORE_ID_APP 0xABAB
































# 45 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_config.h" 2

































































































# 96 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_config.h"








#define STK_INTEXC_EXTRA 0


#define XT_CLIB_CONTEXT_AREA_SIZE 0








#define XT_XTRA_SIZE (XT_STK_FRMSZ + STK_INTEXC_EXTRA + 0x20 + XT_CP_SIZE)

















# 130 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_config.h"
#define XT_USER_SIZE 0x400



#define XT_STACK_MIN_SIZE ((XT_XTRA_SIZE + XT_USER_SIZE) / sizeof(unsigned char))


#define XT_STACK_EXTRA (XT_XTRA_SIZE)
#define XT_STACK_EXTRA_CLIB (XT_XTRA_SIZE + XT_CLIB_CONTEXT_AREA_SIZE)



}
# 115 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h" 2




# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 1









# 120 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h" 1















#define _ROM_ETS_SYS_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc.h"















#define _ESP32_SOC_H_ 


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_assert.h" 1














#define __ESP_ASSERT_H__ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/assert.h" 1





extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1

















# 10 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/assert.h" 2

#undef assert




#define assert(__e) ((__e) ? (void)0 : __assert_func (__FILE__, __LINE__, __ASSERT_FUNC, #__e))



  

#define __ASSERT_FUNC __PRETTY_FUNCTION__

  
# 39 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/assert.h"
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;






}
# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_assert.h" 2










#define TRY_STATIC_ASSERT(CONDITION,MSG) do { if (__builtin_constant_p(CONDITION) && !(CONDITION)) { extern __attribute__((error(#MSG))) void failed_compile_time_assert(void); failed_compile_time_assert(); } assert(#MSG && (CONDITION)); } while(0)
# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc.h" 2



#define BIT31 0x80000000
#define BIT30 0x40000000
#define BIT29 0x20000000
#define BIT28 0x10000000
#define BIT27 0x08000000
#define BIT26 0x04000000
#define BIT25 0x02000000
#define BIT24 0x01000000
#define BIT23 0x00800000
#define BIT22 0x00400000
#define BIT21 0x00200000
#define BIT20 0x00100000
#define BIT19 0x00080000
#define BIT18 0x00040000
#define BIT17 0x00020000
#define BIT16 0x00010000
#define BIT15 0x00008000
#define BIT14 0x00004000
#define BIT13 0x00002000
#define BIT12 0x00001000
#define BIT11 0x00000800
#define BIT10 0x00000400
#define BIT9 0x00000200
#define BIT8 0x00000100
#define BIT7 0x00000080
#define BIT6 0x00000040
#define BIT5 0x00000020
#define BIT4 0x00000010
#define BIT3 0x00000008
#define BIT2 0x00000004
#define BIT1 0x00000002
#define BIT0 0x00000001


#define PRO_CPU_NUM (0)
#define APP_CPU_NUM (1)


#define SOC_IROM_LOW 0x400D0000
#define SOC_IROM_HIGH 0x40400000
#define SOC_DROM_LOW 0x3F400000
#define SOC_DROM_HIGH 0x3F800000
#define SOC_DRAM_LOW 0x3FAE0000
#define SOC_DRAM_HIGH 0x40000000
#define SOC_RTC_IRAM_LOW 0x400C0000
#define SOC_RTC_IRAM_HIGH 0x400C2000
#define SOC_RTC_DATA_LOW 0x50000000
#define SOC_RTC_DATA_HIGH 0x50002000
#define SOC_EXTRAM_DATA_LOW 0x3F800000
#define SOC_EXTRAM_DATA_HIGH 0x3FC00000

#define SOC_MAX_CONTIGUOUS_RAM_SIZE 0x400000 


#define DR_REG_DPORT_BASE 0x3ff00000
#define DR_REG_AES_BASE 0x3ff01000
#define DR_REG_RSA_BASE 0x3ff02000
#define DR_REG_SHA_BASE 0x3ff03000
#define DR_REG_FLASH_MMU_TABLE_PRO 0x3ff10000
#define DR_REG_FLASH_MMU_TABLE_APP 0x3ff12000
#define DR_REG_DPORT_END 0x3ff13FFC
#define DR_REG_UART_BASE 0x3ff40000
#define DR_REG_SPI1_BASE 0x3ff42000
#define DR_REG_SPI0_BASE 0x3ff43000
#define DR_REG_GPIO_BASE 0x3ff44000
#define DR_REG_GPIO_SD_BASE 0x3ff44f00
#define DR_REG_FE2_BASE 0x3ff45000
#define DR_REG_FE_BASE 0x3ff46000
#define DR_REG_FRC_TIMER_BASE 0x3ff47000
#define DR_REG_RTCCNTL_BASE 0x3ff48000
#define DR_REG_RTCIO_BASE 0x3ff48400
#define DR_REG_SENS_BASE 0x3ff48800
#define DR_REG_RTC_I2C_BASE 0x3ff48C00
#define DR_REG_IO_MUX_BASE 0x3ff49000
#define DR_REG_HINF_BASE 0x3ff4B000
#define DR_REG_UHCI1_BASE 0x3ff4C000
#define DR_REG_I2S_BASE 0x3ff4F000
#define DR_REG_UART1_BASE 0x3ff50000
#define DR_REG_BT_BASE 0x3ff51000
#define DR_REG_I2C_EXT_BASE 0x3ff53000
#define DR_REG_UHCI0_BASE 0x3ff54000
#define DR_REG_SLCHOST_BASE 0x3ff55000
#define DR_REG_RMT_BASE 0x3ff56000
#define DR_REG_PCNT_BASE 0x3ff57000
#define DR_REG_SLC_BASE 0x3ff58000
#define DR_REG_LEDC_BASE 0x3ff59000
#define DR_REG_EFUSE_BASE 0x3ff5A000
#define DR_REG_SPI_ENCRYPT_BASE 0x3ff5B000
#define DR_REG_NRX_BASE 0x3ff5CC00
#define DR_REG_BB_BASE 0x3ff5D000
#define DR_REG_PWM_BASE 0x3ff5E000
#define DR_REG_TIMERGROUP0_BASE 0x3ff5F000
#define DR_REG_TIMERGROUP1_BASE 0x3ff60000
#define DR_REG_RTCMEM0_BASE 0x3ff61000
#define DR_REG_RTCMEM1_BASE 0x3ff62000
#define DR_REG_RTCMEM2_BASE 0x3ff63000
#define DR_REG_SPI2_BASE 0x3ff64000
#define DR_REG_SPI3_BASE 0x3ff65000
#define DR_REG_SYSCON_BASE 0x3ff66000
#define DR_REG_APB_CTRL_BASE 0x3ff66000 
#define DR_REG_I2C1_EXT_BASE 0x3ff67000
#define DR_REG_SDMMC_BASE 0x3ff68000
#define DR_REG_EMAC_BASE 0x3ff69000
#define DR_REG_CAN_BASE 0x3ff6B000
#define DR_REG_PWM1_BASE 0x3ff6C000
#define DR_REG_I2S1_BASE 0x3ff6D000
#define DR_REG_UART2_BASE 0x3ff6E000
#define DR_REG_PWM2_BASE 0x3ff6F000
#define DR_REG_PWM3_BASE 0x3ff70000
#define PERIPHS_SPI_ENCRYPT_BASEADDR DR_REG_SPI_ENCRYPT_BASE


#define ETS_UNCACHED_ADDR(addr) (addr)
#define ETS_CACHED_ADDR(addr) (addr)


#define BIT(nr) (1UL << (nr))
#define BIT64(nr) (1ULL << (nr))






#define IS_DPORT_REG(_r) (((_r) >= DR_REG_DPORT_BASE) && (_r) <= DR_REG_DPORT_END)


#define ASSERT_IF_DPORT_REG(_r,OP) TRY_STATIC_ASSERT(!IS_DPORT_REG(_r), (Cannot use OP for DPORT registers use DPORT_ ##OP));





#define REG_WRITE(_r,_v) ({ ASSERT_IF_DPORT_REG((_r), REG_WRITE); (*(volatile uint32_t *)(_r)) = (_v); })





#define REG_READ(_r) ({ ASSERT_IF_DPORT_REG((_r), REG_READ); (*(volatile uint32_t *)(_r)); })





#define REG_GET_BIT(_r,_b) ({ ASSERT_IF_DPORT_REG((_r), REG_GET_BIT); (*(volatile uint32_t*)(_r) & (_b)); })





#define REG_SET_BIT(_r,_b) ({ ASSERT_IF_DPORT_REG((_r), REG_SET_BIT); (*(volatile uint32_t*)(_r) |= (_b)); })





#define REG_CLR_BIT(_r,_b) ({ ASSERT_IF_DPORT_REG((_r), REG_CLR_BIT); (*(volatile uint32_t*)(_r) &= ~(_b)); })





#define REG_SET_BITS(_r,_b,_m) ({ ASSERT_IF_DPORT_REG((_r), REG_SET_BITS); (*(volatile uint32_t*)(_r) = (*(volatile uint32_t*)(_r) & ~(_m)) | ((_b) & (_m))); })





#define REG_GET_FIELD(_r,_f) ({ ASSERT_IF_DPORT_REG((_r), REG_GET_FIELD); ((REG_READ(_r) >> (_f ##_S)) & (_f ##_V)); })





#define REG_SET_FIELD(_r,_f,_v) ({ ASSERT_IF_DPORT_REG((_r), REG_SET_FIELD); (REG_WRITE((_r),((REG_READ(_r) & ~((_f ##_V) << (_f ##_S)))|(((_v) & (_f ##_V))<<(_f ##_S))))); })





#define VALUE_GET_FIELD(_r,_f) (((_r) >> (_f ##_S)) & (_f))


#define VALUE_GET_FIELD2(_r,_f) (((_r) & (_f))>> (_f ##_S))


#define VALUE_SET_FIELD(_r,_f,_v) ((_r)=(((_r) & ~((_f) << (_f ##_S)))|((_v)<<(_f ##_S))))


#define VALUE_SET_FIELD2(_r,_f,_v) ((_r)=(((_r) & ~(_f))|((_v)<<(_f ##_S))))


#define FIELD_TO_VALUE(_f,_v) (((_v)&(_f))<<_f ##_S)


#define FIELD_TO_VALUE2(_f,_v) (((_v)<<_f ##_S) & (_f))


#define READ_PERI_REG(addr) ({ ASSERT_IF_DPORT_REG((addr), READ_PERI_REG); (*((volatile uint32_t *)ETS_UNCACHED_ADDR(addr))); })





#define WRITE_PERI_REG(addr,val) ({ ASSERT_IF_DPORT_REG((addr), WRITE_PERI_REG); (*((volatile uint32_t *)ETS_UNCACHED_ADDR(addr))) = (uint32_t)(val); })





#define CLEAR_PERI_REG_MASK(reg,mask) ({ ASSERT_IF_DPORT_REG((reg), CLEAR_PERI_REG_MASK); WRITE_PERI_REG((reg), (READ_PERI_REG(reg)&(~(mask)))); })





#define SET_PERI_REG_MASK(reg,mask) ({ ASSERT_IF_DPORT_REG((reg), SET_PERI_REG_MASK); WRITE_PERI_REG((reg), (READ_PERI_REG(reg)|(mask))); })





#define GET_PERI_REG_MASK(reg,mask) ({ ASSERT_IF_DPORT_REG((reg), GET_PERI_REG_MASK); (READ_PERI_REG(reg) & (mask)); })





#define GET_PERI_REG_BITS(reg,hipos,lowpos) ({ ASSERT_IF_DPORT_REG((reg), GET_PERI_REG_BITS); ((READ_PERI_REG(reg)>>(lowpos))&((1<<((hipos)-(lowpos)+1))-1)); })





#define SET_PERI_REG_BITS(reg,bit_map,value,shift) ({ ASSERT_IF_DPORT_REG((reg), SET_PERI_REG_BITS); (WRITE_PERI_REG((reg),(READ_PERI_REG(reg)&(~((bit_map)<<(shift))))|(((value) & bit_map)<<(shift)) )); })





#define GET_PERI_REG_BITS2(reg,mask,shift) ({ ASSERT_IF_DPORT_REG((reg), GET_PERI_REG_BITS2); ((READ_PERI_REG(reg)>>(shift))&(mask)); })








#define APB_CLK_FREQ_ROM ( 26*1000000 )
#define CPU_CLK_FREQ_ROM APB_CLK_FREQ_ROM
#define CPU_CLK_FREQ APB_CLK_FREQ
#define APB_CLK_FREQ ( 80*1000000 ) 
#define REF_CLK_FREQ ( 1000000 )
#define UART_CLK_FREQ APB_CLK_FREQ
#define WDT_CLK_FREQ APB_CLK_FREQ
#define TIMER_CLK_FREQ (80000000>>4) 
#define SPI_CLK_DIV 4
#define TICKS_PER_US_ROM 26 



#define SOC_DROM_LOW 0x3F400000
#define SOC_DROM_HIGH 0x3F800000
#define SOC_IROM_LOW 0x400D0000
#define SOC_IROM_HIGH 0x40400000
#define SOC_IROM_MASK_LOW 0x40000000
#define SOC_IROM_MASK_HIGH 0x40070000
#define SOC_CACHE_PRO_LOW 0x40070000
#define SOC_CACHE_PRO_HIGH 0x40078000
#define SOC_CACHE_APP_LOW 0x40078000
#define SOC_CACHE_APP_HIGH 0x40080000
#define SOC_IRAM_LOW 0x40080000
#define SOC_IRAM_HIGH 0x400A0000
#define SOC_RTC_IRAM_LOW 0x400C0000
#define SOC_RTC_IRAM_HIGH 0x400C2000
#define SOC_RTC_DRAM_LOW 0x3FF80000
#define SOC_RTC_DRAM_HIGH 0x3FF82000
#define SOC_RTC_DATA_LOW 0x50000000
#define SOC_RTC_DATA_HIGH 0x50002000


#define SOC_DIRAM_IRAM_LOW 0x400A0000
#define SOC_DIRAM_IRAM_HIGH 0x400BFFFC
#define SOC_DIRAM_DRAM_LOW 0x3FFE0000
#define SOC_DIRAM_DRAM_HIGH 0x3FFFFFFC


#define SOC_DMA_LOW 0x3FFAE000
#define SOC_DMA_HIGH 0x40000000


#define SOC_BYTE_ACCESSIBLE_LOW 0x3FF90000
#define SOC_BYTE_ACCESSIBLE_HIGH 0x40000000



#define SOC_MEM_INTERNAL_LOW 0x3FF90000
#define SOC_MEM_INTERNAL_HIGH 0x400C2000



#define ETS_WIFI_MAC_INTR_SOURCE 0
#define ETS_WIFI_MAC_NMI_SOURCE 1
#define ETS_WIFI_BB_INTR_SOURCE 2
#define ETS_BT_MAC_INTR_SOURCE 3
#define ETS_BT_BB_INTR_SOURCE 4
#define ETS_BT_BB_NMI_SOURCE 5
#define ETS_RWBT_INTR_SOURCE 6
#define ETS_RWBLE_INTR_SOURCE 7
#define ETS_RWBT_NMI_SOURCE 8
#define ETS_RWBLE_NMI_SOURCE 9
#define ETS_SLC0_INTR_SOURCE 10
#define ETS_SLC1_INTR_SOURCE 11
#define ETS_UHCI0_INTR_SOURCE 12
#define ETS_UHCI1_INTR_SOURCE 13
#define ETS_TG0_T0_LEVEL_INTR_SOURCE 14
#define ETS_TG0_T1_LEVEL_INTR_SOURCE 15
#define ETS_TG0_WDT_LEVEL_INTR_SOURCE 16
#define ETS_TG0_LACT_LEVEL_INTR_SOURCE 17
#define ETS_TG1_T0_LEVEL_INTR_SOURCE 18
#define ETS_TG1_T1_LEVEL_INTR_SOURCE 19
#define ETS_TG1_WDT_LEVEL_INTR_SOURCE 20
#define ETS_TG1_LACT_LEVEL_INTR_SOURCE 21
#define ETS_GPIO_INTR_SOURCE 22
#define ETS_GPIO_NMI_SOURCE 23
#define ETS_FROM_CPU_INTR0_SOURCE 24 
#define ETS_FROM_CPU_INTR1_SOURCE 25 
#define ETS_FROM_CPU_INTR2_SOURCE 26 
#define ETS_FROM_CPU_INTR3_SOURCE 27 
#define ETS_SPI0_INTR_SOURCE 28
#define ETS_SPI1_INTR_SOURCE 29
#define ETS_SPI2_INTR_SOURCE 30
#define ETS_SPI3_INTR_SOURCE 31
#define ETS_I2S0_INTR_SOURCE 32
#define ETS_I2S1_INTR_SOURCE 33
#define ETS_UART0_INTR_SOURCE 34
#define ETS_UART1_INTR_SOURCE 35
#define ETS_UART2_INTR_SOURCE 36
#define ETS_SDIO_HOST_INTR_SOURCE 37
#define ETS_ETH_MAC_INTR_SOURCE 38
#define ETS_PWM0_INTR_SOURCE 39
#define ETS_PWM1_INTR_SOURCE 40
#define ETS_PWM2_INTR_SOURCE 41
#define ETS_PWM3_INTR_SOURCE 42
#define ETS_LEDC_INTR_SOURCE 43
#define ETS_EFUSE_INTR_SOURCE 44
#define ETS_CAN_INTR_SOURCE 45
#define ETS_RTC_CORE_INTR_SOURCE 46
#define ETS_RMT_INTR_SOURCE 47
#define ETS_PCNT_INTR_SOURCE 48
#define ETS_I2C_EXT0_INTR_SOURCE 49
#define ETS_I2C_EXT1_INTR_SOURCE 50
#define ETS_RSA_INTR_SOURCE 51
#define ETS_SPI1_DMA_INTR_SOURCE 52
#define ETS_SPI2_DMA_INTR_SOURCE 53
#define ETS_SPI3_DMA_INTR_SOURCE 54
#define ETS_WDT_INTR_SOURCE 55
#define ETS_TIMER1_INTR_SOURCE 56
#define ETS_TIMER2_INTR_SOURCE 57
#define ETS_TG0_T0_EDGE_INTR_SOURCE 58
#define ETS_TG0_T1_EDGE_INTR_SOURCE 59
#define ETS_TG0_WDT_EDGE_INTR_SOURCE 60
#define ETS_TG0_LACT_EDGE_INTR_SOURCE 61
#define ETS_TG1_T0_EDGE_INTR_SOURCE 62
#define ETS_TG1_T1_EDGE_INTR_SOURCE 63
#define ETS_TG1_WDT_EDGE_INTR_SOURCE 64
#define ETS_TG1_LACT_EDGE_INTR_SOURCE 65
#define ETS_MMU_IA_INTR_SOURCE 66
#define ETS_MPU_IA_INTR_SOURCE 67
#define ETS_CACHE_IA_INTR_SOURCE 68









































































# 435 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc.h"

#define ETS_WMAC_INUM 0
#define ETS_BT_HOST_INUM 1
#define ETS_WBB_INUM 4
#define ETS_TG0_T1_INUM 10 
#define ETS_FRC1_INUM 22
#define ETS_T1_WDT_INUM 24
#define ETS_CACHEERR_INUM 25
#define ETS_DPORT_INUM 28


#define ETS_SLC_INUM 1
#define ETS_UART0_INUM 5
#define ETS_UART1_INUM 5



#define ETS_INVALID_INUM 6
# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h" 2


extern "C" {







# 31 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





# 35 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"



















# 46 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





# 50 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





# 54 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
typedef enum {
    ETS_OK = 0, 
    ETS_FAILED = 1 
} ETS_STATUS;

typedef uint32_t ETSSignal;
typedef uint32_t ETSParam;

typedef struct ETSEventTag ETSEvent; 

struct ETSEventTag {
    ETSSignal sig; 
    ETSParam par; 
};

typedef void (*ETSTask)(ETSEvent *e); 
typedef void (* ets_idle_cb_t)(void *arg); 














# 79 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_run(void);


















# 90 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_set_idle_cb(ets_idle_cb_t func, void *arg);


























# 105 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_task(ETSTask task, uint8_t prio, ETSEvent *queue, uint8_t qlen);
























# 119 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
ETS_STATUS ets_post(uint8_t prio, ETSSignal sig, ETSParam par);






# 125 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





# 129 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





# 133 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
extern const char *const exc_cause_table[40]; 
















# 143 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_set_user_start(uint32_t start);
















# 153 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_set_startup_callback(uint32_t callback);
















# 163 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_set_appcpu_boot_addr(uint32_t start);




























# 179 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
ETS_STATUS ets_unpack_flash_code_legacy(uint32_t pos, uint32_t *entry_addr, bool jump, bool config);
































# 197 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
ETS_STATUS ets_unpack_flash_code(uint32_t pos, uint32_t *entry_addr, bool jump, bool sb_need_check, bool config);






# 203 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





# 207 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





# 211 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





















# 222 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
int ets_printf(const char *fmt, ...);
















# 232 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_write_char_uart(char c);
















# 242 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_install_putc1(void (*p)(char c));
















# 252 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_install_putc2(void (*p)(char c));
















# 262 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_install_uart_printf(void);

#define ETS_PRINTF(...) ets_printf(...)

#define ETS_ASSERT(v) do { if (!(v)) { ets_printf("%s %u \n", __FILE__, __LINE__); while (1) {}; } } while (0);











# 277 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





# 281 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





# 284 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
typedef void ETSTimerFunc(void *timer_arg);

typedef struct _ETSTIMER_ {
    struct _ETSTIMER_ *timer_next; 
    uint32_t timer_expire; 
    uint32_t timer_period; 
    ETSTimerFunc *timer_func; 
    void *timer_arg; 
} ETSTimer;
















# 302 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_timer_init(void);














# 311 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_timer_deinit(void);
























# 325 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_timer_arm(ETSTimer *timer, uint32_t tmout, bool repeat);
























# 339 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_timer_arm_us(ETSTimer *ptimer, uint32_t us, bool repeat);
















# 349 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_timer_disarm(ETSTimer *timer);
























# 363 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_timer_setfn(ETSTimer *ptimer, ETSTimerFunc *pfunction, void *parg);
















# 373 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_timer_done(ETSTimer *ptimer);
















# 383 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_delay_us(uint32_t us);
















# 393 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_update_cpu_frequency(uint32_t ticks_per_us);




















# 405 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_update_cpu_frequency_rom(uint32_t ticks_per_us);
















# 415 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
uint32_t ets_get_cpu_frequency(void);














# 424 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
uint32_t ets_get_xtal_scale(void);






















# 437 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
uint32_t ets_get_detected_xtal_freq(void);






# 443 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





# 447 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





# 451 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
typedef void (* ets_isr_t)(void *);


























# 466 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_isr_attach(int i, ets_isr_t func, void *arg);


















# 477 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_isr_mask(uint32_t mask);


















# 488 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_isr_unmask(uint32_t unmask);


















# 499 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_intr_lock(void);


















# 510 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_intr_unlock(void);


















# 521 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void ets_waiti0(void);
































# 539 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"
void intr_matrix_set(int cpu_no, uint32_t model_num, uint32_t intr_num);

#define _ETSTR(v) #v
#define _ETS_SET_INTLEVEL(intlevel) ({ unsigned __tmp; __asm__ __volatile__( "rsil   %0, " _ETSTR(intlevel) "\n" : "=a" (__tmp) : : "memory" ); })
# 618 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h"





#define MAC2STR(a) (a)[0], (a)[1], (a)[2], (a)[3], (a)[4], (a)[5]
#define MACSTR "%02x:%02x:%02x:%02x:%02x:%02x"


#define ETS_MEM_BAR() asm volatile ( "" : : : "memory" )

typedef enum {
    OK = 0,
    FAIL,
    PENDING,
    BUSY,
    CANCEL,
} STATUS;






}
# 121 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h" 2
# 130 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h"
#define configASSERT(a) if (!(a)) { ets_printf("%s:%d (%s)- assert failed!\n", __FILE__, __LINE__, __FUNCTION__); abort(); }
# 140 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h"
#define UNTESTED_FUNCTION() 































# 161 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h"
#define configUSE_PREEMPTION 1
#define configUSE_IDLE_HOOK 1
#define configUSE_TICK_HOOK 1

#define configTICK_RATE_HZ ( CONFIG_FREERTOS_HZ )








#define configMAX_PRIORITIES ( 25 )



#define configMINIMAL_STACK_SIZE 768






#define configIDLE_TASK_STACK_SIZE CONFIG_FREERTOS_IDLE_TASK_STACKSIZE





#define configISR_STACK_SIZE CONFIG_FREERTOS_ISR_STACKSIZE








#define configAPPLICATION_ALLOCATED_HEAP 1
#define configTOTAL_HEAP_SIZE (&_heap_end - &_heap_start)

#define configMAX_TASK_NAME_LEN ( CONFIG_FREERTOS_MAX_TASK_NAME_LEN )
# 221 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h"
#define configUSE_TRACE_FACILITY_2 0 
#define configBENCHMARK 0 
#define configUSE_16_BIT_TICKS 0
#define configIDLE_SHOULD_YIELD 0
#define configQUEUE_REGISTRY_SIZE CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE

#define configUSE_MUTEXES 1
#define configUSE_RECURSIVE_MUTEXES 1
#define configUSE_COUNTING_SEMAPHORES 1






#define configCHECK_FOR_STACK_OVERFLOW 2






#define configUSE_CO_ROUTINES 0
#define configMAX_CO_ROUTINE_PRIORITIES ( 2 )




#define INCLUDE_vTaskPrioritySet 1
#define INCLUDE_uxTaskPriorityGet 1
#define INCLUDE_vTaskDelete 1
#define INCLUDE_vTaskCleanUpResources 0
#define INCLUDE_vTaskSuspend 1
#define INCLUDE_vTaskDelayUntil 1
#define INCLUDE_vTaskDelay 1
#define INCLUDE_uxTaskGetStackHighWaterMark 1
#define INCLUDE_pcTaskGetTaskName 1
#define INCLUDE_xTaskGetIdleTaskHandle 1
#define INCLUDE_pxTaskGetStackStart 1

#define INCLUDE_xSemaphoreGetMutexHolder 1




# 265 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h"
#define configKERNEL_INTERRUPT_PRIORITY 1






# 270 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h"
#define configMAX_SYSCALL_INTERRUPT_PRIORITY XCHAL_EXCM_LEVEL

#define configUSE_NEWLIB_REENTRANT 1

#define configSUPPORT_DYNAMIC_ALLOCATION 1
#define configSUPPORT_STATIC_ALLOCATION CONFIG_SUPPORT_STATIC_ALLOCATION
# 284 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h"


#define configUSE_TIMERS 1
#define configTIMER_TASK_PRIORITY CONFIG_TIMER_TASK_PRIORITY
#define configTIMER_QUEUE_LENGTH CONFIG_TIMER_QUEUE_LENGTH
#define configTIMER_TASK_STACK_DEPTH CONFIG_TIMER_TASK_STACK_DEPTH

#define INCLUDE_xTimerPendFunctionCall 1
#define INCLUDE_eTaskGetState 1
#define configUSE_QUEUE_SETS 1

#define configUSE_TICKLESS_IDLE CONFIG_FREERTOS_USE_TICKLESS_IDLE




#define configXT_BOARD 1 
#define configXT_SIMULATOR 0





#define configENABLE_TASK_SNAPSHOT 1
# 100 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h" 2


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/projdefs.h" 1







































































































































# 71 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/projdefs.h"
#define PROJDEFS_H 








# 77 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/projdefs.h"
typedef void (*TaskFunction_t)( void * );


#define pdMS_TO_TICKS(xTimeInMs) ( ( ( TickType_t ) ( xTimeInMs ) * configTICK_RATE_HZ ) / ( TickType_t ) 1000 )

#define pdFALSE ( ( BaseType_t ) 0 )
#define pdTRUE ( ( BaseType_t ) 1 )

#define pdPASS ( pdTRUE )
#define pdFAIL ( pdFALSE )
#define errQUEUE_EMPTY ( ( BaseType_t ) 0 )
#define errQUEUE_FULL ( ( BaseType_t ) 0 )


#define errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ( -1 )
#define errQUEUE_BLOCKED ( -4 )
#define errQUEUE_YIELD ( -5 )



#define configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES 0





#define pdINTEGRITY_CHECK_VALUE 0x5a5a5a5aUL
# 103 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h" 2


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h" 1







































































































































# 70 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"





#define PORTABLE_H 




















# 87 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/deprecated_definitions.h" 1







































































































































# 71 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/deprecated_definitions.h"
#define DEPRECATED_DEFINITIONS_H 

















# 88 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h" 1















#define _SOC_CPU_H 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4


























# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/corebits.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/corebits.h"











# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/corebits.h"













































# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h" 1



















# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"











































# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h" 2



#define RSR(reg,curval) asm volatile ("rsr %0, " #reg : "=r" (curval));
#define WSR(reg,newval) asm volatile ("wsr %0, " #reg : : "r" (newval));
#define XSR(reg,swapval) asm volatile ("xsr %0, " #reg : "+r" (swapval));






# 33 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h"
static inline void *get_sp()
{
    void *sp;
    asm volatile ("mov %0, sp;" : "=r" (sp));
    return sp;
}






# 44 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h"
static inline void cpu_write_dtlb(uint32_t vpn, unsigned attr)
{
    asm volatile ("wdtlb  %1, %0; dsync\n" :: "r" (vpn), "r" (attr));
}


static inline void cpu_write_itlb(unsigned vpn, unsigned attr)
{
    asm volatile ("witlb  %1, %0; isync\n" :: "r" (vpn), "r" (attr));
}

static inline void cpu_init_memctl()
{

    uint32_t memctl = 0x00000000 ;
    asm volatile ("wsr %0, " "MEMCTL" : : "r" (memctl));;

}




















# 74 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h"
static inline void cpu_configure_region_protection()
{
    const uint32_t pages_to_protect[] = {0x00000000, 0x80000000, 0xa0000000, 0xc0000000, 0xe0000000};
    for (int i = 0; i < sizeof(pages_to_protect)/sizeof(pages_to_protect[0]); ++i) {
        cpu_write_dtlb(pages_to_protect[i], 0xf);
        cpu_write_itlb(pages_to_protect[i], 0xf);
    }
    cpu_write_dtlb(0x20000000, 0);
    cpu_write_itlb(0x20000000, 0);
}








# 89 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h"
void esp_cpu_stall(int cpu_id);








# 95 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h"
void esp_cpu_unstall(int cpu_id);








# 101 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h"
void esp_cpu_reset(int cpu_id);















# 111 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/cpu.h"
bool esp_cpu_in_ocd_debug_mode();
# 90 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h" 2








# 96 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 1































































































































# 67 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
#define PORTMACRO_H 


extern "C" {




# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 76 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h" 1









































































# 78 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h" 1



















# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"











































# 79 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h" 1





















# 13 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/system.h"







































# 80 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime.h" 1















































# 27 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime.h"
#define XTRUNTIME_H 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h" 1



















# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"











































# 30 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/specreg.h" 1





# 5 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/specreg.h"









































# 29 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/specreg.h"
#define XTENSA_SPECREG_H 


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/corebits.h" 1











# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/corebits.h"













































# 33 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/specreg.h" 2



#define LBEG 0
#define LEND 1
#define LCOUNT 2
#define SAR 3
#define BR 4
#define SCOMPARE1 12
#define ACCLO 16
#define ACCHI 17
#define MR_0 32
#define MR_1 33
#define MR_2 34
#define MR_3 35
#define WINDOWBASE 72
#define WINDOWSTART 73
#define IBREAKENABLE 96
#define MEMCTL 97
#define ATOMCTL 99
#define DDR 104
#define IBREAKA_0 128
#define IBREAKA_1 129
#define DBREAKA_0 144
#define DBREAKA_1 145
#define DBREAKC_0 160
#define DBREAKC_1 161
#define EPC_1 177
#define EPC_2 178
#define EPC_3 179
#define EPC_4 180
#define EPC_5 181
#define EPC_6 182
#define EPC_7 183
#define DEPC 192
#define EPS_2 194
#define EPS_3 195
#define EPS_4 196
#define EPS_5 197
#define EPS_6 198
#define EPS_7 199
#define EXCSAVE_1 209
#define EXCSAVE_2 210
#define EXCSAVE_3 211
#define EXCSAVE_4 212
#define EXCSAVE_5 213
#define EXCSAVE_6 214
#define EXCSAVE_7 215
#define CPENABLE 224
#define INTERRUPT 226
#define INTENABLE 228
#define PS 230
#define VECBASE 231
#define EXCCAUSE 232
#define DEBUGCAUSE 233
#define CCOUNT 234
#define PRID 235
#define ICOUNT 236
#define ICOUNTLEVEL 237
#define EXCVADDR 238
#define CCOMPARE_0 240
#define CCOMPARE_1 241
#define CCOMPARE_2 242
#define MISC_REG_0 244
#define MISC_REG_1 245
#define MISC_REG_2 246
#define MISC_REG_3 247


#define MR 32
#define IBREAKA 128
#define DBREAKA 144
#define DBREAKC 160
#define EPC 176
#define EPS 192
#define EXCSAVE 208
#define CCOMPARE 240


#define INTREAD 226
#define INTSET 226
#define INTCLEAR 227
# 31 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h" 1














































# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h"
#define _XTOS_CORE_STATE_H_ 


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-frames.h" 1














































# 32 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h" 1



















# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/core.h"











































# 33 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/tie.h" 1









# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/config/tie.h"















































# 34 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h" 2



#define CORE_STATE_SIGNATURE 0xB1C5AFED 







# 44 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h"
typedef struct {
long signature; 
long restore_label;
long aftersave_label;
long areg[64 ];

long caller_regs[16]; 
long caller_regs_saved; 





long windowbase;
long windowstart;

long sar;

long epc1;
long ps;
long excsave1;

long depc;



long epc[6 


# 70 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h"
 + 1  - 1];
long eps[6 


# 71 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h"
 + 1  - 1];
long excsave[6 


# 72 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h"
 + 1  - 1];


long lcount;
long lbeg;
long lend;





long vecbase;


long atomctl;





long memctl;


long ccount;
long ccompare[3 ];


long intenable;
long interrupt;


long icount;
long icountlevel;
long debugcause;


long dbreakc[2 ];
long dbreaka[2 ];


long ibreaka[2 ];
long ibreakenable;



long misc[4 ];
# 128 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h"



long cpenable;




long tlbs[8*2];
# 159 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h"






# 163 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h"
char ncp[48] __attribute__((aligned(4 )));

char cp0[72 ] __attribute__((aligned(4 )));
char cp1[0] __attribute__((aligned(1)));
char cp2[0] __attribute__((aligned(1)));
char cp3[0] __attribute__((aligned(1)));
char cp4[0] __attribute__((aligned(1)));
char cp5[0] __attribute__((aligned(1)));
char cp6[0] __attribute__((aligned(1)));
char cp7[0] __attribute__((aligned(1)));










} XtosCoreState;


























# 32 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime.h" 2


#define _XTSTR(x) #x
#define XTSTR(x) _XTSTR(x)



#define XTOS_KEEPON_MEM 0x00000100 
#define XTOS_KEEPON_MEM_SHIFT 8
#define XTOS_KEEPON_DEBUG 0x00001000 
#define XTOS_KEEPON_DEBUG_SHIFT 12

#define XTOS_COREF_PSO 0x00000001 
#define XTOS_COREF_PSO_SHIFT 0

#define _xtos_set_execption_handler _xtos_set_exception_handler 
#define _xtos_set_saved_intenable _xtos_ints_on 
#define _xtos_clear_saved_intenable _xtos_ints_off 




extern "C" {




typedef void (_xtos_handler_func)(...);



typedef _xtos_handler_func *_xtos_handler;




















# 81 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime.h"










# 87 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime.h"
#define XTOS_SET_INTLEVEL(intlevel) ({ unsigned __tmp; __asm__ __volatile__( "rsil	%0, " XTSTR(intlevel) "\n" : "=a" (__tmp) : : "memory" ); __tmp;})



#define XTOS_SET_MIN_INTLEVEL(intlevel) ({ unsigned __tmp, __tmp2, __tmp3; __asm__ __volatile__( "rsr	%0, " XTSTR(PS) "\n"  "movi	%2, " XTSTR(intlevel) "\n" "extui	%1, %0, 0, 4\n"  "blt	%2, %1, 1f\n" "rsil	%0, " XTSTR(intlevel) "\n" "1:\n" : "=a" (__tmp), "=&a" (__tmp2), "=&a" (__tmp3) : : "memory" ); __tmp;})
# 100 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime.h"
#define XTOS_RESTORE_INTLEVEL(restoreval) do{ unsigned __tmp = (restoreval); __asm__ __volatile__( "wsr	%0, " XTSTR(PS) " ; rsync\n" : : "a" (__tmp) : "memory" ); }while(0)



#define XTOS_RESTORE_JUST_INTLEVEL(restoreval) _xtos_set_intlevel(restoreval)
# 115 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime.h"



































# 133 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime.h"

#define XTOS_ENABLE_INTERRUPTS XTOS_SET_INTLEVEL(0)

#define XTOS_DISABLE_LOWPRI_INTERRUPTS XTOS_SET_INTLEVEL(XCHAL_NUM_LOWPRI_LEVELS)
#define XTOS_MASK_LOWPRI_INTERRUPTS XTOS_SET_MIN_INTLEVEL(XCHAL_NUM_LOWPRI_LEVELS)

#define XTOS_DISABLE_EXCM_INTERRUPTS XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL)
#define XTOS_MASK_EXCM_INTERRUPTS XTOS_SET_MIN_INTLEVEL(XCHAL_EXCM_LEVEL)








# 148 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/xtruntime.h"
#define XTOS_DISABLE_ALL_INTERRUPTS XTOS_SET_INTLEVEL(15)


extern unsigned int _xtos_ints_off( unsigned int mask );
extern unsigned int _xtos_ints_on( unsigned int mask );
extern unsigned _xtos_set_intlevel( int intlevel );
extern unsigned _xtos_set_min_intlevel( int intlevel );
extern unsigned _xtos_restore_intlevel( unsigned restoreval );
extern unsigned _xtos_restore_just_intlevel( unsigned restoreval );
extern _xtos_handler _xtos_set_interrupt_handler( int n, _xtos_handler f );
extern _xtos_handler _xtos_set_interrupt_handler_arg( int n, _xtos_handler f, void *arg );
extern _xtos_handler _xtos_set_exception_handler( int n, _xtos_handler f );

extern void _xtos_memep_initrams( void );
extern void _xtos_memep_enable( int flags );



extern void _xtos_dispatch_level1_interrupts( void );


extern void _xtos_dispatch_level2_interrupts( void );


extern void _xtos_dispatch_level3_interrupts( void );


extern void _xtos_dispatch_level4_interrupts( void );


extern void _xtos_dispatch_level5_interrupts( void );


extern void _xtos_dispatch_level6_interrupts( void );



extern unsigned int _xtos_read_ints( void ); 
extern void _xtos_clear_ints( unsigned int mask ); 



extern int _xtos_core_shutoff(unsigned flags);
extern int _xtos_core_save(unsigned flags, XtosCoreState *savearea, void *code);
extern void _xtos_core_restore(unsigned retvalue, XtosCoreState *savearea);









extern void _xtos_timer_0_delta( int cycles );


extern void _xtos_timer_1_delta( int cycles );


extern void _xtos_timer_2_delta( int cycles );






}
# 81 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_crosscore_int.h" 1














#define __ESP_CROSSCORE_INT_H 



















# 27 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_crosscore_int.h"
void esp_crosscore_int_init();





















# 40 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_crosscore_int.h"
void esp_crosscore_int_send_yield(int core_id);



















# 52 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_crosscore_int.h"
void esp_crosscore_int_send_freq_switch(int core_id);
# 82 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h" 1














       
















































# 42 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 43 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h" 1



































# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"









# 44 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_err.h" 1













       

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 17 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_err.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h" 1



































# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"









# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_err.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/assert.h" 1





extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1

















# 10 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/assert.h" 2

#undef assert




#define assert(__e) ((__e) ? (void)0 : __assert_func (__FILE__, __LINE__, __ASSERT_FUNC, #__e))
# 39 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/assert.h"
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;






}
# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_err.h" 2


extern "C" {


typedef int32_t esp_err_t;


#define ESP_OK 0 
#define ESP_FAIL -1 

#define ESP_ERR_NO_MEM 0x101 
#define ESP_ERR_INVALID_ARG 0x102 
#define ESP_ERR_INVALID_STATE 0x103 
#define ESP_ERR_INVALID_SIZE 0x104 
#define ESP_ERR_NOT_FOUND 0x105 
#define ESP_ERR_NOT_SUPPORTED 0x106 
#define ESP_ERR_TIMEOUT 0x107 
#define ESP_ERR_INVALID_RESPONSE 0x108 
#define ESP_ERR_INVALID_CRC 0x109 
#define ESP_ERR_INVALID_VERSION 0x10A 
#define ESP_ERR_INVALID_MAC 0x10B 

#define ESP_ERR_WIFI_BASE 0x3000 
#define ESP_ERR_MESH_BASE 0x4000 


























# 58 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_err.h"
const char *esp_err_to_name(esp_err_t code);
































# 76 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_err.h"
const char *esp_err_to_name_r(esp_err_t code, char *buf, size_t buflen);


void _esp_error_check_failed(esp_err_t rc, const char *file, int line, const char *function, const char *expression) __attribute__((noreturn));


void _esp_error_check_failed_without_abort(esp_err_t rc, const char *file, int line, const char *function, const char *expression);
# 94 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_err.h"






















#define ESP_ERROR_CHECK(x) do { esp_err_t __err_rc = (x); if (__err_rc != ESP_OK) { _esp_error_check_failed(__err_rc, __FILE__, __LINE__, __ASSERT_FUNC, #x); } } while(0);
# 125 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_err.h"











#define ESP_ERROR_CHECK_WITHOUT_ABORT(x) ({ esp_err_t __err_rc = (x); if (__err_rc != ESP_OK) { _esp_error_check_failed_without_abort(__err_rc, __FILE__, __LINE__, __ASSERT_FUNC, #x); } __err_rc; })
# 147 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_err.h"
}
# 45 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h" 2


extern "C" {







# 53 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
typedef struct esp_timer* esp_timer_handle_t;








# 59 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
typedef void (*esp_timer_cb_t)(void* arg);







# 65 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
typedef enum {
    ESP_TIMER_TASK, 

    










# 74 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
} esp_timer_dispatch_t;






# 79 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
typedef struct {
    esp_timer_cb_t callback; 
    void* arg; 
    esp_timer_dispatch_t dispatch_method; 
    const char* name; 
} esp_timer_create_args_t;
























# 98 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
esp_err_t esp_timer_init();


















# 109 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
esp_err_t esp_timer_deinit();
































# 127 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
esp_err_t esp_timer_create(const esp_timer_create_args_t* create_args,
                           esp_timer_handle_t* out_handle);
























# 142 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
esp_err_t esp_timer_start_once(esp_timer_handle_t timer, uint64_t timeout_us);


























# 157 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
esp_err_t esp_timer_start_periodic(esp_timer_handle_t timer, uint64_t period);






















# 170 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
esp_err_t esp_timer_stop(esp_timer_handle_t timer);






















# 183 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
esp_err_t esp_timer_delete(esp_timer_handle_t timer);










# 190 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
int64_t esp_timer_get_time();










# 197 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
int64_t esp_timer_get_next_alarm();
























































# 227 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_timer.h"
esp_err_t esp_timer_dump(FILE* stream);



}
# 83 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h" 1













       

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 17 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 1









# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h" 1













       
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 16 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 1









# 17 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h" 2


# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"









# 26 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
extern "C" {



typedef struct multi_heap_info *multi_heap_handle_t;


















# 41 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
void *multi_heap_malloc(multi_heap_handle_t heap, size_t size);














# 50 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
void multi_heap_free(multi_heap_handle_t heap, void *p);




















# 62 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
void *multi_heap_realloc(multi_heap_handle_t heap, void *p, size_t size);

















# 73 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
size_t multi_heap_get_allocated_size(multi_heap_handle_t heap, void *p);























# 87 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
multi_heap_handle_t multi_heap_register(void *start, size_t size);























# 101 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
void multi_heap_set_lock(multi_heap_handle_t heap, void* lock);












# 109 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
void multi_heap_dump(multi_heap_handle_t heap);




















# 121 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
bool multi_heap_check(multi_heap_handle_t heap, bool print_errors);
























# 135 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
size_t multi_heap_free_size(multi_heap_handle_t heap);




















# 147 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
size_t multi_heap_minimum_free_size(multi_heap_handle_t heap);


typedef struct {
    size_t total_free_bytes; 
    size_t total_allocated_bytes; 
    size_t largest_free_block; 
    size_t minimum_free_bytes; 
    size_t allocated_blocks; 
    size_t free_blocks; 
    size_t total_blocks; 
} multi_heap_info_t;














# 167 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/multi_heap.h"
void multi_heap_get_info(multi_heap_handle_t heap, multi_heap_info_t *info);


}
# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h" 2


extern "C" {







# 27 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
#define MALLOC_CAP_EXEC (1<<0) 
#define MALLOC_CAP_32BIT (1<<1) 
#define MALLOC_CAP_8BIT (1<<2) 
#define MALLOC_CAP_DMA (1<<3) 
#define MALLOC_CAP_PID2 (1<<4) 
#define MALLOC_CAP_PID3 (1<<5) 
#define MALLOC_CAP_PID4 (1<<6) 
#define MALLOC_CAP_PID5 (1<<7) 
#define MALLOC_CAP_PID6 (1<<8) 
#define MALLOC_CAP_PID7 (1<<9) 
#define MALLOC_CAP_SPIRAM (1<<10) 
#define MALLOC_CAP_INTERNAL (1<<11) 
#define MALLOC_CAP_DEFAULT (1<<12) 
#define MALLOC_CAP_INVALID (1<<31) 


























# 55 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void *heap_caps_malloc(size_t size, uint32_t caps);



















# 67 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void heap_caps_free( void *ptr);


































# 86 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void *heap_caps_realloc( void *ptr, size_t size, int caps);




























# 102 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void *heap_caps_calloc(size_t n, size_t size, uint32_t caps);




























# 118 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
size_t heap_caps_get_free_size( uint32_t caps );































# 136 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
size_t heap_caps_get_minimum_free_size( uint32_t caps );




















# 148 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
size_t heap_caps_get_largest_free_block( uint32_t caps );



























# 164 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void heap_caps_get_info( multi_heap_info_t *info, uint32_t caps );





















# 177 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void heap_caps_print_heap_info( uint32_t caps );
























# 191 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
bool heap_caps_check_integrity_all(bool print_errors);
































# 209 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
bool heap_caps_check_integrity(uint32_t caps, bool print_errors);










































# 232 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
bool heap_caps_check_integrity_addr(intptr_t addr, bool print_errors);






















# 245 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void heap_caps_malloc_extmem_enable(size_t limit);


























# 260 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void *heap_caps_malloc_prefer( size_t size, size_t num, ... );


















# 271 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void *heap_caps_realloc_prefer( void *ptr, size_t size, size_t num, ... );


















# 282 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void *heap_caps_calloc_prefer( size_t n, size_t size, size_t num, ... );


































# 301 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void heap_caps_dump(uint32_t caps);
















# 311 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/heap/esp_heap_caps.h"
void heap_caps_dump_all();


}
# 86 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h" 1













       
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 1









# 16 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 17 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc.h"













# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h" 1











# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h"
#define CONFIG_GATTC_ENABLE 1
#define CONFIG_ESP32_PHY_MAX_TX_POWER 20
#define CONFIG_TRACEMEM_RESERVE_DRAM 0x0
#define CONFIG_FREERTOS_MAX_TASK_NAME_LEN 16
#define CONFIG_MQTT_TRANSPORT_SSL 1
#define CONFIG_BLE_SMP_ENABLE 1
#define CONFIG_SPIRAM_TYPE_AUTO 1
#define CONFIG_STACK_CHECK 1
#define CONFIG_MB_SERIAL_TASK_PRIO 10
#define CONFIG_MQTT_PROTOCOL_311 1
#define CONFIG_TCP_RECVMBOX_SIZE 6
#define CONFIG_LWIP_ETHARP_TRUST_IP_MAC 1
#define CONFIG_BLE_SCAN_DUPLICATE 1
#define CONFIG_STACK_CHECK_NORM 1
#define CONFIG_TCP_WND_DEFAULT 5744
#define CONFIG_PARTITION_TABLE_OFFSET 0x8000
#define CONFIG_SW_COEXIST_ENABLE 1
#define CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE 3
#define CONFIG_SPIFFS_USE_MAGIC_LENGTH 1
#define CONFIG_ESPTOOLPY_FLASHSIZE_4MB 1
#define CONFIG_IPC_TASK_STACK_SIZE 1024
#define CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES 16
#define CONFIG_FATFS_PER_FILE_CACHE 1
#define CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY 1
#define CONFIG_ESPTOOLPY_FLASHFREQ "40m"
#define CONFIG_LWIP_TCP_RTO_TIME 3000
#define CONFIG_SCCB_HARDWARE_I2C_PORT1 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA 1
#define CONFIG_UDP_RECVMBOX_SIZE 6
#define CONFIG_APP_RETRIEVE_LEN_ELF_SHA 16
#define CONFIG_ARDUHAL_PARTITION_SCHEME_DEFAULT 1
#define CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE 0
#define CONFIG_MBEDTLS_AES_C 1
#define CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED 1
#define CONFIG_A2DP_SINK_TASK_STACK_SIZE 2048
#define CONFIG_ESP32_WIFI_SOFTAP_BEACON_MAX_LEN 752
#define CONFIG_MBEDTLS_GCM_C 1
#define CONFIG_ESPTOOLPY_FLASHSIZE "4MB"
#define CONFIG_SPIFFS_CACHE_WR 1
#define CONFIG_SPIRAM_CACHE_WORKAROUND 1
#define CONFIG_BROWNOUT_DET_LVL_SEL_0 1
#define CONFIG_D0WD_PSRAM_CS_IO 16
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER 1
#define CONFIG_EMAC_L2_TO_L3_RX_BUF_MODE 1
#define CONFIG_BTDM_CONTROLLER_MODEM_SLEEP 1
#define CONFIG_SPIFFS_CACHE 1
#define CONFIG_INT_WDT 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN 3
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1 1
#define CONFIG_BT_STACK_NO_LOG 1
#define CONFIG_ESP_GRATUITOUS_ARP 1
#define CONFIG_MBEDTLS_ECDSA_C 1
#define CONFIG_ESPTOOLPY_FLASHFREQ_40M 1
#define CONFIG_HTTPD_MAX_REQ_HDR_LEN 512
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE 0
#define CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS 1
#define CONFIG_MBEDTLS_ECDH_C 1
#define CONFIG_SPIRAM_USE_CAPS_ALLOC 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE 1
#define CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM 16
#define CONFIG_MBEDTLS_SSL_ALPN 1
#define CONFIG_MBEDTLS_PEM_WRITE_C 1
#define CONFIG_BT_SPP_ENABLED 1
#define CONFIG_BT_RESERVE_DRAM 0xdb5c
#define CONFIG_APP_COMPILE_TIME_DATE 1
#define CONFIG_CXX_EXCEPTIONS 1
#define CONFIG_D2WD_PSRAM_CLK_IO 9
#define CONFIG_FATFS_FS_LOCK 0
#define CONFIG_IP_LOST_TIMER_INTERVAL 120
#define CONFIG_SPIFFS_META_LENGTH 4
#define CONFIG_ESP32_PANIC_PRINT_REBOOT 1
#define CONFIG_MB_CONTROLLER_NOTIFY_QUEUE_SIZE 20
#define CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED 1
#define CONFIG_CAMERA_CORE1 1
#define CONFIG_ESP32_DPORT_DIS_INTERRUPT_LVL 5
#define CONFIG_MB_SERIAL_BUF_SIZE 256
#define CONFIG_CONSOLE_UART_BAUDRATE 115200
#define CONFIG_SPIRAM_SUPPORT 1
#define CONFIG_MFN56_1X 1
#define CONFIG_LWIP_MAX_SOCKETS 10
#define CONFIG_LWIP_NETIF_LOOPBACK 1
#define CONFIG_LWIP_TCP_ISN_HOOK 1
#define CONFIG_ESP32_PTHREAD_TASK_NAME_DEFAULT "pthread"
#define CONFIG_EMAC_TASK_PRIORITY 20
#define CONFIG_TIMER_TASK_STACK_DEPTH 2048
#define CONFIG_TCP_MSS 1436
#define CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED 1
#define CONFIG_BTDM_CONTROLLER_MODE_BTDM 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN_EFF 3
#define CONFIG_EFUSE_CODE_SCHEME_COMPAT_3_4 1
#define CONFIG_TCPIP_TASK_AFFINITY_CPU0 1
#define CONFIG_FATFS_CODEPAGE 850
#define CONFIG_SPIRAM_SPIWP_SD3_PIN 7
#define CONFIG_ULP_COPROC_RESERVE_MEM 512
#define CONFIG_LWIP_MAX_UDP_PCBS 16
#define CONFIG_ESPTOOLPY_BAUD 921600
#define CONFIG_INT_WDT_CHECK_CPU1 1
#define CONFIG_ADC_CAL_LUT_ENABLE 1
#define CONFIG_FLASHMODE_DIO 1
#define CONFIG_LWIP_ESP_LWIP_ASSERT 1
#define CONFIG_ESPTOOLPY_AFTER_RESET 1
#define CONFIG_OPTIMIZATION_ASSERTIONS_ENABLED 1
#define CONFIG_LWIP_DHCPS_MAX_STATION_NUM 8
#define CONFIG_TOOLPREFIX "xtensa-esp32-elf-"
#define CONFIG_MBEDTLS_ECP_C 1
#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024
#define CONFIG_MBEDTLS_RC4_DISABLED 1
#define CONFIG_FATFS_LFN_STACK 1
#define CONFIG_BTDM_CONTROLLER_FULL_SCAN_SUPPORTED 1
#define CONFIG_CONSOLE_UART_NUM 0
#define CONFIG_ARDUINO_EVENT_RUNNING_CORE 1
#define CONFIG_ESP32_APPTRACE_LOCK_ENABLE 1
#define CONFIG_PTHREAD_STACK_MIN 768
#define CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC 1
#define CONFIG_TCP_OVERSIZE_MSS 1
#define CONFIG_FOUR_UNIVERSAL_MAC_ADDRESS 1
#define CONFIG_CONSOLE_UART_DEFAULT 1
#define CONFIG_A2DP_SOURCE_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN 16384
#define CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS 4
#define CONFIG_ESPTOOLPY_FLASHSIZE_DETECT 1
#define CONFIG_AUTOSTART_ARDUINO 1
#define CONFIG_ARDUINO_RUNNING_CORE 1
#define CONFIG_ESP32_ECO3_CACHE_LOCK_FIX 1
#define CONFIG_PPP_CHAP_SUPPORT 1
#define CONFIG_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_TIMER_TASK_STACK_SIZE 4096
#define CONFIG_ESP32_ENABLE_COREDUMP_TO_NONE 1
#define CONFIG_SPIRAM_BANKSWITCH_ENABLE 1
#define CONFIG_MBEDTLS_X509_CRL_PARSE_C 1
#define CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER 1
#define CONFIG_HTTPD_PURGE_BUF_LEN 32
#define CONFIG_SCAN_DUPLICATE_BY_DEVICE_ADDR 1
#define CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER 1
#define CONFIG_MB_SERIAL_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_PSK_MODES 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_AUTO 1
#define CONFIG_LWIP_DHCPS_LEASE_UNIT 60
#define CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION 1
#define CONFIG_EFUSE_MAX_BLK_LEN 192
#define CONFIG_SPIFFS_USE_MAGIC 1
#define CONFIG_OV7725_SUPPORT 1
#define CONFIG_TCPIP_TASK_STACK_SIZE 2560
#define CONFIG_BLUEDROID_PINNED_TO_CORE_0 1
#define CONFIG_FATFS_CODEPAGE_850 1
#define CONFIG_TASK_WDT 1
#define CONFIG_MTMN_LITE_QUANT 1
#define CONFIG_MAIN_TASK_STACK_SIZE 4096
#define CONFIG_SPIFFS_PAGE_CHECK 1
#define CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_0 1
#define CONFIG_LWIP_MAX_ACTIVE_TCP 16
#define CONFIG_TASK_WDT_TIMEOUT_S 5
#define CONFIG_INT_WDT_TIMEOUT_MS 300
#define CONFIG_ARDUINO_EVENT_RUN_CORE1 1
#define CONFIG_ESPTOOLPY_FLASHMODE "dio"
#define CONFIG_BTC_TASK_STACK_SIZE 8192
#define CONFIG_BLUEDROID_ENABLED 1
#define CONFIG_NEWLIB_STDIN_LINE_ENDING_CR 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA 1
#define CONFIG_ESPTOOLPY_BEFORE "default_reset"
#define CONFIG_ADC2_DISABLE_DAC 1
#define CONFIG_HFP_ENABLE 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_NUM 100
#define CONFIG_ESP32_REV_MIN_0 1
#define CONFIG_LOG_DEFAULT_LEVEL 1
#define CONFIG_TIMER_QUEUE_LENGTH 10
#define CONFIG_ARDUINO_LOOP_STACK_SIZE 8192
#define CONFIG_ESP32_REV_MIN 0
#define CONFIG_SUPPRESS_SELECT_DEBUG_OUTPUT 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_MODE 0
#define CONFIG_OV5640_SUPPORT 1
#define CONFIG_MAKE_WARN_UNDEFINED_VARIABLES 1
#define CONFIG_FATFS_TIMEOUT_MS 10000
#define CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM 32
#define CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS 1
#define CONFIG_MBEDTLS_CCM_C 1
#define CONFIG_SPI_MASTER_ISR_IN_IRAM 1
#define CONFIG_ARDUHAL_PARTITION_SCHEME "default"
#define CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER 20
#define CONFIG_ESP32_RTC_CLK_CAL_CYCLES 1024
#define CONFIG_ESP32_WIFI_TX_BA_WIN 6
#define CONFIG_ESP32_WIFI_NVS_ENABLED 1
#define CONFIG_MDNS_MAX_SERVICES 10
#define CONFIG_ULP_COPROC_ENABLED 1
#define CONFIG_HFP_AUDIO_DATA_PATH_PCM 1
#define CONFIG_IDF_TARGET_ESP32 1
#define CONFIG_EMAC_CHECK_LINK_PERIOD_MS 2000
#define CONFIG_BTDM_LPCLK_SEL_MAIN_XTAL 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED 1
#define CONFIG_LWIP_SNTP_UPDATE_DELAY 3600000
#define CONFIG_LIBSODIUM_USE_MBEDTLS_SHA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK 1
#define CONFIG_DMA_RX_BUF_NUM 10
#define CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_PSK 1
#define CONFIG_TCP_SYNMAXRTX 6
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF 0
#define CONFIG_HEAP_POISONING_LIGHT 1
#define CONFIG_PYTHON "python"
#define CONFIG_SPIRAM_BANKSWITCH_RESERVE 8
#define CONFIG_MBEDTLS_ECP_NIST_OPTIM 1
#define CONFIG_ESP32_TIME_SYSCALL_USE_RTC_FRC1 1
#define CONFIG_ESPTOOLPY_COMPRESSED 1
#define CONFIG_PARTITION_TABLE_FILENAME "partitions_singleapp.csv"
#define CONFIG_MB_CONTROLLER_STACK_SIZE 4096
#define CONFIG_TCP_SND_BUF_DEFAULT 5744
#define CONFIG_GARP_TMR_INTERVAL 60
#define CONFIG_LWIP_DHCP_MAX_NTP_SERVERS 1
#define CONFIG_TCP_MSL 60000
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_1 1
#define CONFIG_LWIP_SO_REUSE_RXTOALL 1
#define CONFIG_MB_CONTROLLER_NOTIFY_TIMEOUT 20
#define CONFIG_ESP32_WIFI_MGMT_SBUF_NUM 32
#define CONFIG_PARTITION_TABLE_SINGLE_APP 1
#define CONFIG_XTENSA_IMPL 1
#define CONFIG_UNITY_ENABLE_FLOAT 1
#define CONFIG_ESP32_WIFI_RX_BA_WIN 16
#define CONFIG_MBEDTLS_X509_CSR_PARSE_C 1
#define CONFIG_SPIFFS_USE_MTIME 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN 0
#define CONFIG_LWIP_DHCP_RESTORE_LAST_IP 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN 2
#define CONFIG_PICO_PSRAM_CS_IO 10
#define CONFIG_EMAC_TASK_STACK_SIZE 3072
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT 1
#define CONFIG_MB_QUEUE_LENGTH 20
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA 1
#define CONFIG_OV2640_SUPPORT 1
#define CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_PSK 1
#define CONFIG_PPP_SUPPORT 1
#define CONFIG_SPIRAM_SPEED_40M 1
#define CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE 2048
#define CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V 1
#define CONFIG_ESP32_DEEP_SLEEP_WAKEUP_DELAY 2000
#define CONFIG_BROWNOUT_DET_LVL 0
#define CONFIG_MBEDTLS_PEM_PARSE_C 1
#define CONFIG_SPIFFS_GC_MAX_RUNS 10
#define CONFIG_ARDUINO_RUN_CORE1 1
#define CONFIG_ESP32_APPTRACE_DEST_NONE 1
#define CONFIG_HP_NANO1 1
#define CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC 1
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA 1
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM 32
#define CONFIG_HTTPD_MAX_URI_LEN 512
#define CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED 1
#define CONFIG_OV7670_SUPPORT 1
#define CONFIG_ARDUHAL_ESP_LOG 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED 1
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ 240
#define CONFIG_MBEDTLS_HARDWARE_AES 1
#define CONFIG_FREERTOS_HZ 1000
#define CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE 1
#define CONFIG_ADC_CAL_EFUSE_TP_ENABLE 1
#define CONFIG_FREERTOS_ASSERT_FAIL_ABORT 1
#define CONFIG_BROWNOUT_DET 1
#define CONFIG_ESP32_XTAL_FREQ 0
#define CONFIG_MONITOR_BAUD_115200B 1
#define CONFIG_LOG_BOOTLOADER_LEVEL 0
#define CONFIG_D2WD_PSRAM_CS_IO 10
#define CONFIG_MBEDTLS_TLS_ENABLED 1
#define CONFIG_LWIP_MAX_RAW_PCBS 16
#define CONFIG_BTU_TASK_STACK_SIZE 4096
#define CONFIG_SMP_ENABLE 1
#define CONFIG_SPIRAM_SIZE -1
#define CONFIG_ARDUINO_UDP_TASK_PRIORITY 3
#define CONFIG_MBEDTLS_SSL_SESSION_TICKETS 1
#define CONFIG_SPIFFS_MAX_PARTITIONS 3
#define CONFIG_ESP_ERR_TO_NAME_LOOKUP 1
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE_0 1
#define CONFIG_MBEDTLS_SSL_RENEGOTIATION 1
#define CONFIG_ESPTOOLPY_BEFORE_RESET 1
#define CONFIG_MB_EVENT_QUEUE_TIMEOUT 20
#define CONFIG_ESPTOOLPY_BAUD_OTHER_VAL 115200
#define CONFIG_PPP_MPPE_SUPPORT 1
#define CONFIG_ENABLE_ARDUINO_DEPENDS 1
#define CONFIG_WARN_WRITE_STRINGS 1
#define CONFIG_SPIFFS_OBJ_NAME_LEN 32
#define CONFIG_ESP32_PTHREAD_TASK_PRIO_DEFAULT 5
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN_EFF 2
#define CONFIG_LOG_BOOTLOADER_LEVEL_NONE 1
#define CONFIG_PARTITION_TABLE_MD5 1
#define CONFIG_TCPIP_RECVMBOX_SIZE 32
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_240 1
#define CONFIG_ESP32_XTAL_FREQ_AUTO 1
#define CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST 1
#define CONFIG_TCP_MAXRTX 12
#define CONFIG_ESPTOOLPY_AFTER "hard_reset"
#define CONFIG_LWIP_IP4_FRAG 1
#define CONFIG_TCPIP_TASK_AFFINITY 0x0
#define CONFIG_LWIP_SO_REUSE 1
#define CONFIG_ARDUINO_UDP_RUN_CORE1 1
#define CONFIG_DMA_TX_BUF_NUM 10
#define CONFIG_LWIP_MAX_LISTENING_TCP 16
#define CONFIG_FREERTOS_INTERRUPT_BACKTRACE 1
#define CONFIG_WL_SECTOR_SIZE 4096
#define CONFIG_ESP32_DEBUG_OCDAWARE 1
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET 1
#define CONFIG_TIMER_TASK_PRIORITY 1
#define CONFIG_PPP_PAP_SUPPORT 1
#define CONFIG_MBEDTLS_TLS_CLIENT 1
#define CONFIG_BTDM_CONTROLLER_HCI_MODE_VHCI 1
#define CONFIG_BT_ENABLED 1
#define CONFIG_ESP32_DEFAULT_PTHREAD_CORE_NO_AFFINITY 1
#define CONFIG_D0WD_PSRAM_CLK_IO 17
#define CONFIG_BT_SSP_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED 1
#define CONFIG_MONITOR_BAUD 115200
#define CONFIG_ESP32_PTHREAD_TASK_CORE_DEFAULT -1
#define CONFIG_ESP32_DEBUG_STUBS_ENABLE 1
#define CONFIG_BLE_ESTABLISH_LINK_CONNECTION_TIMEOUT 30
#define CONFIG_TCPIP_LWIP 1
#define CONFIG_REDUCE_PHY_TX_POWER 1
#define CONFIG_BOOTLOADER_WDT_TIME_MS 9000
#define CONFIG_FREERTOS_CORETIMER_0 1
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT_EFF 1
#define CONFIG_LWIP_IP6_FRAG 1
#define CONFIG_IDF_FIRMWARE_CHIP_ID 0x0000
#define CONFIG_PARTITION_TABLE_CUSTOM_FILENAME "partitions.csv"
#define CONFIG_MBEDTLS_HAVE_TIME 1
#define CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY 1
#define CONFIG_TCP_QUEUE_OOSEQ 1
#define CONFIG_FATFS_ALLOC_PREFER_EXTRAM 1
#define CONFIG_GATTS_ENABLE 1
#define CONFIG_CXX_EXCEPTIONS_EMG_POOL_SIZE 0
#define CONFIG_ADC_CAL_EFUSE_VREF_ENABLE 1
#define CONFIG_MBEDTLS_TLS_SERVER 1
#define CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_SUPPORTED 1
#define CONFIG_FREERTOS_ISR_STACKSIZE 1536
#define CONFIG_SUPPORT_TERMIOS 1
#define CONFIG_CLASSIC_BT_ENABLED 1
#define CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA_PSK 1
#define CONFIG_OPENSSL_ASSERT_DO_NOTHING 1
#define CONFIG_IDF_TARGET "esp32"
#define CONFIG_WL_SECTOR_SIZE_4096 1
#define CONFIG_OPTIMIZATION_LEVEL_DEBUG 1
#define CONFIG_FREERTOS_NO_AFFINITY 0x7FFFFFFF
#define CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED 1
#define CONFIG_HTTPD_ERR_RESP_NO_DELAY 1
#define CONFIG_MB_TIMER_INDEX 0
#define CONFIG_SCAN_DUPLICATE_TYPE 0
#define CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED 1
#define CONFIG_HFP_CLIENT_ENABLE 1
#define CONFIG_NT99141_SUPPORT 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA 1
#define CONFIG_SPI_SLAVE_ISR_IN_IRAM 1
#define CONFIG_SYSTEM_EVENT_QUEUE_SIZE 32
#define CONFIG_BT_ACL_CONNECTIONS 4
#define CONFIG_FATFS_MAX_LFN 255
#define CONFIG_ESP32_WIFI_TX_BUFFER_TYPE 1
#define CONFIG_ESPTOOLPY_BAUD_921600B 1
#define CONFIG_BOOTLOADER_WDT_ENABLE 1
#define CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED 1
#define CONFIG_LWIP_LOOPBACK_MAX_PBUFS 8
#define CONFIG_A2DP_ENABLE 1
#define CONFIG_MB_TIMER_GROUP 0
#define CONFIG_SPI_FLASH_ROM_DRIVER_PATCH 1
#define CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS 5
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE 1
#define CONFIG_SPIFFS_PAGE_SIZE 256
#define CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED 1
#define CONFIG_ESP32_DPORT_WORKAROUND 1
#define CONFIG_GATTS_BLUFI_ENABLE 1
#define CONFIG_PPP_MSCHAP_SUPPORT 1
#define CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU0 1
#define CONFIG_ESP32_PTHREAD_TASK_STACK_SIZE_DEFAULT 2048
#define CONFIG_LWIP_SO_RCVBUF 1
#define CONFIG_MB_TIMER_PORT_ENABLED 1
#define CONFIG_DUPLICATE_SCAN_CACHE_SIZE 20
#define CONFIG_ARDUINO_UDP_RUNNING_CORE 1
#define CONFIG_MONITOR_BAUD_OTHER_VAL 115200
#define CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF 1
#define CONFIG_ESPTOOLPY_PORT "/dev/cu.usbserial-DO00EAB0"
#define CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS 1
#define CONFIG_BTDM_CTRL_BR_EDR_SCO_DATA_PATH_EFF 0
#define CONFIG_LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 1
#define CONFIG_TASK_WDT_PANIC 1
#define CONFIG_OV3660_SUPPORT 1
#define CONFIG_UNITY_ENABLE_DOUBLE 1
#define CONFIG_BLE_ADV_REPORT_DISCARD_THRSHOLD 20
#define CONFIG_BLUEDROID_PINNED_TO_CORE 0
#define CONFIG_HD_NANO1 1
#define CONFIG_BTDM_MODEM_SLEEP_MODE_ORIG 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_FATFS_API_ENCODING_ANSI_OEM 1
#define CONFIG_ARDUINO_IDF_COMMIT "7e63061fa"
#define CONFIG_ARDUINO_IDF_BRANCH "release/v3.3"
# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_attr.h" 1














#define __ESP_ATTR_H__ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h" 1











# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h"
#define CONFIG_GATTC_ENABLE 1
#define CONFIG_ESP32_PHY_MAX_TX_POWER 20
#define CONFIG_TRACEMEM_RESERVE_DRAM 0x0
#define CONFIG_FREERTOS_MAX_TASK_NAME_LEN 16
#define CONFIG_MQTT_TRANSPORT_SSL 1
#define CONFIG_BLE_SMP_ENABLE 1
#define CONFIG_SPIRAM_TYPE_AUTO 1
#define CONFIG_STACK_CHECK 1
#define CONFIG_MB_SERIAL_TASK_PRIO 10
#define CONFIG_MQTT_PROTOCOL_311 1
#define CONFIG_TCP_RECVMBOX_SIZE 6
#define CONFIG_LWIP_ETHARP_TRUST_IP_MAC 1
#define CONFIG_BLE_SCAN_DUPLICATE 1
#define CONFIG_STACK_CHECK_NORM 1
#define CONFIG_TCP_WND_DEFAULT 5744
#define CONFIG_PARTITION_TABLE_OFFSET 0x8000
#define CONFIG_SW_COEXIST_ENABLE 1
#define CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE 3
#define CONFIG_SPIFFS_USE_MAGIC_LENGTH 1
#define CONFIG_ESPTOOLPY_FLASHSIZE_4MB 1
#define CONFIG_IPC_TASK_STACK_SIZE 1024
#define CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES 16
#define CONFIG_FATFS_PER_FILE_CACHE 1
#define CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY 1
#define CONFIG_ESPTOOLPY_FLASHFREQ "40m"
#define CONFIG_LWIP_TCP_RTO_TIME 3000
#define CONFIG_SCCB_HARDWARE_I2C_PORT1 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA 1
#define CONFIG_UDP_RECVMBOX_SIZE 6
#define CONFIG_APP_RETRIEVE_LEN_ELF_SHA 16
#define CONFIG_ARDUHAL_PARTITION_SCHEME_DEFAULT 1
#define CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE 0
#define CONFIG_MBEDTLS_AES_C 1
#define CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED 1
#define CONFIG_A2DP_SINK_TASK_STACK_SIZE 2048
#define CONFIG_ESP32_WIFI_SOFTAP_BEACON_MAX_LEN 752
#define CONFIG_MBEDTLS_GCM_C 1
#define CONFIG_ESPTOOLPY_FLASHSIZE "4MB"
#define CONFIG_SPIFFS_CACHE_WR 1
#define CONFIG_SPIRAM_CACHE_WORKAROUND 1
#define CONFIG_BROWNOUT_DET_LVL_SEL_0 1
#define CONFIG_D0WD_PSRAM_CS_IO 16
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER 1
#define CONFIG_EMAC_L2_TO_L3_RX_BUF_MODE 1
#define CONFIG_BTDM_CONTROLLER_MODEM_SLEEP 1
#define CONFIG_SPIFFS_CACHE 1
#define CONFIG_INT_WDT 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN 3
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1 1
#define CONFIG_BT_STACK_NO_LOG 1
#define CONFIG_ESP_GRATUITOUS_ARP 1
#define CONFIG_MBEDTLS_ECDSA_C 1
#define CONFIG_ESPTOOLPY_FLASHFREQ_40M 1
#define CONFIG_HTTPD_MAX_REQ_HDR_LEN 512
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE 0
#define CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS 1
#define CONFIG_MBEDTLS_ECDH_C 1
#define CONFIG_SPIRAM_USE_CAPS_ALLOC 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE 1
#define CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM 16
#define CONFIG_MBEDTLS_SSL_ALPN 1
#define CONFIG_MBEDTLS_PEM_WRITE_C 1
#define CONFIG_BT_SPP_ENABLED 1
#define CONFIG_BT_RESERVE_DRAM 0xdb5c
#define CONFIG_APP_COMPILE_TIME_DATE 1
#define CONFIG_CXX_EXCEPTIONS 1
#define CONFIG_D2WD_PSRAM_CLK_IO 9
#define CONFIG_FATFS_FS_LOCK 0
#define CONFIG_IP_LOST_TIMER_INTERVAL 120
#define CONFIG_SPIFFS_META_LENGTH 4
#define CONFIG_ESP32_PANIC_PRINT_REBOOT 1
#define CONFIG_MB_CONTROLLER_NOTIFY_QUEUE_SIZE 20
#define CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED 1
#define CONFIG_CAMERA_CORE1 1
#define CONFIG_ESP32_DPORT_DIS_INTERRUPT_LVL 5
#define CONFIG_MB_SERIAL_BUF_SIZE 256
#define CONFIG_CONSOLE_UART_BAUDRATE 115200
#define CONFIG_SPIRAM_SUPPORT 1
#define CONFIG_MFN56_1X 1
#define CONFIG_LWIP_MAX_SOCKETS 10
#define CONFIG_LWIP_NETIF_LOOPBACK 1
#define CONFIG_LWIP_TCP_ISN_HOOK 1
#define CONFIG_ESP32_PTHREAD_TASK_NAME_DEFAULT "pthread"
#define CONFIG_EMAC_TASK_PRIORITY 20
#define CONFIG_TIMER_TASK_STACK_DEPTH 2048
#define CONFIG_TCP_MSS 1436
#define CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED 1
#define CONFIG_BTDM_CONTROLLER_MODE_BTDM 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN_EFF 3
#define CONFIG_EFUSE_CODE_SCHEME_COMPAT_3_4 1
#define CONFIG_TCPIP_TASK_AFFINITY_CPU0 1
#define CONFIG_FATFS_CODEPAGE 850
#define CONFIG_SPIRAM_SPIWP_SD3_PIN 7
#define CONFIG_ULP_COPROC_RESERVE_MEM 512
#define CONFIG_LWIP_MAX_UDP_PCBS 16
#define CONFIG_ESPTOOLPY_BAUD 921600
#define CONFIG_INT_WDT_CHECK_CPU1 1
#define CONFIG_ADC_CAL_LUT_ENABLE 1
#define CONFIG_FLASHMODE_DIO 1
#define CONFIG_LWIP_ESP_LWIP_ASSERT 1
#define CONFIG_ESPTOOLPY_AFTER_RESET 1
#define CONFIG_OPTIMIZATION_ASSERTIONS_ENABLED 1
#define CONFIG_LWIP_DHCPS_MAX_STATION_NUM 8
#define CONFIG_TOOLPREFIX "xtensa-esp32-elf-"
#define CONFIG_MBEDTLS_ECP_C 1
#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024
#define CONFIG_MBEDTLS_RC4_DISABLED 1
#define CONFIG_FATFS_LFN_STACK 1
#define CONFIG_BTDM_CONTROLLER_FULL_SCAN_SUPPORTED 1
#define CONFIG_CONSOLE_UART_NUM 0
#define CONFIG_ARDUINO_EVENT_RUNNING_CORE 1
#define CONFIG_ESP32_APPTRACE_LOCK_ENABLE 1
#define CONFIG_PTHREAD_STACK_MIN 768
#define CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC 1
#define CONFIG_TCP_OVERSIZE_MSS 1
#define CONFIG_FOUR_UNIVERSAL_MAC_ADDRESS 1
#define CONFIG_CONSOLE_UART_DEFAULT 1
#define CONFIG_A2DP_SOURCE_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN 16384
#define CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS 4
#define CONFIG_ESPTOOLPY_FLASHSIZE_DETECT 1
#define CONFIG_AUTOSTART_ARDUINO 1
#define CONFIG_ARDUINO_RUNNING_CORE 1
#define CONFIG_ESP32_ECO3_CACHE_LOCK_FIX 1
#define CONFIG_PPP_CHAP_SUPPORT 1
#define CONFIG_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_TIMER_TASK_STACK_SIZE 4096
#define CONFIG_ESP32_ENABLE_COREDUMP_TO_NONE 1
#define CONFIG_SPIRAM_BANKSWITCH_ENABLE 1
#define CONFIG_MBEDTLS_X509_CRL_PARSE_C 1
#define CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER 1
#define CONFIG_HTTPD_PURGE_BUF_LEN 32
#define CONFIG_SCAN_DUPLICATE_BY_DEVICE_ADDR 1
#define CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER 1
#define CONFIG_MB_SERIAL_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_PSK_MODES 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_AUTO 1
#define CONFIG_LWIP_DHCPS_LEASE_UNIT 60
#define CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION 1
#define CONFIG_EFUSE_MAX_BLK_LEN 192
#define CONFIG_SPIFFS_USE_MAGIC 1
#define CONFIG_OV7725_SUPPORT 1
#define CONFIG_TCPIP_TASK_STACK_SIZE 2560
#define CONFIG_BLUEDROID_PINNED_TO_CORE_0 1
#define CONFIG_FATFS_CODEPAGE_850 1
#define CONFIG_TASK_WDT 1
#define CONFIG_MTMN_LITE_QUANT 1
#define CONFIG_MAIN_TASK_STACK_SIZE 4096
#define CONFIG_SPIFFS_PAGE_CHECK 1
#define CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_0 1
#define CONFIG_LWIP_MAX_ACTIVE_TCP 16
#define CONFIG_TASK_WDT_TIMEOUT_S 5
#define CONFIG_INT_WDT_TIMEOUT_MS 300
#define CONFIG_ARDUINO_EVENT_RUN_CORE1 1
#define CONFIG_ESPTOOLPY_FLASHMODE "dio"
#define CONFIG_BTC_TASK_STACK_SIZE 8192
#define CONFIG_BLUEDROID_ENABLED 1
#define CONFIG_NEWLIB_STDIN_LINE_ENDING_CR 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA 1
#define CONFIG_ESPTOOLPY_BEFORE "default_reset"
#define CONFIG_ADC2_DISABLE_DAC 1
#define CONFIG_HFP_ENABLE 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_NUM 100
#define CONFIG_ESP32_REV_MIN_0 1
#define CONFIG_LOG_DEFAULT_LEVEL 1
#define CONFIG_TIMER_QUEUE_LENGTH 10
#define CONFIG_ARDUINO_LOOP_STACK_SIZE 8192
#define CONFIG_ESP32_REV_MIN 0
#define CONFIG_SUPPRESS_SELECT_DEBUG_OUTPUT 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_MODE 0
#define CONFIG_OV5640_SUPPORT 1
#define CONFIG_MAKE_WARN_UNDEFINED_VARIABLES 1
#define CONFIG_FATFS_TIMEOUT_MS 10000
#define CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM 32
#define CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS 1
#define CONFIG_MBEDTLS_CCM_C 1
#define CONFIG_SPI_MASTER_ISR_IN_IRAM 1
#define CONFIG_ARDUHAL_PARTITION_SCHEME "default"
#define CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER 20
#define CONFIG_ESP32_RTC_CLK_CAL_CYCLES 1024
#define CONFIG_ESP32_WIFI_TX_BA_WIN 6
#define CONFIG_ESP32_WIFI_NVS_ENABLED 1
#define CONFIG_MDNS_MAX_SERVICES 10
#define CONFIG_ULP_COPROC_ENABLED 1
#define CONFIG_HFP_AUDIO_DATA_PATH_PCM 1
#define CONFIG_IDF_TARGET_ESP32 1
#define CONFIG_EMAC_CHECK_LINK_PERIOD_MS 2000
#define CONFIG_BTDM_LPCLK_SEL_MAIN_XTAL 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED 1
#define CONFIG_LWIP_SNTP_UPDATE_DELAY 3600000
#define CONFIG_LIBSODIUM_USE_MBEDTLS_SHA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK 1
#define CONFIG_DMA_RX_BUF_NUM 10
#define CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_PSK 1
#define CONFIG_TCP_SYNMAXRTX 6
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF 0
#define CONFIG_HEAP_POISONING_LIGHT 1
#define CONFIG_PYTHON "python"
#define CONFIG_SPIRAM_BANKSWITCH_RESERVE 8
#define CONFIG_MBEDTLS_ECP_NIST_OPTIM 1
#define CONFIG_ESP32_TIME_SYSCALL_USE_RTC_FRC1 1
#define CONFIG_ESPTOOLPY_COMPRESSED 1
#define CONFIG_PARTITION_TABLE_FILENAME "partitions_singleapp.csv"
#define CONFIG_MB_CONTROLLER_STACK_SIZE 4096
#define CONFIG_TCP_SND_BUF_DEFAULT 5744
#define CONFIG_GARP_TMR_INTERVAL 60
#define CONFIG_LWIP_DHCP_MAX_NTP_SERVERS 1
#define CONFIG_TCP_MSL 60000
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_1 1
#define CONFIG_LWIP_SO_REUSE_RXTOALL 1
#define CONFIG_MB_CONTROLLER_NOTIFY_TIMEOUT 20
#define CONFIG_ESP32_WIFI_MGMT_SBUF_NUM 32
#define CONFIG_PARTITION_TABLE_SINGLE_APP 1
#define CONFIG_XTENSA_IMPL 1
#define CONFIG_UNITY_ENABLE_FLOAT 1
#define CONFIG_ESP32_WIFI_RX_BA_WIN 16
#define CONFIG_MBEDTLS_X509_CSR_PARSE_C 1
#define CONFIG_SPIFFS_USE_MTIME 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN 0
#define CONFIG_LWIP_DHCP_RESTORE_LAST_IP 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN 2
#define CONFIG_PICO_PSRAM_CS_IO 10
#define CONFIG_EMAC_TASK_STACK_SIZE 3072
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT 1
#define CONFIG_MB_QUEUE_LENGTH 20
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA 1
#define CONFIG_OV2640_SUPPORT 1
#define CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_PSK 1
#define CONFIG_PPP_SUPPORT 1
#define CONFIG_SPIRAM_SPEED_40M 1
#define CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE 2048
#define CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V 1
#define CONFIG_ESP32_DEEP_SLEEP_WAKEUP_DELAY 2000
#define CONFIG_BROWNOUT_DET_LVL 0
#define CONFIG_MBEDTLS_PEM_PARSE_C 1
#define CONFIG_SPIFFS_GC_MAX_RUNS 10
#define CONFIG_ARDUINO_RUN_CORE1 1
#define CONFIG_ESP32_APPTRACE_DEST_NONE 1
#define CONFIG_HP_NANO1 1
#define CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC 1
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA 1
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM 32
#define CONFIG_HTTPD_MAX_URI_LEN 512
#define CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED 1
#define CONFIG_OV7670_SUPPORT 1
#define CONFIG_ARDUHAL_ESP_LOG 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED 1
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ 240
#define CONFIG_MBEDTLS_HARDWARE_AES 1
#define CONFIG_FREERTOS_HZ 1000
#define CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE 1
#define CONFIG_ADC_CAL_EFUSE_TP_ENABLE 1
#define CONFIG_FREERTOS_ASSERT_FAIL_ABORT 1
#define CONFIG_BROWNOUT_DET 1
#define CONFIG_ESP32_XTAL_FREQ 0
#define CONFIG_MONITOR_BAUD_115200B 1
#define CONFIG_LOG_BOOTLOADER_LEVEL 0
#define CONFIG_D2WD_PSRAM_CS_IO 10
#define CONFIG_MBEDTLS_TLS_ENABLED 1
#define CONFIG_LWIP_MAX_RAW_PCBS 16
#define CONFIG_BTU_TASK_STACK_SIZE 4096
#define CONFIG_SMP_ENABLE 1
#define CONFIG_SPIRAM_SIZE -1
#define CONFIG_ARDUINO_UDP_TASK_PRIORITY 3
#define CONFIG_MBEDTLS_SSL_SESSION_TICKETS 1
#define CONFIG_SPIFFS_MAX_PARTITIONS 3
#define CONFIG_ESP_ERR_TO_NAME_LOOKUP 1
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE_0 1
#define CONFIG_MBEDTLS_SSL_RENEGOTIATION 1
#define CONFIG_ESPTOOLPY_BEFORE_RESET 1
#define CONFIG_MB_EVENT_QUEUE_TIMEOUT 20
#define CONFIG_ESPTOOLPY_BAUD_OTHER_VAL 115200
#define CONFIG_PPP_MPPE_SUPPORT 1
#define CONFIG_ENABLE_ARDUINO_DEPENDS 1
#define CONFIG_WARN_WRITE_STRINGS 1
#define CONFIG_SPIFFS_OBJ_NAME_LEN 32
#define CONFIG_ESP32_PTHREAD_TASK_PRIO_DEFAULT 5
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN_EFF 2
#define CONFIG_LOG_BOOTLOADER_LEVEL_NONE 1
#define CONFIG_PARTITION_TABLE_MD5 1
#define CONFIG_TCPIP_RECVMBOX_SIZE 32
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_240 1
#define CONFIG_ESP32_XTAL_FREQ_AUTO 1
#define CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST 1
#define CONFIG_TCP_MAXRTX 12
#define CONFIG_ESPTOOLPY_AFTER "hard_reset"
#define CONFIG_LWIP_IP4_FRAG 1
#define CONFIG_TCPIP_TASK_AFFINITY 0x0
#define CONFIG_LWIP_SO_REUSE 1
#define CONFIG_ARDUINO_UDP_RUN_CORE1 1
#define CONFIG_DMA_TX_BUF_NUM 10
#define CONFIG_LWIP_MAX_LISTENING_TCP 16
#define CONFIG_FREERTOS_INTERRUPT_BACKTRACE 1
#define CONFIG_WL_SECTOR_SIZE 4096
#define CONFIG_ESP32_DEBUG_OCDAWARE 1
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET 1
#define CONFIG_TIMER_TASK_PRIORITY 1
#define CONFIG_PPP_PAP_SUPPORT 1
#define CONFIG_MBEDTLS_TLS_CLIENT 1
#define CONFIG_BTDM_CONTROLLER_HCI_MODE_VHCI 1
#define CONFIG_BT_ENABLED 1
#define CONFIG_ESP32_DEFAULT_PTHREAD_CORE_NO_AFFINITY 1
#define CONFIG_D0WD_PSRAM_CLK_IO 17
#define CONFIG_BT_SSP_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED 1
#define CONFIG_MONITOR_BAUD 115200
#define CONFIG_ESP32_PTHREAD_TASK_CORE_DEFAULT -1
#define CONFIG_ESP32_DEBUG_STUBS_ENABLE 1
#define CONFIG_BLE_ESTABLISH_LINK_CONNECTION_TIMEOUT 30
#define CONFIG_TCPIP_LWIP 1
#define CONFIG_REDUCE_PHY_TX_POWER 1
#define CONFIG_BOOTLOADER_WDT_TIME_MS 9000
#define CONFIG_FREERTOS_CORETIMER_0 1
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT_EFF 1
#define CONFIG_LWIP_IP6_FRAG 1
#define CONFIG_IDF_FIRMWARE_CHIP_ID 0x0000
#define CONFIG_PARTITION_TABLE_CUSTOM_FILENAME "partitions.csv"
#define CONFIG_MBEDTLS_HAVE_TIME 1
#define CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY 1
#define CONFIG_TCP_QUEUE_OOSEQ 1
#define CONFIG_FATFS_ALLOC_PREFER_EXTRAM 1
#define CONFIG_GATTS_ENABLE 1
#define CONFIG_CXX_EXCEPTIONS_EMG_POOL_SIZE 0
#define CONFIG_ADC_CAL_EFUSE_VREF_ENABLE 1
#define CONFIG_MBEDTLS_TLS_SERVER 1
#define CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_SUPPORTED 1
#define CONFIG_FREERTOS_ISR_STACKSIZE 1536
#define CONFIG_SUPPORT_TERMIOS 1
#define CONFIG_CLASSIC_BT_ENABLED 1
#define CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA_PSK 1
#define CONFIG_OPENSSL_ASSERT_DO_NOTHING 1
#define CONFIG_IDF_TARGET "esp32"
#define CONFIG_WL_SECTOR_SIZE_4096 1
#define CONFIG_OPTIMIZATION_LEVEL_DEBUG 1
#define CONFIG_FREERTOS_NO_AFFINITY 0x7FFFFFFF
#define CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED 1
#define CONFIG_HTTPD_ERR_RESP_NO_DELAY 1
#define CONFIG_MB_TIMER_INDEX 0
#define CONFIG_SCAN_DUPLICATE_TYPE 0
#define CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED 1
#define CONFIG_HFP_CLIENT_ENABLE 1
#define CONFIG_NT99141_SUPPORT 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA 1
#define CONFIG_SPI_SLAVE_ISR_IN_IRAM 1
#define CONFIG_SYSTEM_EVENT_QUEUE_SIZE 32
#define CONFIG_BT_ACL_CONNECTIONS 4
#define CONFIG_FATFS_MAX_LFN 255
#define CONFIG_ESP32_WIFI_TX_BUFFER_TYPE 1
#define CONFIG_ESPTOOLPY_BAUD_921600B 1
#define CONFIG_BOOTLOADER_WDT_ENABLE 1
#define CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED 1
#define CONFIG_LWIP_LOOPBACK_MAX_PBUFS 8
#define CONFIG_A2DP_ENABLE 1
#define CONFIG_MB_TIMER_GROUP 0
#define CONFIG_SPI_FLASH_ROM_DRIVER_PATCH 1
#define CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS 5
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE 1
#define CONFIG_SPIFFS_PAGE_SIZE 256
#define CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED 1
#define CONFIG_ESP32_DPORT_WORKAROUND 1
#define CONFIG_GATTS_BLUFI_ENABLE 1
#define CONFIG_PPP_MSCHAP_SUPPORT 1
#define CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU0 1
#define CONFIG_ESP32_PTHREAD_TASK_STACK_SIZE_DEFAULT 2048
#define CONFIG_LWIP_SO_RCVBUF 1
#define CONFIG_MB_TIMER_PORT_ENABLED 1
#define CONFIG_DUPLICATE_SCAN_CACHE_SIZE 20
#define CONFIG_ARDUINO_UDP_RUNNING_CORE 1
#define CONFIG_MONITOR_BAUD_OTHER_VAL 115200
#define CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF 1
#define CONFIG_ESPTOOLPY_PORT "/dev/cu.usbserial-DO00EAB0"
#define CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS 1
#define CONFIG_BTDM_CTRL_BR_EDR_SCO_DATA_PATH_EFF 0
#define CONFIG_LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 1
#define CONFIG_TASK_WDT_PANIC 1
#define CONFIG_OV3660_SUPPORT 1
#define CONFIG_UNITY_ENABLE_DOUBLE 1
#define CONFIG_BLE_ADV_REPORT_DISCARD_THRSHOLD 20
#define CONFIG_BLUEDROID_PINNED_TO_CORE 0
#define CONFIG_HD_NANO1 1
#define CONFIG_BTDM_MODEM_SLEEP_MODE_ORIG 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_FATFS_API_ENCODING_ANSI_OEM 1
#define CONFIG_ARDUINO_IDF_COMMIT "7e63061fa"
#define CONFIG_ARDUINO_IDF_BRANCH "release/v3.3"
# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_attr.h" 2

#define ROMFN_ATTR 






#define IRAM_ATTR _SECTION_ATTR_IMPL(".iram1", __COUNTER__)


#define DRAM_ATTR _SECTION_ATTR_IMPL(".dram1", __COUNTER__)


#define WORD_ALIGNED_ATTR __attribute__((aligned(4)))


#define DMA_ATTR WORD_ALIGNED_ATTR DRAM_ATTR



#define DRAM_STR(str) (__extension__({static const DRAM_ATTR char __c[] = (str); (const char *)&__c;}))


#define RTC_IRAM_ATTR _SECTION_ATTR_IMPL(".rtc.text", __COUNTER__)





#define EXT_RAM_ATTR 





#define RTC_DATA_ATTR _SECTION_ATTR_IMPL(".rtc.data", __COUNTER__)


#define RTC_RODATA_ATTR _SECTION_ATTR_IMPL(".rtc.rodata", __COUNTER__)


#define RTC_SLOW_ATTR _SECTION_ATTR_IMPL(".rtc.force_slow", __COUNTER__)


#define RTC_FAST_ATTR _SECTION_ATTR_IMPL(".rtc.force_fast", __COUNTER__)


#define __NOINIT_ATTR _SECTION_ATTR_IMPL(".noinit", __COUNTER__)




#define RTC_NOINIT_ATTR _SECTION_ATTR_IMPL(".rtc_noinit", __COUNTER__)


#define NOINLINE_ATTR __attribute__((noinline))








#define _SECTION_ATTR_IMPL(SECTION,COUNTER) __attribute__((section(SECTION "." _COUNTER_STRINGIFY(COUNTER))))

#define _COUNTER_STRINGIFY(COUNTER) #COUNTER
# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h" 2



#define SOC_MEM_BT_DATA_START 0x3ffae6e0
#define SOC_MEM_BT_DATA_END 0x3ffaff10
#define SOC_MEM_BT_EM_START 0x3ffb0000
#define SOC_MEM_BT_EM_END 0x3ffb7cd8
#define SOC_MEM_BT_EM_BTDM0_START 0x3ffb0000
#define SOC_MEM_BT_EM_BTDM0_END 0x3ffb09a8
#define SOC_MEM_BT_EM_BLE_START 0x3ffb09a8
#define SOC_MEM_BT_EM_BLE_END 0x3ffb1ddc
#define SOC_MEM_BT_EM_BTDM1_START 0x3ffb1ddc
#define SOC_MEM_BT_EM_BTDM1_END 0x3ffb2730
#define SOC_MEM_BT_EM_BREDR_START 0x3ffb2730
#define SOC_MEM_BT_EM_BREDR_NO_SYNC_END 0x3ffb6388 
#define SOC_MEM_BT_EM_BREDR_END 0x3ffb7cd8 
#define SOC_MEM_BT_EM_SYNC0_START 0x3ffb6388
#define SOC_MEM_BT_EM_SYNC0_END 0x3ffb6bf8
#define SOC_MEM_BT_EM_SYNC1_START 0x3ffb6bf8
#define SOC_MEM_BT_EM_SYNC1_END 0x3ffb7468
#define SOC_MEM_BT_EM_SYNC2_START 0x3ffb7468
#define SOC_MEM_BT_EM_SYNC2_END 0x3ffb7cd8
#define SOC_MEM_BT_BSS_START 0x3ffb8000
#define SOC_MEM_BT_BSS_END 0x3ffb9a20
#define SOC_MEM_BT_MISC_START 0x3ffbdb28
#define SOC_MEM_BT_MISC_END 0x3ffbdb5c

#define SOC_MEM_BT_EM_PER_SYNC_SIZE 0x870

#define SOC_MEM_BT_EM_BREDR_REAL_END (SOC_MEM_BT_EM_BREDR_NO_SYNC_END + CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF * SOC_MEM_BT_EM_PER_SYNC_SIZE)



#define SOC_MEMORY_TYPE_NO_PRIOS 3




# 59 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h"
typedef struct {
    const char *name; 
    uint32_t caps[3]; 
    bool aliased_iram; 
    bool startup_stack; 
} soc_memory_type_desc_t;


extern const soc_memory_type_desc_t soc_memory_types[];
extern const size_t soc_memory_type_count;




# 72 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h"
typedef struct
{
    intptr_t start; 
    size_t size; 
    size_t type; 
    intptr_t iram_address; 
} soc_memory_region_t;

extern const soc_memory_region_t soc_memory_regions[];
extern const size_t soc_memory_region_count;






# 86 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h"
typedef struct
{
    intptr_t start;
    intptr_t end;
} soc_reserved_region_t;






























# 107 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h"
#define SOC_RESERVE_MEMORY_REGION(START,END,NAME) __attribute__((section(".reserved_memory_address"))) __attribute__((used)) static soc_reserved_region_t reserved_region_ ##NAME = { START, END };
















































# 134 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h"
size_t soc_get_available_memory_regions(soc_memory_region_t *regions);








# 140 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc_memory_layout.h"
size_t soc_get_available_memory_region_max_count();

inline static bool __attribute__((section(".iram1" "." "0"))) esp_ptr_dma_capable(const void *p)
{
    return (intptr_t)p >= 0x3FFAE000 && (intptr_t)p < 0x40000000;
}

inline static bool __attribute__((section(".iram1" "." "1"))) esp_ptr_word_aligned(const void *p)
{
    return ((intptr_t)p) % 4 == 0;
}

inline static bool __attribute__((section(".iram1" "." "2"))) esp_ptr_executable(const void *p)
{
    intptr_t ip = (intptr_t) p;
    return (ip >= 0x400D0000 && ip < 0x40400000)
        || (ip >= 0x40080000 && ip < 0x400A0000)
        || (ip >= 0x40000000 && ip < 0x40070000)



        || (ip >= 0x400C0000 && ip < 0x400C2000);
}

inline static bool __attribute__((section(".iram1" "." "3"))) esp_ptr_byte_accessible(const void *p)
{
    bool r;
    r = ((intptr_t)p >= 0x3FF90000 && (intptr_t)p < 0x40000000);

    r |= ((intptr_t)p >= 0x3F800000 && (intptr_t)p < 0x3FC00000);

    return r;
}

inline static bool __attribute__((section(".iram1" "." "4"))) esp_ptr_internal(const void *p) {
    bool r;
    r = ((intptr_t)p >= 0x3FF90000 && (intptr_t)p < 0x400C2000);
    r |= ((intptr_t)p >= 0x50000000 && (intptr_t)p < 0x50002000);
    return r;
}


inline static bool __attribute__((section(".iram1" "." "5"))) esp_ptr_external_ram(const void *p) {
    return ((intptr_t)p >= 0x3F800000 && (intptr_t)p < 0x3FC00000);
}

inline static bool __attribute__((section(".iram1" "." "6"))) esp_ptr_in_iram(const void *p) {

    return ((intptr_t)p >= 0x40080000 && (intptr_t)p < 0x400A0000);



}

inline static bool __attribute__((section(".iram1" "." "7"))) esp_ptr_in_drom(const void *p) {
    return ((intptr_t)p >= 0x3F400000 && (intptr_t)p < 0x3F800000);
}

inline static bool __attribute__((section(".iram1" "." "8"))) esp_ptr_in_dram(const void *p) {
    return ((intptr_t)p >= 0x3FAE0000 && (intptr_t)p < 0x40000000);
}

inline static bool __attribute__((section(".iram1" "." "9"))) esp_ptr_in_diram_dram(const void *p) {
    return ((intptr_t)p >= 0x3FFE0000 && (intptr_t)p < 0x3FFFFFFC);
}

inline static bool __attribute__((section(".iram1" "." "10"))) esp_ptr_in_diram_iram(const void *p) {
    return ((intptr_t)p >= 0x400A0000 && (intptr_t)p < 0x400BFFFC);
}
# 87 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2




















# 100 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"


#define portCHAR int8_t
#define portFLOAT float
#define portDOUBLE double
#define portLONG int32_t
#define portSHORT int16_t
#define portSTACK_TYPE uint8_t
#define portBASE_TYPE int

typedef uint8_t StackType_t;
typedef int BaseType_t;
typedef unsigned int UBaseType_t;





 typedef uint32_t TickType_t;
#define portMAX_DELAY ( TickType_t ) 0xffffffffUL




# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portbenchmark.h" 1













































# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portbenchmark.h"











# 33 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portbenchmark.h"
#define PORTBENCHMARK_H 





#define portbenchmarkINTERRUPT_DISABLE() 
#define portbenchmarkINTERRUPT_RESTORE(newstate) 
#define portbenchmarkIntLatency() 
#define portbenchmarkIntWait() 
#define portbenchmarkReset() 
#define portbenchmarkPrint() 
# 125 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h" 1











# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h"
#define CONFIG_GATTC_ENABLE 1
#define CONFIG_ESP32_PHY_MAX_TX_POWER 20
#define CONFIG_TRACEMEM_RESERVE_DRAM 0x0
#define CONFIG_FREERTOS_MAX_TASK_NAME_LEN 16
#define CONFIG_MQTT_TRANSPORT_SSL 1
#define CONFIG_BLE_SMP_ENABLE 1
#define CONFIG_SPIRAM_TYPE_AUTO 1
#define CONFIG_STACK_CHECK 1
#define CONFIG_MB_SERIAL_TASK_PRIO 10
#define CONFIG_MQTT_PROTOCOL_311 1
#define CONFIG_TCP_RECVMBOX_SIZE 6
#define CONFIG_LWIP_ETHARP_TRUST_IP_MAC 1
#define CONFIG_BLE_SCAN_DUPLICATE 1
#define CONFIG_STACK_CHECK_NORM 1
#define CONFIG_TCP_WND_DEFAULT 5744
#define CONFIG_PARTITION_TABLE_OFFSET 0x8000
#define CONFIG_SW_COEXIST_ENABLE 1
#define CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE 3
#define CONFIG_SPIFFS_USE_MAGIC_LENGTH 1
#define CONFIG_ESPTOOLPY_FLASHSIZE_4MB 1
#define CONFIG_IPC_TASK_STACK_SIZE 1024
#define CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES 16
#define CONFIG_FATFS_PER_FILE_CACHE 1
#define CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY 1
#define CONFIG_ESPTOOLPY_FLASHFREQ "40m"
#define CONFIG_LWIP_TCP_RTO_TIME 3000
#define CONFIG_SCCB_HARDWARE_I2C_PORT1 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA 1
#define CONFIG_UDP_RECVMBOX_SIZE 6
#define CONFIG_APP_RETRIEVE_LEN_ELF_SHA 16
#define CONFIG_ARDUHAL_PARTITION_SCHEME_DEFAULT 1
#define CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE 0
#define CONFIG_MBEDTLS_AES_C 1
#define CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED 1
#define CONFIG_A2DP_SINK_TASK_STACK_SIZE 2048
#define CONFIG_ESP32_WIFI_SOFTAP_BEACON_MAX_LEN 752
#define CONFIG_MBEDTLS_GCM_C 1
#define CONFIG_ESPTOOLPY_FLASHSIZE "4MB"
#define CONFIG_SPIFFS_CACHE_WR 1
#define CONFIG_SPIRAM_CACHE_WORKAROUND 1
#define CONFIG_BROWNOUT_DET_LVL_SEL_0 1
#define CONFIG_D0WD_PSRAM_CS_IO 16
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER 1
#define CONFIG_EMAC_L2_TO_L3_RX_BUF_MODE 1
#define CONFIG_BTDM_CONTROLLER_MODEM_SLEEP 1
#define CONFIG_SPIFFS_CACHE 1
#define CONFIG_INT_WDT 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN 3
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1 1
#define CONFIG_BT_STACK_NO_LOG 1
#define CONFIG_ESP_GRATUITOUS_ARP 1
#define CONFIG_MBEDTLS_ECDSA_C 1
#define CONFIG_ESPTOOLPY_FLASHFREQ_40M 1
#define CONFIG_HTTPD_MAX_REQ_HDR_LEN 512
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE 0
#define CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS 1
#define CONFIG_MBEDTLS_ECDH_C 1
#define CONFIG_SPIRAM_USE_CAPS_ALLOC 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE 1
#define CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM 16
#define CONFIG_MBEDTLS_SSL_ALPN 1
#define CONFIG_MBEDTLS_PEM_WRITE_C 1
#define CONFIG_BT_SPP_ENABLED 1
#define CONFIG_BT_RESERVE_DRAM 0xdb5c
#define CONFIG_APP_COMPILE_TIME_DATE 1
#define CONFIG_CXX_EXCEPTIONS 1
#define CONFIG_D2WD_PSRAM_CLK_IO 9
#define CONFIG_FATFS_FS_LOCK 0
#define CONFIG_IP_LOST_TIMER_INTERVAL 120
#define CONFIG_SPIFFS_META_LENGTH 4
#define CONFIG_ESP32_PANIC_PRINT_REBOOT 1
#define CONFIG_MB_CONTROLLER_NOTIFY_QUEUE_SIZE 20
#define CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED 1
#define CONFIG_CAMERA_CORE1 1
#define CONFIG_ESP32_DPORT_DIS_INTERRUPT_LVL 5
#define CONFIG_MB_SERIAL_BUF_SIZE 256
#define CONFIG_CONSOLE_UART_BAUDRATE 115200
#define CONFIG_SPIRAM_SUPPORT 1
#define CONFIG_MFN56_1X 1
#define CONFIG_LWIP_MAX_SOCKETS 10
#define CONFIG_LWIP_NETIF_LOOPBACK 1
#define CONFIG_LWIP_TCP_ISN_HOOK 1
#define CONFIG_ESP32_PTHREAD_TASK_NAME_DEFAULT "pthread"
#define CONFIG_EMAC_TASK_PRIORITY 20
#define CONFIG_TIMER_TASK_STACK_DEPTH 2048
#define CONFIG_TCP_MSS 1436
#define CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED 1
#define CONFIG_BTDM_CONTROLLER_MODE_BTDM 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN_EFF 3
#define CONFIG_EFUSE_CODE_SCHEME_COMPAT_3_4 1
#define CONFIG_TCPIP_TASK_AFFINITY_CPU0 1
#define CONFIG_FATFS_CODEPAGE 850
#define CONFIG_SPIRAM_SPIWP_SD3_PIN 7
#define CONFIG_ULP_COPROC_RESERVE_MEM 512
#define CONFIG_LWIP_MAX_UDP_PCBS 16
#define CONFIG_ESPTOOLPY_BAUD 921600
#define CONFIG_INT_WDT_CHECK_CPU1 1
#define CONFIG_ADC_CAL_LUT_ENABLE 1
#define CONFIG_FLASHMODE_DIO 1
#define CONFIG_LWIP_ESP_LWIP_ASSERT 1
#define CONFIG_ESPTOOLPY_AFTER_RESET 1
#define CONFIG_OPTIMIZATION_ASSERTIONS_ENABLED 1
#define CONFIG_LWIP_DHCPS_MAX_STATION_NUM 8
#define CONFIG_TOOLPREFIX "xtensa-esp32-elf-"
#define CONFIG_MBEDTLS_ECP_C 1
#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024
#define CONFIG_MBEDTLS_RC4_DISABLED 1
#define CONFIG_FATFS_LFN_STACK 1
#define CONFIG_BTDM_CONTROLLER_FULL_SCAN_SUPPORTED 1
#define CONFIG_CONSOLE_UART_NUM 0
#define CONFIG_ARDUINO_EVENT_RUNNING_CORE 1
#define CONFIG_ESP32_APPTRACE_LOCK_ENABLE 1
#define CONFIG_PTHREAD_STACK_MIN 768
#define CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC 1
#define CONFIG_TCP_OVERSIZE_MSS 1
#define CONFIG_FOUR_UNIVERSAL_MAC_ADDRESS 1
#define CONFIG_CONSOLE_UART_DEFAULT 1
#define CONFIG_A2DP_SOURCE_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN 16384
#define CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS 4
#define CONFIG_ESPTOOLPY_FLASHSIZE_DETECT 1
#define CONFIG_AUTOSTART_ARDUINO 1
#define CONFIG_ARDUINO_RUNNING_CORE 1
#define CONFIG_ESP32_ECO3_CACHE_LOCK_FIX 1
#define CONFIG_PPP_CHAP_SUPPORT 1
#define CONFIG_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_TIMER_TASK_STACK_SIZE 4096
#define CONFIG_ESP32_ENABLE_COREDUMP_TO_NONE 1
#define CONFIG_SPIRAM_BANKSWITCH_ENABLE 1
#define CONFIG_MBEDTLS_X509_CRL_PARSE_C 1
#define CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER 1
#define CONFIG_HTTPD_PURGE_BUF_LEN 32
#define CONFIG_SCAN_DUPLICATE_BY_DEVICE_ADDR 1
#define CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER 1
#define CONFIG_MB_SERIAL_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_PSK_MODES 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_AUTO 1
#define CONFIG_LWIP_DHCPS_LEASE_UNIT 60
#define CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION 1
#define CONFIG_EFUSE_MAX_BLK_LEN 192
#define CONFIG_SPIFFS_USE_MAGIC 1
#define CONFIG_OV7725_SUPPORT 1
#define CONFIG_TCPIP_TASK_STACK_SIZE 2560
#define CONFIG_BLUEDROID_PINNED_TO_CORE_0 1
#define CONFIG_FATFS_CODEPAGE_850 1
#define CONFIG_TASK_WDT 1
#define CONFIG_MTMN_LITE_QUANT 1
#define CONFIG_MAIN_TASK_STACK_SIZE 4096
#define CONFIG_SPIFFS_PAGE_CHECK 1
#define CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_0 1
#define CONFIG_LWIP_MAX_ACTIVE_TCP 16
#define CONFIG_TASK_WDT_TIMEOUT_S 5
#define CONFIG_INT_WDT_TIMEOUT_MS 300
#define CONFIG_ARDUINO_EVENT_RUN_CORE1 1
#define CONFIG_ESPTOOLPY_FLASHMODE "dio"
#define CONFIG_BTC_TASK_STACK_SIZE 8192
#define CONFIG_BLUEDROID_ENABLED 1
#define CONFIG_NEWLIB_STDIN_LINE_ENDING_CR 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA 1
#define CONFIG_ESPTOOLPY_BEFORE "default_reset"
#define CONFIG_ADC2_DISABLE_DAC 1
#define CONFIG_HFP_ENABLE 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_NUM 100
#define CONFIG_ESP32_REV_MIN_0 1
#define CONFIG_LOG_DEFAULT_LEVEL 1
#define CONFIG_TIMER_QUEUE_LENGTH 10
#define CONFIG_ARDUINO_LOOP_STACK_SIZE 8192
#define CONFIG_ESP32_REV_MIN 0
#define CONFIG_SUPPRESS_SELECT_DEBUG_OUTPUT 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_MODE 0
#define CONFIG_OV5640_SUPPORT 1
#define CONFIG_MAKE_WARN_UNDEFINED_VARIABLES 1
#define CONFIG_FATFS_TIMEOUT_MS 10000
#define CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM 32
#define CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS 1
#define CONFIG_MBEDTLS_CCM_C 1
#define CONFIG_SPI_MASTER_ISR_IN_IRAM 1
#define CONFIG_ARDUHAL_PARTITION_SCHEME "default"
#define CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER 20
#define CONFIG_ESP32_RTC_CLK_CAL_CYCLES 1024
#define CONFIG_ESP32_WIFI_TX_BA_WIN 6
#define CONFIG_ESP32_WIFI_NVS_ENABLED 1
#define CONFIG_MDNS_MAX_SERVICES 10
#define CONFIG_ULP_COPROC_ENABLED 1
#define CONFIG_HFP_AUDIO_DATA_PATH_PCM 1
#define CONFIG_IDF_TARGET_ESP32 1
#define CONFIG_EMAC_CHECK_LINK_PERIOD_MS 2000
#define CONFIG_BTDM_LPCLK_SEL_MAIN_XTAL 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED 1
#define CONFIG_LWIP_SNTP_UPDATE_DELAY 3600000
#define CONFIG_LIBSODIUM_USE_MBEDTLS_SHA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK 1
#define CONFIG_DMA_RX_BUF_NUM 10
#define CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_PSK 1
#define CONFIG_TCP_SYNMAXRTX 6
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF 0
#define CONFIG_HEAP_POISONING_LIGHT 1
#define CONFIG_PYTHON "python"
#define CONFIG_SPIRAM_BANKSWITCH_RESERVE 8
#define CONFIG_MBEDTLS_ECP_NIST_OPTIM 1
#define CONFIG_ESP32_TIME_SYSCALL_USE_RTC_FRC1 1
#define CONFIG_ESPTOOLPY_COMPRESSED 1
#define CONFIG_PARTITION_TABLE_FILENAME "partitions_singleapp.csv"
#define CONFIG_MB_CONTROLLER_STACK_SIZE 4096
#define CONFIG_TCP_SND_BUF_DEFAULT 5744
#define CONFIG_GARP_TMR_INTERVAL 60
#define CONFIG_LWIP_DHCP_MAX_NTP_SERVERS 1
#define CONFIG_TCP_MSL 60000
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_1 1
#define CONFIG_LWIP_SO_REUSE_RXTOALL 1
#define CONFIG_MB_CONTROLLER_NOTIFY_TIMEOUT 20
#define CONFIG_ESP32_WIFI_MGMT_SBUF_NUM 32
#define CONFIG_PARTITION_TABLE_SINGLE_APP 1
#define CONFIG_XTENSA_IMPL 1
#define CONFIG_UNITY_ENABLE_FLOAT 1
#define CONFIG_ESP32_WIFI_RX_BA_WIN 16
#define CONFIG_MBEDTLS_X509_CSR_PARSE_C 1
#define CONFIG_SPIFFS_USE_MTIME 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN 0
#define CONFIG_LWIP_DHCP_RESTORE_LAST_IP 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN 2
#define CONFIG_PICO_PSRAM_CS_IO 10
#define CONFIG_EMAC_TASK_STACK_SIZE 3072
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT 1
#define CONFIG_MB_QUEUE_LENGTH 20
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA 1
#define CONFIG_OV2640_SUPPORT 1
#define CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_PSK 1
#define CONFIG_PPP_SUPPORT 1
#define CONFIG_SPIRAM_SPEED_40M 1
#define CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE 2048
#define CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V 1
#define CONFIG_ESP32_DEEP_SLEEP_WAKEUP_DELAY 2000
#define CONFIG_BROWNOUT_DET_LVL 0
#define CONFIG_MBEDTLS_PEM_PARSE_C 1
#define CONFIG_SPIFFS_GC_MAX_RUNS 10
#define CONFIG_ARDUINO_RUN_CORE1 1
#define CONFIG_ESP32_APPTRACE_DEST_NONE 1
#define CONFIG_HP_NANO1 1
#define CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC 1
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA 1
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM 32
#define CONFIG_HTTPD_MAX_URI_LEN 512
#define CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED 1
#define CONFIG_OV7670_SUPPORT 1
#define CONFIG_ARDUHAL_ESP_LOG 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED 1
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ 240
#define CONFIG_MBEDTLS_HARDWARE_AES 1
#define CONFIG_FREERTOS_HZ 1000
#define CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE 1
#define CONFIG_ADC_CAL_EFUSE_TP_ENABLE 1
#define CONFIG_FREERTOS_ASSERT_FAIL_ABORT 1
#define CONFIG_BROWNOUT_DET 1
#define CONFIG_ESP32_XTAL_FREQ 0
#define CONFIG_MONITOR_BAUD_115200B 1
#define CONFIG_LOG_BOOTLOADER_LEVEL 0
#define CONFIG_D2WD_PSRAM_CS_IO 10
#define CONFIG_MBEDTLS_TLS_ENABLED 1
#define CONFIG_LWIP_MAX_RAW_PCBS 16
#define CONFIG_BTU_TASK_STACK_SIZE 4096
#define CONFIG_SMP_ENABLE 1
#define CONFIG_SPIRAM_SIZE -1
#define CONFIG_ARDUINO_UDP_TASK_PRIORITY 3
#define CONFIG_MBEDTLS_SSL_SESSION_TICKETS 1
#define CONFIG_SPIFFS_MAX_PARTITIONS 3
#define CONFIG_ESP_ERR_TO_NAME_LOOKUP 1
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE_0 1
#define CONFIG_MBEDTLS_SSL_RENEGOTIATION 1
#define CONFIG_ESPTOOLPY_BEFORE_RESET 1
#define CONFIG_MB_EVENT_QUEUE_TIMEOUT 20
#define CONFIG_ESPTOOLPY_BAUD_OTHER_VAL 115200
#define CONFIG_PPP_MPPE_SUPPORT 1
#define CONFIG_ENABLE_ARDUINO_DEPENDS 1
#define CONFIG_WARN_WRITE_STRINGS 1
#define CONFIG_SPIFFS_OBJ_NAME_LEN 32
#define CONFIG_ESP32_PTHREAD_TASK_PRIO_DEFAULT 5
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN_EFF 2
#define CONFIG_LOG_BOOTLOADER_LEVEL_NONE 1
#define CONFIG_PARTITION_TABLE_MD5 1
#define CONFIG_TCPIP_RECVMBOX_SIZE 32
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_240 1
#define CONFIG_ESP32_XTAL_FREQ_AUTO 1
#define CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST 1
#define CONFIG_TCP_MAXRTX 12
#define CONFIG_ESPTOOLPY_AFTER "hard_reset"
#define CONFIG_LWIP_IP4_FRAG 1
#define CONFIG_TCPIP_TASK_AFFINITY 0x0
#define CONFIG_LWIP_SO_REUSE 1
#define CONFIG_ARDUINO_UDP_RUN_CORE1 1
#define CONFIG_DMA_TX_BUF_NUM 10
#define CONFIG_LWIP_MAX_LISTENING_TCP 16
#define CONFIG_FREERTOS_INTERRUPT_BACKTRACE 1
#define CONFIG_WL_SECTOR_SIZE 4096
#define CONFIG_ESP32_DEBUG_OCDAWARE 1
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET 1
#define CONFIG_TIMER_TASK_PRIORITY 1
#define CONFIG_PPP_PAP_SUPPORT 1
#define CONFIG_MBEDTLS_TLS_CLIENT 1
#define CONFIG_BTDM_CONTROLLER_HCI_MODE_VHCI 1
#define CONFIG_BT_ENABLED 1
#define CONFIG_ESP32_DEFAULT_PTHREAD_CORE_NO_AFFINITY 1
#define CONFIG_D0WD_PSRAM_CLK_IO 17
#define CONFIG_BT_SSP_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED 1
#define CONFIG_MONITOR_BAUD 115200
#define CONFIG_ESP32_PTHREAD_TASK_CORE_DEFAULT -1
#define CONFIG_ESP32_DEBUG_STUBS_ENABLE 1
#define CONFIG_BLE_ESTABLISH_LINK_CONNECTION_TIMEOUT 30
#define CONFIG_TCPIP_LWIP 1
#define CONFIG_REDUCE_PHY_TX_POWER 1
#define CONFIG_BOOTLOADER_WDT_TIME_MS 9000
#define CONFIG_FREERTOS_CORETIMER_0 1
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT_EFF 1
#define CONFIG_LWIP_IP6_FRAG 1
#define CONFIG_IDF_FIRMWARE_CHIP_ID 0x0000
#define CONFIG_PARTITION_TABLE_CUSTOM_FILENAME "partitions.csv"
#define CONFIG_MBEDTLS_HAVE_TIME 1
#define CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY 1
#define CONFIG_TCP_QUEUE_OOSEQ 1
#define CONFIG_FATFS_ALLOC_PREFER_EXTRAM 1
#define CONFIG_GATTS_ENABLE 1
#define CONFIG_CXX_EXCEPTIONS_EMG_POOL_SIZE 0
#define CONFIG_ADC_CAL_EFUSE_VREF_ENABLE 1
#define CONFIG_MBEDTLS_TLS_SERVER 1
#define CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_SUPPORTED 1
#define CONFIG_FREERTOS_ISR_STACKSIZE 1536
#define CONFIG_SUPPORT_TERMIOS 1
#define CONFIG_CLASSIC_BT_ENABLED 1
#define CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA_PSK 1
#define CONFIG_OPENSSL_ASSERT_DO_NOTHING 1
#define CONFIG_IDF_TARGET "esp32"
#define CONFIG_WL_SECTOR_SIZE_4096 1
#define CONFIG_OPTIMIZATION_LEVEL_DEBUG 1
#define CONFIG_FREERTOS_NO_AFFINITY 0x7FFFFFFF
#define CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED 1
#define CONFIG_HTTPD_ERR_RESP_NO_DELAY 1
#define CONFIG_MB_TIMER_INDEX 0
#define CONFIG_SCAN_DUPLICATE_TYPE 0
#define CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED 1
#define CONFIG_HFP_CLIENT_ENABLE 1
#define CONFIG_NT99141_SUPPORT 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA 1
#define CONFIG_SPI_SLAVE_ISR_IN_IRAM 1
#define CONFIG_SYSTEM_EVENT_QUEUE_SIZE 32
#define CONFIG_BT_ACL_CONNECTIONS 4
#define CONFIG_FATFS_MAX_LFN 255
#define CONFIG_ESP32_WIFI_TX_BUFFER_TYPE 1
#define CONFIG_ESPTOOLPY_BAUD_921600B 1
#define CONFIG_BOOTLOADER_WDT_ENABLE 1
#define CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED 1
#define CONFIG_LWIP_LOOPBACK_MAX_PBUFS 8
#define CONFIG_A2DP_ENABLE 1
#define CONFIG_MB_TIMER_GROUP 0
#define CONFIG_SPI_FLASH_ROM_DRIVER_PATCH 1
#define CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS 5
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE 1
#define CONFIG_SPIFFS_PAGE_SIZE 256
#define CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED 1
#define CONFIG_ESP32_DPORT_WORKAROUND 1
#define CONFIG_GATTS_BLUFI_ENABLE 1
#define CONFIG_PPP_MSCHAP_SUPPORT 1
#define CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU0 1
#define CONFIG_ESP32_PTHREAD_TASK_STACK_SIZE_DEFAULT 2048
#define CONFIG_LWIP_SO_RCVBUF 1
#define CONFIG_MB_TIMER_PORT_ENABLED 1
#define CONFIG_DUPLICATE_SCAN_CACHE_SIZE 20
#define CONFIG_ARDUINO_UDP_RUNNING_CORE 1
#define CONFIG_MONITOR_BAUD_OTHER_VAL 115200
#define CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF 1
#define CONFIG_ESPTOOLPY_PORT "/dev/cu.usbserial-DO00EAB0"
#define CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS 1
#define CONFIG_BTDM_CTRL_BR_EDR_SCO_DATA_PATH_EFF 0
#define CONFIG_LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 1
#define CONFIG_TASK_WDT_PANIC 1
#define CONFIG_OV3660_SUPPORT 1
#define CONFIG_UNITY_ENABLE_DOUBLE 1
#define CONFIG_BLE_ADV_REPORT_DISCARD_THRSHOLD 20
#define CONFIG_BLUEDROID_PINNED_TO_CORE 0
#define CONFIG_HD_NANO1 1
#define CONFIG_BTDM_MODEM_SLEEP_MODE_ORIG 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_FATFS_API_ENCODING_ANSI_OEM 1
#define CONFIG_ARDUINO_IDF_COMMIT "7e63061fa"
#define CONFIG_ARDUINO_IDF_BRANCH "release/v3.3"
# 127 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_attr.h" 1













# 128 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 2


typedef struct {
 












# 138 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
 uint32_t owner;
 






# 143 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
 uint32_t count;




} portMUX_TYPE;

#define portMUX_FREE_VAL 0xB33FFFFF


#define portMUX_NO_TIMEOUT (-1) 
#define portMUX_TRY_LOCK 0 



#define portMUX_INITIALIZER_UNLOCKED { .owner = portMUX_FREE_VAL, .count = 0, }
# 172 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
#define portASSERT_IF_IN_ISR() vPortAssertIfInISR()
void vPortAssertIfInISR();

#define portCRITICAL_NESTING_IN_TCB 1




















































# 203 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
void vPortCPUInitializeMutex(portMUX_TYPE *mux);
# 243 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
void vTaskExitCritical( portMUX_TYPE *mux );
void vTaskEnterCritical( portMUX_TYPE *mux );
void vPortCPUAcquireMutex(portMUX_TYPE *mux);
















# 255 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
bool vPortCPUAcquireMutexTimeout(portMUX_TYPE *mux, int timeout_cycles);
void vPortCPUReleaseMutex(portMUX_TYPE *mux);
# 282 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
#define portENTER_CRITICAL(mux) vTaskEnterCritical(mux)
#define portEXIT_CRITICAL(mux) vTaskExitCritical(mux)

#define portENTER_CRITICAL_ISR(mux) vTaskEnterCritical(mux)
#define portEXIT_CRITICAL_ISR(mux) vTaskExitCritical(mux)


#define portENTER_CRITICAL_SAFE(mux) do { if (xPortInIsrContext()) { portENTER_CRITICAL_ISR(mux); } else { portENTER_CRITICAL(mux); } } while(0)







#define portEXIT_CRITICAL_SAFE(mux) do { if (xPortInIsrContext()) { portEXIT_CRITICAL_ISR(mux); } else { portEXIT_CRITICAL(mux); } } while(0)
# 306 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"




#define portDISABLE_INTERRUPTS() do { XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL); portbenchmarkINTERRUPT_DISABLE(); } while (0)
#define portENABLE_INTERRUPTS() do { portbenchmarkINTERRUPT_RESTORE(0); XTOS_SET_INTLEVEL(0); } while (0)




static inline unsigned portENTER_CRITICAL_NESTED() {
 unsigned state = ({ unsigned __tmp; __asm__ __volatile__( "rsil	%0, " "3 /* level masked by PS.EXCM */" "\n" : "=a" (__tmp) : : "memory" ); __tmp;});
 ;
 return state;
}
#define portEXIT_CRITICAL_NESTED(state) do { portbenchmarkINTERRUPT_RESTORE(state); XTOS_RESTORE_JUST_INTLEVEL(state); } while (0)


#define portSET_INTERRUPT_MASK_FROM_ISR() portENTER_CRITICAL_NESTED()
#define portCLEAR_INTERRUPT_MASK_FROM_ISR(state) portEXIT_CRITICAL_NESTED(state)



#define portTcbMemoryCaps (MALLOC_CAP_INTERNAL|MALLOC_CAP_8BIT)
#define portStackMemoryCaps (MALLOC_CAP_INTERNAL|MALLOC_CAP_8BIT)

#define pvPortMallocTcbMem(size) heap_caps_malloc(size, portTcbMemoryCaps)
#define pvPortMallocStackMem(size) heap_caps_malloc(size, portStackMemoryCaps)


#define portVALID_TCB_MEM(ptr) (esp_ptr_internal(ptr) && esp_ptr_byte_accessible(ptr))



#define portVALID_STACK_MEM(ptr) (esp_ptr_internal(ptr) && esp_ptr_byte_accessible(ptr))



















# 352 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
static inline void uxPortCompareSet(volatile uint32_t *addr, uint32_t compare, uint32_t *set) {
    __asm__ __volatile__ (
        "WSR 	    %2,SCOMPARE1 \n"
        "S32C1I     %0, %1, 0	 \n"
        :"=r"(*set)
        :"r"(addr), "r"(compare), "0"(*set)
        );
}





#define portSTACK_GROWTH ( -1 )
#define portTICK_PERIOD_MS ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
#define portBYTE_ALIGNMENT 4
#define portNOP() XT_NOP()



#define portGET_RUN_TIME_COUNTER_VALUE() xthal_get_ccount()

#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() 
# 383 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"

void vPortYield( void );
void _frxt_setup_switch( void );
#define portYIELD() vPortYield()
#define portYIELD_FROM_ISR() {traceISR_EXIT_TO_SCHEDULER(); _frxt_setup_switch();}

static inline uint32_t xPortGetCoreID();














# 398 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
#define portYIELD_WITHIN_API() esp_crosscore_int_send_yield(xPortGetCoreID())




#define portTASK_FUNCTION_PROTO(vFunction,pvParameters) void vFunction( void *pvParameters )
#define portTASK_FUNCTION(vFunction,pvParameters) void vFunction( void *pvParameters )





typedef struct {

 volatile StackType_t* coproc_area; 
# 427 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
} xMPU_SETTINGS;



#undef portUSING_MPU_WRAPPERS
#define portUSING_MPU_WRAPPERS 1 
#define MPU_WRAPPERS_H 
#define PRIVILEGED_FUNCTION 
#define PRIVILEGED_DATA 


extern void esp_vApplicationIdleHook( void );
extern void esp_vApplicationTickHook( void );


#define vApplicationIdleHook esp_vApplicationIdleHook
#define vApplicationTickHook esp_vApplicationTickHook


void _xt_coproc_release(volatile void * coproc_sa_base);
void vApplicationSleep( TickType_t xExpectedIdleTime );

#define portSUPPRESS_TICKS_AND_SLEEP(idleTime) vApplicationSleep( idleTime )







# 466 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h"
}
# 97 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h" 2







#define portBYTE_ALIGNMENT_MASK ( 0x0003 )
# 120 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
#define portNUM_CONFIGURABLE_REGIONS 1



extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/mpu_wrappers.h" 1







































































































































# 128 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h" 1















#define __ESP_SYSTEM_H__ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"














       

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 1















#define _DRIVER_GPIO_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_types.h" 1















#define __ESP_TYPES_H__ 


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h" 1







































































# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_types.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_types.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_types.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4


























# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_types.h" 2
# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"














#define _SOC_GPIO_REG_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc.h" 1













# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h" 2
#define GPIO_BT_SELECT_REG (DR_REG_GPIO_BASE + 0x0000)


#define GPIO_BT_SEL 0xFFFFFFFF
#define GPIO_BT_SEL_M ((GPIO_BT_SEL_V)<<(GPIO_BT_SEL_S))
#define GPIO_BT_SEL_V 0xFFFFFFFF
#define GPIO_BT_SEL_S 0

#define GPIO_OUT_REG (DR_REG_GPIO_BASE + 0x0004)


#define GPIO_OUT_DATA 0xFFFFFFFF
#define GPIO_OUT_DATA_M ((GPIO_OUT_DATA_V)<<(GPIO_OUT_DATA_S))
#define GPIO_OUT_DATA_V 0xFFFFFFFF
#define GPIO_OUT_DATA_S 0

#define GPIO_OUT_W1TS_REG (DR_REG_GPIO_BASE + 0x0008)


#define GPIO_OUT_DATA_W1TS 0xFFFFFFFF
#define GPIO_OUT_DATA_W1TS_M ((GPIO_OUT_DATA_W1TS_V)<<(GPIO_OUT_DATA_W1TS_S))
#define GPIO_OUT_DATA_W1TS_V 0xFFFFFFFF
#define GPIO_OUT_DATA_W1TS_S 0

#define GPIO_OUT_W1TC_REG (DR_REG_GPIO_BASE + 0x000c)


#define GPIO_OUT_DATA_W1TC 0xFFFFFFFF
#define GPIO_OUT_DATA_W1TC_M ((GPIO_OUT_DATA_W1TC_V)<<(GPIO_OUT_DATA_W1TC_S))
#define GPIO_OUT_DATA_W1TC_V 0xFFFFFFFF
#define GPIO_OUT_DATA_W1TC_S 0

#define GPIO_OUT1_REG (DR_REG_GPIO_BASE + 0x0010)


#define GPIO_OUT1_DATA 0x000000FF
#define GPIO_OUT1_DATA_M ((GPIO_OUT1_DATA_V)<<(GPIO_OUT1_DATA_S))
#define GPIO_OUT1_DATA_V 0xFF
#define GPIO_OUT1_DATA_S 0

#define GPIO_OUT1_W1TS_REG (DR_REG_GPIO_BASE + 0x0014)


#define GPIO_OUT1_DATA_W1TS 0x000000FF
#define GPIO_OUT1_DATA_W1TS_M ((GPIO_OUT1_DATA_W1TS_V)<<(GPIO_OUT1_DATA_W1TS_S))
#define GPIO_OUT1_DATA_W1TS_V 0xFF
#define GPIO_OUT1_DATA_W1TS_S 0

#define GPIO_OUT1_W1TC_REG (DR_REG_GPIO_BASE + 0x0018)


#define GPIO_OUT1_DATA_W1TC 0x000000FF
#define GPIO_OUT1_DATA_W1TC_M ((GPIO_OUT1_DATA_W1TC_V)<<(GPIO_OUT1_DATA_W1TC_S))
#define GPIO_OUT1_DATA_W1TC_V 0xFF
#define GPIO_OUT1_DATA_W1TC_S 0

#define GPIO_SDIO_SELECT_REG (DR_REG_GPIO_BASE + 0x001c)


#define GPIO_SDIO_SEL 0x000000FF
#define GPIO_SDIO_SEL_M ((GPIO_SDIO_SEL_V)<<(GPIO_SDIO_SEL_S))
#define GPIO_SDIO_SEL_V 0xFF
#define GPIO_SDIO_SEL_S 0

#define GPIO_ENABLE_REG (DR_REG_GPIO_BASE + 0x0020)


#define GPIO_ENABLE_DATA 0xFFFFFFFF
#define GPIO_ENABLE_DATA_M ((GPIO_ENABLE_DATA_V)<<(GPIO_ENABLE_DATA_S))
#define GPIO_ENABLE_DATA_V 0xFFFFFFFF
#define GPIO_ENABLE_DATA_S 0

#define GPIO_ENABLE_W1TS_REG (DR_REG_GPIO_BASE + 0x0024)


#define GPIO_ENABLE_DATA_W1TS 0xFFFFFFFF
#define GPIO_ENABLE_DATA_W1TS_M ((GPIO_ENABLE_DATA_W1TS_V)<<(GPIO_ENABLE_DATA_W1TS_S))
#define GPIO_ENABLE_DATA_W1TS_V 0xFFFFFFFF
#define GPIO_ENABLE_DATA_W1TS_S 0

#define GPIO_ENABLE_W1TC_REG (DR_REG_GPIO_BASE + 0x0028)


#define GPIO_ENABLE_DATA_W1TC 0xFFFFFFFF
#define GPIO_ENABLE_DATA_W1TC_M ((GPIO_ENABLE_DATA_W1TC_V)<<(GPIO_ENABLE_DATA_W1TC_S))
#define GPIO_ENABLE_DATA_W1TC_V 0xFFFFFFFF
#define GPIO_ENABLE_DATA_W1TC_S 0

#define GPIO_ENABLE1_REG (DR_REG_GPIO_BASE + 0x002c)


#define GPIO_ENABLE1_DATA 0x000000FF
#define GPIO_ENABLE1_DATA_M ((GPIO_ENABLE1_DATA_V)<<(GPIO_ENABLE1_DATA_S))
#define GPIO_ENABLE1_DATA_V 0xFF
#define GPIO_ENABLE1_DATA_S 0

#define GPIO_ENABLE1_W1TS_REG (DR_REG_GPIO_BASE + 0x0030)


#define GPIO_ENABLE1_DATA_W1TS 0x000000FF
#define GPIO_ENABLE1_DATA_W1TS_M ((GPIO_ENABLE1_DATA_W1TS_V)<<(GPIO_ENABLE1_DATA_W1TS_S))
#define GPIO_ENABLE1_DATA_W1TS_V 0xFF
#define GPIO_ENABLE1_DATA_W1TS_S 0

#define GPIO_ENABLE1_W1TC_REG (DR_REG_GPIO_BASE + 0x0034)


#define GPIO_ENABLE1_DATA_W1TC 0x000000FF
#define GPIO_ENABLE1_DATA_W1TC_M ((GPIO_ENABLE1_DATA_W1TC_V)<<(GPIO_ENABLE1_DATA_W1TC_S))
#define GPIO_ENABLE1_DATA_W1TC_V 0xFF
#define GPIO_ENABLE1_DATA_W1TC_S 0

#define GPIO_STRAP_REG (DR_REG_GPIO_BASE + 0x0038)


#define GPIO_STRAPPING 0x0000FFFF
#define GPIO_STRAPPING_M ((GPIO_STRAPPING_V)<<(GPIO_STRAPPING_S))
#define GPIO_STRAPPING_V 0xFFFF
#define GPIO_STRAPPING_S 0

#define GPIO_IN_REG (DR_REG_GPIO_BASE + 0x003c)


#define GPIO_IN_DATA 0xFFFFFFFF
#define GPIO_IN_DATA_M ((GPIO_IN_DATA_V)<<(GPIO_IN_DATA_S))
#define GPIO_IN_DATA_V 0xFFFFFFFF
#define GPIO_IN_DATA_S 0

#define GPIO_IN1_REG (DR_REG_GPIO_BASE + 0x0040)


#define GPIO_IN1_DATA 0x000000FF
#define GPIO_IN1_DATA_M ((GPIO_IN1_DATA_V)<<(GPIO_IN1_DATA_S))
#define GPIO_IN1_DATA_V 0xFF
#define GPIO_IN1_DATA_S 0

#define GPIO_STATUS_REG (DR_REG_GPIO_BASE + 0x0044)


#define GPIO_STATUS_INT 0xFFFFFFFF
#define GPIO_STATUS_INT_M ((GPIO_STATUS_INT_V)<<(GPIO_STATUS_INT_S))
#define GPIO_STATUS_INT_V 0xFFFFFFFF
#define GPIO_STATUS_INT_S 0

#define GPIO_STATUS_W1TS_REG (DR_REG_GPIO_BASE + 0x0048)


#define GPIO_STATUS_INT_W1TS 0xFFFFFFFF
#define GPIO_STATUS_INT_W1TS_M ((GPIO_STATUS_INT_W1TS_V)<<(GPIO_STATUS_INT_W1TS_S))
#define GPIO_STATUS_INT_W1TS_V 0xFFFFFFFF
#define GPIO_STATUS_INT_W1TS_S 0

#define GPIO_STATUS_W1TC_REG (DR_REG_GPIO_BASE + 0x004c)


#define GPIO_STATUS_INT_W1TC 0xFFFFFFFF
#define GPIO_STATUS_INT_W1TC_M ((GPIO_STATUS_INT_W1TC_V)<<(GPIO_STATUS_INT_W1TC_S))
#define GPIO_STATUS_INT_W1TC_V 0xFFFFFFFF
#define GPIO_STATUS_INT_W1TC_S 0

#define GPIO_STATUS1_REG (DR_REG_GPIO_BASE + 0x0050)


#define GPIO_STATUS1_INT 0x000000FF
#define GPIO_STATUS1_INT_M ((GPIO_STATUS1_INT_V)<<(GPIO_STATUS1_INT_S))
#define GPIO_STATUS1_INT_V 0xFF
#define GPIO_STATUS1_INT_S 0

#define GPIO_STATUS1_W1TS_REG (DR_REG_GPIO_BASE + 0x0054)


#define GPIO_STATUS1_INT_W1TS 0x000000FF
#define GPIO_STATUS1_INT_W1TS_M ((GPIO_STATUS1_INT_W1TS_V)<<(GPIO_STATUS1_INT_W1TS_S))
#define GPIO_STATUS1_INT_W1TS_V 0xFF
#define GPIO_STATUS1_INT_W1TS_S 0

#define GPIO_STATUS1_W1TC_REG (DR_REG_GPIO_BASE + 0x0058)


#define GPIO_STATUS1_INT_W1TC 0x000000FF
#define GPIO_STATUS1_INT_W1TC_M ((GPIO_STATUS1_INT_W1TC_V)<<(GPIO_STATUS1_INT_W1TC_S))
#define GPIO_STATUS1_INT_W1TC_V 0xFF
#define GPIO_STATUS1_INT_W1TC_S 0

#define GPIO_ACPU_INT_REG (DR_REG_GPIO_BASE + 0x0060)


#define GPIO_APPCPU_INT 0xFFFFFFFF
#define GPIO_APPCPU_INT_M ((GPIO_APPCPU_INT_V)<<(GPIO_APPCPU_INT_S))
#define GPIO_APPCPU_INT_V 0xFFFFFFFF
#define GPIO_APPCPU_INT_S 0

#define GPIO_ACPU_NMI_INT_REG (DR_REG_GPIO_BASE + 0x0064)


#define GPIO_APPCPU_NMI_INT 0xFFFFFFFF
#define GPIO_APPCPU_NMI_INT_M ((GPIO_APPCPU_NMI_INT_V)<<(GPIO_APPCPU_NMI_INT_S))
#define GPIO_APPCPU_NMI_INT_V 0xFFFFFFFF
#define GPIO_APPCPU_NMI_INT_S 0

#define GPIO_PCPU_INT_REG (DR_REG_GPIO_BASE + 0x0068)


#define GPIO_PROCPU_INT 0xFFFFFFFF
#define GPIO_PROCPU_INT_M ((GPIO_PROCPU_INT_V)<<(GPIO_PROCPU_INT_S))
#define GPIO_PROCPU_INT_V 0xFFFFFFFF
#define GPIO_PROCPU_INT_S 0

#define GPIO_PCPU_NMI_INT_REG (DR_REG_GPIO_BASE + 0x006c)


#define GPIO_PROCPU_NMI_INT 0xFFFFFFFF
#define GPIO_PROCPU_NMI_INT_M ((GPIO_PROCPU_NMI_INT_V)<<(GPIO_PROCPU_NMI_INT_S))
#define GPIO_PROCPU_NMI_INT_V 0xFFFFFFFF
#define GPIO_PROCPU_NMI_INT_S 0

#define GPIO_CPUSDIO_INT_REG (DR_REG_GPIO_BASE + 0x0070)


#define GPIO_SDIO_INT 0xFFFFFFFF
#define GPIO_SDIO_INT_M ((GPIO_SDIO_INT_V)<<(GPIO_SDIO_INT_S))
#define GPIO_SDIO_INT_V 0xFFFFFFFF
#define GPIO_SDIO_INT_S 0

#define GPIO_ACPU_INT1_REG (DR_REG_GPIO_BASE + 0x0074)


#define GPIO_APPCPU_INT_H 0x000000FF
#define GPIO_APPCPU_INT_H_M ((GPIO_APPCPU_INT_H_V)<<(GPIO_APPCPU_INT_H_S))
#define GPIO_APPCPU_INT_H_V 0xFF
#define GPIO_APPCPU_INT_H_S 0

#define GPIO_ACPU_NMI_INT1_REG (DR_REG_GPIO_BASE + 0x0078)


#define GPIO_APPCPU_NMI_INT_H 0x000000FF
#define GPIO_APPCPU_NMI_INT_H_M ((GPIO_APPCPU_NMI_INT_H_V)<<(GPIO_APPCPU_NMI_INT_H_S))
#define GPIO_APPCPU_NMI_INT_H_V 0xFF
#define GPIO_APPCPU_NMI_INT_H_S 0

#define GPIO_PCPU_INT1_REG (DR_REG_GPIO_BASE + 0x007c)


#define GPIO_PROCPU_INT_H 0x000000FF
#define GPIO_PROCPU_INT_H_M ((GPIO_PROCPU_INT_H_V)<<(GPIO_PROCPU_INT_H_S))
#define GPIO_PROCPU_INT_H_V 0xFF
#define GPIO_PROCPU_INT_H_S 0

#define GPIO_PCPU_NMI_INT1_REG (DR_REG_GPIO_BASE + 0x0080)


#define GPIO_PROCPU_NMI_INT_H 0x000000FF
#define GPIO_PROCPU_NMI_INT_H_M ((GPIO_PROCPU_NMI_INT_H_V)<<(GPIO_PROCPU_NMI_INT_H_S))
#define GPIO_PROCPU_NMI_INT_H_V 0xFF
#define GPIO_PROCPU_NMI_INT_H_S 0

#define GPIO_CPUSDIO_INT1_REG (DR_REG_GPIO_BASE + 0x0084)


#define GPIO_SDIO_INT_H 0x000000FF
#define GPIO_SDIO_INT_H_M ((GPIO_SDIO_INT_H_V)<<(GPIO_SDIO_INT_H_S))
#define GPIO_SDIO_INT_H_V 0xFF
#define GPIO_SDIO_INT_H_S 0

#define GPIO_REG(io_num) (GPIO_PIN0_REG + (io_num)*0x4)
#define GPIO_PIN_INT_ENA 0x0000001F
#define GPIO_PIN_INT_ENA_M ((GPIO_PIN_INT_ENA_V)<<(GPIO_PIN_INT_ENA_S))
#define GPIO_PIN_INT_ENA_V 0x0000001F
#define GPIO_PIN_INT_ENA_S 13
#define GPIO_PIN_CONFIG 0x00000003
#define GPIO_PIN_CONFIG_M ((GPIO_PIN_CONFIG_V)<<(GPIO_PIN_CONFIG_S))
#define GPIO_PIN_CONFIG_V 0x00000003
#define GPIO_PIN_CONFIG_S 11
#define GPIO_PIN_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN_WAKEUP_ENABLE_S 10
#define GPIO_PIN_INT_TYPE 0x00000007
#define GPIO_PIN_INT_TYPE_M ((GPIO_PIN_INT_TYPE_V)<<(GPIO_PIN_INT_TYPE_S))
#define GPIO_PIN_INT_TYPE_V 0x00000007
#define GPIO_PIN_INT_TYPE_S 7
#define GPIO_PIN_PAD_DRIVER (BIT(2))
#define GPIO_PIN_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN_PAD_DRIVER_V 0x1
#define GPIO_PIN_PAD_DRIVER_S 2

#define GPIO_PIN0_REG (DR_REG_GPIO_BASE + 0x0088)




# 308 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN0_INT_ENA 0x0000001F
#define GPIO_PIN0_INT_ENA_M ((GPIO_PIN0_INT_ENA_V)<<(GPIO_PIN0_INT_ENA_S))
#define GPIO_PIN0_INT_ENA_V 0x1F
#define GPIO_PIN0_INT_ENA_S 13


#define GPIO_PIN0_CONFIG 0x00000003
#define GPIO_PIN0_CONFIG_M ((GPIO_PIN0_CONFIG_V)<<(GPIO_PIN0_CONFIG_S))
#define GPIO_PIN0_CONFIG_V 0x3
#define GPIO_PIN0_CONFIG_S 11


#define GPIO_PIN0_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN0_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN0_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN0_WAKEUP_ENABLE_S 10




# 327 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN0_INT_TYPE 0x00000007
#define GPIO_PIN0_INT_TYPE_M ((GPIO_PIN0_INT_TYPE_V)<<(GPIO_PIN0_INT_TYPE_S))
#define GPIO_PIN0_INT_TYPE_V 0x7
#define GPIO_PIN0_INT_TYPE_S 7


#define GPIO_PIN0_PAD_DRIVER (BIT(2))
#define GPIO_PIN0_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN0_PAD_DRIVER_V 0x1
#define GPIO_PIN0_PAD_DRIVER_S 2

#define GPIO_PIN1_REG (DR_REG_GPIO_BASE + 0x008c)




# 342 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN1_INT_ENA 0x0000001F
#define GPIO_PIN1_INT_ENA_M ((GPIO_PIN1_INT_ENA_V)<<(GPIO_PIN1_INT_ENA_S))
#define GPIO_PIN1_INT_ENA_V 0x1F
#define GPIO_PIN1_INT_ENA_S 13


#define GPIO_PIN1_CONFIG 0x00000003
#define GPIO_PIN1_CONFIG_M ((GPIO_PIN1_CONFIG_V)<<(GPIO_PIN1_CONFIG_S))
#define GPIO_PIN1_CONFIG_V 0x3
#define GPIO_PIN1_CONFIG_S 11


#define GPIO_PIN1_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN1_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN1_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN1_WAKEUP_ENABLE_S 10




# 361 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN1_INT_TYPE 0x00000007
#define GPIO_PIN1_INT_TYPE_M ((GPIO_PIN1_INT_TYPE_V)<<(GPIO_PIN1_INT_TYPE_S))
#define GPIO_PIN1_INT_TYPE_V 0x7
#define GPIO_PIN1_INT_TYPE_S 7


#define GPIO_PIN1_PAD_DRIVER (BIT(2))
#define GPIO_PIN1_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN1_PAD_DRIVER_V 0x1
#define GPIO_PIN1_PAD_DRIVER_S 2

#define GPIO_PIN2_REG (DR_REG_GPIO_BASE + 0x0090)




# 376 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN2_INT_ENA 0x0000001F
#define GPIO_PIN2_INT_ENA_M ((GPIO_PIN2_INT_ENA_V)<<(GPIO_PIN2_INT_ENA_S))
#define GPIO_PIN2_INT_ENA_V 0x1F
#define GPIO_PIN2_INT_ENA_S 13


#define GPIO_PIN2_CONFIG 0x00000003
#define GPIO_PIN2_CONFIG_M ((GPIO_PIN2_CONFIG_V)<<(GPIO_PIN2_CONFIG_S))
#define GPIO_PIN2_CONFIG_V 0x3
#define GPIO_PIN2_CONFIG_S 11


#define GPIO_PIN2_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN2_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN2_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN2_WAKEUP_ENABLE_S 10




# 395 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN2_INT_TYPE 0x00000007
#define GPIO_PIN2_INT_TYPE_M ((GPIO_PIN2_INT_TYPE_V)<<(GPIO_PIN2_INT_TYPE_S))
#define GPIO_PIN2_INT_TYPE_V 0x7
#define GPIO_PIN2_INT_TYPE_S 7


#define GPIO_PIN2_PAD_DRIVER (BIT(2))
#define GPIO_PIN2_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN2_PAD_DRIVER_V 0x1
#define GPIO_PIN2_PAD_DRIVER_S 2

#define GPIO_PIN3_REG (DR_REG_GPIO_BASE + 0x0094)




# 410 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN3_INT_ENA 0x0000001F
#define GPIO_PIN3_INT_ENA_M ((GPIO_PIN3_INT_ENA_V)<<(GPIO_PIN3_INT_ENA_S))
#define GPIO_PIN3_INT_ENA_V 0x1F
#define GPIO_PIN3_INT_ENA_S 13


#define GPIO_PIN3_CONFIG 0x00000003
#define GPIO_PIN3_CONFIG_M ((GPIO_PIN3_CONFIG_V)<<(GPIO_PIN3_CONFIG_S))
#define GPIO_PIN3_CONFIG_V 0x3
#define GPIO_PIN3_CONFIG_S 11


#define GPIO_PIN3_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN3_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN3_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN3_WAKEUP_ENABLE_S 10




# 429 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN3_INT_TYPE 0x00000007
#define GPIO_PIN3_INT_TYPE_M ((GPIO_PIN3_INT_TYPE_V)<<(GPIO_PIN3_INT_TYPE_S))
#define GPIO_PIN3_INT_TYPE_V 0x7
#define GPIO_PIN3_INT_TYPE_S 7


#define GPIO_PIN3_PAD_DRIVER (BIT(2))
#define GPIO_PIN3_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN3_PAD_DRIVER_V 0x1
#define GPIO_PIN3_PAD_DRIVER_S 2

#define GPIO_PIN4_REG (DR_REG_GPIO_BASE + 0x0098)




# 444 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN4_INT_ENA 0x0000001F
#define GPIO_PIN4_INT_ENA_M ((GPIO_PIN4_INT_ENA_V)<<(GPIO_PIN4_INT_ENA_S))
#define GPIO_PIN4_INT_ENA_V 0x1F
#define GPIO_PIN4_INT_ENA_S 13


#define GPIO_PIN4_CONFIG 0x00000003
#define GPIO_PIN4_CONFIG_M ((GPIO_PIN4_CONFIG_V)<<(GPIO_PIN4_CONFIG_S))
#define GPIO_PIN4_CONFIG_V 0x3
#define GPIO_PIN4_CONFIG_S 11


#define GPIO_PIN4_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN4_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN4_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN4_WAKEUP_ENABLE_S 10




# 463 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN4_INT_TYPE 0x00000007
#define GPIO_PIN4_INT_TYPE_M ((GPIO_PIN4_INT_TYPE_V)<<(GPIO_PIN4_INT_TYPE_S))
#define GPIO_PIN4_INT_TYPE_V 0x7
#define GPIO_PIN4_INT_TYPE_S 7


#define GPIO_PIN4_PAD_DRIVER (BIT(2))
#define GPIO_PIN4_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN4_PAD_DRIVER_V 0x1
#define GPIO_PIN4_PAD_DRIVER_S 2

#define GPIO_PIN5_REG (DR_REG_GPIO_BASE + 0x009c)




# 478 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN5_INT_ENA 0x0000001F
#define GPIO_PIN5_INT_ENA_M ((GPIO_PIN5_INT_ENA_V)<<(GPIO_PIN5_INT_ENA_S))
#define GPIO_PIN5_INT_ENA_V 0x1F
#define GPIO_PIN5_INT_ENA_S 13


#define GPIO_PIN5_CONFIG 0x00000003
#define GPIO_PIN5_CONFIG_M ((GPIO_PIN5_CONFIG_V)<<(GPIO_PIN5_CONFIG_S))
#define GPIO_PIN5_CONFIG_V 0x3
#define GPIO_PIN5_CONFIG_S 11


#define GPIO_PIN5_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN5_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN5_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN5_WAKEUP_ENABLE_S 10




# 497 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN5_INT_TYPE 0x00000007
#define GPIO_PIN5_INT_TYPE_M ((GPIO_PIN5_INT_TYPE_V)<<(GPIO_PIN5_INT_TYPE_S))
#define GPIO_PIN5_INT_TYPE_V 0x7
#define GPIO_PIN5_INT_TYPE_S 7


#define GPIO_PIN5_PAD_DRIVER (BIT(2))
#define GPIO_PIN5_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN5_PAD_DRIVER_V 0x1
#define GPIO_PIN5_PAD_DRIVER_S 2

#define GPIO_PIN6_REG (DR_REG_GPIO_BASE + 0x00a0)




# 512 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN6_INT_ENA 0x0000001F
#define GPIO_PIN6_INT_ENA_M ((GPIO_PIN6_INT_ENA_V)<<(GPIO_PIN6_INT_ENA_S))
#define GPIO_PIN6_INT_ENA_V 0x1F
#define GPIO_PIN6_INT_ENA_S 13


#define GPIO_PIN6_CONFIG 0x00000003
#define GPIO_PIN6_CONFIG_M ((GPIO_PIN6_CONFIG_V)<<(GPIO_PIN6_CONFIG_S))
#define GPIO_PIN6_CONFIG_V 0x3
#define GPIO_PIN6_CONFIG_S 11


#define GPIO_PIN6_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN6_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN6_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN6_WAKEUP_ENABLE_S 10




# 531 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN6_INT_TYPE 0x00000007
#define GPIO_PIN6_INT_TYPE_M ((GPIO_PIN6_INT_TYPE_V)<<(GPIO_PIN6_INT_TYPE_S))
#define GPIO_PIN6_INT_TYPE_V 0x7
#define GPIO_PIN6_INT_TYPE_S 7


#define GPIO_PIN6_PAD_DRIVER (BIT(2))
#define GPIO_PIN6_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN6_PAD_DRIVER_V 0x1
#define GPIO_PIN6_PAD_DRIVER_S 2

#define GPIO_PIN7_REG (DR_REG_GPIO_BASE + 0x00a4)




# 546 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN7_INT_ENA 0x0000001F
#define GPIO_PIN7_INT_ENA_M ((GPIO_PIN7_INT_ENA_V)<<(GPIO_PIN7_INT_ENA_S))
#define GPIO_PIN7_INT_ENA_V 0x1F
#define GPIO_PIN7_INT_ENA_S 13


#define GPIO_PIN7_CONFIG 0x00000003
#define GPIO_PIN7_CONFIG_M ((GPIO_PIN7_CONFIG_V)<<(GPIO_PIN7_CONFIG_S))
#define GPIO_PIN7_CONFIG_V 0x3
#define GPIO_PIN7_CONFIG_S 11


#define GPIO_PIN7_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN7_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN7_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN7_WAKEUP_ENABLE_S 10




# 565 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN7_INT_TYPE 0x00000007
#define GPIO_PIN7_INT_TYPE_M ((GPIO_PIN7_INT_TYPE_V)<<(GPIO_PIN7_INT_TYPE_S))
#define GPIO_PIN7_INT_TYPE_V 0x7
#define GPIO_PIN7_INT_TYPE_S 7


#define GPIO_PIN7_PAD_DRIVER (BIT(2))
#define GPIO_PIN7_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN7_PAD_DRIVER_V 0x1
#define GPIO_PIN7_PAD_DRIVER_S 2

#define GPIO_PIN8_REG (DR_REG_GPIO_BASE + 0x00a8)




# 580 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN8_INT_ENA 0x0000001F
#define GPIO_PIN8_INT_ENA_M ((GPIO_PIN8_INT_ENA_V)<<(GPIO_PIN8_INT_ENA_S))
#define GPIO_PIN8_INT_ENA_V 0x1F
#define GPIO_PIN8_INT_ENA_S 13


#define GPIO_PIN8_CONFIG 0x00000003
#define GPIO_PIN8_CONFIG_M ((GPIO_PIN8_CONFIG_V)<<(GPIO_PIN8_CONFIG_S))
#define GPIO_PIN8_CONFIG_V 0x3
#define GPIO_PIN8_CONFIG_S 11


#define GPIO_PIN8_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN8_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN8_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN8_WAKEUP_ENABLE_S 10




# 599 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN8_INT_TYPE 0x00000007
#define GPIO_PIN8_INT_TYPE_M ((GPIO_PIN8_INT_TYPE_V)<<(GPIO_PIN8_INT_TYPE_S))
#define GPIO_PIN8_INT_TYPE_V 0x7
#define GPIO_PIN8_INT_TYPE_S 7


#define GPIO_PIN8_PAD_DRIVER (BIT(2))
#define GPIO_PIN8_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN8_PAD_DRIVER_V 0x1
#define GPIO_PIN8_PAD_DRIVER_S 2

#define GPIO_PIN9_REG (DR_REG_GPIO_BASE + 0x00ac)




# 614 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN9_INT_ENA 0x0000001F
#define GPIO_PIN9_INT_ENA_M ((GPIO_PIN9_INT_ENA_V)<<(GPIO_PIN9_INT_ENA_S))
#define GPIO_PIN9_INT_ENA_V 0x1F
#define GPIO_PIN9_INT_ENA_S 13


#define GPIO_PIN9_CONFIG 0x00000003
#define GPIO_PIN9_CONFIG_M ((GPIO_PIN9_CONFIG_V)<<(GPIO_PIN9_CONFIG_S))
#define GPIO_PIN9_CONFIG_V 0x3
#define GPIO_PIN9_CONFIG_S 11


#define GPIO_PIN9_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN9_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN9_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN9_WAKEUP_ENABLE_S 10




# 633 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN9_INT_TYPE 0x00000007
#define GPIO_PIN9_INT_TYPE_M ((GPIO_PIN9_INT_TYPE_V)<<(GPIO_PIN9_INT_TYPE_S))
#define GPIO_PIN9_INT_TYPE_V 0x7
#define GPIO_PIN9_INT_TYPE_S 7


#define GPIO_PIN9_PAD_DRIVER (BIT(2))
#define GPIO_PIN9_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN9_PAD_DRIVER_V 0x1
#define GPIO_PIN9_PAD_DRIVER_S 2

#define GPIO_PIN10_REG (DR_REG_GPIO_BASE + 0x00b0)




# 648 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN10_INT_ENA 0x0000001F
#define GPIO_PIN10_INT_ENA_M ((GPIO_PIN10_INT_ENA_V)<<(GPIO_PIN10_INT_ENA_S))
#define GPIO_PIN10_INT_ENA_V 0x1F
#define GPIO_PIN10_INT_ENA_S 13


#define GPIO_PIN10_CONFIG 0x00000003
#define GPIO_PIN10_CONFIG_M ((GPIO_PIN10_CONFIG_V)<<(GPIO_PIN10_CONFIG_S))
#define GPIO_PIN10_CONFIG_V 0x3
#define GPIO_PIN10_CONFIG_S 11


#define GPIO_PIN10_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN10_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN10_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN10_WAKEUP_ENABLE_S 10




# 667 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN10_INT_TYPE 0x00000007
#define GPIO_PIN10_INT_TYPE_M ((GPIO_PIN10_INT_TYPE_V)<<(GPIO_PIN10_INT_TYPE_S))
#define GPIO_PIN10_INT_TYPE_V 0x7
#define GPIO_PIN10_INT_TYPE_S 7


#define GPIO_PIN10_PAD_DRIVER (BIT(2))
#define GPIO_PIN10_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN10_PAD_DRIVER_V 0x1
#define GPIO_PIN10_PAD_DRIVER_S 2

#define GPIO_PIN11_REG (DR_REG_GPIO_BASE + 0x00b4)




# 682 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN11_INT_ENA 0x0000001F
#define GPIO_PIN11_INT_ENA_M ((GPIO_PIN11_INT_ENA_V)<<(GPIO_PIN11_INT_ENA_S))
#define GPIO_PIN11_INT_ENA_V 0x1F
#define GPIO_PIN11_INT_ENA_S 13


#define GPIO_PIN11_CONFIG 0x00000003
#define GPIO_PIN11_CONFIG_M ((GPIO_PIN11_CONFIG_V)<<(GPIO_PIN11_CONFIG_S))
#define GPIO_PIN11_CONFIG_V 0x3
#define GPIO_PIN11_CONFIG_S 11


#define GPIO_PIN11_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN11_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN11_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN11_WAKEUP_ENABLE_S 10




# 701 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN11_INT_TYPE 0x00000007
#define GPIO_PIN11_INT_TYPE_M ((GPIO_PIN11_INT_TYPE_V)<<(GPIO_PIN11_INT_TYPE_S))
#define GPIO_PIN11_INT_TYPE_V 0x7
#define GPIO_PIN11_INT_TYPE_S 7


#define GPIO_PIN11_PAD_DRIVER (BIT(2))
#define GPIO_PIN11_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN11_PAD_DRIVER_V 0x1
#define GPIO_PIN11_PAD_DRIVER_S 2

#define GPIO_PIN12_REG (DR_REG_GPIO_BASE + 0x00b8)




# 716 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN12_INT_ENA 0x0000001F
#define GPIO_PIN12_INT_ENA_M ((GPIO_PIN12_INT_ENA_V)<<(GPIO_PIN12_INT_ENA_S))
#define GPIO_PIN12_INT_ENA_V 0x1F
#define GPIO_PIN12_INT_ENA_S 13


#define GPIO_PIN12_CONFIG 0x00000003
#define GPIO_PIN12_CONFIG_M ((GPIO_PIN12_CONFIG_V)<<(GPIO_PIN12_CONFIG_S))
#define GPIO_PIN12_CONFIG_V 0x3
#define GPIO_PIN12_CONFIG_S 11


#define GPIO_PIN12_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN12_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN12_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN12_WAKEUP_ENABLE_S 10




# 735 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN12_INT_TYPE 0x00000007
#define GPIO_PIN12_INT_TYPE_M ((GPIO_PIN12_INT_TYPE_V)<<(GPIO_PIN12_INT_TYPE_S))
#define GPIO_PIN12_INT_TYPE_V 0x7
#define GPIO_PIN12_INT_TYPE_S 7


#define GPIO_PIN12_PAD_DRIVER (BIT(2))
#define GPIO_PIN12_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN12_PAD_DRIVER_V 0x1
#define GPIO_PIN12_PAD_DRIVER_S 2

#define GPIO_PIN13_REG (DR_REG_GPIO_BASE + 0x00bc)




# 750 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN13_INT_ENA 0x0000001F
#define GPIO_PIN13_INT_ENA_M ((GPIO_PIN13_INT_ENA_V)<<(GPIO_PIN13_INT_ENA_S))
#define GPIO_PIN13_INT_ENA_V 0x1F
#define GPIO_PIN13_INT_ENA_S 13


#define GPIO_PIN13_CONFIG 0x00000003
#define GPIO_PIN13_CONFIG_M ((GPIO_PIN13_CONFIG_V)<<(GPIO_PIN13_CONFIG_S))
#define GPIO_PIN13_CONFIG_V 0x3
#define GPIO_PIN13_CONFIG_S 11


#define GPIO_PIN13_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN13_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN13_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN13_WAKEUP_ENABLE_S 10




# 769 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN13_INT_TYPE 0x00000007
#define GPIO_PIN13_INT_TYPE_M ((GPIO_PIN13_INT_TYPE_V)<<(GPIO_PIN13_INT_TYPE_S))
#define GPIO_PIN13_INT_TYPE_V 0x7
#define GPIO_PIN13_INT_TYPE_S 7


#define GPIO_PIN13_PAD_DRIVER (BIT(2))
#define GPIO_PIN13_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN13_PAD_DRIVER_V 0x1
#define GPIO_PIN13_PAD_DRIVER_S 2

#define GPIO_PIN14_REG (DR_REG_GPIO_BASE + 0x00c0)




# 784 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN14_INT_ENA 0x0000001F
#define GPIO_PIN14_INT_ENA_M ((GPIO_PIN14_INT_ENA_V)<<(GPIO_PIN14_INT_ENA_S))
#define GPIO_PIN14_INT_ENA_V 0x1F
#define GPIO_PIN14_INT_ENA_S 13


#define GPIO_PIN14_CONFIG 0x00000003
#define GPIO_PIN14_CONFIG_M ((GPIO_PIN14_CONFIG_V)<<(GPIO_PIN14_CONFIG_S))
#define GPIO_PIN14_CONFIG_V 0x3
#define GPIO_PIN14_CONFIG_S 11


#define GPIO_PIN14_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN14_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN14_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN14_WAKEUP_ENABLE_S 10




# 803 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN14_INT_TYPE 0x00000007
#define GPIO_PIN14_INT_TYPE_M ((GPIO_PIN14_INT_TYPE_V)<<(GPIO_PIN14_INT_TYPE_S))
#define GPIO_PIN14_INT_TYPE_V 0x7
#define GPIO_PIN14_INT_TYPE_S 7


#define GPIO_PIN14_PAD_DRIVER (BIT(2))
#define GPIO_PIN14_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN14_PAD_DRIVER_V 0x1
#define GPIO_PIN14_PAD_DRIVER_S 2

#define GPIO_PIN15_REG (DR_REG_GPIO_BASE + 0x00c4)




# 818 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN15_INT_ENA 0x0000001F
#define GPIO_PIN15_INT_ENA_M ((GPIO_PIN15_INT_ENA_V)<<(GPIO_PIN15_INT_ENA_S))
#define GPIO_PIN15_INT_ENA_V 0x1F
#define GPIO_PIN15_INT_ENA_S 13


#define GPIO_PIN15_CONFIG 0x00000003
#define GPIO_PIN15_CONFIG_M ((GPIO_PIN15_CONFIG_V)<<(GPIO_PIN15_CONFIG_S))
#define GPIO_PIN15_CONFIG_V 0x3
#define GPIO_PIN15_CONFIG_S 11


#define GPIO_PIN15_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN15_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN15_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN15_WAKEUP_ENABLE_S 10




# 837 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN15_INT_TYPE 0x00000007
#define GPIO_PIN15_INT_TYPE_M ((GPIO_PIN15_INT_TYPE_V)<<(GPIO_PIN15_INT_TYPE_S))
#define GPIO_PIN15_INT_TYPE_V 0x7
#define GPIO_PIN15_INT_TYPE_S 7


#define GPIO_PIN15_PAD_DRIVER (BIT(2))
#define GPIO_PIN15_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN15_PAD_DRIVER_V 0x1
#define GPIO_PIN15_PAD_DRIVER_S 2

#define GPIO_PIN16_REG (DR_REG_GPIO_BASE + 0x00c8)




# 852 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN16_INT_ENA 0x0000001F
#define GPIO_PIN16_INT_ENA_M ((GPIO_PIN16_INT_ENA_V)<<(GPIO_PIN16_INT_ENA_S))
#define GPIO_PIN16_INT_ENA_V 0x1F
#define GPIO_PIN16_INT_ENA_S 13


#define GPIO_PIN16_CONFIG 0x00000003
#define GPIO_PIN16_CONFIG_M ((GPIO_PIN16_CONFIG_V)<<(GPIO_PIN16_CONFIG_S))
#define GPIO_PIN16_CONFIG_V 0x3
#define GPIO_PIN16_CONFIG_S 11


#define GPIO_PIN16_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN16_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN16_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN16_WAKEUP_ENABLE_S 10




# 871 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN16_INT_TYPE 0x00000007
#define GPIO_PIN16_INT_TYPE_M ((GPIO_PIN16_INT_TYPE_V)<<(GPIO_PIN16_INT_TYPE_S))
#define GPIO_PIN16_INT_TYPE_V 0x7
#define GPIO_PIN16_INT_TYPE_S 7


#define GPIO_PIN16_PAD_DRIVER (BIT(2))
#define GPIO_PIN16_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN16_PAD_DRIVER_V 0x1
#define GPIO_PIN16_PAD_DRIVER_S 2

#define GPIO_PIN17_REG (DR_REG_GPIO_BASE + 0x00cc)




# 886 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN17_INT_ENA 0x0000001F
#define GPIO_PIN17_INT_ENA_M ((GPIO_PIN17_INT_ENA_V)<<(GPIO_PIN17_INT_ENA_S))
#define GPIO_PIN17_INT_ENA_V 0x1F
#define GPIO_PIN17_INT_ENA_S 13


#define GPIO_PIN17_CONFIG 0x00000003
#define GPIO_PIN17_CONFIG_M ((GPIO_PIN17_CONFIG_V)<<(GPIO_PIN17_CONFIG_S))
#define GPIO_PIN17_CONFIG_V 0x3
#define GPIO_PIN17_CONFIG_S 11


#define GPIO_PIN17_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN17_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN17_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN17_WAKEUP_ENABLE_S 10




# 905 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN17_INT_TYPE 0x00000007
#define GPIO_PIN17_INT_TYPE_M ((GPIO_PIN17_INT_TYPE_V)<<(GPIO_PIN17_INT_TYPE_S))
#define GPIO_PIN17_INT_TYPE_V 0x7
#define GPIO_PIN17_INT_TYPE_S 7


#define GPIO_PIN17_PAD_DRIVER (BIT(2))
#define GPIO_PIN17_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN17_PAD_DRIVER_V 0x1
#define GPIO_PIN17_PAD_DRIVER_S 2

#define GPIO_PIN18_REG (DR_REG_GPIO_BASE + 0x00d0)




# 920 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN18_INT_ENA 0x0000001F
#define GPIO_PIN18_INT_ENA_M ((GPIO_PIN18_INT_ENA_V)<<(GPIO_PIN18_INT_ENA_S))
#define GPIO_PIN18_INT_ENA_V 0x1F
#define GPIO_PIN18_INT_ENA_S 13


#define GPIO_PIN18_CONFIG 0x00000003
#define GPIO_PIN18_CONFIG_M ((GPIO_PIN18_CONFIG_V)<<(GPIO_PIN18_CONFIG_S))
#define GPIO_PIN18_CONFIG_V 0x3
#define GPIO_PIN18_CONFIG_S 11


#define GPIO_PIN18_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN18_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN18_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN18_WAKEUP_ENABLE_S 10




# 939 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN18_INT_TYPE 0x00000007
#define GPIO_PIN18_INT_TYPE_M ((GPIO_PIN18_INT_TYPE_V)<<(GPIO_PIN18_INT_TYPE_S))
#define GPIO_PIN18_INT_TYPE_V 0x7
#define GPIO_PIN18_INT_TYPE_S 7


#define GPIO_PIN18_PAD_DRIVER (BIT(2))
#define GPIO_PIN18_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN18_PAD_DRIVER_V 0x1
#define GPIO_PIN18_PAD_DRIVER_S 2

#define GPIO_PIN19_REG (DR_REG_GPIO_BASE + 0x00d4)




# 954 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN19_INT_ENA 0x0000001F
#define GPIO_PIN19_INT_ENA_M ((GPIO_PIN19_INT_ENA_V)<<(GPIO_PIN19_INT_ENA_S))
#define GPIO_PIN19_INT_ENA_V 0x1F
#define GPIO_PIN19_INT_ENA_S 13


#define GPIO_PIN19_CONFIG 0x00000003
#define GPIO_PIN19_CONFIG_M ((GPIO_PIN19_CONFIG_V)<<(GPIO_PIN19_CONFIG_S))
#define GPIO_PIN19_CONFIG_V 0x3
#define GPIO_PIN19_CONFIG_S 11


#define GPIO_PIN19_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN19_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN19_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN19_WAKEUP_ENABLE_S 10




# 973 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN19_INT_TYPE 0x00000007
#define GPIO_PIN19_INT_TYPE_M ((GPIO_PIN19_INT_TYPE_V)<<(GPIO_PIN19_INT_TYPE_S))
#define GPIO_PIN19_INT_TYPE_V 0x7
#define GPIO_PIN19_INT_TYPE_S 7


#define GPIO_PIN19_PAD_DRIVER (BIT(2))
#define GPIO_PIN19_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN19_PAD_DRIVER_V 0x1
#define GPIO_PIN19_PAD_DRIVER_S 2

#define GPIO_PIN20_REG (DR_REG_GPIO_BASE + 0x00d8)




# 988 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN20_INT_ENA 0x0000001F
#define GPIO_PIN20_INT_ENA_M ((GPIO_PIN20_INT_ENA_V)<<(GPIO_PIN20_INT_ENA_S))
#define GPIO_PIN20_INT_ENA_V 0x1F
#define GPIO_PIN20_INT_ENA_S 13


#define GPIO_PIN20_CONFIG 0x00000003
#define GPIO_PIN20_CONFIG_M ((GPIO_PIN20_CONFIG_V)<<(GPIO_PIN20_CONFIG_S))
#define GPIO_PIN20_CONFIG_V 0x3
#define GPIO_PIN20_CONFIG_S 11


#define GPIO_PIN20_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN20_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN20_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN20_WAKEUP_ENABLE_S 10




# 1007 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN20_INT_TYPE 0x00000007
#define GPIO_PIN20_INT_TYPE_M ((GPIO_PIN20_INT_TYPE_V)<<(GPIO_PIN20_INT_TYPE_S))
#define GPIO_PIN20_INT_TYPE_V 0x7
#define GPIO_PIN20_INT_TYPE_S 7


#define GPIO_PIN20_PAD_DRIVER (BIT(2))
#define GPIO_PIN20_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN20_PAD_DRIVER_V 0x1
#define GPIO_PIN20_PAD_DRIVER_S 2

#define GPIO_PIN21_REG (DR_REG_GPIO_BASE + 0x00dc)




# 1022 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN21_INT_ENA 0x0000001F
#define GPIO_PIN21_INT_ENA_M ((GPIO_PIN21_INT_ENA_V)<<(GPIO_PIN21_INT_ENA_S))
#define GPIO_PIN21_INT_ENA_V 0x1F
#define GPIO_PIN21_INT_ENA_S 13


#define GPIO_PIN21_CONFIG 0x00000003
#define GPIO_PIN21_CONFIG_M ((GPIO_PIN21_CONFIG_V)<<(GPIO_PIN21_CONFIG_S))
#define GPIO_PIN21_CONFIG_V 0x3
#define GPIO_PIN21_CONFIG_S 11


#define GPIO_PIN21_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN21_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN21_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN21_WAKEUP_ENABLE_S 10




# 1041 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN21_INT_TYPE 0x00000007
#define GPIO_PIN21_INT_TYPE_M ((GPIO_PIN21_INT_TYPE_V)<<(GPIO_PIN21_INT_TYPE_S))
#define GPIO_PIN21_INT_TYPE_V 0x7
#define GPIO_PIN21_INT_TYPE_S 7


#define GPIO_PIN21_PAD_DRIVER (BIT(2))
#define GPIO_PIN21_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN21_PAD_DRIVER_V 0x1
#define GPIO_PIN21_PAD_DRIVER_S 2

#define GPIO_PIN22_REG (DR_REG_GPIO_BASE + 0x00e0)


#define GPIO_PIN22_INT_ENA 0x0000001F
#define GPIO_PIN22_INT_ENA_M ((GPIO_PIN22_INT_ENA_V)<<(GPIO_PIN22_INT_ENA_S))
#define GPIO_PIN22_INT_ENA_V 0x1F
#define GPIO_PIN22_INT_ENA_S 13




# 1062 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN22_CONFIG 0x00000003
#define GPIO_PIN22_CONFIG_M ((GPIO_PIN22_CONFIG_V)<<(GPIO_PIN22_CONFIG_S))
#define GPIO_PIN22_CONFIG_V 0x3
#define GPIO_PIN22_CONFIG_S 11


#define GPIO_PIN22_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN22_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN22_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN22_WAKEUP_ENABLE_S 10


#define GPIO_PIN22_INT_TYPE 0x00000007
#define GPIO_PIN22_INT_TYPE_M ((GPIO_PIN22_INT_TYPE_V)<<(GPIO_PIN22_INT_TYPE_S))
#define GPIO_PIN22_INT_TYPE_V 0x7
#define GPIO_PIN22_INT_TYPE_S 7


#define GPIO_PIN22_PAD_DRIVER (BIT(2))
#define GPIO_PIN22_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN22_PAD_DRIVER_V 0x1
#define GPIO_PIN22_PAD_DRIVER_S 2

#define GPIO_PIN23_REG (DR_REG_GPIO_BASE + 0x00e4)




# 1089 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN23_INT_ENA 0x0000001F
#define GPIO_PIN23_INT_ENA_M ((GPIO_PIN23_INT_ENA_V)<<(GPIO_PIN23_INT_ENA_S))
#define GPIO_PIN23_INT_ENA_V 0x1F
#define GPIO_PIN23_INT_ENA_S 13


#define GPIO_PIN23_CONFIG 0x00000003
#define GPIO_PIN23_CONFIG_M ((GPIO_PIN23_CONFIG_V)<<(GPIO_PIN23_CONFIG_S))
#define GPIO_PIN23_CONFIG_V 0x3
#define GPIO_PIN23_CONFIG_S 11


#define GPIO_PIN23_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN23_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN23_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN23_WAKEUP_ENABLE_S 10




# 1108 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN23_INT_TYPE 0x00000007
#define GPIO_PIN23_INT_TYPE_M ((GPIO_PIN23_INT_TYPE_V)<<(GPIO_PIN23_INT_TYPE_S))
#define GPIO_PIN23_INT_TYPE_V 0x7
#define GPIO_PIN23_INT_TYPE_S 7


#define GPIO_PIN23_PAD_DRIVER (BIT(2))
#define GPIO_PIN23_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN23_PAD_DRIVER_V 0x1
#define GPIO_PIN23_PAD_DRIVER_S 2

#define GPIO_PIN24_REG (DR_REG_GPIO_BASE + 0x00e8)




# 1123 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN24_INT_ENA 0x0000001F
#define GPIO_PIN24_INT_ENA_M ((GPIO_PIN24_INT_ENA_V)<<(GPIO_PIN24_INT_ENA_S))
#define GPIO_PIN24_INT_ENA_V 0x1F
#define GPIO_PIN24_INT_ENA_S 13


#define GPIO_PIN24_CONFIG 0x00000003
#define GPIO_PIN24_CONFIG_M ((GPIO_PIN24_CONFIG_V)<<(GPIO_PIN24_CONFIG_S))
#define GPIO_PIN24_CONFIG_V 0x3
#define GPIO_PIN24_CONFIG_S 11


#define GPIO_PIN24_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN24_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN24_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN24_WAKEUP_ENABLE_S 10




# 1142 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN24_INT_TYPE 0x00000007
#define GPIO_PIN24_INT_TYPE_M ((GPIO_PIN24_INT_TYPE_V)<<(GPIO_PIN24_INT_TYPE_S))
#define GPIO_PIN24_INT_TYPE_V 0x7
#define GPIO_PIN24_INT_TYPE_S 7


#define GPIO_PIN24_PAD_DRIVER (BIT(2))
#define GPIO_PIN24_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN24_PAD_DRIVER_V 0x1
#define GPIO_PIN24_PAD_DRIVER_S 2

#define GPIO_PIN25_REG (DR_REG_GPIO_BASE + 0x00ec)




# 1157 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN25_INT_ENA 0x0000001F
#define GPIO_PIN25_INT_ENA_M ((GPIO_PIN25_INT_ENA_V)<<(GPIO_PIN25_INT_ENA_S))
#define GPIO_PIN25_INT_ENA_V 0x1F
#define GPIO_PIN25_INT_ENA_S 13


#define GPIO_PIN25_CONFIG 0x00000003
#define GPIO_PIN25_CONFIG_M ((GPIO_PIN25_CONFIG_V)<<(GPIO_PIN25_CONFIG_S))
#define GPIO_PIN25_CONFIG_V 0x3
#define GPIO_PIN25_CONFIG_S 11


#define GPIO_PIN25_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN25_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN25_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN25_WAKEUP_ENABLE_S 10




# 1176 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN25_INT_TYPE 0x00000007
#define GPIO_PIN25_INT_TYPE_M ((GPIO_PIN25_INT_TYPE_V)<<(GPIO_PIN25_INT_TYPE_S))
#define GPIO_PIN25_INT_TYPE_V 0x7
#define GPIO_PIN25_INT_TYPE_S 7


#define GPIO_PIN25_PAD_DRIVER (BIT(2))
#define GPIO_PIN25_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN25_PAD_DRIVER_V 0x1
#define GPIO_PIN25_PAD_DRIVER_S 2

#define GPIO_PIN26_REG (DR_REG_GPIO_BASE + 0x00f0)




# 1191 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN26_INT_ENA 0x0000001F
#define GPIO_PIN26_INT_ENA_M ((GPIO_PIN26_INT_ENA_V)<<(GPIO_PIN26_INT_ENA_S))
#define GPIO_PIN26_INT_ENA_V 0x1F
#define GPIO_PIN26_INT_ENA_S 13


#define GPIO_PIN26_CONFIG 0x00000003
#define GPIO_PIN26_CONFIG_M ((GPIO_PIN26_CONFIG_V)<<(GPIO_PIN26_CONFIG_S))
#define GPIO_PIN26_CONFIG_V 0x3
#define GPIO_PIN26_CONFIG_S 11


#define GPIO_PIN26_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN26_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN26_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN26_WAKEUP_ENABLE_S 10




# 1210 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN26_INT_TYPE 0x00000007
#define GPIO_PIN26_INT_TYPE_M ((GPIO_PIN26_INT_TYPE_V)<<(GPIO_PIN26_INT_TYPE_S))
#define GPIO_PIN26_INT_TYPE_V 0x7
#define GPIO_PIN26_INT_TYPE_S 7


#define GPIO_PIN26_PAD_DRIVER (BIT(2))
#define GPIO_PIN26_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN26_PAD_DRIVER_V 0x1
#define GPIO_PIN26_PAD_DRIVER_S 2

#define GPIO_PIN27_REG (DR_REG_GPIO_BASE + 0x00f4)




# 1225 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN27_INT_ENA 0x0000001F
#define GPIO_PIN27_INT_ENA_M ((GPIO_PIN27_INT_ENA_V)<<(GPIO_PIN27_INT_ENA_S))
#define GPIO_PIN27_INT_ENA_V 0x1F
#define GPIO_PIN27_INT_ENA_S 13


#define GPIO_PIN27_CONFIG 0x00000003
#define GPIO_PIN27_CONFIG_M ((GPIO_PIN27_CONFIG_V)<<(GPIO_PIN27_CONFIG_S))
#define GPIO_PIN27_CONFIG_V 0x3
#define GPIO_PIN27_CONFIG_S 11


#define GPIO_PIN27_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN27_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN27_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN27_WAKEUP_ENABLE_S 10




# 1244 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN27_INT_TYPE 0x00000007
#define GPIO_PIN27_INT_TYPE_M ((GPIO_PIN27_INT_TYPE_V)<<(GPIO_PIN27_INT_TYPE_S))
#define GPIO_PIN27_INT_TYPE_V 0x7
#define GPIO_PIN27_INT_TYPE_S 7


#define GPIO_PIN27_PAD_DRIVER (BIT(2))
#define GPIO_PIN27_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN27_PAD_DRIVER_V 0x1
#define GPIO_PIN27_PAD_DRIVER_S 2

#define GPIO_PIN28_REG (DR_REG_GPIO_BASE + 0x00f8)




# 1259 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN28_INT_ENA 0x0000001F
#define GPIO_PIN28_INT_ENA_M ((GPIO_PIN28_INT_ENA_V)<<(GPIO_PIN28_INT_ENA_S))
#define GPIO_PIN28_INT_ENA_V 0x1F
#define GPIO_PIN28_INT_ENA_S 13


#define GPIO_PIN28_CONFIG 0x00000003
#define GPIO_PIN28_CONFIG_M ((GPIO_PIN28_CONFIG_V)<<(GPIO_PIN28_CONFIG_S))
#define GPIO_PIN28_CONFIG_V 0x3
#define GPIO_PIN28_CONFIG_S 11


#define GPIO_PIN28_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN28_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN28_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN28_WAKEUP_ENABLE_S 10




# 1278 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN28_INT_TYPE 0x00000007
#define GPIO_PIN28_INT_TYPE_M ((GPIO_PIN28_INT_TYPE_V)<<(GPIO_PIN28_INT_TYPE_S))
#define GPIO_PIN28_INT_TYPE_V 0x7
#define GPIO_PIN28_INT_TYPE_S 7


#define GPIO_PIN28_PAD_DRIVER (BIT(2))
#define GPIO_PIN28_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN28_PAD_DRIVER_V 0x1
#define GPIO_PIN28_PAD_DRIVER_S 2

#define GPIO_PIN29_REG (DR_REG_GPIO_BASE + 0x00fc)




# 1293 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN29_INT_ENA 0x0000001F
#define GPIO_PIN29_INT_ENA_M ((GPIO_PIN29_INT_ENA_V)<<(GPIO_PIN29_INT_ENA_S))
#define GPIO_PIN29_INT_ENA_V 0x1F
#define GPIO_PIN29_INT_ENA_S 13


#define GPIO_PIN29_CONFIG 0x00000003
#define GPIO_PIN29_CONFIG_M ((GPIO_PIN29_CONFIG_V)<<(GPIO_PIN29_CONFIG_S))
#define GPIO_PIN29_CONFIG_V 0x3
#define GPIO_PIN29_CONFIG_S 11


#define GPIO_PIN29_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN29_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN29_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN29_WAKEUP_ENABLE_S 10




# 1312 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN29_INT_TYPE 0x00000007
#define GPIO_PIN29_INT_TYPE_M ((GPIO_PIN29_INT_TYPE_V)<<(GPIO_PIN29_INT_TYPE_S))
#define GPIO_PIN29_INT_TYPE_V 0x7
#define GPIO_PIN29_INT_TYPE_S 7


#define GPIO_PIN29_PAD_DRIVER (BIT(2))
#define GPIO_PIN29_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN29_PAD_DRIVER_V 0x1
#define GPIO_PIN29_PAD_DRIVER_S 2

#define GPIO_PIN30_REG (DR_REG_GPIO_BASE + 0x0100)




# 1327 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN30_INT_ENA 0x0000001F
#define GPIO_PIN30_INT_ENA_M ((GPIO_PIN30_INT_ENA_V)<<(GPIO_PIN30_INT_ENA_S))
#define GPIO_PIN30_INT_ENA_V 0x1F
#define GPIO_PIN30_INT_ENA_S 13


#define GPIO_PIN30_CONFIG 0x00000003
#define GPIO_PIN30_CONFIG_M ((GPIO_PIN30_CONFIG_V)<<(GPIO_PIN30_CONFIG_S))
#define GPIO_PIN30_CONFIG_V 0x3
#define GPIO_PIN30_CONFIG_S 11


#define GPIO_PIN30_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN30_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN30_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN30_WAKEUP_ENABLE_S 10




# 1346 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN30_INT_TYPE 0x00000007
#define GPIO_PIN30_INT_TYPE_M ((GPIO_PIN30_INT_TYPE_V)<<(GPIO_PIN30_INT_TYPE_S))
#define GPIO_PIN30_INT_TYPE_V 0x7
#define GPIO_PIN30_INT_TYPE_S 7


#define GPIO_PIN30_PAD_DRIVER (BIT(2))
#define GPIO_PIN30_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN30_PAD_DRIVER_V 0x1
#define GPIO_PIN30_PAD_DRIVER_S 2

#define GPIO_PIN31_REG (DR_REG_GPIO_BASE + 0x0104)




# 1361 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN31_INT_ENA 0x0000001F
#define GPIO_PIN31_INT_ENA_M ((GPIO_PIN31_INT_ENA_V)<<(GPIO_PIN31_INT_ENA_S))
#define GPIO_PIN31_INT_ENA_V 0x1F
#define GPIO_PIN31_INT_ENA_S 13


#define GPIO_PIN31_CONFIG 0x00000003
#define GPIO_PIN31_CONFIG_M ((GPIO_PIN31_CONFIG_V)<<(GPIO_PIN31_CONFIG_S))
#define GPIO_PIN31_CONFIG_V 0x3
#define GPIO_PIN31_CONFIG_S 11


#define GPIO_PIN31_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN31_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN31_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN31_WAKEUP_ENABLE_S 10




# 1380 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN31_INT_TYPE 0x00000007
#define GPIO_PIN31_INT_TYPE_M ((GPIO_PIN31_INT_TYPE_V)<<(GPIO_PIN31_INT_TYPE_S))
#define GPIO_PIN31_INT_TYPE_V 0x7
#define GPIO_PIN31_INT_TYPE_S 7


#define GPIO_PIN31_PAD_DRIVER (BIT(2))
#define GPIO_PIN31_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN31_PAD_DRIVER_V 0x1
#define GPIO_PIN31_PAD_DRIVER_S 2

#define GPIO_PIN32_REG (DR_REG_GPIO_BASE + 0x0108)




# 1395 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN32_INT_ENA 0x0000001F
#define GPIO_PIN32_INT_ENA_M ((GPIO_PIN32_INT_ENA_V)<<(GPIO_PIN32_INT_ENA_S))
#define GPIO_PIN32_INT_ENA_V 0x1F
#define GPIO_PIN32_INT_ENA_S 13


#define GPIO_PIN32_CONFIG 0x00000003
#define GPIO_PIN32_CONFIG_M ((GPIO_PIN32_CONFIG_V)<<(GPIO_PIN32_CONFIG_S))
#define GPIO_PIN32_CONFIG_V 0x3
#define GPIO_PIN32_CONFIG_S 11


#define GPIO_PIN32_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN32_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN32_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN32_WAKEUP_ENABLE_S 10




# 1414 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN32_INT_TYPE 0x00000007
#define GPIO_PIN32_INT_TYPE_M ((GPIO_PIN32_INT_TYPE_V)<<(GPIO_PIN32_INT_TYPE_S))
#define GPIO_PIN32_INT_TYPE_V 0x7
#define GPIO_PIN32_INT_TYPE_S 7


#define GPIO_PIN32_PAD_DRIVER (BIT(2))
#define GPIO_PIN32_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN32_PAD_DRIVER_V 0x1
#define GPIO_PIN32_PAD_DRIVER_S 2

#define GPIO_PIN33_REG (DR_REG_GPIO_BASE + 0x010c)




# 1429 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN33_INT_ENA 0x0000001F
#define GPIO_PIN33_INT_ENA_M ((GPIO_PIN33_INT_ENA_V)<<(GPIO_PIN33_INT_ENA_S))
#define GPIO_PIN33_INT_ENA_V 0x1F
#define GPIO_PIN33_INT_ENA_S 13


#define GPIO_PIN33_CONFIG 0x00000003
#define GPIO_PIN33_CONFIG_M ((GPIO_PIN33_CONFIG_V)<<(GPIO_PIN33_CONFIG_S))
#define GPIO_PIN33_CONFIG_V 0x3
#define GPIO_PIN33_CONFIG_S 11


#define GPIO_PIN33_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN33_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN33_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN33_WAKEUP_ENABLE_S 10




# 1448 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN33_INT_TYPE 0x00000007
#define GPIO_PIN33_INT_TYPE_M ((GPIO_PIN33_INT_TYPE_V)<<(GPIO_PIN33_INT_TYPE_S))
#define GPIO_PIN33_INT_TYPE_V 0x7
#define GPIO_PIN33_INT_TYPE_S 7


#define GPIO_PIN33_PAD_DRIVER (BIT(2))
#define GPIO_PIN33_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN33_PAD_DRIVER_V 0x1
#define GPIO_PIN33_PAD_DRIVER_S 2

#define GPIO_PIN34_REG (DR_REG_GPIO_BASE + 0x0110)




# 1463 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN34_INT_ENA 0x0000001F
#define GPIO_PIN34_INT_ENA_M ((GPIO_PIN34_INT_ENA_V)<<(GPIO_PIN34_INT_ENA_S))
#define GPIO_PIN34_INT_ENA_V 0x1F
#define GPIO_PIN34_INT_ENA_S 13


#define GPIO_PIN34_CONFIG 0x00000003
#define GPIO_PIN34_CONFIG_M ((GPIO_PIN34_CONFIG_V)<<(GPIO_PIN34_CONFIG_S))
#define GPIO_PIN34_CONFIG_V 0x3
#define GPIO_PIN34_CONFIG_S 11


#define GPIO_PIN34_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN34_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN34_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN34_WAKEUP_ENABLE_S 10




# 1482 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN34_INT_TYPE 0x00000007
#define GPIO_PIN34_INT_TYPE_M ((GPIO_PIN34_INT_TYPE_V)<<(GPIO_PIN34_INT_TYPE_S))
#define GPIO_PIN34_INT_TYPE_V 0x7
#define GPIO_PIN34_INT_TYPE_S 7


#define GPIO_PIN34_PAD_DRIVER (BIT(2))
#define GPIO_PIN34_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN34_PAD_DRIVER_V 0x1
#define GPIO_PIN34_PAD_DRIVER_S 2

#define GPIO_PIN35_REG (DR_REG_GPIO_BASE + 0x0114)




# 1497 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN35_INT_ENA 0x0000001F
#define GPIO_PIN35_INT_ENA_M ((GPIO_PIN35_INT_ENA_V)<<(GPIO_PIN35_INT_ENA_S))
#define GPIO_PIN35_INT_ENA_V 0x1F
#define GPIO_PIN35_INT_ENA_S 13


#define GPIO_PIN35_CONFIG 0x00000003
#define GPIO_PIN35_CONFIG_M ((GPIO_PIN35_CONFIG_V)<<(GPIO_PIN35_CONFIG_S))
#define GPIO_PIN35_CONFIG_V 0x3
#define GPIO_PIN35_CONFIG_S 11


#define GPIO_PIN35_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN35_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN35_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN35_WAKEUP_ENABLE_S 10




# 1516 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN35_INT_TYPE 0x00000007
#define GPIO_PIN35_INT_TYPE_M ((GPIO_PIN35_INT_TYPE_V)<<(GPIO_PIN35_INT_TYPE_S))
#define GPIO_PIN35_INT_TYPE_V 0x7
#define GPIO_PIN35_INT_TYPE_S 7


#define GPIO_PIN35_PAD_DRIVER (BIT(2))
#define GPIO_PIN35_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN35_PAD_DRIVER_V 0x1
#define GPIO_PIN35_PAD_DRIVER_S 2

#define GPIO_PIN36_REG (DR_REG_GPIO_BASE + 0x0118)




# 1531 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN36_INT_ENA 0x0000001F
#define GPIO_PIN36_INT_ENA_M ((GPIO_PIN36_INT_ENA_V)<<(GPIO_PIN36_INT_ENA_S))
#define GPIO_PIN36_INT_ENA_V 0x1F
#define GPIO_PIN36_INT_ENA_S 13


#define GPIO_PIN36_CONFIG 0x00000003
#define GPIO_PIN36_CONFIG_M ((GPIO_PIN36_CONFIG_V)<<(GPIO_PIN36_CONFIG_S))
#define GPIO_PIN36_CONFIG_V 0x3
#define GPIO_PIN36_CONFIG_S 11


#define GPIO_PIN36_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN36_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN36_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN36_WAKEUP_ENABLE_S 10




# 1550 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN36_INT_TYPE 0x00000007
#define GPIO_PIN36_INT_TYPE_M ((GPIO_PIN36_INT_TYPE_V)<<(GPIO_PIN36_INT_TYPE_S))
#define GPIO_PIN36_INT_TYPE_V 0x7
#define GPIO_PIN36_INT_TYPE_S 7


#define GPIO_PIN36_PAD_DRIVER (BIT(2))
#define GPIO_PIN36_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN36_PAD_DRIVER_V 0x1
#define GPIO_PIN36_PAD_DRIVER_S 2

#define GPIO_PIN37_REG (DR_REG_GPIO_BASE + 0x011c)




# 1565 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN37_INT_ENA 0x0000001F
#define GPIO_PIN37_INT_ENA_M ((GPIO_PIN37_INT_ENA_V)<<(GPIO_PIN37_INT_ENA_S))
#define GPIO_PIN37_INT_ENA_V 0x1F
#define GPIO_PIN37_INT_ENA_S 13


#define GPIO_PIN37_CONFIG 0x00000003
#define GPIO_PIN37_CONFIG_M ((GPIO_PIN37_CONFIG_V)<<(GPIO_PIN37_CONFIG_S))
#define GPIO_PIN37_CONFIG_V 0x3
#define GPIO_PIN37_CONFIG_S 11


#define GPIO_PIN37_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN37_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN37_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN37_WAKEUP_ENABLE_S 10




# 1584 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN37_INT_TYPE 0x00000007
#define GPIO_PIN37_INT_TYPE_M ((GPIO_PIN37_INT_TYPE_V)<<(GPIO_PIN37_INT_TYPE_S))
#define GPIO_PIN37_INT_TYPE_V 0x7
#define GPIO_PIN37_INT_TYPE_S 7


#define GPIO_PIN37_PAD_DRIVER (BIT(2))
#define GPIO_PIN37_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN37_PAD_DRIVER_V 0x1
#define GPIO_PIN37_PAD_DRIVER_S 2

#define GPIO_PIN38_REG (DR_REG_GPIO_BASE + 0x0120)




# 1599 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN38_INT_ENA 0x0000001F
#define GPIO_PIN38_INT_ENA_M ((GPIO_PIN38_INT_ENA_V)<<(GPIO_PIN38_INT_ENA_S))
#define GPIO_PIN38_INT_ENA_V 0x1F
#define GPIO_PIN38_INT_ENA_S 13


#define GPIO_PIN38_CONFIG 0x00000003
#define GPIO_PIN38_CONFIG_M ((GPIO_PIN38_CONFIG_V)<<(GPIO_PIN38_CONFIG_S))
#define GPIO_PIN38_CONFIG_V 0x3
#define GPIO_PIN38_CONFIG_S 11


#define GPIO_PIN38_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN38_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN38_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN38_WAKEUP_ENABLE_S 10




# 1618 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN38_INT_TYPE 0x00000007
#define GPIO_PIN38_INT_TYPE_M ((GPIO_PIN38_INT_TYPE_V)<<(GPIO_PIN38_INT_TYPE_S))
#define GPIO_PIN38_INT_TYPE_V 0x7
#define GPIO_PIN38_INT_TYPE_S 7


#define GPIO_PIN38_PAD_DRIVER (BIT(2))
#define GPIO_PIN38_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN38_PAD_DRIVER_V 0x1
#define GPIO_PIN38_PAD_DRIVER_S 2

#define GPIO_PIN39_REG (DR_REG_GPIO_BASE + 0x0124)




# 1633 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN39_INT_ENA 0x0000001F
#define GPIO_PIN39_INT_ENA_M ((GPIO_PIN39_INT_ENA_V)<<(GPIO_PIN39_INT_ENA_S))
#define GPIO_PIN39_INT_ENA_V 0x1F
#define GPIO_PIN39_INT_ENA_S 13


#define GPIO_PIN39_CONFIG 0x00000003
#define GPIO_PIN39_CONFIG_M ((GPIO_PIN39_CONFIG_V)<<(GPIO_PIN39_CONFIG_S))
#define GPIO_PIN39_CONFIG_V 0x3
#define GPIO_PIN39_CONFIG_S 11


#define GPIO_PIN39_WAKEUP_ENABLE (BIT(10))
#define GPIO_PIN39_WAKEUP_ENABLE_M (BIT(10))
#define GPIO_PIN39_WAKEUP_ENABLE_V 0x1
#define GPIO_PIN39_WAKEUP_ENABLE_S 10




# 1652 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_PIN39_INT_TYPE 0x00000007
#define GPIO_PIN39_INT_TYPE_M ((GPIO_PIN39_INT_TYPE_V)<<(GPIO_PIN39_INT_TYPE_S))
#define GPIO_PIN39_INT_TYPE_V 0x7
#define GPIO_PIN39_INT_TYPE_S 7


#define GPIO_PIN39_PAD_DRIVER (BIT(2))
#define GPIO_PIN39_PAD_DRIVER_M (BIT(2))
#define GPIO_PIN39_PAD_DRIVER_V 0x1
#define GPIO_PIN39_PAD_DRIVER_S 2

#define GPIO_cali_conf_REG (DR_REG_GPIO_BASE + 0x0128)


#define GPIO_CALI_START (BIT(31))
#define GPIO_CALI_START_M (BIT(31))
#define GPIO_CALI_START_V 0x1
#define GPIO_CALI_START_S 31


#define GPIO_CALI_RTC_MAX 0x000003FF
#define GPIO_CALI_RTC_MAX_M ((GPIO_CALI_RTC_MAX_V)<<(GPIO_CALI_RTC_MAX_S))
#define GPIO_CALI_RTC_MAX_V 0x3FF
#define GPIO_CALI_RTC_MAX_S 0

#define GPIO_cali_data_REG (DR_REG_GPIO_BASE + 0x012c)


#define GPIO_CALI_RDY_SYNC2 (BIT(31))
#define GPIO_CALI_RDY_SYNC2_M (BIT(31))
#define GPIO_CALI_RDY_SYNC2_V 0x1
#define GPIO_CALI_RDY_SYNC2_S 31


#define GPIO_CALI_RDY_REAL (BIT(30))
#define GPIO_CALI_RDY_REAL_M (BIT(30))
#define GPIO_CALI_RDY_REAL_V 0x1
#define GPIO_CALI_RDY_REAL_S 30


#define GPIO_CALI_VALUE_SYNC2 0x000FFFFF
#define GPIO_CALI_VALUE_SYNC2_M ((GPIO_CALI_VALUE_SYNC2_V)<<(GPIO_CALI_VALUE_SYNC2_S))
#define GPIO_CALI_VALUE_SYNC2_V 0xFFFFF
#define GPIO_CALI_VALUE_SYNC2_S 0

#define GPIO_FUNC0_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0130)




# 1701 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG0_IN_SEL (BIT(7))
#define GPIO_SIG0_IN_SEL_M (BIT(7))
#define GPIO_SIG0_IN_SEL_V 0x1
#define GPIO_SIG0_IN_SEL_S 7


#define GPIO_FUNC0_IN_INV_SEL (BIT(6))
#define GPIO_FUNC0_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC0_IN_INV_SEL_V 0x1
#define GPIO_FUNC0_IN_INV_SEL_S 6


#define GPIO_FUNC0_IN_SEL 0x0000003F
#define GPIO_FUNC0_IN_SEL_M ((GPIO_FUNC0_IN_SEL_V)<<(GPIO_FUNC0_IN_SEL_S))
#define GPIO_FUNC0_IN_SEL_V 0x3F
#define GPIO_FUNC0_IN_SEL_S 0

#define GPIO_FUNC1_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0134)




# 1722 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG1_IN_SEL (BIT(7))
#define GPIO_SIG1_IN_SEL_M (BIT(7))
#define GPIO_SIG1_IN_SEL_V 0x1
#define GPIO_SIG1_IN_SEL_S 7


#define GPIO_FUNC1_IN_INV_SEL (BIT(6))
#define GPIO_FUNC1_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC1_IN_INV_SEL_V 0x1
#define GPIO_FUNC1_IN_INV_SEL_S 6


#define GPIO_FUNC1_IN_SEL 0x0000003F
#define GPIO_FUNC1_IN_SEL_M ((GPIO_FUNC1_IN_SEL_V)<<(GPIO_FUNC1_IN_SEL_S))
#define GPIO_FUNC1_IN_SEL_V 0x3F
#define GPIO_FUNC1_IN_SEL_S 0

#define GPIO_FUNC2_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0138)




# 1743 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG2_IN_SEL (BIT(7))
#define GPIO_SIG2_IN_SEL_M (BIT(7))
#define GPIO_SIG2_IN_SEL_V 0x1
#define GPIO_SIG2_IN_SEL_S 7


#define GPIO_FUNC2_IN_INV_SEL (BIT(6))
#define GPIO_FUNC2_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC2_IN_INV_SEL_V 0x1
#define GPIO_FUNC2_IN_INV_SEL_S 6


#define GPIO_FUNC2_IN_SEL 0x0000003F
#define GPIO_FUNC2_IN_SEL_M ((GPIO_FUNC2_IN_SEL_V)<<(GPIO_FUNC2_IN_SEL_S))
#define GPIO_FUNC2_IN_SEL_V 0x3F
#define GPIO_FUNC2_IN_SEL_S 0

#define GPIO_FUNC3_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x013c)




# 1764 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG3_IN_SEL (BIT(7))
#define GPIO_SIG3_IN_SEL_M (BIT(7))
#define GPIO_SIG3_IN_SEL_V 0x1
#define GPIO_SIG3_IN_SEL_S 7


#define GPIO_FUNC3_IN_INV_SEL (BIT(6))
#define GPIO_FUNC3_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC3_IN_INV_SEL_V 0x1
#define GPIO_FUNC3_IN_INV_SEL_S 6


#define GPIO_FUNC3_IN_SEL 0x0000003F
#define GPIO_FUNC3_IN_SEL_M ((GPIO_FUNC3_IN_SEL_V)<<(GPIO_FUNC3_IN_SEL_S))
#define GPIO_FUNC3_IN_SEL_V 0x3F
#define GPIO_FUNC3_IN_SEL_S 0

#define GPIO_FUNC4_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0140)




# 1785 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG4_IN_SEL (BIT(7))
#define GPIO_SIG4_IN_SEL_M (BIT(7))
#define GPIO_SIG4_IN_SEL_V 0x1
#define GPIO_SIG4_IN_SEL_S 7


#define GPIO_FUNC4_IN_INV_SEL (BIT(6))
#define GPIO_FUNC4_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC4_IN_INV_SEL_V 0x1
#define GPIO_FUNC4_IN_INV_SEL_S 6


#define GPIO_FUNC4_IN_SEL 0x0000003F
#define GPIO_FUNC4_IN_SEL_M ((GPIO_FUNC4_IN_SEL_V)<<(GPIO_FUNC4_IN_SEL_S))
#define GPIO_FUNC4_IN_SEL_V 0x3F
#define GPIO_FUNC4_IN_SEL_S 0

#define GPIO_FUNC5_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0144)




# 1806 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG5_IN_SEL (BIT(7))
#define GPIO_SIG5_IN_SEL_M (BIT(7))
#define GPIO_SIG5_IN_SEL_V 0x1
#define GPIO_SIG5_IN_SEL_S 7


#define GPIO_FUNC5_IN_INV_SEL (BIT(6))
#define GPIO_FUNC5_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC5_IN_INV_SEL_V 0x1
#define GPIO_FUNC5_IN_INV_SEL_S 6


#define GPIO_FUNC5_IN_SEL 0x0000003F
#define GPIO_FUNC5_IN_SEL_M ((GPIO_FUNC5_IN_SEL_V)<<(GPIO_FUNC5_IN_SEL_S))
#define GPIO_FUNC5_IN_SEL_V 0x3F
#define GPIO_FUNC5_IN_SEL_S 0

#define GPIO_FUNC6_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0148)




# 1827 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG6_IN_SEL (BIT(7))
#define GPIO_SIG6_IN_SEL_M (BIT(7))
#define GPIO_SIG6_IN_SEL_V 0x1
#define GPIO_SIG6_IN_SEL_S 7


#define GPIO_FUNC6_IN_INV_SEL (BIT(6))
#define GPIO_FUNC6_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC6_IN_INV_SEL_V 0x1
#define GPIO_FUNC6_IN_INV_SEL_S 6


#define GPIO_FUNC6_IN_SEL 0x0000003F
#define GPIO_FUNC6_IN_SEL_M ((GPIO_FUNC6_IN_SEL_V)<<(GPIO_FUNC6_IN_SEL_S))
#define GPIO_FUNC6_IN_SEL_V 0x3F
#define GPIO_FUNC6_IN_SEL_S 0

#define GPIO_FUNC7_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x014c)




# 1848 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG7_IN_SEL (BIT(7))
#define GPIO_SIG7_IN_SEL_M (BIT(7))
#define GPIO_SIG7_IN_SEL_V 0x1
#define GPIO_SIG7_IN_SEL_S 7


#define GPIO_FUNC7_IN_INV_SEL (BIT(6))
#define GPIO_FUNC7_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC7_IN_INV_SEL_V 0x1
#define GPIO_FUNC7_IN_INV_SEL_S 6


#define GPIO_FUNC7_IN_SEL 0x0000003F
#define GPIO_FUNC7_IN_SEL_M ((GPIO_FUNC7_IN_SEL_V)<<(GPIO_FUNC7_IN_SEL_S))
#define GPIO_FUNC7_IN_SEL_V 0x3F
#define GPIO_FUNC7_IN_SEL_S 0

#define GPIO_FUNC8_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0150)




# 1869 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG8_IN_SEL (BIT(7))
#define GPIO_SIG8_IN_SEL_M (BIT(7))
#define GPIO_SIG8_IN_SEL_V 0x1
#define GPIO_SIG8_IN_SEL_S 7


#define GPIO_FUNC8_IN_INV_SEL (BIT(6))
#define GPIO_FUNC8_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC8_IN_INV_SEL_V 0x1
#define GPIO_FUNC8_IN_INV_SEL_S 6


#define GPIO_FUNC8_IN_SEL 0x0000003F
#define GPIO_FUNC8_IN_SEL_M ((GPIO_FUNC8_IN_SEL_V)<<(GPIO_FUNC8_IN_SEL_S))
#define GPIO_FUNC8_IN_SEL_V 0x3F
#define GPIO_FUNC8_IN_SEL_S 0

#define GPIO_FUNC9_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0154)




# 1890 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG9_IN_SEL (BIT(7))
#define GPIO_SIG9_IN_SEL_M (BIT(7))
#define GPIO_SIG9_IN_SEL_V 0x1
#define GPIO_SIG9_IN_SEL_S 7


#define GPIO_FUNC9_IN_INV_SEL (BIT(6))
#define GPIO_FUNC9_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC9_IN_INV_SEL_V 0x1
#define GPIO_FUNC9_IN_INV_SEL_S 6


#define GPIO_FUNC9_IN_SEL 0x0000003F
#define GPIO_FUNC9_IN_SEL_M ((GPIO_FUNC9_IN_SEL_V)<<(GPIO_FUNC9_IN_SEL_S))
#define GPIO_FUNC9_IN_SEL_V 0x3F
#define GPIO_FUNC9_IN_SEL_S 0

#define GPIO_FUNC10_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0158)




# 1911 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG10_IN_SEL (BIT(7))
#define GPIO_SIG10_IN_SEL_M (BIT(7))
#define GPIO_SIG10_IN_SEL_V 0x1
#define GPIO_SIG10_IN_SEL_S 7


#define GPIO_FUNC10_IN_INV_SEL (BIT(6))
#define GPIO_FUNC10_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC10_IN_INV_SEL_V 0x1
#define GPIO_FUNC10_IN_INV_SEL_S 6


#define GPIO_FUNC10_IN_SEL 0x0000003F
#define GPIO_FUNC10_IN_SEL_M ((GPIO_FUNC10_IN_SEL_V)<<(GPIO_FUNC10_IN_SEL_S))
#define GPIO_FUNC10_IN_SEL_V 0x3F
#define GPIO_FUNC10_IN_SEL_S 0

#define GPIO_FUNC11_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x015c)




# 1932 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG11_IN_SEL (BIT(7))
#define GPIO_SIG11_IN_SEL_M (BIT(7))
#define GPIO_SIG11_IN_SEL_V 0x1
#define GPIO_SIG11_IN_SEL_S 7


#define GPIO_FUNC11_IN_INV_SEL (BIT(6))
#define GPIO_FUNC11_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC11_IN_INV_SEL_V 0x1
#define GPIO_FUNC11_IN_INV_SEL_S 6


#define GPIO_FUNC11_IN_SEL 0x0000003F
#define GPIO_FUNC11_IN_SEL_M ((GPIO_FUNC11_IN_SEL_V)<<(GPIO_FUNC11_IN_SEL_S))
#define GPIO_FUNC11_IN_SEL_V 0x3F
#define GPIO_FUNC11_IN_SEL_S 0

#define GPIO_FUNC12_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0160)




# 1953 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG12_IN_SEL (BIT(7))
#define GPIO_SIG12_IN_SEL_M (BIT(7))
#define GPIO_SIG12_IN_SEL_V 0x1
#define GPIO_SIG12_IN_SEL_S 7


#define GPIO_FUNC12_IN_INV_SEL (BIT(6))
#define GPIO_FUNC12_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC12_IN_INV_SEL_V 0x1
#define GPIO_FUNC12_IN_INV_SEL_S 6


#define GPIO_FUNC12_IN_SEL 0x0000003F
#define GPIO_FUNC12_IN_SEL_M ((GPIO_FUNC12_IN_SEL_V)<<(GPIO_FUNC12_IN_SEL_S))
#define GPIO_FUNC12_IN_SEL_V 0x3F
#define GPIO_FUNC12_IN_SEL_S 0

#define GPIO_FUNC13_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0164)




# 1974 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG13_IN_SEL (BIT(7))
#define GPIO_SIG13_IN_SEL_M (BIT(7))
#define GPIO_SIG13_IN_SEL_V 0x1
#define GPIO_SIG13_IN_SEL_S 7


#define GPIO_FUNC13_IN_INV_SEL (BIT(6))
#define GPIO_FUNC13_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC13_IN_INV_SEL_V 0x1
#define GPIO_FUNC13_IN_INV_SEL_S 6


#define GPIO_FUNC13_IN_SEL 0x0000003F
#define GPIO_FUNC13_IN_SEL_M ((GPIO_FUNC13_IN_SEL_V)<<(GPIO_FUNC13_IN_SEL_S))
#define GPIO_FUNC13_IN_SEL_V 0x3F
#define GPIO_FUNC13_IN_SEL_S 0

#define GPIO_FUNC14_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0168)




# 1995 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG14_IN_SEL (BIT(7))
#define GPIO_SIG14_IN_SEL_M (BIT(7))
#define GPIO_SIG14_IN_SEL_V 0x1
#define GPIO_SIG14_IN_SEL_S 7


#define GPIO_FUNC14_IN_INV_SEL (BIT(6))
#define GPIO_FUNC14_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC14_IN_INV_SEL_V 0x1
#define GPIO_FUNC14_IN_INV_SEL_S 6


#define GPIO_FUNC14_IN_SEL 0x0000003F
#define GPIO_FUNC14_IN_SEL_M ((GPIO_FUNC14_IN_SEL_V)<<(GPIO_FUNC14_IN_SEL_S))
#define GPIO_FUNC14_IN_SEL_V 0x3F
#define GPIO_FUNC14_IN_SEL_S 0

#define GPIO_FUNC15_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x016c)




# 2016 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG15_IN_SEL (BIT(7))
#define GPIO_SIG15_IN_SEL_M (BIT(7))
#define GPIO_SIG15_IN_SEL_V 0x1
#define GPIO_SIG15_IN_SEL_S 7


#define GPIO_FUNC15_IN_INV_SEL (BIT(6))
#define GPIO_FUNC15_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC15_IN_INV_SEL_V 0x1
#define GPIO_FUNC15_IN_INV_SEL_S 6


#define GPIO_FUNC15_IN_SEL 0x0000003F
#define GPIO_FUNC15_IN_SEL_M ((GPIO_FUNC15_IN_SEL_V)<<(GPIO_FUNC15_IN_SEL_S))
#define GPIO_FUNC15_IN_SEL_V 0x3F
#define GPIO_FUNC15_IN_SEL_S 0

#define GPIO_FUNC16_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0170)




# 2037 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG16_IN_SEL (BIT(7))
#define GPIO_SIG16_IN_SEL_M (BIT(7))
#define GPIO_SIG16_IN_SEL_V 0x1
#define GPIO_SIG16_IN_SEL_S 7


#define GPIO_FUNC16_IN_INV_SEL (BIT(6))
#define GPIO_FUNC16_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC16_IN_INV_SEL_V 0x1
#define GPIO_FUNC16_IN_INV_SEL_S 6


#define GPIO_FUNC16_IN_SEL 0x0000003F
#define GPIO_FUNC16_IN_SEL_M ((GPIO_FUNC16_IN_SEL_V)<<(GPIO_FUNC16_IN_SEL_S))
#define GPIO_FUNC16_IN_SEL_V 0x3F
#define GPIO_FUNC16_IN_SEL_S 0

#define GPIO_FUNC17_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0174)




# 2058 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG17_IN_SEL (BIT(7))
#define GPIO_SIG17_IN_SEL_M (BIT(7))
#define GPIO_SIG17_IN_SEL_V 0x1
#define GPIO_SIG17_IN_SEL_S 7


#define GPIO_FUNC17_IN_INV_SEL (BIT(6))
#define GPIO_FUNC17_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC17_IN_INV_SEL_V 0x1
#define GPIO_FUNC17_IN_INV_SEL_S 6


#define GPIO_FUNC17_IN_SEL 0x0000003F
#define GPIO_FUNC17_IN_SEL_M ((GPIO_FUNC17_IN_SEL_V)<<(GPIO_FUNC17_IN_SEL_S))
#define GPIO_FUNC17_IN_SEL_V 0x3F
#define GPIO_FUNC17_IN_SEL_S 0

#define GPIO_FUNC18_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0178)




# 2079 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG18_IN_SEL (BIT(7))
#define GPIO_SIG18_IN_SEL_M (BIT(7))
#define GPIO_SIG18_IN_SEL_V 0x1
#define GPIO_SIG18_IN_SEL_S 7


#define GPIO_FUNC18_IN_INV_SEL (BIT(6))
#define GPIO_FUNC18_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC18_IN_INV_SEL_V 0x1
#define GPIO_FUNC18_IN_INV_SEL_S 6


#define GPIO_FUNC18_IN_SEL 0x0000003F
#define GPIO_FUNC18_IN_SEL_M ((GPIO_FUNC18_IN_SEL_V)<<(GPIO_FUNC18_IN_SEL_S))
#define GPIO_FUNC18_IN_SEL_V 0x3F
#define GPIO_FUNC18_IN_SEL_S 0

#define GPIO_FUNC19_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x017c)




# 2100 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG19_IN_SEL (BIT(7))
#define GPIO_SIG19_IN_SEL_M (BIT(7))
#define GPIO_SIG19_IN_SEL_V 0x1
#define GPIO_SIG19_IN_SEL_S 7


#define GPIO_FUNC19_IN_INV_SEL (BIT(6))
#define GPIO_FUNC19_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC19_IN_INV_SEL_V 0x1
#define GPIO_FUNC19_IN_INV_SEL_S 6


#define GPIO_FUNC19_IN_SEL 0x0000003F
#define GPIO_FUNC19_IN_SEL_M ((GPIO_FUNC19_IN_SEL_V)<<(GPIO_FUNC19_IN_SEL_S))
#define GPIO_FUNC19_IN_SEL_V 0x3F
#define GPIO_FUNC19_IN_SEL_S 0

#define GPIO_FUNC20_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0180)




# 2121 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG20_IN_SEL (BIT(7))
#define GPIO_SIG20_IN_SEL_M (BIT(7))
#define GPIO_SIG20_IN_SEL_V 0x1
#define GPIO_SIG20_IN_SEL_S 7


#define GPIO_FUNC20_IN_INV_SEL (BIT(6))
#define GPIO_FUNC20_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC20_IN_INV_SEL_V 0x1
#define GPIO_FUNC20_IN_INV_SEL_S 6


#define GPIO_FUNC20_IN_SEL 0x0000003F
#define GPIO_FUNC20_IN_SEL_M ((GPIO_FUNC20_IN_SEL_V)<<(GPIO_FUNC20_IN_SEL_S))
#define GPIO_FUNC20_IN_SEL_V 0x3F
#define GPIO_FUNC20_IN_SEL_S 0

#define GPIO_FUNC21_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0184)




# 2142 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG21_IN_SEL (BIT(7))
#define GPIO_SIG21_IN_SEL_M (BIT(7))
#define GPIO_SIG21_IN_SEL_V 0x1
#define GPIO_SIG21_IN_SEL_S 7


#define GPIO_FUNC21_IN_INV_SEL (BIT(6))
#define GPIO_FUNC21_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC21_IN_INV_SEL_V 0x1
#define GPIO_FUNC21_IN_INV_SEL_S 6


#define GPIO_FUNC21_IN_SEL 0x0000003F
#define GPIO_FUNC21_IN_SEL_M ((GPIO_FUNC21_IN_SEL_V)<<(GPIO_FUNC21_IN_SEL_S))
#define GPIO_FUNC21_IN_SEL_V 0x3F
#define GPIO_FUNC21_IN_SEL_S 0

#define GPIO_FUNC22_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0188)




# 2163 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG22_IN_SEL (BIT(7))
#define GPIO_SIG22_IN_SEL_M (BIT(7))
#define GPIO_SIG22_IN_SEL_V 0x1
#define GPIO_SIG22_IN_SEL_S 7


#define GPIO_FUNC22_IN_INV_SEL (BIT(6))
#define GPIO_FUNC22_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC22_IN_INV_SEL_V 0x1
#define GPIO_FUNC22_IN_INV_SEL_S 6


#define GPIO_FUNC22_IN_SEL 0x0000003F
#define GPIO_FUNC22_IN_SEL_M ((GPIO_FUNC22_IN_SEL_V)<<(GPIO_FUNC22_IN_SEL_S))
#define GPIO_FUNC22_IN_SEL_V 0x3F
#define GPIO_FUNC22_IN_SEL_S 0

#define GPIO_FUNC23_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x018c)




# 2184 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG23_IN_SEL (BIT(7))
#define GPIO_SIG23_IN_SEL_M (BIT(7))
#define GPIO_SIG23_IN_SEL_V 0x1
#define GPIO_SIG23_IN_SEL_S 7


#define GPIO_FUNC23_IN_INV_SEL (BIT(6))
#define GPIO_FUNC23_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC23_IN_INV_SEL_V 0x1
#define GPIO_FUNC23_IN_INV_SEL_S 6


#define GPIO_FUNC23_IN_SEL 0x0000003F
#define GPIO_FUNC23_IN_SEL_M ((GPIO_FUNC23_IN_SEL_V)<<(GPIO_FUNC23_IN_SEL_S))
#define GPIO_FUNC23_IN_SEL_V 0x3F
#define GPIO_FUNC23_IN_SEL_S 0

#define GPIO_FUNC24_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0190)




# 2205 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG24_IN_SEL (BIT(7))
#define GPIO_SIG24_IN_SEL_M (BIT(7))
#define GPIO_SIG24_IN_SEL_V 0x1
#define GPIO_SIG24_IN_SEL_S 7


#define GPIO_FUNC24_IN_INV_SEL (BIT(6))
#define GPIO_FUNC24_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC24_IN_INV_SEL_V 0x1
#define GPIO_FUNC24_IN_INV_SEL_S 6


#define GPIO_FUNC24_IN_SEL 0x0000003F
#define GPIO_FUNC24_IN_SEL_M ((GPIO_FUNC24_IN_SEL_V)<<(GPIO_FUNC24_IN_SEL_S))
#define GPIO_FUNC24_IN_SEL_V 0x3F
#define GPIO_FUNC24_IN_SEL_S 0

#define GPIO_FUNC25_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0194)




# 2226 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG25_IN_SEL (BIT(7))
#define GPIO_SIG25_IN_SEL_M (BIT(7))
#define GPIO_SIG25_IN_SEL_V 0x1
#define GPIO_SIG25_IN_SEL_S 7


#define GPIO_FUNC25_IN_INV_SEL (BIT(6))
#define GPIO_FUNC25_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC25_IN_INV_SEL_V 0x1
#define GPIO_FUNC25_IN_INV_SEL_S 6


#define GPIO_FUNC25_IN_SEL 0x0000003F
#define GPIO_FUNC25_IN_SEL_M ((GPIO_FUNC25_IN_SEL_V)<<(GPIO_FUNC25_IN_SEL_S))
#define GPIO_FUNC25_IN_SEL_V 0x3F
#define GPIO_FUNC25_IN_SEL_S 0

#define GPIO_FUNC26_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0198)




# 2247 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG26_IN_SEL (BIT(7))
#define GPIO_SIG26_IN_SEL_M (BIT(7))
#define GPIO_SIG26_IN_SEL_V 0x1
#define GPIO_SIG26_IN_SEL_S 7


#define GPIO_FUNC26_IN_INV_SEL (BIT(6))
#define GPIO_FUNC26_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC26_IN_INV_SEL_V 0x1
#define GPIO_FUNC26_IN_INV_SEL_S 6


#define GPIO_FUNC26_IN_SEL 0x0000003F
#define GPIO_FUNC26_IN_SEL_M ((GPIO_FUNC26_IN_SEL_V)<<(GPIO_FUNC26_IN_SEL_S))
#define GPIO_FUNC26_IN_SEL_V 0x3F
#define GPIO_FUNC26_IN_SEL_S 0

#define GPIO_FUNC27_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x019c)




# 2268 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG27_IN_SEL (BIT(7))
#define GPIO_SIG27_IN_SEL_M (BIT(7))
#define GPIO_SIG27_IN_SEL_V 0x1
#define GPIO_SIG27_IN_SEL_S 7


#define GPIO_FUNC27_IN_INV_SEL (BIT(6))
#define GPIO_FUNC27_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC27_IN_INV_SEL_V 0x1
#define GPIO_FUNC27_IN_INV_SEL_S 6


#define GPIO_FUNC27_IN_SEL 0x0000003F
#define GPIO_FUNC27_IN_SEL_M ((GPIO_FUNC27_IN_SEL_V)<<(GPIO_FUNC27_IN_SEL_S))
#define GPIO_FUNC27_IN_SEL_V 0x3F
#define GPIO_FUNC27_IN_SEL_S 0

#define GPIO_FUNC28_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01a0)




# 2289 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG28_IN_SEL (BIT(7))
#define GPIO_SIG28_IN_SEL_M (BIT(7))
#define GPIO_SIG28_IN_SEL_V 0x1
#define GPIO_SIG28_IN_SEL_S 7


#define GPIO_FUNC28_IN_INV_SEL (BIT(6))
#define GPIO_FUNC28_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC28_IN_INV_SEL_V 0x1
#define GPIO_FUNC28_IN_INV_SEL_S 6


#define GPIO_FUNC28_IN_SEL 0x0000003F
#define GPIO_FUNC28_IN_SEL_M ((GPIO_FUNC28_IN_SEL_V)<<(GPIO_FUNC28_IN_SEL_S))
#define GPIO_FUNC28_IN_SEL_V 0x3F
#define GPIO_FUNC28_IN_SEL_S 0

#define GPIO_FUNC29_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01a4)




# 2310 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG29_IN_SEL (BIT(7))
#define GPIO_SIG29_IN_SEL_M (BIT(7))
#define GPIO_SIG29_IN_SEL_V 0x1
#define GPIO_SIG29_IN_SEL_S 7


#define GPIO_FUNC29_IN_INV_SEL (BIT(6))
#define GPIO_FUNC29_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC29_IN_INV_SEL_V 0x1
#define GPIO_FUNC29_IN_INV_SEL_S 6


#define GPIO_FUNC29_IN_SEL 0x0000003F
#define GPIO_FUNC29_IN_SEL_M ((GPIO_FUNC29_IN_SEL_V)<<(GPIO_FUNC29_IN_SEL_S))
#define GPIO_FUNC29_IN_SEL_V 0x3F
#define GPIO_FUNC29_IN_SEL_S 0

#define GPIO_FUNC30_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01a8)




# 2331 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG30_IN_SEL (BIT(7))
#define GPIO_SIG30_IN_SEL_M (BIT(7))
#define GPIO_SIG30_IN_SEL_V 0x1
#define GPIO_SIG30_IN_SEL_S 7


#define GPIO_FUNC30_IN_INV_SEL (BIT(6))
#define GPIO_FUNC30_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC30_IN_INV_SEL_V 0x1
#define GPIO_FUNC30_IN_INV_SEL_S 6


#define GPIO_FUNC30_IN_SEL 0x0000003F
#define GPIO_FUNC30_IN_SEL_M ((GPIO_FUNC30_IN_SEL_V)<<(GPIO_FUNC30_IN_SEL_S))
#define GPIO_FUNC30_IN_SEL_V 0x3F
#define GPIO_FUNC30_IN_SEL_S 0

#define GPIO_FUNC31_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01ac)




# 2352 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG31_IN_SEL (BIT(7))
#define GPIO_SIG31_IN_SEL_M (BIT(7))
#define GPIO_SIG31_IN_SEL_V 0x1
#define GPIO_SIG31_IN_SEL_S 7


#define GPIO_FUNC31_IN_INV_SEL (BIT(6))
#define GPIO_FUNC31_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC31_IN_INV_SEL_V 0x1
#define GPIO_FUNC31_IN_INV_SEL_S 6


#define GPIO_FUNC31_IN_SEL 0x0000003F
#define GPIO_FUNC31_IN_SEL_M ((GPIO_FUNC31_IN_SEL_V)<<(GPIO_FUNC31_IN_SEL_S))
#define GPIO_FUNC31_IN_SEL_V 0x3F
#define GPIO_FUNC31_IN_SEL_S 0

#define GPIO_FUNC32_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01b0)




# 2373 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG32_IN_SEL (BIT(7))
#define GPIO_SIG32_IN_SEL_M (BIT(7))
#define GPIO_SIG32_IN_SEL_V 0x1
#define GPIO_SIG32_IN_SEL_S 7


#define GPIO_FUNC32_IN_INV_SEL (BIT(6))
#define GPIO_FUNC32_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC32_IN_INV_SEL_V 0x1
#define GPIO_FUNC32_IN_INV_SEL_S 6


#define GPIO_FUNC32_IN_SEL 0x0000003F
#define GPIO_FUNC32_IN_SEL_M ((GPIO_FUNC32_IN_SEL_V)<<(GPIO_FUNC32_IN_SEL_S))
#define GPIO_FUNC32_IN_SEL_V 0x3F
#define GPIO_FUNC32_IN_SEL_S 0

#define GPIO_FUNC33_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01b4)




# 2394 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG33_IN_SEL (BIT(7))
#define GPIO_SIG33_IN_SEL_M (BIT(7))
#define GPIO_SIG33_IN_SEL_V 0x1
#define GPIO_SIG33_IN_SEL_S 7


#define GPIO_FUNC33_IN_INV_SEL (BIT(6))
#define GPIO_FUNC33_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC33_IN_INV_SEL_V 0x1
#define GPIO_FUNC33_IN_INV_SEL_S 6


#define GPIO_FUNC33_IN_SEL 0x0000003F
#define GPIO_FUNC33_IN_SEL_M ((GPIO_FUNC33_IN_SEL_V)<<(GPIO_FUNC33_IN_SEL_S))
#define GPIO_FUNC33_IN_SEL_V 0x3F
#define GPIO_FUNC33_IN_SEL_S 0

#define GPIO_FUNC34_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01b8)




# 2415 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG34_IN_SEL (BIT(7))
#define GPIO_SIG34_IN_SEL_M (BIT(7))
#define GPIO_SIG34_IN_SEL_V 0x1
#define GPIO_SIG34_IN_SEL_S 7


#define GPIO_FUNC34_IN_INV_SEL (BIT(6))
#define GPIO_FUNC34_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC34_IN_INV_SEL_V 0x1
#define GPIO_FUNC34_IN_INV_SEL_S 6


#define GPIO_FUNC34_IN_SEL 0x0000003F
#define GPIO_FUNC34_IN_SEL_M ((GPIO_FUNC34_IN_SEL_V)<<(GPIO_FUNC34_IN_SEL_S))
#define GPIO_FUNC34_IN_SEL_V 0x3F
#define GPIO_FUNC34_IN_SEL_S 0

#define GPIO_FUNC35_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01bc)




# 2436 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG35_IN_SEL (BIT(7))
#define GPIO_SIG35_IN_SEL_M (BIT(7))
#define GPIO_SIG35_IN_SEL_V 0x1
#define GPIO_SIG35_IN_SEL_S 7


#define GPIO_FUNC35_IN_INV_SEL (BIT(6))
#define GPIO_FUNC35_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC35_IN_INV_SEL_V 0x1
#define GPIO_FUNC35_IN_INV_SEL_S 6


#define GPIO_FUNC35_IN_SEL 0x0000003F
#define GPIO_FUNC35_IN_SEL_M ((GPIO_FUNC35_IN_SEL_V)<<(GPIO_FUNC35_IN_SEL_S))
#define GPIO_FUNC35_IN_SEL_V 0x3F
#define GPIO_FUNC35_IN_SEL_S 0

#define GPIO_FUNC36_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01c0)




# 2457 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG36_IN_SEL (BIT(7))
#define GPIO_SIG36_IN_SEL_M (BIT(7))
#define GPIO_SIG36_IN_SEL_V 0x1
#define GPIO_SIG36_IN_SEL_S 7


#define GPIO_FUNC36_IN_INV_SEL (BIT(6))
#define GPIO_FUNC36_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC36_IN_INV_SEL_V 0x1
#define GPIO_FUNC36_IN_INV_SEL_S 6


#define GPIO_FUNC36_IN_SEL 0x0000003F
#define GPIO_FUNC36_IN_SEL_M ((GPIO_FUNC36_IN_SEL_V)<<(GPIO_FUNC36_IN_SEL_S))
#define GPIO_FUNC36_IN_SEL_V 0x3F
#define GPIO_FUNC36_IN_SEL_S 0

#define GPIO_FUNC37_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01c4)




# 2478 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG37_IN_SEL (BIT(7))
#define GPIO_SIG37_IN_SEL_M (BIT(7))
#define GPIO_SIG37_IN_SEL_V 0x1
#define GPIO_SIG37_IN_SEL_S 7


#define GPIO_FUNC37_IN_INV_SEL (BIT(6))
#define GPIO_FUNC37_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC37_IN_INV_SEL_V 0x1
#define GPIO_FUNC37_IN_INV_SEL_S 6


#define GPIO_FUNC37_IN_SEL 0x0000003F
#define GPIO_FUNC37_IN_SEL_M ((GPIO_FUNC37_IN_SEL_V)<<(GPIO_FUNC37_IN_SEL_S))
#define GPIO_FUNC37_IN_SEL_V 0x3F
#define GPIO_FUNC37_IN_SEL_S 0

#define GPIO_FUNC38_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01c8)




# 2499 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG38_IN_SEL (BIT(7))
#define GPIO_SIG38_IN_SEL_M (BIT(7))
#define GPIO_SIG38_IN_SEL_V 0x1
#define GPIO_SIG38_IN_SEL_S 7


#define GPIO_FUNC38_IN_INV_SEL (BIT(6))
#define GPIO_FUNC38_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC38_IN_INV_SEL_V 0x1
#define GPIO_FUNC38_IN_INV_SEL_S 6


#define GPIO_FUNC38_IN_SEL 0x0000003F
#define GPIO_FUNC38_IN_SEL_M ((GPIO_FUNC38_IN_SEL_V)<<(GPIO_FUNC38_IN_SEL_S))
#define GPIO_FUNC38_IN_SEL_V 0x3F
#define GPIO_FUNC38_IN_SEL_S 0

#define GPIO_FUNC39_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01cc)




# 2520 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG39_IN_SEL (BIT(7))
#define GPIO_SIG39_IN_SEL_M (BIT(7))
#define GPIO_SIG39_IN_SEL_V 0x1
#define GPIO_SIG39_IN_SEL_S 7


#define GPIO_FUNC39_IN_INV_SEL (BIT(6))
#define GPIO_FUNC39_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC39_IN_INV_SEL_V 0x1
#define GPIO_FUNC39_IN_INV_SEL_S 6


#define GPIO_FUNC39_IN_SEL 0x0000003F
#define GPIO_FUNC39_IN_SEL_M ((GPIO_FUNC39_IN_SEL_V)<<(GPIO_FUNC39_IN_SEL_S))
#define GPIO_FUNC39_IN_SEL_V 0x3F
#define GPIO_FUNC39_IN_SEL_S 0

#define GPIO_FUNC40_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01d0)




# 2541 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG40_IN_SEL (BIT(7))
#define GPIO_SIG40_IN_SEL_M (BIT(7))
#define GPIO_SIG40_IN_SEL_V 0x1
#define GPIO_SIG40_IN_SEL_S 7


#define GPIO_FUNC40_IN_INV_SEL (BIT(6))
#define GPIO_FUNC40_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC40_IN_INV_SEL_V 0x1
#define GPIO_FUNC40_IN_INV_SEL_S 6


#define GPIO_FUNC40_IN_SEL 0x0000003F
#define GPIO_FUNC40_IN_SEL_M ((GPIO_FUNC40_IN_SEL_V)<<(GPIO_FUNC40_IN_SEL_S))
#define GPIO_FUNC40_IN_SEL_V 0x3F
#define GPIO_FUNC40_IN_SEL_S 0

#define GPIO_FUNC41_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01d4)




# 2562 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG41_IN_SEL (BIT(7))
#define GPIO_SIG41_IN_SEL_M (BIT(7))
#define GPIO_SIG41_IN_SEL_V 0x1
#define GPIO_SIG41_IN_SEL_S 7


#define GPIO_FUNC41_IN_INV_SEL (BIT(6))
#define GPIO_FUNC41_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC41_IN_INV_SEL_V 0x1
#define GPIO_FUNC41_IN_INV_SEL_S 6


#define GPIO_FUNC41_IN_SEL 0x0000003F
#define GPIO_FUNC41_IN_SEL_M ((GPIO_FUNC41_IN_SEL_V)<<(GPIO_FUNC41_IN_SEL_S))
#define GPIO_FUNC41_IN_SEL_V 0x3F
#define GPIO_FUNC41_IN_SEL_S 0

#define GPIO_FUNC42_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01d8)




# 2583 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG42_IN_SEL (BIT(7))
#define GPIO_SIG42_IN_SEL_M (BIT(7))
#define GPIO_SIG42_IN_SEL_V 0x1
#define GPIO_SIG42_IN_SEL_S 7


#define GPIO_FUNC42_IN_INV_SEL (BIT(6))
#define GPIO_FUNC42_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC42_IN_INV_SEL_V 0x1
#define GPIO_FUNC42_IN_INV_SEL_S 6


#define GPIO_FUNC42_IN_SEL 0x0000003F
#define GPIO_FUNC42_IN_SEL_M ((GPIO_FUNC42_IN_SEL_V)<<(GPIO_FUNC42_IN_SEL_S))
#define GPIO_FUNC42_IN_SEL_V 0x3F
#define GPIO_FUNC42_IN_SEL_S 0

#define GPIO_FUNC43_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01dc)




# 2604 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG43_IN_SEL (BIT(7))
#define GPIO_SIG43_IN_SEL_M (BIT(7))
#define GPIO_SIG43_IN_SEL_V 0x1
#define GPIO_SIG43_IN_SEL_S 7


#define GPIO_FUNC43_IN_INV_SEL (BIT(6))
#define GPIO_FUNC43_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC43_IN_INV_SEL_V 0x1
#define GPIO_FUNC43_IN_INV_SEL_S 6


#define GPIO_FUNC43_IN_SEL 0x0000003F
#define GPIO_FUNC43_IN_SEL_M ((GPIO_FUNC43_IN_SEL_V)<<(GPIO_FUNC43_IN_SEL_S))
#define GPIO_FUNC43_IN_SEL_V 0x3F
#define GPIO_FUNC43_IN_SEL_S 0

#define GPIO_FUNC44_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01e0)




# 2625 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG44_IN_SEL (BIT(7))
#define GPIO_SIG44_IN_SEL_M (BIT(7))
#define GPIO_SIG44_IN_SEL_V 0x1
#define GPIO_SIG44_IN_SEL_S 7


#define GPIO_FUNC44_IN_INV_SEL (BIT(6))
#define GPIO_FUNC44_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC44_IN_INV_SEL_V 0x1
#define GPIO_FUNC44_IN_INV_SEL_S 6


#define GPIO_FUNC44_IN_SEL 0x0000003F
#define GPIO_FUNC44_IN_SEL_M ((GPIO_FUNC44_IN_SEL_V)<<(GPIO_FUNC44_IN_SEL_S))
#define GPIO_FUNC44_IN_SEL_V 0x3F
#define GPIO_FUNC44_IN_SEL_S 0

#define GPIO_FUNC45_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01e4)




# 2646 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG45_IN_SEL (BIT(7))
#define GPIO_SIG45_IN_SEL_M (BIT(7))
#define GPIO_SIG45_IN_SEL_V 0x1
#define GPIO_SIG45_IN_SEL_S 7


#define GPIO_FUNC45_IN_INV_SEL (BIT(6))
#define GPIO_FUNC45_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC45_IN_INV_SEL_V 0x1
#define GPIO_FUNC45_IN_INV_SEL_S 6


#define GPIO_FUNC45_IN_SEL 0x0000003F
#define GPIO_FUNC45_IN_SEL_M ((GPIO_FUNC45_IN_SEL_V)<<(GPIO_FUNC45_IN_SEL_S))
#define GPIO_FUNC45_IN_SEL_V 0x3F
#define GPIO_FUNC45_IN_SEL_S 0

#define GPIO_FUNC46_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01e8)




# 2667 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG46_IN_SEL (BIT(7))
#define GPIO_SIG46_IN_SEL_M (BIT(7))
#define GPIO_SIG46_IN_SEL_V 0x1
#define GPIO_SIG46_IN_SEL_S 7


#define GPIO_FUNC46_IN_INV_SEL (BIT(6))
#define GPIO_FUNC46_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC46_IN_INV_SEL_V 0x1
#define GPIO_FUNC46_IN_INV_SEL_S 6


#define GPIO_FUNC46_IN_SEL 0x0000003F
#define GPIO_FUNC46_IN_SEL_M ((GPIO_FUNC46_IN_SEL_V)<<(GPIO_FUNC46_IN_SEL_S))
#define GPIO_FUNC46_IN_SEL_V 0x3F
#define GPIO_FUNC46_IN_SEL_S 0

#define GPIO_FUNC47_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01ec)




# 2688 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG47_IN_SEL (BIT(7))
#define GPIO_SIG47_IN_SEL_M (BIT(7))
#define GPIO_SIG47_IN_SEL_V 0x1
#define GPIO_SIG47_IN_SEL_S 7


#define GPIO_FUNC47_IN_INV_SEL (BIT(6))
#define GPIO_FUNC47_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC47_IN_INV_SEL_V 0x1
#define GPIO_FUNC47_IN_INV_SEL_S 6


#define GPIO_FUNC47_IN_SEL 0x0000003F
#define GPIO_FUNC47_IN_SEL_M ((GPIO_FUNC47_IN_SEL_V)<<(GPIO_FUNC47_IN_SEL_S))
#define GPIO_FUNC47_IN_SEL_V 0x3F
#define GPIO_FUNC47_IN_SEL_S 0

#define GPIO_FUNC48_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01f0)




# 2709 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG48_IN_SEL (BIT(7))
#define GPIO_SIG48_IN_SEL_M (BIT(7))
#define GPIO_SIG48_IN_SEL_V 0x1
#define GPIO_SIG48_IN_SEL_S 7


#define GPIO_FUNC48_IN_INV_SEL (BIT(6))
#define GPIO_FUNC48_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC48_IN_INV_SEL_V 0x1
#define GPIO_FUNC48_IN_INV_SEL_S 6


#define GPIO_FUNC48_IN_SEL 0x0000003F
#define GPIO_FUNC48_IN_SEL_M ((GPIO_FUNC48_IN_SEL_V)<<(GPIO_FUNC48_IN_SEL_S))
#define GPIO_FUNC48_IN_SEL_V 0x3F
#define GPIO_FUNC48_IN_SEL_S 0

#define GPIO_FUNC49_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01f4)




# 2730 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG49_IN_SEL (BIT(7))
#define GPIO_SIG49_IN_SEL_M (BIT(7))
#define GPIO_SIG49_IN_SEL_V 0x1
#define GPIO_SIG49_IN_SEL_S 7


#define GPIO_FUNC49_IN_INV_SEL (BIT(6))
#define GPIO_FUNC49_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC49_IN_INV_SEL_V 0x1
#define GPIO_FUNC49_IN_INV_SEL_S 6


#define GPIO_FUNC49_IN_SEL 0x0000003F
#define GPIO_FUNC49_IN_SEL_M ((GPIO_FUNC49_IN_SEL_V)<<(GPIO_FUNC49_IN_SEL_S))
#define GPIO_FUNC49_IN_SEL_V 0x3F
#define GPIO_FUNC49_IN_SEL_S 0

#define GPIO_FUNC50_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01f8)




# 2751 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG50_IN_SEL (BIT(7))
#define GPIO_SIG50_IN_SEL_M (BIT(7))
#define GPIO_SIG50_IN_SEL_V 0x1
#define GPIO_SIG50_IN_SEL_S 7


#define GPIO_FUNC50_IN_INV_SEL (BIT(6))
#define GPIO_FUNC50_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC50_IN_INV_SEL_V 0x1
#define GPIO_FUNC50_IN_INV_SEL_S 6


#define GPIO_FUNC50_IN_SEL 0x0000003F
#define GPIO_FUNC50_IN_SEL_M ((GPIO_FUNC50_IN_SEL_V)<<(GPIO_FUNC50_IN_SEL_S))
#define GPIO_FUNC50_IN_SEL_V 0x3F
#define GPIO_FUNC50_IN_SEL_S 0

#define GPIO_FUNC51_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x01fc)




# 2772 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG51_IN_SEL (BIT(7))
#define GPIO_SIG51_IN_SEL_M (BIT(7))
#define GPIO_SIG51_IN_SEL_V 0x1
#define GPIO_SIG51_IN_SEL_S 7


#define GPIO_FUNC51_IN_INV_SEL (BIT(6))
#define GPIO_FUNC51_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC51_IN_INV_SEL_V 0x1
#define GPIO_FUNC51_IN_INV_SEL_S 6


#define GPIO_FUNC51_IN_SEL 0x0000003F
#define GPIO_FUNC51_IN_SEL_M ((GPIO_FUNC51_IN_SEL_V)<<(GPIO_FUNC51_IN_SEL_S))
#define GPIO_FUNC51_IN_SEL_V 0x3F
#define GPIO_FUNC51_IN_SEL_S 0

#define GPIO_FUNC52_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0200)




# 2793 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG52_IN_SEL (BIT(7))
#define GPIO_SIG52_IN_SEL_M (BIT(7))
#define GPIO_SIG52_IN_SEL_V 0x1
#define GPIO_SIG52_IN_SEL_S 7


#define GPIO_FUNC52_IN_INV_SEL (BIT(6))
#define GPIO_FUNC52_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC52_IN_INV_SEL_V 0x1
#define GPIO_FUNC52_IN_INV_SEL_S 6


#define GPIO_FUNC52_IN_SEL 0x0000003F
#define GPIO_FUNC52_IN_SEL_M ((GPIO_FUNC52_IN_SEL_V)<<(GPIO_FUNC52_IN_SEL_S))
#define GPIO_FUNC52_IN_SEL_V 0x3F
#define GPIO_FUNC52_IN_SEL_S 0

#define GPIO_FUNC53_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0204)




# 2814 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG53_IN_SEL (BIT(7))
#define GPIO_SIG53_IN_SEL_M (BIT(7))
#define GPIO_SIG53_IN_SEL_V 0x1
#define GPIO_SIG53_IN_SEL_S 7


#define GPIO_FUNC53_IN_INV_SEL (BIT(6))
#define GPIO_FUNC53_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC53_IN_INV_SEL_V 0x1
#define GPIO_FUNC53_IN_INV_SEL_S 6


#define GPIO_FUNC53_IN_SEL 0x0000003F
#define GPIO_FUNC53_IN_SEL_M ((GPIO_FUNC53_IN_SEL_V)<<(GPIO_FUNC53_IN_SEL_S))
#define GPIO_FUNC53_IN_SEL_V 0x3F
#define GPIO_FUNC53_IN_SEL_S 0

#define GPIO_FUNC54_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0208)




# 2835 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG54_IN_SEL (BIT(7))
#define GPIO_SIG54_IN_SEL_M (BIT(7))
#define GPIO_SIG54_IN_SEL_V 0x1
#define GPIO_SIG54_IN_SEL_S 7


#define GPIO_FUNC54_IN_INV_SEL (BIT(6))
#define GPIO_FUNC54_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC54_IN_INV_SEL_V 0x1
#define GPIO_FUNC54_IN_INV_SEL_S 6


#define GPIO_FUNC54_IN_SEL 0x0000003F
#define GPIO_FUNC54_IN_SEL_M ((GPIO_FUNC54_IN_SEL_V)<<(GPIO_FUNC54_IN_SEL_S))
#define GPIO_FUNC54_IN_SEL_V 0x3F
#define GPIO_FUNC54_IN_SEL_S 0

#define GPIO_FUNC55_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x020c)




# 2856 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG55_IN_SEL (BIT(7))
#define GPIO_SIG55_IN_SEL_M (BIT(7))
#define GPIO_SIG55_IN_SEL_V 0x1
#define GPIO_SIG55_IN_SEL_S 7


#define GPIO_FUNC55_IN_INV_SEL (BIT(6))
#define GPIO_FUNC55_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC55_IN_INV_SEL_V 0x1
#define GPIO_FUNC55_IN_INV_SEL_S 6


#define GPIO_FUNC55_IN_SEL 0x0000003F
#define GPIO_FUNC55_IN_SEL_M ((GPIO_FUNC55_IN_SEL_V)<<(GPIO_FUNC55_IN_SEL_S))
#define GPIO_FUNC55_IN_SEL_V 0x3F
#define GPIO_FUNC55_IN_SEL_S 0

#define GPIO_FUNC56_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0210)




# 2877 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG56_IN_SEL (BIT(7))
#define GPIO_SIG56_IN_SEL_M (BIT(7))
#define GPIO_SIG56_IN_SEL_V 0x1
#define GPIO_SIG56_IN_SEL_S 7


#define GPIO_FUNC56_IN_INV_SEL (BIT(6))
#define GPIO_FUNC56_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC56_IN_INV_SEL_V 0x1
#define GPIO_FUNC56_IN_INV_SEL_S 6


#define GPIO_FUNC56_IN_SEL 0x0000003F
#define GPIO_FUNC56_IN_SEL_M ((GPIO_FUNC56_IN_SEL_V)<<(GPIO_FUNC56_IN_SEL_S))
#define GPIO_FUNC56_IN_SEL_V 0x3F
#define GPIO_FUNC56_IN_SEL_S 0

#define GPIO_FUNC57_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0214)




# 2898 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG57_IN_SEL (BIT(7))
#define GPIO_SIG57_IN_SEL_M (BIT(7))
#define GPIO_SIG57_IN_SEL_V 0x1
#define GPIO_SIG57_IN_SEL_S 7


#define GPIO_FUNC57_IN_INV_SEL (BIT(6))
#define GPIO_FUNC57_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC57_IN_INV_SEL_V 0x1
#define GPIO_FUNC57_IN_INV_SEL_S 6


#define GPIO_FUNC57_IN_SEL 0x0000003F
#define GPIO_FUNC57_IN_SEL_M ((GPIO_FUNC57_IN_SEL_V)<<(GPIO_FUNC57_IN_SEL_S))
#define GPIO_FUNC57_IN_SEL_V 0x3F
#define GPIO_FUNC57_IN_SEL_S 0

#define GPIO_FUNC58_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0218)




# 2919 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG58_IN_SEL (BIT(7))
#define GPIO_SIG58_IN_SEL_M (BIT(7))
#define GPIO_SIG58_IN_SEL_V 0x1
#define GPIO_SIG58_IN_SEL_S 7


#define GPIO_FUNC58_IN_INV_SEL (BIT(6))
#define GPIO_FUNC58_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC58_IN_INV_SEL_V 0x1
#define GPIO_FUNC58_IN_INV_SEL_S 6


#define GPIO_FUNC58_IN_SEL 0x0000003F
#define GPIO_FUNC58_IN_SEL_M ((GPIO_FUNC58_IN_SEL_V)<<(GPIO_FUNC58_IN_SEL_S))
#define GPIO_FUNC58_IN_SEL_V 0x3F
#define GPIO_FUNC58_IN_SEL_S 0

#define GPIO_FUNC59_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x021c)




# 2940 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG59_IN_SEL (BIT(7))
#define GPIO_SIG59_IN_SEL_M (BIT(7))
#define GPIO_SIG59_IN_SEL_V 0x1
#define GPIO_SIG59_IN_SEL_S 7


#define GPIO_FUNC59_IN_INV_SEL (BIT(6))
#define GPIO_FUNC59_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC59_IN_INV_SEL_V 0x1
#define GPIO_FUNC59_IN_INV_SEL_S 6


#define GPIO_FUNC59_IN_SEL 0x0000003F
#define GPIO_FUNC59_IN_SEL_M ((GPIO_FUNC59_IN_SEL_V)<<(GPIO_FUNC59_IN_SEL_S))
#define GPIO_FUNC59_IN_SEL_V 0x3F
#define GPIO_FUNC59_IN_SEL_S 0

#define GPIO_FUNC60_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0220)




# 2961 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG60_IN_SEL (BIT(7))
#define GPIO_SIG60_IN_SEL_M (BIT(7))
#define GPIO_SIG60_IN_SEL_V 0x1
#define GPIO_SIG60_IN_SEL_S 7


#define GPIO_FUNC60_IN_INV_SEL (BIT(6))
#define GPIO_FUNC60_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC60_IN_INV_SEL_V 0x1
#define GPIO_FUNC60_IN_INV_SEL_S 6


#define GPIO_FUNC60_IN_SEL 0x0000003F
#define GPIO_FUNC60_IN_SEL_M ((GPIO_FUNC60_IN_SEL_V)<<(GPIO_FUNC60_IN_SEL_S))
#define GPIO_FUNC60_IN_SEL_V 0x3F
#define GPIO_FUNC60_IN_SEL_S 0

#define GPIO_FUNC61_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0224)




# 2982 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG61_IN_SEL (BIT(7))
#define GPIO_SIG61_IN_SEL_M (BIT(7))
#define GPIO_SIG61_IN_SEL_V 0x1
#define GPIO_SIG61_IN_SEL_S 7


#define GPIO_FUNC61_IN_INV_SEL (BIT(6))
#define GPIO_FUNC61_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC61_IN_INV_SEL_V 0x1
#define GPIO_FUNC61_IN_INV_SEL_S 6


#define GPIO_FUNC61_IN_SEL 0x0000003F
#define GPIO_FUNC61_IN_SEL_M ((GPIO_FUNC61_IN_SEL_V)<<(GPIO_FUNC61_IN_SEL_S))
#define GPIO_FUNC61_IN_SEL_V 0x3F
#define GPIO_FUNC61_IN_SEL_S 0

#define GPIO_FUNC62_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0228)




# 3003 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG62_IN_SEL (BIT(7))
#define GPIO_SIG62_IN_SEL_M (BIT(7))
#define GPIO_SIG62_IN_SEL_V 0x1
#define GPIO_SIG62_IN_SEL_S 7


#define GPIO_FUNC62_IN_INV_SEL (BIT(6))
#define GPIO_FUNC62_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC62_IN_INV_SEL_V 0x1
#define GPIO_FUNC62_IN_INV_SEL_S 6


#define GPIO_FUNC62_IN_SEL 0x0000003F
#define GPIO_FUNC62_IN_SEL_M ((GPIO_FUNC62_IN_SEL_V)<<(GPIO_FUNC62_IN_SEL_S))
#define GPIO_FUNC62_IN_SEL_V 0x3F
#define GPIO_FUNC62_IN_SEL_S 0

#define GPIO_FUNC63_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x022c)




# 3024 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG63_IN_SEL (BIT(7))
#define GPIO_SIG63_IN_SEL_M (BIT(7))
#define GPIO_SIG63_IN_SEL_V 0x1
#define GPIO_SIG63_IN_SEL_S 7


#define GPIO_FUNC63_IN_INV_SEL (BIT(6))
#define GPIO_FUNC63_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC63_IN_INV_SEL_V 0x1
#define GPIO_FUNC63_IN_INV_SEL_S 6


#define GPIO_FUNC63_IN_SEL 0x0000003F
#define GPIO_FUNC63_IN_SEL_M ((GPIO_FUNC63_IN_SEL_V)<<(GPIO_FUNC63_IN_SEL_S))
#define GPIO_FUNC63_IN_SEL_V 0x3F
#define GPIO_FUNC63_IN_SEL_S 0

#define GPIO_FUNC64_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0230)




# 3045 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG64_IN_SEL (BIT(7))
#define GPIO_SIG64_IN_SEL_M (BIT(7))
#define GPIO_SIG64_IN_SEL_V 0x1
#define GPIO_SIG64_IN_SEL_S 7


#define GPIO_FUNC64_IN_INV_SEL (BIT(6))
#define GPIO_FUNC64_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC64_IN_INV_SEL_V 0x1
#define GPIO_FUNC64_IN_INV_SEL_S 6


#define GPIO_FUNC64_IN_SEL 0x0000003F
#define GPIO_FUNC64_IN_SEL_M ((GPIO_FUNC64_IN_SEL_V)<<(GPIO_FUNC64_IN_SEL_S))
#define GPIO_FUNC64_IN_SEL_V 0x3F
#define GPIO_FUNC64_IN_SEL_S 0

#define GPIO_FUNC65_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0234)




# 3066 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG65_IN_SEL (BIT(7))
#define GPIO_SIG65_IN_SEL_M (BIT(7))
#define GPIO_SIG65_IN_SEL_V 0x1
#define GPIO_SIG65_IN_SEL_S 7


#define GPIO_FUNC65_IN_INV_SEL (BIT(6))
#define GPIO_FUNC65_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC65_IN_INV_SEL_V 0x1
#define GPIO_FUNC65_IN_INV_SEL_S 6


#define GPIO_FUNC65_IN_SEL 0x0000003F
#define GPIO_FUNC65_IN_SEL_M ((GPIO_FUNC65_IN_SEL_V)<<(GPIO_FUNC65_IN_SEL_S))
#define GPIO_FUNC65_IN_SEL_V 0x3F
#define GPIO_FUNC65_IN_SEL_S 0

#define GPIO_FUNC66_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0238)




# 3087 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG66_IN_SEL (BIT(7))
#define GPIO_SIG66_IN_SEL_M (BIT(7))
#define GPIO_SIG66_IN_SEL_V 0x1
#define GPIO_SIG66_IN_SEL_S 7


#define GPIO_FUNC66_IN_INV_SEL (BIT(6))
#define GPIO_FUNC66_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC66_IN_INV_SEL_V 0x1
#define GPIO_FUNC66_IN_INV_SEL_S 6


#define GPIO_FUNC66_IN_SEL 0x0000003F
#define GPIO_FUNC66_IN_SEL_M ((GPIO_FUNC66_IN_SEL_V)<<(GPIO_FUNC66_IN_SEL_S))
#define GPIO_FUNC66_IN_SEL_V 0x3F
#define GPIO_FUNC66_IN_SEL_S 0

#define GPIO_FUNC67_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x023c)




# 3108 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG67_IN_SEL (BIT(7))
#define GPIO_SIG67_IN_SEL_M (BIT(7))
#define GPIO_SIG67_IN_SEL_V 0x1
#define GPIO_SIG67_IN_SEL_S 7


#define GPIO_FUNC67_IN_INV_SEL (BIT(6))
#define GPIO_FUNC67_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC67_IN_INV_SEL_V 0x1
#define GPIO_FUNC67_IN_INV_SEL_S 6


#define GPIO_FUNC67_IN_SEL 0x0000003F
#define GPIO_FUNC67_IN_SEL_M ((GPIO_FUNC67_IN_SEL_V)<<(GPIO_FUNC67_IN_SEL_S))
#define GPIO_FUNC67_IN_SEL_V 0x3F
#define GPIO_FUNC67_IN_SEL_S 0

#define GPIO_FUNC68_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0240)




# 3129 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG68_IN_SEL (BIT(7))
#define GPIO_SIG68_IN_SEL_M (BIT(7))
#define GPIO_SIG68_IN_SEL_V 0x1
#define GPIO_SIG68_IN_SEL_S 7


#define GPIO_FUNC68_IN_INV_SEL (BIT(6))
#define GPIO_FUNC68_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC68_IN_INV_SEL_V 0x1
#define GPIO_FUNC68_IN_INV_SEL_S 6


#define GPIO_FUNC68_IN_SEL 0x0000003F
#define GPIO_FUNC68_IN_SEL_M ((GPIO_FUNC68_IN_SEL_V)<<(GPIO_FUNC68_IN_SEL_S))
#define GPIO_FUNC68_IN_SEL_V 0x3F
#define GPIO_FUNC68_IN_SEL_S 0

#define GPIO_FUNC69_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0244)




# 3150 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG69_IN_SEL (BIT(7))
#define GPIO_SIG69_IN_SEL_M (BIT(7))
#define GPIO_SIG69_IN_SEL_V 0x1
#define GPIO_SIG69_IN_SEL_S 7


#define GPIO_FUNC69_IN_INV_SEL (BIT(6))
#define GPIO_FUNC69_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC69_IN_INV_SEL_V 0x1
#define GPIO_FUNC69_IN_INV_SEL_S 6


#define GPIO_FUNC69_IN_SEL 0x0000003F
#define GPIO_FUNC69_IN_SEL_M ((GPIO_FUNC69_IN_SEL_V)<<(GPIO_FUNC69_IN_SEL_S))
#define GPIO_FUNC69_IN_SEL_V 0x3F
#define GPIO_FUNC69_IN_SEL_S 0

#define GPIO_FUNC70_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0248)




# 3171 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG70_IN_SEL (BIT(7))
#define GPIO_SIG70_IN_SEL_M (BIT(7))
#define GPIO_SIG70_IN_SEL_V 0x1
#define GPIO_SIG70_IN_SEL_S 7


#define GPIO_FUNC70_IN_INV_SEL (BIT(6))
#define GPIO_FUNC70_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC70_IN_INV_SEL_V 0x1
#define GPIO_FUNC70_IN_INV_SEL_S 6


#define GPIO_FUNC70_IN_SEL 0x0000003F
#define GPIO_FUNC70_IN_SEL_M ((GPIO_FUNC70_IN_SEL_V)<<(GPIO_FUNC70_IN_SEL_S))
#define GPIO_FUNC70_IN_SEL_V 0x3F
#define GPIO_FUNC70_IN_SEL_S 0

#define GPIO_FUNC71_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x024c)




# 3192 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG71_IN_SEL (BIT(7))
#define GPIO_SIG71_IN_SEL_M (BIT(7))
#define GPIO_SIG71_IN_SEL_V 0x1
#define GPIO_SIG71_IN_SEL_S 7


#define GPIO_FUNC71_IN_INV_SEL (BIT(6))
#define GPIO_FUNC71_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC71_IN_INV_SEL_V 0x1
#define GPIO_FUNC71_IN_INV_SEL_S 6


#define GPIO_FUNC71_IN_SEL 0x0000003F
#define GPIO_FUNC71_IN_SEL_M ((GPIO_FUNC71_IN_SEL_V)<<(GPIO_FUNC71_IN_SEL_S))
#define GPIO_FUNC71_IN_SEL_V 0x3F
#define GPIO_FUNC71_IN_SEL_S 0

#define GPIO_FUNC72_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0250)




# 3213 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG72_IN_SEL (BIT(7))
#define GPIO_SIG72_IN_SEL_M (BIT(7))
#define GPIO_SIG72_IN_SEL_V 0x1
#define GPIO_SIG72_IN_SEL_S 7


#define GPIO_FUNC72_IN_INV_SEL (BIT(6))
#define GPIO_FUNC72_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC72_IN_INV_SEL_V 0x1
#define GPIO_FUNC72_IN_INV_SEL_S 6


#define GPIO_FUNC72_IN_SEL 0x0000003F
#define GPIO_FUNC72_IN_SEL_M ((GPIO_FUNC72_IN_SEL_V)<<(GPIO_FUNC72_IN_SEL_S))
#define GPIO_FUNC72_IN_SEL_V 0x3F
#define GPIO_FUNC72_IN_SEL_S 0

#define GPIO_FUNC73_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0254)




# 3234 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG73_IN_SEL (BIT(7))
#define GPIO_SIG73_IN_SEL_M (BIT(7))
#define GPIO_SIG73_IN_SEL_V 0x1
#define GPIO_SIG73_IN_SEL_S 7


#define GPIO_FUNC73_IN_INV_SEL (BIT(6))
#define GPIO_FUNC73_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC73_IN_INV_SEL_V 0x1
#define GPIO_FUNC73_IN_INV_SEL_S 6


#define GPIO_FUNC73_IN_SEL 0x0000003F
#define GPIO_FUNC73_IN_SEL_M ((GPIO_FUNC73_IN_SEL_V)<<(GPIO_FUNC73_IN_SEL_S))
#define GPIO_FUNC73_IN_SEL_V 0x3F
#define GPIO_FUNC73_IN_SEL_S 0

#define GPIO_FUNC74_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0258)




# 3255 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG74_IN_SEL (BIT(7))
#define GPIO_SIG74_IN_SEL_M (BIT(7))
#define GPIO_SIG74_IN_SEL_V 0x1
#define GPIO_SIG74_IN_SEL_S 7


#define GPIO_FUNC74_IN_INV_SEL (BIT(6))
#define GPIO_FUNC74_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC74_IN_INV_SEL_V 0x1
#define GPIO_FUNC74_IN_INV_SEL_S 6


#define GPIO_FUNC74_IN_SEL 0x0000003F
#define GPIO_FUNC74_IN_SEL_M ((GPIO_FUNC74_IN_SEL_V)<<(GPIO_FUNC74_IN_SEL_S))
#define GPIO_FUNC74_IN_SEL_V 0x3F
#define GPIO_FUNC74_IN_SEL_S 0

#define GPIO_FUNC75_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x025c)




# 3276 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG75_IN_SEL (BIT(7))
#define GPIO_SIG75_IN_SEL_M (BIT(7))
#define GPIO_SIG75_IN_SEL_V 0x1
#define GPIO_SIG75_IN_SEL_S 7


#define GPIO_FUNC75_IN_INV_SEL (BIT(6))
#define GPIO_FUNC75_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC75_IN_INV_SEL_V 0x1
#define GPIO_FUNC75_IN_INV_SEL_S 6


#define GPIO_FUNC75_IN_SEL 0x0000003F
#define GPIO_FUNC75_IN_SEL_M ((GPIO_FUNC75_IN_SEL_V)<<(GPIO_FUNC75_IN_SEL_S))
#define GPIO_FUNC75_IN_SEL_V 0x3F
#define GPIO_FUNC75_IN_SEL_S 0

#define GPIO_FUNC76_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0260)




# 3297 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG76_IN_SEL (BIT(7))
#define GPIO_SIG76_IN_SEL_M (BIT(7))
#define GPIO_SIG76_IN_SEL_V 0x1
#define GPIO_SIG76_IN_SEL_S 7


#define GPIO_FUNC76_IN_INV_SEL (BIT(6))
#define GPIO_FUNC76_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC76_IN_INV_SEL_V 0x1
#define GPIO_FUNC76_IN_INV_SEL_S 6


#define GPIO_FUNC76_IN_SEL 0x0000003F
#define GPIO_FUNC76_IN_SEL_M ((GPIO_FUNC76_IN_SEL_V)<<(GPIO_FUNC76_IN_SEL_S))
#define GPIO_FUNC76_IN_SEL_V 0x3F
#define GPIO_FUNC76_IN_SEL_S 0

#define GPIO_FUNC77_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0264)




# 3318 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG77_IN_SEL (BIT(7))
#define GPIO_SIG77_IN_SEL_M (BIT(7))
#define GPIO_SIG77_IN_SEL_V 0x1
#define GPIO_SIG77_IN_SEL_S 7


#define GPIO_FUNC77_IN_INV_SEL (BIT(6))
#define GPIO_FUNC77_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC77_IN_INV_SEL_V 0x1
#define GPIO_FUNC77_IN_INV_SEL_S 6


#define GPIO_FUNC77_IN_SEL 0x0000003F
#define GPIO_FUNC77_IN_SEL_M ((GPIO_FUNC77_IN_SEL_V)<<(GPIO_FUNC77_IN_SEL_S))
#define GPIO_FUNC77_IN_SEL_V 0x3F
#define GPIO_FUNC77_IN_SEL_S 0

#define GPIO_FUNC78_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0268)




# 3339 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG78_IN_SEL (BIT(7))
#define GPIO_SIG78_IN_SEL_M (BIT(7))
#define GPIO_SIG78_IN_SEL_V 0x1
#define GPIO_SIG78_IN_SEL_S 7


#define GPIO_FUNC78_IN_INV_SEL (BIT(6))
#define GPIO_FUNC78_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC78_IN_INV_SEL_V 0x1
#define GPIO_FUNC78_IN_INV_SEL_S 6


#define GPIO_FUNC78_IN_SEL 0x0000003F
#define GPIO_FUNC78_IN_SEL_M ((GPIO_FUNC78_IN_SEL_V)<<(GPIO_FUNC78_IN_SEL_S))
#define GPIO_FUNC78_IN_SEL_V 0x3F
#define GPIO_FUNC78_IN_SEL_S 0

#define GPIO_FUNC79_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x026c)




# 3360 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG79_IN_SEL (BIT(7))
#define GPIO_SIG79_IN_SEL_M (BIT(7))
#define GPIO_SIG79_IN_SEL_V 0x1
#define GPIO_SIG79_IN_SEL_S 7


#define GPIO_FUNC79_IN_INV_SEL (BIT(6))
#define GPIO_FUNC79_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC79_IN_INV_SEL_V 0x1
#define GPIO_FUNC79_IN_INV_SEL_S 6


#define GPIO_FUNC79_IN_SEL 0x0000003F
#define GPIO_FUNC79_IN_SEL_M ((GPIO_FUNC79_IN_SEL_V)<<(GPIO_FUNC79_IN_SEL_S))
#define GPIO_FUNC79_IN_SEL_V 0x3F
#define GPIO_FUNC79_IN_SEL_S 0

#define GPIO_FUNC80_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0270)




# 3381 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG80_IN_SEL (BIT(7))
#define GPIO_SIG80_IN_SEL_M (BIT(7))
#define GPIO_SIG80_IN_SEL_V 0x1
#define GPIO_SIG80_IN_SEL_S 7


#define GPIO_FUNC80_IN_INV_SEL (BIT(6))
#define GPIO_FUNC80_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC80_IN_INV_SEL_V 0x1
#define GPIO_FUNC80_IN_INV_SEL_S 6


#define GPIO_FUNC80_IN_SEL 0x0000003F
#define GPIO_FUNC80_IN_SEL_M ((GPIO_FUNC80_IN_SEL_V)<<(GPIO_FUNC80_IN_SEL_S))
#define GPIO_FUNC80_IN_SEL_V 0x3F
#define GPIO_FUNC80_IN_SEL_S 0

#define GPIO_FUNC81_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0274)




# 3402 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG81_IN_SEL (BIT(7))
#define GPIO_SIG81_IN_SEL_M (BIT(7))
#define GPIO_SIG81_IN_SEL_V 0x1
#define GPIO_SIG81_IN_SEL_S 7


#define GPIO_FUNC81_IN_INV_SEL (BIT(6))
#define GPIO_FUNC81_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC81_IN_INV_SEL_V 0x1
#define GPIO_FUNC81_IN_INV_SEL_S 6


#define GPIO_FUNC81_IN_SEL 0x0000003F
#define GPIO_FUNC81_IN_SEL_M ((GPIO_FUNC81_IN_SEL_V)<<(GPIO_FUNC81_IN_SEL_S))
#define GPIO_FUNC81_IN_SEL_V 0x3F
#define GPIO_FUNC81_IN_SEL_S 0

#define GPIO_FUNC82_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0278)




# 3423 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG82_IN_SEL (BIT(7))
#define GPIO_SIG82_IN_SEL_M (BIT(7))
#define GPIO_SIG82_IN_SEL_V 0x1
#define GPIO_SIG82_IN_SEL_S 7


#define GPIO_FUNC82_IN_INV_SEL (BIT(6))
#define GPIO_FUNC82_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC82_IN_INV_SEL_V 0x1
#define GPIO_FUNC82_IN_INV_SEL_S 6


#define GPIO_FUNC82_IN_SEL 0x0000003F
#define GPIO_FUNC82_IN_SEL_M ((GPIO_FUNC82_IN_SEL_V)<<(GPIO_FUNC82_IN_SEL_S))
#define GPIO_FUNC82_IN_SEL_V 0x3F
#define GPIO_FUNC82_IN_SEL_S 0

#define GPIO_FUNC83_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x027c)




# 3444 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG83_IN_SEL (BIT(7))
#define GPIO_SIG83_IN_SEL_M (BIT(7))
#define GPIO_SIG83_IN_SEL_V 0x1
#define GPIO_SIG83_IN_SEL_S 7


#define GPIO_FUNC83_IN_INV_SEL (BIT(6))
#define GPIO_FUNC83_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC83_IN_INV_SEL_V 0x1
#define GPIO_FUNC83_IN_INV_SEL_S 6


#define GPIO_FUNC83_IN_SEL 0x0000003F
#define GPIO_FUNC83_IN_SEL_M ((GPIO_FUNC83_IN_SEL_V)<<(GPIO_FUNC83_IN_SEL_S))
#define GPIO_FUNC83_IN_SEL_V 0x3F
#define GPIO_FUNC83_IN_SEL_S 0

#define GPIO_FUNC84_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0280)




# 3465 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG84_IN_SEL (BIT(7))
#define GPIO_SIG84_IN_SEL_M (BIT(7))
#define GPIO_SIG84_IN_SEL_V 0x1
#define GPIO_SIG84_IN_SEL_S 7


#define GPIO_FUNC84_IN_INV_SEL (BIT(6))
#define GPIO_FUNC84_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC84_IN_INV_SEL_V 0x1
#define GPIO_FUNC84_IN_INV_SEL_S 6


#define GPIO_FUNC84_IN_SEL 0x0000003F
#define GPIO_FUNC84_IN_SEL_M ((GPIO_FUNC84_IN_SEL_V)<<(GPIO_FUNC84_IN_SEL_S))
#define GPIO_FUNC84_IN_SEL_V 0x3F
#define GPIO_FUNC84_IN_SEL_S 0

#define GPIO_FUNC85_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0284)




# 3486 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG85_IN_SEL (BIT(7))
#define GPIO_SIG85_IN_SEL_M (BIT(7))
#define GPIO_SIG85_IN_SEL_V 0x1
#define GPIO_SIG85_IN_SEL_S 7


#define GPIO_FUNC85_IN_INV_SEL (BIT(6))
#define GPIO_FUNC85_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC85_IN_INV_SEL_V 0x1
#define GPIO_FUNC85_IN_INV_SEL_S 6


#define GPIO_FUNC85_IN_SEL 0x0000003F
#define GPIO_FUNC85_IN_SEL_M ((GPIO_FUNC85_IN_SEL_V)<<(GPIO_FUNC85_IN_SEL_S))
#define GPIO_FUNC85_IN_SEL_V 0x3F
#define GPIO_FUNC85_IN_SEL_S 0

#define GPIO_FUNC86_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0288)




# 3507 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG86_IN_SEL (BIT(7))
#define GPIO_SIG86_IN_SEL_M (BIT(7))
#define GPIO_SIG86_IN_SEL_V 0x1
#define GPIO_SIG86_IN_SEL_S 7


#define GPIO_FUNC86_IN_INV_SEL (BIT(6))
#define GPIO_FUNC86_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC86_IN_INV_SEL_V 0x1
#define GPIO_FUNC86_IN_INV_SEL_S 6


#define GPIO_FUNC86_IN_SEL 0x0000003F
#define GPIO_FUNC86_IN_SEL_M ((GPIO_FUNC86_IN_SEL_V)<<(GPIO_FUNC86_IN_SEL_S))
#define GPIO_FUNC86_IN_SEL_V 0x3F
#define GPIO_FUNC86_IN_SEL_S 0

#define GPIO_FUNC87_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x028c)




# 3528 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG87_IN_SEL (BIT(7))
#define GPIO_SIG87_IN_SEL_M (BIT(7))
#define GPIO_SIG87_IN_SEL_V 0x1
#define GPIO_SIG87_IN_SEL_S 7


#define GPIO_FUNC87_IN_INV_SEL (BIT(6))
#define GPIO_FUNC87_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC87_IN_INV_SEL_V 0x1
#define GPIO_FUNC87_IN_INV_SEL_S 6


#define GPIO_FUNC87_IN_SEL 0x0000003F
#define GPIO_FUNC87_IN_SEL_M ((GPIO_FUNC87_IN_SEL_V)<<(GPIO_FUNC87_IN_SEL_S))
#define GPIO_FUNC87_IN_SEL_V 0x3F
#define GPIO_FUNC87_IN_SEL_S 0

#define GPIO_FUNC88_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0290)




# 3549 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG88_IN_SEL (BIT(7))
#define GPIO_SIG88_IN_SEL_M (BIT(7))
#define GPIO_SIG88_IN_SEL_V 0x1
#define GPIO_SIG88_IN_SEL_S 7


#define GPIO_FUNC88_IN_INV_SEL (BIT(6))
#define GPIO_FUNC88_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC88_IN_INV_SEL_V 0x1
#define GPIO_FUNC88_IN_INV_SEL_S 6


#define GPIO_FUNC88_IN_SEL 0x0000003F
#define GPIO_FUNC88_IN_SEL_M ((GPIO_FUNC88_IN_SEL_V)<<(GPIO_FUNC88_IN_SEL_S))
#define GPIO_FUNC88_IN_SEL_V 0x3F
#define GPIO_FUNC88_IN_SEL_S 0

#define GPIO_FUNC89_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0294)




# 3570 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG89_IN_SEL (BIT(7))
#define GPIO_SIG89_IN_SEL_M (BIT(7))
#define GPIO_SIG89_IN_SEL_V 0x1
#define GPIO_SIG89_IN_SEL_S 7


#define GPIO_FUNC89_IN_INV_SEL (BIT(6))
#define GPIO_FUNC89_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC89_IN_INV_SEL_V 0x1
#define GPIO_FUNC89_IN_INV_SEL_S 6


#define GPIO_FUNC89_IN_SEL 0x0000003F
#define GPIO_FUNC89_IN_SEL_M ((GPIO_FUNC89_IN_SEL_V)<<(GPIO_FUNC89_IN_SEL_S))
#define GPIO_FUNC89_IN_SEL_V 0x3F
#define GPIO_FUNC89_IN_SEL_S 0

#define GPIO_FUNC90_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0298)




# 3591 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG90_IN_SEL (BIT(7))
#define GPIO_SIG90_IN_SEL_M (BIT(7))
#define GPIO_SIG90_IN_SEL_V 0x1
#define GPIO_SIG90_IN_SEL_S 7


#define GPIO_FUNC90_IN_INV_SEL (BIT(6))
#define GPIO_FUNC90_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC90_IN_INV_SEL_V 0x1
#define GPIO_FUNC90_IN_INV_SEL_S 6


#define GPIO_FUNC90_IN_SEL 0x0000003F
#define GPIO_FUNC90_IN_SEL_M ((GPIO_FUNC90_IN_SEL_V)<<(GPIO_FUNC90_IN_SEL_S))
#define GPIO_FUNC90_IN_SEL_V 0x3F
#define GPIO_FUNC90_IN_SEL_S 0

#define GPIO_FUNC91_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x029c)




# 3612 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG91_IN_SEL (BIT(7))
#define GPIO_SIG91_IN_SEL_M (BIT(7))
#define GPIO_SIG91_IN_SEL_V 0x1
#define GPIO_SIG91_IN_SEL_S 7


#define GPIO_FUNC91_IN_INV_SEL (BIT(6))
#define GPIO_FUNC91_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC91_IN_INV_SEL_V 0x1
#define GPIO_FUNC91_IN_INV_SEL_S 6


#define GPIO_FUNC91_IN_SEL 0x0000003F
#define GPIO_FUNC91_IN_SEL_M ((GPIO_FUNC91_IN_SEL_V)<<(GPIO_FUNC91_IN_SEL_S))
#define GPIO_FUNC91_IN_SEL_V 0x3F
#define GPIO_FUNC91_IN_SEL_S 0

#define GPIO_FUNC92_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02a0)




# 3633 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG92_IN_SEL (BIT(7))
#define GPIO_SIG92_IN_SEL_M (BIT(7))
#define GPIO_SIG92_IN_SEL_V 0x1
#define GPIO_SIG92_IN_SEL_S 7


#define GPIO_FUNC92_IN_INV_SEL (BIT(6))
#define GPIO_FUNC92_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC92_IN_INV_SEL_V 0x1
#define GPIO_FUNC92_IN_INV_SEL_S 6


#define GPIO_FUNC92_IN_SEL 0x0000003F
#define GPIO_FUNC92_IN_SEL_M ((GPIO_FUNC92_IN_SEL_V)<<(GPIO_FUNC92_IN_SEL_S))
#define GPIO_FUNC92_IN_SEL_V 0x3F
#define GPIO_FUNC92_IN_SEL_S 0

#define GPIO_FUNC93_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02a4)




# 3654 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG93_IN_SEL (BIT(7))
#define GPIO_SIG93_IN_SEL_M (BIT(7))
#define GPIO_SIG93_IN_SEL_V 0x1
#define GPIO_SIG93_IN_SEL_S 7


#define GPIO_FUNC93_IN_INV_SEL (BIT(6))
#define GPIO_FUNC93_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC93_IN_INV_SEL_V 0x1
#define GPIO_FUNC93_IN_INV_SEL_S 6


#define GPIO_FUNC93_IN_SEL 0x0000003F
#define GPIO_FUNC93_IN_SEL_M ((GPIO_FUNC93_IN_SEL_V)<<(GPIO_FUNC93_IN_SEL_S))
#define GPIO_FUNC93_IN_SEL_V 0x3F
#define GPIO_FUNC93_IN_SEL_S 0

#define GPIO_FUNC94_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02a8)




# 3675 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG94_IN_SEL (BIT(7))
#define GPIO_SIG94_IN_SEL_M (BIT(7))
#define GPIO_SIG94_IN_SEL_V 0x1
#define GPIO_SIG94_IN_SEL_S 7


#define GPIO_FUNC94_IN_INV_SEL (BIT(6))
#define GPIO_FUNC94_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC94_IN_INV_SEL_V 0x1
#define GPIO_FUNC94_IN_INV_SEL_S 6


#define GPIO_FUNC94_IN_SEL 0x0000003F
#define GPIO_FUNC94_IN_SEL_M ((GPIO_FUNC94_IN_SEL_V)<<(GPIO_FUNC94_IN_SEL_S))
#define GPIO_FUNC94_IN_SEL_V 0x3F
#define GPIO_FUNC94_IN_SEL_S 0

#define GPIO_FUNC95_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02ac)




# 3696 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG95_IN_SEL (BIT(7))
#define GPIO_SIG95_IN_SEL_M (BIT(7))
#define GPIO_SIG95_IN_SEL_V 0x1
#define GPIO_SIG95_IN_SEL_S 7


#define GPIO_FUNC95_IN_INV_SEL (BIT(6))
#define GPIO_FUNC95_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC95_IN_INV_SEL_V 0x1
#define GPIO_FUNC95_IN_INV_SEL_S 6


#define GPIO_FUNC95_IN_SEL 0x0000003F
#define GPIO_FUNC95_IN_SEL_M ((GPIO_FUNC95_IN_SEL_V)<<(GPIO_FUNC95_IN_SEL_S))
#define GPIO_FUNC95_IN_SEL_V 0x3F
#define GPIO_FUNC95_IN_SEL_S 0

#define GPIO_FUNC96_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02b0)




# 3717 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG96_IN_SEL (BIT(7))
#define GPIO_SIG96_IN_SEL_M (BIT(7))
#define GPIO_SIG96_IN_SEL_V 0x1
#define GPIO_SIG96_IN_SEL_S 7


#define GPIO_FUNC96_IN_INV_SEL (BIT(6))
#define GPIO_FUNC96_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC96_IN_INV_SEL_V 0x1
#define GPIO_FUNC96_IN_INV_SEL_S 6


#define GPIO_FUNC96_IN_SEL 0x0000003F
#define GPIO_FUNC96_IN_SEL_M ((GPIO_FUNC96_IN_SEL_V)<<(GPIO_FUNC96_IN_SEL_S))
#define GPIO_FUNC96_IN_SEL_V 0x3F
#define GPIO_FUNC96_IN_SEL_S 0

#define GPIO_FUNC97_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02b4)




# 3738 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG97_IN_SEL (BIT(7))
#define GPIO_SIG97_IN_SEL_M (BIT(7))
#define GPIO_SIG97_IN_SEL_V 0x1
#define GPIO_SIG97_IN_SEL_S 7


#define GPIO_FUNC97_IN_INV_SEL (BIT(6))
#define GPIO_FUNC97_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC97_IN_INV_SEL_V 0x1
#define GPIO_FUNC97_IN_INV_SEL_S 6


#define GPIO_FUNC97_IN_SEL 0x0000003F
#define GPIO_FUNC97_IN_SEL_M ((GPIO_FUNC97_IN_SEL_V)<<(GPIO_FUNC97_IN_SEL_S))
#define GPIO_FUNC97_IN_SEL_V 0x3F
#define GPIO_FUNC97_IN_SEL_S 0

#define GPIO_FUNC98_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02b8)




# 3759 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG98_IN_SEL (BIT(7))
#define GPIO_SIG98_IN_SEL_M (BIT(7))
#define GPIO_SIG98_IN_SEL_V 0x1
#define GPIO_SIG98_IN_SEL_S 7


#define GPIO_FUNC98_IN_INV_SEL (BIT(6))
#define GPIO_FUNC98_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC98_IN_INV_SEL_V 0x1
#define GPIO_FUNC98_IN_INV_SEL_S 6


#define GPIO_FUNC98_IN_SEL 0x0000003F
#define GPIO_FUNC98_IN_SEL_M ((GPIO_FUNC98_IN_SEL_V)<<(GPIO_FUNC98_IN_SEL_S))
#define GPIO_FUNC98_IN_SEL_V 0x3F
#define GPIO_FUNC98_IN_SEL_S 0

#define GPIO_FUNC99_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02bc)




# 3780 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG99_IN_SEL (BIT(7))
#define GPIO_SIG99_IN_SEL_M (BIT(7))
#define GPIO_SIG99_IN_SEL_V 0x1
#define GPIO_SIG99_IN_SEL_S 7


#define GPIO_FUNC99_IN_INV_SEL (BIT(6))
#define GPIO_FUNC99_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC99_IN_INV_SEL_V 0x1
#define GPIO_FUNC99_IN_INV_SEL_S 6


#define GPIO_FUNC99_IN_SEL 0x0000003F
#define GPIO_FUNC99_IN_SEL_M ((GPIO_FUNC99_IN_SEL_V)<<(GPIO_FUNC99_IN_SEL_S))
#define GPIO_FUNC99_IN_SEL_V 0x3F
#define GPIO_FUNC99_IN_SEL_S 0

#define GPIO_FUNC100_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02c0)




# 3801 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG100_IN_SEL (BIT(7))
#define GPIO_SIG100_IN_SEL_M (BIT(7))
#define GPIO_SIG100_IN_SEL_V 0x1
#define GPIO_SIG100_IN_SEL_S 7


#define GPIO_FUNC100_IN_INV_SEL (BIT(6))
#define GPIO_FUNC100_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC100_IN_INV_SEL_V 0x1
#define GPIO_FUNC100_IN_INV_SEL_S 6


#define GPIO_FUNC100_IN_SEL 0x0000003F
#define GPIO_FUNC100_IN_SEL_M ((GPIO_FUNC100_IN_SEL_V)<<(GPIO_FUNC100_IN_SEL_S))
#define GPIO_FUNC100_IN_SEL_V 0x3F
#define GPIO_FUNC100_IN_SEL_S 0

#define GPIO_FUNC101_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02c4)




# 3822 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG101_IN_SEL (BIT(7))
#define GPIO_SIG101_IN_SEL_M (BIT(7))
#define GPIO_SIG101_IN_SEL_V 0x1
#define GPIO_SIG101_IN_SEL_S 7


#define GPIO_FUNC101_IN_INV_SEL (BIT(6))
#define GPIO_FUNC101_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC101_IN_INV_SEL_V 0x1
#define GPIO_FUNC101_IN_INV_SEL_S 6


#define GPIO_FUNC101_IN_SEL 0x0000003F
#define GPIO_FUNC101_IN_SEL_M ((GPIO_FUNC101_IN_SEL_V)<<(GPIO_FUNC101_IN_SEL_S))
#define GPIO_FUNC101_IN_SEL_V 0x3F
#define GPIO_FUNC101_IN_SEL_S 0

#define GPIO_FUNC102_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02c8)




# 3843 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG102_IN_SEL (BIT(7))
#define GPIO_SIG102_IN_SEL_M (BIT(7))
#define GPIO_SIG102_IN_SEL_V 0x1
#define GPIO_SIG102_IN_SEL_S 7


#define GPIO_FUNC102_IN_INV_SEL (BIT(6))
#define GPIO_FUNC102_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC102_IN_INV_SEL_V 0x1
#define GPIO_FUNC102_IN_INV_SEL_S 6


#define GPIO_FUNC102_IN_SEL 0x0000003F
#define GPIO_FUNC102_IN_SEL_M ((GPIO_FUNC102_IN_SEL_V)<<(GPIO_FUNC102_IN_SEL_S))
#define GPIO_FUNC102_IN_SEL_V 0x3F
#define GPIO_FUNC102_IN_SEL_S 0

#define GPIO_FUNC103_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02cc)




# 3864 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG103_IN_SEL (BIT(7))
#define GPIO_SIG103_IN_SEL_M (BIT(7))
#define GPIO_SIG103_IN_SEL_V 0x1
#define GPIO_SIG103_IN_SEL_S 7


#define GPIO_FUNC103_IN_INV_SEL (BIT(6))
#define GPIO_FUNC103_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC103_IN_INV_SEL_V 0x1
#define GPIO_FUNC103_IN_INV_SEL_S 6


#define GPIO_FUNC103_IN_SEL 0x0000003F
#define GPIO_FUNC103_IN_SEL_M ((GPIO_FUNC103_IN_SEL_V)<<(GPIO_FUNC103_IN_SEL_S))
#define GPIO_FUNC103_IN_SEL_V 0x3F
#define GPIO_FUNC103_IN_SEL_S 0

#define GPIO_FUNC104_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02d0)




# 3885 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG104_IN_SEL (BIT(7))
#define GPIO_SIG104_IN_SEL_M (BIT(7))
#define GPIO_SIG104_IN_SEL_V 0x1
#define GPIO_SIG104_IN_SEL_S 7


#define GPIO_FUNC104_IN_INV_SEL (BIT(6))
#define GPIO_FUNC104_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC104_IN_INV_SEL_V 0x1
#define GPIO_FUNC104_IN_INV_SEL_S 6


#define GPIO_FUNC104_IN_SEL 0x0000003F
#define GPIO_FUNC104_IN_SEL_M ((GPIO_FUNC104_IN_SEL_V)<<(GPIO_FUNC104_IN_SEL_S))
#define GPIO_FUNC104_IN_SEL_V 0x3F
#define GPIO_FUNC104_IN_SEL_S 0

#define GPIO_FUNC105_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02d4)




# 3906 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG105_IN_SEL (BIT(7))
#define GPIO_SIG105_IN_SEL_M (BIT(7))
#define GPIO_SIG105_IN_SEL_V 0x1
#define GPIO_SIG105_IN_SEL_S 7


#define GPIO_FUNC105_IN_INV_SEL (BIT(6))
#define GPIO_FUNC105_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC105_IN_INV_SEL_V 0x1
#define GPIO_FUNC105_IN_INV_SEL_S 6


#define GPIO_FUNC105_IN_SEL 0x0000003F
#define GPIO_FUNC105_IN_SEL_M ((GPIO_FUNC105_IN_SEL_V)<<(GPIO_FUNC105_IN_SEL_S))
#define GPIO_FUNC105_IN_SEL_V 0x3F
#define GPIO_FUNC105_IN_SEL_S 0

#define GPIO_FUNC106_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02d8)




# 3927 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG106_IN_SEL (BIT(7))
#define GPIO_SIG106_IN_SEL_M (BIT(7))
#define GPIO_SIG106_IN_SEL_V 0x1
#define GPIO_SIG106_IN_SEL_S 7


#define GPIO_FUNC106_IN_INV_SEL (BIT(6))
#define GPIO_FUNC106_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC106_IN_INV_SEL_V 0x1
#define GPIO_FUNC106_IN_INV_SEL_S 6


#define GPIO_FUNC106_IN_SEL 0x0000003F
#define GPIO_FUNC106_IN_SEL_M ((GPIO_FUNC106_IN_SEL_V)<<(GPIO_FUNC106_IN_SEL_S))
#define GPIO_FUNC106_IN_SEL_V 0x3F
#define GPIO_FUNC106_IN_SEL_S 0

#define GPIO_FUNC107_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02dc)




# 3948 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG107_IN_SEL (BIT(7))
#define GPIO_SIG107_IN_SEL_M (BIT(7))
#define GPIO_SIG107_IN_SEL_V 0x1
#define GPIO_SIG107_IN_SEL_S 7


#define GPIO_FUNC107_IN_INV_SEL (BIT(6))
#define GPIO_FUNC107_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC107_IN_INV_SEL_V 0x1
#define GPIO_FUNC107_IN_INV_SEL_S 6


#define GPIO_FUNC107_IN_SEL 0x0000003F
#define GPIO_FUNC107_IN_SEL_M ((GPIO_FUNC107_IN_SEL_V)<<(GPIO_FUNC107_IN_SEL_S))
#define GPIO_FUNC107_IN_SEL_V 0x3F
#define GPIO_FUNC107_IN_SEL_S 0

#define GPIO_FUNC108_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02e0)




# 3969 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG108_IN_SEL (BIT(7))
#define GPIO_SIG108_IN_SEL_M (BIT(7))
#define GPIO_SIG108_IN_SEL_V 0x1
#define GPIO_SIG108_IN_SEL_S 7


#define GPIO_FUNC108_IN_INV_SEL (BIT(6))
#define GPIO_FUNC108_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC108_IN_INV_SEL_V 0x1
#define GPIO_FUNC108_IN_INV_SEL_S 6


#define GPIO_FUNC108_IN_SEL 0x0000003F
#define GPIO_FUNC108_IN_SEL_M ((GPIO_FUNC108_IN_SEL_V)<<(GPIO_FUNC108_IN_SEL_S))
#define GPIO_FUNC108_IN_SEL_V 0x3F
#define GPIO_FUNC108_IN_SEL_S 0

#define GPIO_FUNC109_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02e4)




# 3990 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG109_IN_SEL (BIT(7))
#define GPIO_SIG109_IN_SEL_M (BIT(7))
#define GPIO_SIG109_IN_SEL_V 0x1
#define GPIO_SIG109_IN_SEL_S 7


#define GPIO_FUNC109_IN_INV_SEL (BIT(6))
#define GPIO_FUNC109_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC109_IN_INV_SEL_V 0x1
#define GPIO_FUNC109_IN_INV_SEL_S 6


#define GPIO_FUNC109_IN_SEL 0x0000003F
#define GPIO_FUNC109_IN_SEL_M ((GPIO_FUNC109_IN_SEL_V)<<(GPIO_FUNC109_IN_SEL_S))
#define GPIO_FUNC109_IN_SEL_V 0x3F
#define GPIO_FUNC109_IN_SEL_S 0

#define GPIO_FUNC110_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02e8)




# 4011 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG110_IN_SEL (BIT(7))
#define GPIO_SIG110_IN_SEL_M (BIT(7))
#define GPIO_SIG110_IN_SEL_V 0x1
#define GPIO_SIG110_IN_SEL_S 7


#define GPIO_FUNC110_IN_INV_SEL (BIT(6))
#define GPIO_FUNC110_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC110_IN_INV_SEL_V 0x1
#define GPIO_FUNC110_IN_INV_SEL_S 6


#define GPIO_FUNC110_IN_SEL 0x0000003F
#define GPIO_FUNC110_IN_SEL_M ((GPIO_FUNC110_IN_SEL_V)<<(GPIO_FUNC110_IN_SEL_S))
#define GPIO_FUNC110_IN_SEL_V 0x3F
#define GPIO_FUNC110_IN_SEL_S 0

#define GPIO_FUNC111_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02ec)




# 4032 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG111_IN_SEL (BIT(7))
#define GPIO_SIG111_IN_SEL_M (BIT(7))
#define GPIO_SIG111_IN_SEL_V 0x1
#define GPIO_SIG111_IN_SEL_S 7


#define GPIO_FUNC111_IN_INV_SEL (BIT(6))
#define GPIO_FUNC111_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC111_IN_INV_SEL_V 0x1
#define GPIO_FUNC111_IN_INV_SEL_S 6


#define GPIO_FUNC111_IN_SEL 0x0000003F
#define GPIO_FUNC111_IN_SEL_M ((GPIO_FUNC111_IN_SEL_V)<<(GPIO_FUNC111_IN_SEL_S))
#define GPIO_FUNC111_IN_SEL_V 0x3F
#define GPIO_FUNC111_IN_SEL_S 0

#define GPIO_FUNC112_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02f0)




# 4053 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG112_IN_SEL (BIT(7))
#define GPIO_SIG112_IN_SEL_M (BIT(7))
#define GPIO_SIG112_IN_SEL_V 0x1
#define GPIO_SIG112_IN_SEL_S 7


#define GPIO_FUNC112_IN_INV_SEL (BIT(6))
#define GPIO_FUNC112_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC112_IN_INV_SEL_V 0x1
#define GPIO_FUNC112_IN_INV_SEL_S 6


#define GPIO_FUNC112_IN_SEL 0x0000003F
#define GPIO_FUNC112_IN_SEL_M ((GPIO_FUNC112_IN_SEL_V)<<(GPIO_FUNC112_IN_SEL_S))
#define GPIO_FUNC112_IN_SEL_V 0x3F
#define GPIO_FUNC112_IN_SEL_S 0

#define GPIO_FUNC113_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02f4)




# 4074 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG113_IN_SEL (BIT(7))
#define GPIO_SIG113_IN_SEL_M (BIT(7))
#define GPIO_SIG113_IN_SEL_V 0x1
#define GPIO_SIG113_IN_SEL_S 7


#define GPIO_FUNC113_IN_INV_SEL (BIT(6))
#define GPIO_FUNC113_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC113_IN_INV_SEL_V 0x1
#define GPIO_FUNC113_IN_INV_SEL_S 6


#define GPIO_FUNC113_IN_SEL 0x0000003F
#define GPIO_FUNC113_IN_SEL_M ((GPIO_FUNC113_IN_SEL_V)<<(GPIO_FUNC113_IN_SEL_S))
#define GPIO_FUNC113_IN_SEL_V 0x3F
#define GPIO_FUNC113_IN_SEL_S 0

#define GPIO_FUNC114_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02f8)




# 4095 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG114_IN_SEL (BIT(7))
#define GPIO_SIG114_IN_SEL_M (BIT(7))
#define GPIO_SIG114_IN_SEL_V 0x1
#define GPIO_SIG114_IN_SEL_S 7


#define GPIO_FUNC114_IN_INV_SEL (BIT(6))
#define GPIO_FUNC114_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC114_IN_INV_SEL_V 0x1
#define GPIO_FUNC114_IN_INV_SEL_S 6


#define GPIO_FUNC114_IN_SEL 0x0000003F
#define GPIO_FUNC114_IN_SEL_M ((GPIO_FUNC114_IN_SEL_V)<<(GPIO_FUNC114_IN_SEL_S))
#define GPIO_FUNC114_IN_SEL_V 0x3F
#define GPIO_FUNC114_IN_SEL_S 0

#define GPIO_FUNC115_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x02fc)




# 4116 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG115_IN_SEL (BIT(7))
#define GPIO_SIG115_IN_SEL_M (BIT(7))
#define GPIO_SIG115_IN_SEL_V 0x1
#define GPIO_SIG115_IN_SEL_S 7


#define GPIO_FUNC115_IN_INV_SEL (BIT(6))
#define GPIO_FUNC115_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC115_IN_INV_SEL_V 0x1
#define GPIO_FUNC115_IN_INV_SEL_S 6


#define GPIO_FUNC115_IN_SEL 0x0000003F
#define GPIO_FUNC115_IN_SEL_M ((GPIO_FUNC115_IN_SEL_V)<<(GPIO_FUNC115_IN_SEL_S))
#define GPIO_FUNC115_IN_SEL_V 0x3F
#define GPIO_FUNC115_IN_SEL_S 0

#define GPIO_FUNC116_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0300)




# 4137 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG116_IN_SEL (BIT(7))
#define GPIO_SIG116_IN_SEL_M (BIT(7))
#define GPIO_SIG116_IN_SEL_V 0x1
#define GPIO_SIG116_IN_SEL_S 7


#define GPIO_FUNC116_IN_INV_SEL (BIT(6))
#define GPIO_FUNC116_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC116_IN_INV_SEL_V 0x1
#define GPIO_FUNC116_IN_INV_SEL_S 6


#define GPIO_FUNC116_IN_SEL 0x0000003F
#define GPIO_FUNC116_IN_SEL_M ((GPIO_FUNC116_IN_SEL_V)<<(GPIO_FUNC116_IN_SEL_S))
#define GPIO_FUNC116_IN_SEL_V 0x3F
#define GPIO_FUNC116_IN_SEL_S 0

#define GPIO_FUNC117_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0304)




# 4158 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG117_IN_SEL (BIT(7))
#define GPIO_SIG117_IN_SEL_M (BIT(7))
#define GPIO_SIG117_IN_SEL_V 0x1
#define GPIO_SIG117_IN_SEL_S 7


#define GPIO_FUNC117_IN_INV_SEL (BIT(6))
#define GPIO_FUNC117_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC117_IN_INV_SEL_V 0x1
#define GPIO_FUNC117_IN_INV_SEL_S 6


#define GPIO_FUNC117_IN_SEL 0x0000003F
#define GPIO_FUNC117_IN_SEL_M ((GPIO_FUNC117_IN_SEL_V)<<(GPIO_FUNC117_IN_SEL_S))
#define GPIO_FUNC117_IN_SEL_V 0x3F
#define GPIO_FUNC117_IN_SEL_S 0

#define GPIO_FUNC118_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0308)




# 4179 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG118_IN_SEL (BIT(7))
#define GPIO_SIG118_IN_SEL_M (BIT(7))
#define GPIO_SIG118_IN_SEL_V 0x1
#define GPIO_SIG118_IN_SEL_S 7


#define GPIO_FUNC118_IN_INV_SEL (BIT(6))
#define GPIO_FUNC118_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC118_IN_INV_SEL_V 0x1
#define GPIO_FUNC118_IN_INV_SEL_S 6


#define GPIO_FUNC118_IN_SEL 0x0000003F
#define GPIO_FUNC118_IN_SEL_M ((GPIO_FUNC118_IN_SEL_V)<<(GPIO_FUNC118_IN_SEL_S))
#define GPIO_FUNC118_IN_SEL_V 0x3F
#define GPIO_FUNC118_IN_SEL_S 0

#define GPIO_FUNC119_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x030c)




# 4200 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG119_IN_SEL (BIT(7))
#define GPIO_SIG119_IN_SEL_M (BIT(7))
#define GPIO_SIG119_IN_SEL_V 0x1
#define GPIO_SIG119_IN_SEL_S 7


#define GPIO_FUNC119_IN_INV_SEL (BIT(6))
#define GPIO_FUNC119_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC119_IN_INV_SEL_V 0x1
#define GPIO_FUNC119_IN_INV_SEL_S 6


#define GPIO_FUNC119_IN_SEL 0x0000003F
#define GPIO_FUNC119_IN_SEL_M ((GPIO_FUNC119_IN_SEL_V)<<(GPIO_FUNC119_IN_SEL_S))
#define GPIO_FUNC119_IN_SEL_V 0x3F
#define GPIO_FUNC119_IN_SEL_S 0

#define GPIO_FUNC120_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0310)




# 4221 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG120_IN_SEL (BIT(7))
#define GPIO_SIG120_IN_SEL_M (BIT(7))
#define GPIO_SIG120_IN_SEL_V 0x1
#define GPIO_SIG120_IN_SEL_S 7


#define GPIO_FUNC120_IN_INV_SEL (BIT(6))
#define GPIO_FUNC120_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC120_IN_INV_SEL_V 0x1
#define GPIO_FUNC120_IN_INV_SEL_S 6


#define GPIO_FUNC120_IN_SEL 0x0000003F
#define GPIO_FUNC120_IN_SEL_M ((GPIO_FUNC120_IN_SEL_V)<<(GPIO_FUNC120_IN_SEL_S))
#define GPIO_FUNC120_IN_SEL_V 0x3F
#define GPIO_FUNC120_IN_SEL_S 0

#define GPIO_FUNC121_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0314)




# 4242 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG121_IN_SEL (BIT(7))
#define GPIO_SIG121_IN_SEL_M (BIT(7))
#define GPIO_SIG121_IN_SEL_V 0x1
#define GPIO_SIG121_IN_SEL_S 7


#define GPIO_FUNC121_IN_INV_SEL (BIT(6))
#define GPIO_FUNC121_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC121_IN_INV_SEL_V 0x1
#define GPIO_FUNC121_IN_INV_SEL_S 6


#define GPIO_FUNC121_IN_SEL 0x0000003F
#define GPIO_FUNC121_IN_SEL_M ((GPIO_FUNC121_IN_SEL_V)<<(GPIO_FUNC121_IN_SEL_S))
#define GPIO_FUNC121_IN_SEL_V 0x3F
#define GPIO_FUNC121_IN_SEL_S 0

#define GPIO_FUNC122_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0318)




# 4263 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG122_IN_SEL (BIT(7))
#define GPIO_SIG122_IN_SEL_M (BIT(7))
#define GPIO_SIG122_IN_SEL_V 0x1
#define GPIO_SIG122_IN_SEL_S 7


#define GPIO_FUNC122_IN_INV_SEL (BIT(6))
#define GPIO_FUNC122_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC122_IN_INV_SEL_V 0x1
#define GPIO_FUNC122_IN_INV_SEL_S 6


#define GPIO_FUNC122_IN_SEL 0x0000003F
#define GPIO_FUNC122_IN_SEL_M ((GPIO_FUNC122_IN_SEL_V)<<(GPIO_FUNC122_IN_SEL_S))
#define GPIO_FUNC122_IN_SEL_V 0x3F
#define GPIO_FUNC122_IN_SEL_S 0

#define GPIO_FUNC123_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x031c)




# 4284 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG123_IN_SEL (BIT(7))
#define GPIO_SIG123_IN_SEL_M (BIT(7))
#define GPIO_SIG123_IN_SEL_V 0x1
#define GPIO_SIG123_IN_SEL_S 7


#define GPIO_FUNC123_IN_INV_SEL (BIT(6))
#define GPIO_FUNC123_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC123_IN_INV_SEL_V 0x1
#define GPIO_FUNC123_IN_INV_SEL_S 6


#define GPIO_FUNC123_IN_SEL 0x0000003F
#define GPIO_FUNC123_IN_SEL_M ((GPIO_FUNC123_IN_SEL_V)<<(GPIO_FUNC123_IN_SEL_S))
#define GPIO_FUNC123_IN_SEL_V 0x3F
#define GPIO_FUNC123_IN_SEL_S 0

#define GPIO_FUNC124_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0320)




# 4305 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG124_IN_SEL (BIT(7))
#define GPIO_SIG124_IN_SEL_M (BIT(7))
#define GPIO_SIG124_IN_SEL_V 0x1
#define GPIO_SIG124_IN_SEL_S 7


#define GPIO_FUNC124_IN_INV_SEL (BIT(6))
#define GPIO_FUNC124_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC124_IN_INV_SEL_V 0x1
#define GPIO_FUNC124_IN_INV_SEL_S 6


#define GPIO_FUNC124_IN_SEL 0x0000003F
#define GPIO_FUNC124_IN_SEL_M ((GPIO_FUNC124_IN_SEL_V)<<(GPIO_FUNC124_IN_SEL_S))
#define GPIO_FUNC124_IN_SEL_V 0x3F
#define GPIO_FUNC124_IN_SEL_S 0

#define GPIO_FUNC125_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0324)




# 4326 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG125_IN_SEL (BIT(7))
#define GPIO_SIG125_IN_SEL_M (BIT(7))
#define GPIO_SIG125_IN_SEL_V 0x1
#define GPIO_SIG125_IN_SEL_S 7


#define GPIO_FUNC125_IN_INV_SEL (BIT(6))
#define GPIO_FUNC125_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC125_IN_INV_SEL_V 0x1
#define GPIO_FUNC125_IN_INV_SEL_S 6


#define GPIO_FUNC125_IN_SEL 0x0000003F
#define GPIO_FUNC125_IN_SEL_M ((GPIO_FUNC125_IN_SEL_V)<<(GPIO_FUNC125_IN_SEL_S))
#define GPIO_FUNC125_IN_SEL_V 0x3F
#define GPIO_FUNC125_IN_SEL_S 0

#define GPIO_FUNC126_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0328)




# 4347 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG126_IN_SEL (BIT(7))
#define GPIO_SIG126_IN_SEL_M (BIT(7))
#define GPIO_SIG126_IN_SEL_V 0x1
#define GPIO_SIG126_IN_SEL_S 7


#define GPIO_FUNC126_IN_INV_SEL (BIT(6))
#define GPIO_FUNC126_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC126_IN_INV_SEL_V 0x1
#define GPIO_FUNC126_IN_INV_SEL_S 6


#define GPIO_FUNC126_IN_SEL 0x0000003F
#define GPIO_FUNC126_IN_SEL_M ((GPIO_FUNC126_IN_SEL_V)<<(GPIO_FUNC126_IN_SEL_S))
#define GPIO_FUNC126_IN_SEL_V 0x3F
#define GPIO_FUNC126_IN_SEL_S 0

#define GPIO_FUNC127_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x032c)




# 4368 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG127_IN_SEL (BIT(7))
#define GPIO_SIG127_IN_SEL_M (BIT(7))
#define GPIO_SIG127_IN_SEL_V 0x1
#define GPIO_SIG127_IN_SEL_S 7


#define GPIO_FUNC127_IN_INV_SEL (BIT(6))
#define GPIO_FUNC127_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC127_IN_INV_SEL_V 0x1
#define GPIO_FUNC127_IN_INV_SEL_S 6


#define GPIO_FUNC127_IN_SEL 0x0000003F
#define GPIO_FUNC127_IN_SEL_M ((GPIO_FUNC127_IN_SEL_V)<<(GPIO_FUNC127_IN_SEL_S))
#define GPIO_FUNC127_IN_SEL_V 0x3F
#define GPIO_FUNC127_IN_SEL_S 0

#define GPIO_FUNC128_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0330)




# 4389 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG128_IN_SEL (BIT(7))
#define GPIO_SIG128_IN_SEL_M (BIT(7))
#define GPIO_SIG128_IN_SEL_V 0x1
#define GPIO_SIG128_IN_SEL_S 7


#define GPIO_FUNC128_IN_INV_SEL (BIT(6))
#define GPIO_FUNC128_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC128_IN_INV_SEL_V 0x1
#define GPIO_FUNC128_IN_INV_SEL_S 6


#define GPIO_FUNC128_IN_SEL 0x0000003F
#define GPIO_FUNC128_IN_SEL_M ((GPIO_FUNC128_IN_SEL_V)<<(GPIO_FUNC128_IN_SEL_S))
#define GPIO_FUNC128_IN_SEL_V 0x3F
#define GPIO_FUNC128_IN_SEL_S 0

#define GPIO_FUNC129_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0334)




# 4410 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG129_IN_SEL (BIT(7))
#define GPIO_SIG129_IN_SEL_M (BIT(7))
#define GPIO_SIG129_IN_SEL_V 0x1
#define GPIO_SIG129_IN_SEL_S 7


#define GPIO_FUNC129_IN_INV_SEL (BIT(6))
#define GPIO_FUNC129_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC129_IN_INV_SEL_V 0x1
#define GPIO_FUNC129_IN_INV_SEL_S 6


#define GPIO_FUNC129_IN_SEL 0x0000003F
#define GPIO_FUNC129_IN_SEL_M ((GPIO_FUNC129_IN_SEL_V)<<(GPIO_FUNC129_IN_SEL_S))
#define GPIO_FUNC129_IN_SEL_V 0x3F
#define GPIO_FUNC129_IN_SEL_S 0

#define GPIO_FUNC130_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0338)




# 4431 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG130_IN_SEL (BIT(7))
#define GPIO_SIG130_IN_SEL_M (BIT(7))
#define GPIO_SIG130_IN_SEL_V 0x1
#define GPIO_SIG130_IN_SEL_S 7


#define GPIO_FUNC130_IN_INV_SEL (BIT(6))
#define GPIO_FUNC130_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC130_IN_INV_SEL_V 0x1
#define GPIO_FUNC130_IN_INV_SEL_S 6


#define GPIO_FUNC130_IN_SEL 0x0000003F
#define GPIO_FUNC130_IN_SEL_M ((GPIO_FUNC130_IN_SEL_V)<<(GPIO_FUNC130_IN_SEL_S))
#define GPIO_FUNC130_IN_SEL_V 0x3F
#define GPIO_FUNC130_IN_SEL_S 0

#define GPIO_FUNC131_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x033c)




# 4452 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG131_IN_SEL (BIT(7))
#define GPIO_SIG131_IN_SEL_M (BIT(7))
#define GPIO_SIG131_IN_SEL_V 0x1
#define GPIO_SIG131_IN_SEL_S 7


#define GPIO_FUNC131_IN_INV_SEL (BIT(6))
#define GPIO_FUNC131_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC131_IN_INV_SEL_V 0x1
#define GPIO_FUNC131_IN_INV_SEL_S 6


#define GPIO_FUNC131_IN_SEL 0x0000003F
#define GPIO_FUNC131_IN_SEL_M ((GPIO_FUNC131_IN_SEL_V)<<(GPIO_FUNC131_IN_SEL_S))
#define GPIO_FUNC131_IN_SEL_V 0x3F
#define GPIO_FUNC131_IN_SEL_S 0

#define GPIO_FUNC132_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0340)




# 4473 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG132_IN_SEL (BIT(7))
#define GPIO_SIG132_IN_SEL_M (BIT(7))
#define GPIO_SIG132_IN_SEL_V 0x1
#define GPIO_SIG132_IN_SEL_S 7


#define GPIO_FUNC132_IN_INV_SEL (BIT(6))
#define GPIO_FUNC132_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC132_IN_INV_SEL_V 0x1
#define GPIO_FUNC132_IN_INV_SEL_S 6


#define GPIO_FUNC132_IN_SEL 0x0000003F
#define GPIO_FUNC132_IN_SEL_M ((GPIO_FUNC132_IN_SEL_V)<<(GPIO_FUNC132_IN_SEL_S))
#define GPIO_FUNC132_IN_SEL_V 0x3F
#define GPIO_FUNC132_IN_SEL_S 0

#define GPIO_FUNC133_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0344)




# 4494 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG133_IN_SEL (BIT(7))
#define GPIO_SIG133_IN_SEL_M (BIT(7))
#define GPIO_SIG133_IN_SEL_V 0x1
#define GPIO_SIG133_IN_SEL_S 7


#define GPIO_FUNC133_IN_INV_SEL (BIT(6))
#define GPIO_FUNC133_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC133_IN_INV_SEL_V 0x1
#define GPIO_FUNC133_IN_INV_SEL_S 6


#define GPIO_FUNC133_IN_SEL 0x0000003F
#define GPIO_FUNC133_IN_SEL_M ((GPIO_FUNC133_IN_SEL_V)<<(GPIO_FUNC133_IN_SEL_S))
#define GPIO_FUNC133_IN_SEL_V 0x3F
#define GPIO_FUNC133_IN_SEL_S 0

#define GPIO_FUNC134_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0348)




# 4515 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG134_IN_SEL (BIT(7))
#define GPIO_SIG134_IN_SEL_M (BIT(7))
#define GPIO_SIG134_IN_SEL_V 0x1
#define GPIO_SIG134_IN_SEL_S 7


#define GPIO_FUNC134_IN_INV_SEL (BIT(6))
#define GPIO_FUNC134_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC134_IN_INV_SEL_V 0x1
#define GPIO_FUNC134_IN_INV_SEL_S 6


#define GPIO_FUNC134_IN_SEL 0x0000003F
#define GPIO_FUNC134_IN_SEL_M ((GPIO_FUNC134_IN_SEL_V)<<(GPIO_FUNC134_IN_SEL_S))
#define GPIO_FUNC134_IN_SEL_V 0x3F
#define GPIO_FUNC134_IN_SEL_S 0

#define GPIO_FUNC135_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x034c)




# 4536 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG135_IN_SEL (BIT(7))
#define GPIO_SIG135_IN_SEL_M (BIT(7))
#define GPIO_SIG135_IN_SEL_V 0x1
#define GPIO_SIG135_IN_SEL_S 7


#define GPIO_FUNC135_IN_INV_SEL (BIT(6))
#define GPIO_FUNC135_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC135_IN_INV_SEL_V 0x1
#define GPIO_FUNC135_IN_INV_SEL_S 6


#define GPIO_FUNC135_IN_SEL 0x0000003F
#define GPIO_FUNC135_IN_SEL_M ((GPIO_FUNC135_IN_SEL_V)<<(GPIO_FUNC135_IN_SEL_S))
#define GPIO_FUNC135_IN_SEL_V 0x3F
#define GPIO_FUNC135_IN_SEL_S 0

#define GPIO_FUNC136_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0350)




# 4557 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG136_IN_SEL (BIT(7))
#define GPIO_SIG136_IN_SEL_M (BIT(7))
#define GPIO_SIG136_IN_SEL_V 0x1
#define GPIO_SIG136_IN_SEL_S 7


#define GPIO_FUNC136_IN_INV_SEL (BIT(6))
#define GPIO_FUNC136_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC136_IN_INV_SEL_V 0x1
#define GPIO_FUNC136_IN_INV_SEL_S 6


#define GPIO_FUNC136_IN_SEL 0x0000003F
#define GPIO_FUNC136_IN_SEL_M ((GPIO_FUNC136_IN_SEL_V)<<(GPIO_FUNC136_IN_SEL_S))
#define GPIO_FUNC136_IN_SEL_V 0x3F
#define GPIO_FUNC136_IN_SEL_S 0

#define GPIO_FUNC137_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0354)




# 4578 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG137_IN_SEL (BIT(7))
#define GPIO_SIG137_IN_SEL_M (BIT(7))
#define GPIO_SIG137_IN_SEL_V 0x1
#define GPIO_SIG137_IN_SEL_S 7


#define GPIO_FUNC137_IN_INV_SEL (BIT(6))
#define GPIO_FUNC137_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC137_IN_INV_SEL_V 0x1
#define GPIO_FUNC137_IN_INV_SEL_S 6


#define GPIO_FUNC137_IN_SEL 0x0000003F
#define GPIO_FUNC137_IN_SEL_M ((GPIO_FUNC137_IN_SEL_V)<<(GPIO_FUNC137_IN_SEL_S))
#define GPIO_FUNC137_IN_SEL_V 0x3F
#define GPIO_FUNC137_IN_SEL_S 0

#define GPIO_FUNC138_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0358)




# 4599 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG138_IN_SEL (BIT(7))
#define GPIO_SIG138_IN_SEL_M (BIT(7))
#define GPIO_SIG138_IN_SEL_V 0x1
#define GPIO_SIG138_IN_SEL_S 7


#define GPIO_FUNC138_IN_INV_SEL (BIT(6))
#define GPIO_FUNC138_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC138_IN_INV_SEL_V 0x1
#define GPIO_FUNC138_IN_INV_SEL_S 6


#define GPIO_FUNC138_IN_SEL 0x0000003F
#define GPIO_FUNC138_IN_SEL_M ((GPIO_FUNC138_IN_SEL_V)<<(GPIO_FUNC138_IN_SEL_S))
#define GPIO_FUNC138_IN_SEL_V 0x3F
#define GPIO_FUNC138_IN_SEL_S 0

#define GPIO_FUNC139_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x035c)




# 4620 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG139_IN_SEL (BIT(7))
#define GPIO_SIG139_IN_SEL_M (BIT(7))
#define GPIO_SIG139_IN_SEL_V 0x1
#define GPIO_SIG139_IN_SEL_S 7


#define GPIO_FUNC139_IN_INV_SEL (BIT(6))
#define GPIO_FUNC139_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC139_IN_INV_SEL_V 0x1
#define GPIO_FUNC139_IN_INV_SEL_S 6


#define GPIO_FUNC139_IN_SEL 0x0000003F
#define GPIO_FUNC139_IN_SEL_M ((GPIO_FUNC139_IN_SEL_V)<<(GPIO_FUNC139_IN_SEL_S))
#define GPIO_FUNC139_IN_SEL_V 0x3F
#define GPIO_FUNC139_IN_SEL_S 0

#define GPIO_FUNC140_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0360)




# 4641 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG140_IN_SEL (BIT(7))
#define GPIO_SIG140_IN_SEL_M (BIT(7))
#define GPIO_SIG140_IN_SEL_V 0x1
#define GPIO_SIG140_IN_SEL_S 7


#define GPIO_FUNC140_IN_INV_SEL (BIT(6))
#define GPIO_FUNC140_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC140_IN_INV_SEL_V 0x1
#define GPIO_FUNC140_IN_INV_SEL_S 6


#define GPIO_FUNC140_IN_SEL 0x0000003F
#define GPIO_FUNC140_IN_SEL_M ((GPIO_FUNC140_IN_SEL_V)<<(GPIO_FUNC140_IN_SEL_S))
#define GPIO_FUNC140_IN_SEL_V 0x3F
#define GPIO_FUNC140_IN_SEL_S 0

#define GPIO_FUNC141_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0364)




# 4662 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG141_IN_SEL (BIT(7))
#define GPIO_SIG141_IN_SEL_M (BIT(7))
#define GPIO_SIG141_IN_SEL_V 0x1
#define GPIO_SIG141_IN_SEL_S 7


#define GPIO_FUNC141_IN_INV_SEL (BIT(6))
#define GPIO_FUNC141_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC141_IN_INV_SEL_V 0x1
#define GPIO_FUNC141_IN_INV_SEL_S 6


#define GPIO_FUNC141_IN_SEL 0x0000003F
#define GPIO_FUNC141_IN_SEL_M ((GPIO_FUNC141_IN_SEL_V)<<(GPIO_FUNC141_IN_SEL_S))
#define GPIO_FUNC141_IN_SEL_V 0x3F
#define GPIO_FUNC141_IN_SEL_S 0

#define GPIO_FUNC142_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0368)




# 4683 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG142_IN_SEL (BIT(7))
#define GPIO_SIG142_IN_SEL_M (BIT(7))
#define GPIO_SIG142_IN_SEL_V 0x1
#define GPIO_SIG142_IN_SEL_S 7


#define GPIO_FUNC142_IN_INV_SEL (BIT(6))
#define GPIO_FUNC142_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC142_IN_INV_SEL_V 0x1
#define GPIO_FUNC142_IN_INV_SEL_S 6


#define GPIO_FUNC142_IN_SEL 0x0000003F
#define GPIO_FUNC142_IN_SEL_M ((GPIO_FUNC142_IN_SEL_V)<<(GPIO_FUNC142_IN_SEL_S))
#define GPIO_FUNC142_IN_SEL_V 0x3F
#define GPIO_FUNC142_IN_SEL_S 0

#define GPIO_FUNC143_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x036c)




# 4704 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG143_IN_SEL (BIT(7))
#define GPIO_SIG143_IN_SEL_M (BIT(7))
#define GPIO_SIG143_IN_SEL_V 0x1
#define GPIO_SIG143_IN_SEL_S 7


#define GPIO_FUNC143_IN_INV_SEL (BIT(6))
#define GPIO_FUNC143_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC143_IN_INV_SEL_V 0x1
#define GPIO_FUNC143_IN_INV_SEL_S 6


#define GPIO_FUNC143_IN_SEL 0x0000003F
#define GPIO_FUNC143_IN_SEL_M ((GPIO_FUNC143_IN_SEL_V)<<(GPIO_FUNC143_IN_SEL_S))
#define GPIO_FUNC143_IN_SEL_V 0x3F
#define GPIO_FUNC143_IN_SEL_S 0

#define GPIO_FUNC144_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0370)




# 4725 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG144_IN_SEL (BIT(7))
#define GPIO_SIG144_IN_SEL_M (BIT(7))
#define GPIO_SIG144_IN_SEL_V 0x1
#define GPIO_SIG144_IN_SEL_S 7


#define GPIO_FUNC144_IN_INV_SEL (BIT(6))
#define GPIO_FUNC144_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC144_IN_INV_SEL_V 0x1
#define GPIO_FUNC144_IN_INV_SEL_S 6


#define GPIO_FUNC144_IN_SEL 0x0000003F
#define GPIO_FUNC144_IN_SEL_M ((GPIO_FUNC144_IN_SEL_V)<<(GPIO_FUNC144_IN_SEL_S))
#define GPIO_FUNC144_IN_SEL_V 0x3F
#define GPIO_FUNC144_IN_SEL_S 0

#define GPIO_FUNC145_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0374)




# 4746 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG145_IN_SEL (BIT(7))
#define GPIO_SIG145_IN_SEL_M (BIT(7))
#define GPIO_SIG145_IN_SEL_V 0x1
#define GPIO_SIG145_IN_SEL_S 7


#define GPIO_FUNC145_IN_INV_SEL (BIT(6))
#define GPIO_FUNC145_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC145_IN_INV_SEL_V 0x1
#define GPIO_FUNC145_IN_INV_SEL_S 6


#define GPIO_FUNC145_IN_SEL 0x0000003F
#define GPIO_FUNC145_IN_SEL_M ((GPIO_FUNC145_IN_SEL_V)<<(GPIO_FUNC145_IN_SEL_S))
#define GPIO_FUNC145_IN_SEL_V 0x3F
#define GPIO_FUNC145_IN_SEL_S 0

#define GPIO_FUNC146_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0378)




# 4767 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG146_IN_SEL (BIT(7))
#define GPIO_SIG146_IN_SEL_M (BIT(7))
#define GPIO_SIG146_IN_SEL_V 0x1
#define GPIO_SIG146_IN_SEL_S 7


#define GPIO_FUNC146_IN_INV_SEL (BIT(6))
#define GPIO_FUNC146_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC146_IN_INV_SEL_V 0x1
#define GPIO_FUNC146_IN_INV_SEL_S 6


#define GPIO_FUNC146_IN_SEL 0x0000003F
#define GPIO_FUNC146_IN_SEL_M ((GPIO_FUNC146_IN_SEL_V)<<(GPIO_FUNC146_IN_SEL_S))
#define GPIO_FUNC146_IN_SEL_V 0x3F
#define GPIO_FUNC146_IN_SEL_S 0

#define GPIO_FUNC147_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x037c)




# 4788 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG147_IN_SEL (BIT(7))
#define GPIO_SIG147_IN_SEL_M (BIT(7))
#define GPIO_SIG147_IN_SEL_V 0x1
#define GPIO_SIG147_IN_SEL_S 7


#define GPIO_FUNC147_IN_INV_SEL (BIT(6))
#define GPIO_FUNC147_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC147_IN_INV_SEL_V 0x1
#define GPIO_FUNC147_IN_INV_SEL_S 6


#define GPIO_FUNC147_IN_SEL 0x0000003F
#define GPIO_FUNC147_IN_SEL_M ((GPIO_FUNC147_IN_SEL_V)<<(GPIO_FUNC147_IN_SEL_S))
#define GPIO_FUNC147_IN_SEL_V 0x3F
#define GPIO_FUNC147_IN_SEL_S 0

#define GPIO_FUNC148_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0380)




# 4809 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG148_IN_SEL (BIT(7))
#define GPIO_SIG148_IN_SEL_M (BIT(7))
#define GPIO_SIG148_IN_SEL_V 0x1
#define GPIO_SIG148_IN_SEL_S 7


#define GPIO_FUNC148_IN_INV_SEL (BIT(6))
#define GPIO_FUNC148_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC148_IN_INV_SEL_V 0x1
#define GPIO_FUNC148_IN_INV_SEL_S 6


#define GPIO_FUNC148_IN_SEL 0x0000003F
#define GPIO_FUNC148_IN_SEL_M ((GPIO_FUNC148_IN_SEL_V)<<(GPIO_FUNC148_IN_SEL_S))
#define GPIO_FUNC148_IN_SEL_V 0x3F
#define GPIO_FUNC148_IN_SEL_S 0

#define GPIO_FUNC149_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0384)




# 4830 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG149_IN_SEL (BIT(7))
#define GPIO_SIG149_IN_SEL_M (BIT(7))
#define GPIO_SIG149_IN_SEL_V 0x1
#define GPIO_SIG149_IN_SEL_S 7


#define GPIO_FUNC149_IN_INV_SEL (BIT(6))
#define GPIO_FUNC149_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC149_IN_INV_SEL_V 0x1
#define GPIO_FUNC149_IN_INV_SEL_S 6


#define GPIO_FUNC149_IN_SEL 0x0000003F
#define GPIO_FUNC149_IN_SEL_M ((GPIO_FUNC149_IN_SEL_V)<<(GPIO_FUNC149_IN_SEL_S))
#define GPIO_FUNC149_IN_SEL_V 0x3F
#define GPIO_FUNC149_IN_SEL_S 0

#define GPIO_FUNC150_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0388)




# 4851 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG150_IN_SEL (BIT(7))
#define GPIO_SIG150_IN_SEL_M (BIT(7))
#define GPIO_SIG150_IN_SEL_V 0x1
#define GPIO_SIG150_IN_SEL_S 7


#define GPIO_FUNC150_IN_INV_SEL (BIT(6))
#define GPIO_FUNC150_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC150_IN_INV_SEL_V 0x1
#define GPIO_FUNC150_IN_INV_SEL_S 6


#define GPIO_FUNC150_IN_SEL 0x0000003F
#define GPIO_FUNC150_IN_SEL_M ((GPIO_FUNC150_IN_SEL_V)<<(GPIO_FUNC150_IN_SEL_S))
#define GPIO_FUNC150_IN_SEL_V 0x3F
#define GPIO_FUNC150_IN_SEL_S 0

#define GPIO_FUNC151_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x038c)




# 4872 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG151_IN_SEL (BIT(7))
#define GPIO_SIG151_IN_SEL_M (BIT(7))
#define GPIO_SIG151_IN_SEL_V 0x1
#define GPIO_SIG151_IN_SEL_S 7


#define GPIO_FUNC151_IN_INV_SEL (BIT(6))
#define GPIO_FUNC151_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC151_IN_INV_SEL_V 0x1
#define GPIO_FUNC151_IN_INV_SEL_S 6


#define GPIO_FUNC151_IN_SEL 0x0000003F
#define GPIO_FUNC151_IN_SEL_M ((GPIO_FUNC151_IN_SEL_V)<<(GPIO_FUNC151_IN_SEL_S))
#define GPIO_FUNC151_IN_SEL_V 0x3F
#define GPIO_FUNC151_IN_SEL_S 0

#define GPIO_FUNC152_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0390)




# 4893 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG152_IN_SEL (BIT(7))
#define GPIO_SIG152_IN_SEL_M (BIT(7))
#define GPIO_SIG152_IN_SEL_V 0x1
#define GPIO_SIG152_IN_SEL_S 7


#define GPIO_FUNC152_IN_INV_SEL (BIT(6))
#define GPIO_FUNC152_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC152_IN_INV_SEL_V 0x1
#define GPIO_FUNC152_IN_INV_SEL_S 6


#define GPIO_FUNC152_IN_SEL 0x0000003F
#define GPIO_FUNC152_IN_SEL_M ((GPIO_FUNC152_IN_SEL_V)<<(GPIO_FUNC152_IN_SEL_S))
#define GPIO_FUNC152_IN_SEL_V 0x3F
#define GPIO_FUNC152_IN_SEL_S 0

#define GPIO_FUNC153_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0394)




# 4914 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG153_IN_SEL (BIT(7))
#define GPIO_SIG153_IN_SEL_M (BIT(7))
#define GPIO_SIG153_IN_SEL_V 0x1
#define GPIO_SIG153_IN_SEL_S 7


#define GPIO_FUNC153_IN_INV_SEL (BIT(6))
#define GPIO_FUNC153_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC153_IN_INV_SEL_V 0x1
#define GPIO_FUNC153_IN_INV_SEL_S 6


#define GPIO_FUNC153_IN_SEL 0x0000003F
#define GPIO_FUNC153_IN_SEL_M ((GPIO_FUNC153_IN_SEL_V)<<(GPIO_FUNC153_IN_SEL_S))
#define GPIO_FUNC153_IN_SEL_V 0x3F
#define GPIO_FUNC153_IN_SEL_S 0

#define GPIO_FUNC154_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0398)




# 4935 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG154_IN_SEL (BIT(7))
#define GPIO_SIG154_IN_SEL_M (BIT(7))
#define GPIO_SIG154_IN_SEL_V 0x1
#define GPIO_SIG154_IN_SEL_S 7


#define GPIO_FUNC154_IN_INV_SEL (BIT(6))
#define GPIO_FUNC154_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC154_IN_INV_SEL_V 0x1
#define GPIO_FUNC154_IN_INV_SEL_S 6


#define GPIO_FUNC154_IN_SEL 0x0000003F
#define GPIO_FUNC154_IN_SEL_M ((GPIO_FUNC154_IN_SEL_V)<<(GPIO_FUNC154_IN_SEL_S))
#define GPIO_FUNC154_IN_SEL_V 0x3F
#define GPIO_FUNC154_IN_SEL_S 0

#define GPIO_FUNC155_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x039c)




# 4956 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG155_IN_SEL (BIT(7))
#define GPIO_SIG155_IN_SEL_M (BIT(7))
#define GPIO_SIG155_IN_SEL_V 0x1
#define GPIO_SIG155_IN_SEL_S 7


#define GPIO_FUNC155_IN_INV_SEL (BIT(6))
#define GPIO_FUNC155_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC155_IN_INV_SEL_V 0x1
#define GPIO_FUNC155_IN_INV_SEL_S 6


#define GPIO_FUNC155_IN_SEL 0x0000003F
#define GPIO_FUNC155_IN_SEL_M ((GPIO_FUNC155_IN_SEL_V)<<(GPIO_FUNC155_IN_SEL_S))
#define GPIO_FUNC155_IN_SEL_V 0x3F
#define GPIO_FUNC155_IN_SEL_S 0

#define GPIO_FUNC156_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03a0)




# 4977 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG156_IN_SEL (BIT(7))
#define GPIO_SIG156_IN_SEL_M (BIT(7))
#define GPIO_SIG156_IN_SEL_V 0x1
#define GPIO_SIG156_IN_SEL_S 7


#define GPIO_FUNC156_IN_INV_SEL (BIT(6))
#define GPIO_FUNC156_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC156_IN_INV_SEL_V 0x1
#define GPIO_FUNC156_IN_INV_SEL_S 6


#define GPIO_FUNC156_IN_SEL 0x0000003F
#define GPIO_FUNC156_IN_SEL_M ((GPIO_FUNC156_IN_SEL_V)<<(GPIO_FUNC156_IN_SEL_S))
#define GPIO_FUNC156_IN_SEL_V 0x3F
#define GPIO_FUNC156_IN_SEL_S 0

#define GPIO_FUNC157_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03a4)




# 4998 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG157_IN_SEL (BIT(7))
#define GPIO_SIG157_IN_SEL_M (BIT(7))
#define GPIO_SIG157_IN_SEL_V 0x1
#define GPIO_SIG157_IN_SEL_S 7


#define GPIO_FUNC157_IN_INV_SEL (BIT(6))
#define GPIO_FUNC157_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC157_IN_INV_SEL_V 0x1
#define GPIO_FUNC157_IN_INV_SEL_S 6


#define GPIO_FUNC157_IN_SEL 0x0000003F
#define GPIO_FUNC157_IN_SEL_M ((GPIO_FUNC157_IN_SEL_V)<<(GPIO_FUNC157_IN_SEL_S))
#define GPIO_FUNC157_IN_SEL_V 0x3F
#define GPIO_FUNC157_IN_SEL_S 0

#define GPIO_FUNC158_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03a8)




# 5019 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG158_IN_SEL (BIT(7))
#define GPIO_SIG158_IN_SEL_M (BIT(7))
#define GPIO_SIG158_IN_SEL_V 0x1
#define GPIO_SIG158_IN_SEL_S 7


#define GPIO_FUNC158_IN_INV_SEL (BIT(6))
#define GPIO_FUNC158_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC158_IN_INV_SEL_V 0x1
#define GPIO_FUNC158_IN_INV_SEL_S 6


#define GPIO_FUNC158_IN_SEL 0x0000003F
#define GPIO_FUNC158_IN_SEL_M ((GPIO_FUNC158_IN_SEL_V)<<(GPIO_FUNC158_IN_SEL_S))
#define GPIO_FUNC158_IN_SEL_V 0x3F
#define GPIO_FUNC158_IN_SEL_S 0

#define GPIO_FUNC159_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03ac)




# 5040 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG159_IN_SEL (BIT(7))
#define GPIO_SIG159_IN_SEL_M (BIT(7))
#define GPIO_SIG159_IN_SEL_V 0x1
#define GPIO_SIG159_IN_SEL_S 7


#define GPIO_FUNC159_IN_INV_SEL (BIT(6))
#define GPIO_FUNC159_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC159_IN_INV_SEL_V 0x1
#define GPIO_FUNC159_IN_INV_SEL_S 6


#define GPIO_FUNC159_IN_SEL 0x0000003F
#define GPIO_FUNC159_IN_SEL_M ((GPIO_FUNC159_IN_SEL_V)<<(GPIO_FUNC159_IN_SEL_S))
#define GPIO_FUNC159_IN_SEL_V 0x3F
#define GPIO_FUNC159_IN_SEL_S 0

#define GPIO_FUNC160_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03b0)




# 5061 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG160_IN_SEL (BIT(7))
#define GPIO_SIG160_IN_SEL_M (BIT(7))
#define GPIO_SIG160_IN_SEL_V 0x1
#define GPIO_SIG160_IN_SEL_S 7


#define GPIO_FUNC160_IN_INV_SEL (BIT(6))
#define GPIO_FUNC160_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC160_IN_INV_SEL_V 0x1
#define GPIO_FUNC160_IN_INV_SEL_S 6


#define GPIO_FUNC160_IN_SEL 0x0000003F
#define GPIO_FUNC160_IN_SEL_M ((GPIO_FUNC160_IN_SEL_V)<<(GPIO_FUNC160_IN_SEL_S))
#define GPIO_FUNC160_IN_SEL_V 0x3F
#define GPIO_FUNC160_IN_SEL_S 0

#define GPIO_FUNC161_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03b4)




# 5082 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG161_IN_SEL (BIT(7))
#define GPIO_SIG161_IN_SEL_M (BIT(7))
#define GPIO_SIG161_IN_SEL_V 0x1
#define GPIO_SIG161_IN_SEL_S 7


#define GPIO_FUNC161_IN_INV_SEL (BIT(6))
#define GPIO_FUNC161_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC161_IN_INV_SEL_V 0x1
#define GPIO_FUNC161_IN_INV_SEL_S 6


#define GPIO_FUNC161_IN_SEL 0x0000003F
#define GPIO_FUNC161_IN_SEL_M ((GPIO_FUNC161_IN_SEL_V)<<(GPIO_FUNC161_IN_SEL_S))
#define GPIO_FUNC161_IN_SEL_V 0x3F
#define GPIO_FUNC161_IN_SEL_S 0

#define GPIO_FUNC162_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03b8)




# 5103 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG162_IN_SEL (BIT(7))
#define GPIO_SIG162_IN_SEL_M (BIT(7))
#define GPIO_SIG162_IN_SEL_V 0x1
#define GPIO_SIG162_IN_SEL_S 7


#define GPIO_FUNC162_IN_INV_SEL (BIT(6))
#define GPIO_FUNC162_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC162_IN_INV_SEL_V 0x1
#define GPIO_FUNC162_IN_INV_SEL_S 6


#define GPIO_FUNC162_IN_SEL 0x0000003F
#define GPIO_FUNC162_IN_SEL_M ((GPIO_FUNC162_IN_SEL_V)<<(GPIO_FUNC162_IN_SEL_S))
#define GPIO_FUNC162_IN_SEL_V 0x3F
#define GPIO_FUNC162_IN_SEL_S 0

#define GPIO_FUNC163_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03bc)




# 5124 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG163_IN_SEL (BIT(7))
#define GPIO_SIG163_IN_SEL_M (BIT(7))
#define GPIO_SIG163_IN_SEL_V 0x1
#define GPIO_SIG163_IN_SEL_S 7


#define GPIO_FUNC163_IN_INV_SEL (BIT(6))
#define GPIO_FUNC163_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC163_IN_INV_SEL_V 0x1
#define GPIO_FUNC163_IN_INV_SEL_S 6


#define GPIO_FUNC163_IN_SEL 0x0000003F
#define GPIO_FUNC163_IN_SEL_M ((GPIO_FUNC163_IN_SEL_V)<<(GPIO_FUNC163_IN_SEL_S))
#define GPIO_FUNC163_IN_SEL_V 0x3F
#define GPIO_FUNC163_IN_SEL_S 0

#define GPIO_FUNC164_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03c0)




# 5145 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG164_IN_SEL (BIT(7))
#define GPIO_SIG164_IN_SEL_M (BIT(7))
#define GPIO_SIG164_IN_SEL_V 0x1
#define GPIO_SIG164_IN_SEL_S 7


#define GPIO_FUNC164_IN_INV_SEL (BIT(6))
#define GPIO_FUNC164_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC164_IN_INV_SEL_V 0x1
#define GPIO_FUNC164_IN_INV_SEL_S 6


#define GPIO_FUNC164_IN_SEL 0x0000003F
#define GPIO_FUNC164_IN_SEL_M ((GPIO_FUNC164_IN_SEL_V)<<(GPIO_FUNC164_IN_SEL_S))
#define GPIO_FUNC164_IN_SEL_V 0x3F
#define GPIO_FUNC164_IN_SEL_S 0

#define GPIO_FUNC165_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03c4)




# 5166 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG165_IN_SEL (BIT(7))
#define GPIO_SIG165_IN_SEL_M (BIT(7))
#define GPIO_SIG165_IN_SEL_V 0x1
#define GPIO_SIG165_IN_SEL_S 7


#define GPIO_FUNC165_IN_INV_SEL (BIT(6))
#define GPIO_FUNC165_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC165_IN_INV_SEL_V 0x1
#define GPIO_FUNC165_IN_INV_SEL_S 6


#define GPIO_FUNC165_IN_SEL 0x0000003F
#define GPIO_FUNC165_IN_SEL_M ((GPIO_FUNC165_IN_SEL_V)<<(GPIO_FUNC165_IN_SEL_S))
#define GPIO_FUNC165_IN_SEL_V 0x3F
#define GPIO_FUNC165_IN_SEL_S 0

#define GPIO_FUNC166_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03c8)




# 5187 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG166_IN_SEL (BIT(7))
#define GPIO_SIG166_IN_SEL_M (BIT(7))
#define GPIO_SIG166_IN_SEL_V 0x1
#define GPIO_SIG166_IN_SEL_S 7


#define GPIO_FUNC166_IN_INV_SEL (BIT(6))
#define GPIO_FUNC166_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC166_IN_INV_SEL_V 0x1
#define GPIO_FUNC166_IN_INV_SEL_S 6


#define GPIO_FUNC166_IN_SEL 0x0000003F
#define GPIO_FUNC166_IN_SEL_M ((GPIO_FUNC166_IN_SEL_V)<<(GPIO_FUNC166_IN_SEL_S))
#define GPIO_FUNC166_IN_SEL_V 0x3F
#define GPIO_FUNC166_IN_SEL_S 0

#define GPIO_FUNC167_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03cc)




# 5208 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG167_IN_SEL (BIT(7))
#define GPIO_SIG167_IN_SEL_M (BIT(7))
#define GPIO_SIG167_IN_SEL_V 0x1
#define GPIO_SIG167_IN_SEL_S 7


#define GPIO_FUNC167_IN_INV_SEL (BIT(6))
#define GPIO_FUNC167_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC167_IN_INV_SEL_V 0x1
#define GPIO_FUNC167_IN_INV_SEL_S 6


#define GPIO_FUNC167_IN_SEL 0x0000003F
#define GPIO_FUNC167_IN_SEL_M ((GPIO_FUNC167_IN_SEL_V)<<(GPIO_FUNC167_IN_SEL_S))
#define GPIO_FUNC167_IN_SEL_V 0x3F
#define GPIO_FUNC167_IN_SEL_S 0

#define GPIO_FUNC168_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03d0)




# 5229 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG168_IN_SEL (BIT(7))
#define GPIO_SIG168_IN_SEL_M (BIT(7))
#define GPIO_SIG168_IN_SEL_V 0x1
#define GPIO_SIG168_IN_SEL_S 7


#define GPIO_FUNC168_IN_INV_SEL (BIT(6))
#define GPIO_FUNC168_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC168_IN_INV_SEL_V 0x1
#define GPIO_FUNC168_IN_INV_SEL_S 6


#define GPIO_FUNC168_IN_SEL 0x0000003F
#define GPIO_FUNC168_IN_SEL_M ((GPIO_FUNC168_IN_SEL_V)<<(GPIO_FUNC168_IN_SEL_S))
#define GPIO_FUNC168_IN_SEL_V 0x3F
#define GPIO_FUNC168_IN_SEL_S 0

#define GPIO_FUNC169_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03d4)




# 5250 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG169_IN_SEL (BIT(7))
#define GPIO_SIG169_IN_SEL_M (BIT(7))
#define GPIO_SIG169_IN_SEL_V 0x1
#define GPIO_SIG169_IN_SEL_S 7


#define GPIO_FUNC169_IN_INV_SEL (BIT(6))
#define GPIO_FUNC169_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC169_IN_INV_SEL_V 0x1
#define GPIO_FUNC169_IN_INV_SEL_S 6


#define GPIO_FUNC169_IN_SEL 0x0000003F
#define GPIO_FUNC169_IN_SEL_M ((GPIO_FUNC169_IN_SEL_V)<<(GPIO_FUNC169_IN_SEL_S))
#define GPIO_FUNC169_IN_SEL_V 0x3F
#define GPIO_FUNC169_IN_SEL_S 0

#define GPIO_FUNC170_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03d8)




# 5271 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG170_IN_SEL (BIT(7))
#define GPIO_SIG170_IN_SEL_M (BIT(7))
#define GPIO_SIG170_IN_SEL_V 0x1
#define GPIO_SIG170_IN_SEL_S 7


#define GPIO_FUNC170_IN_INV_SEL (BIT(6))
#define GPIO_FUNC170_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC170_IN_INV_SEL_V 0x1
#define GPIO_FUNC170_IN_INV_SEL_S 6


#define GPIO_FUNC170_IN_SEL 0x0000003F
#define GPIO_FUNC170_IN_SEL_M ((GPIO_FUNC170_IN_SEL_V)<<(GPIO_FUNC170_IN_SEL_S))
#define GPIO_FUNC170_IN_SEL_V 0x3F
#define GPIO_FUNC170_IN_SEL_S 0

#define GPIO_FUNC171_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03dc)




# 5292 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG171_IN_SEL (BIT(7))
#define GPIO_SIG171_IN_SEL_M (BIT(7))
#define GPIO_SIG171_IN_SEL_V 0x1
#define GPIO_SIG171_IN_SEL_S 7


#define GPIO_FUNC171_IN_INV_SEL (BIT(6))
#define GPIO_FUNC171_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC171_IN_INV_SEL_V 0x1
#define GPIO_FUNC171_IN_INV_SEL_S 6


#define GPIO_FUNC171_IN_SEL 0x0000003F
#define GPIO_FUNC171_IN_SEL_M ((GPIO_FUNC171_IN_SEL_V)<<(GPIO_FUNC171_IN_SEL_S))
#define GPIO_FUNC171_IN_SEL_V 0x3F
#define GPIO_FUNC171_IN_SEL_S 0

#define GPIO_FUNC172_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03e0)




# 5313 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG172_IN_SEL (BIT(7))
#define GPIO_SIG172_IN_SEL_M (BIT(7))
#define GPIO_SIG172_IN_SEL_V 0x1
#define GPIO_SIG172_IN_SEL_S 7


#define GPIO_FUNC172_IN_INV_SEL (BIT(6))
#define GPIO_FUNC172_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC172_IN_INV_SEL_V 0x1
#define GPIO_FUNC172_IN_INV_SEL_S 6


#define GPIO_FUNC172_IN_SEL 0x0000003F
#define GPIO_FUNC172_IN_SEL_M ((GPIO_FUNC172_IN_SEL_V)<<(GPIO_FUNC172_IN_SEL_S))
#define GPIO_FUNC172_IN_SEL_V 0x3F
#define GPIO_FUNC172_IN_SEL_S 0

#define GPIO_FUNC173_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03e4)




# 5334 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG173_IN_SEL (BIT(7))
#define GPIO_SIG173_IN_SEL_M (BIT(7))
#define GPIO_SIG173_IN_SEL_V 0x1
#define GPIO_SIG173_IN_SEL_S 7


#define GPIO_FUNC173_IN_INV_SEL (BIT(6))
#define GPIO_FUNC173_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC173_IN_INV_SEL_V 0x1
#define GPIO_FUNC173_IN_INV_SEL_S 6


#define GPIO_FUNC173_IN_SEL 0x0000003F
#define GPIO_FUNC173_IN_SEL_M ((GPIO_FUNC173_IN_SEL_V)<<(GPIO_FUNC173_IN_SEL_S))
#define GPIO_FUNC173_IN_SEL_V 0x3F
#define GPIO_FUNC173_IN_SEL_S 0

#define GPIO_FUNC174_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03e8)




# 5355 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG174_IN_SEL (BIT(7))
#define GPIO_SIG174_IN_SEL_M (BIT(7))
#define GPIO_SIG174_IN_SEL_V 0x1
#define GPIO_SIG174_IN_SEL_S 7


#define GPIO_FUNC174_IN_INV_SEL (BIT(6))
#define GPIO_FUNC174_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC174_IN_INV_SEL_V 0x1
#define GPIO_FUNC174_IN_INV_SEL_S 6


#define GPIO_FUNC174_IN_SEL 0x0000003F
#define GPIO_FUNC174_IN_SEL_M ((GPIO_FUNC174_IN_SEL_V)<<(GPIO_FUNC174_IN_SEL_S))
#define GPIO_FUNC174_IN_SEL_V 0x3F
#define GPIO_FUNC174_IN_SEL_S 0

#define GPIO_FUNC175_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03ec)




# 5376 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG175_IN_SEL (BIT(7))
#define GPIO_SIG175_IN_SEL_M (BIT(7))
#define GPIO_SIG175_IN_SEL_V 0x1
#define GPIO_SIG175_IN_SEL_S 7


#define GPIO_FUNC175_IN_INV_SEL (BIT(6))
#define GPIO_FUNC175_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC175_IN_INV_SEL_V 0x1
#define GPIO_FUNC175_IN_INV_SEL_S 6


#define GPIO_FUNC175_IN_SEL 0x0000003F
#define GPIO_FUNC175_IN_SEL_M ((GPIO_FUNC175_IN_SEL_V)<<(GPIO_FUNC175_IN_SEL_S))
#define GPIO_FUNC175_IN_SEL_V 0x3F
#define GPIO_FUNC175_IN_SEL_S 0

#define GPIO_FUNC176_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03f0)




# 5397 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG176_IN_SEL (BIT(7))
#define GPIO_SIG176_IN_SEL_M (BIT(7))
#define GPIO_SIG176_IN_SEL_V 0x1
#define GPIO_SIG176_IN_SEL_S 7


#define GPIO_FUNC176_IN_INV_SEL (BIT(6))
#define GPIO_FUNC176_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC176_IN_INV_SEL_V 0x1
#define GPIO_FUNC176_IN_INV_SEL_S 6


#define GPIO_FUNC176_IN_SEL 0x0000003F
#define GPIO_FUNC176_IN_SEL_M ((GPIO_FUNC176_IN_SEL_V)<<(GPIO_FUNC176_IN_SEL_S))
#define GPIO_FUNC176_IN_SEL_V 0x3F
#define GPIO_FUNC176_IN_SEL_S 0

#define GPIO_FUNC177_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03f4)




# 5418 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG177_IN_SEL (BIT(7))
#define GPIO_SIG177_IN_SEL_M (BIT(7))
#define GPIO_SIG177_IN_SEL_V 0x1
#define GPIO_SIG177_IN_SEL_S 7


#define GPIO_FUNC177_IN_INV_SEL (BIT(6))
#define GPIO_FUNC177_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC177_IN_INV_SEL_V 0x1
#define GPIO_FUNC177_IN_INV_SEL_S 6


#define GPIO_FUNC177_IN_SEL 0x0000003F
#define GPIO_FUNC177_IN_SEL_M ((GPIO_FUNC177_IN_SEL_V)<<(GPIO_FUNC177_IN_SEL_S))
#define GPIO_FUNC177_IN_SEL_V 0x3F
#define GPIO_FUNC177_IN_SEL_S 0

#define GPIO_FUNC178_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03f8)




# 5439 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG178_IN_SEL (BIT(7))
#define GPIO_SIG178_IN_SEL_M (BIT(7))
#define GPIO_SIG178_IN_SEL_V 0x1
#define GPIO_SIG178_IN_SEL_S 7


#define GPIO_FUNC178_IN_INV_SEL (BIT(6))
#define GPIO_FUNC178_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC178_IN_INV_SEL_V 0x1
#define GPIO_FUNC178_IN_INV_SEL_S 6


#define GPIO_FUNC178_IN_SEL 0x0000003F
#define GPIO_FUNC178_IN_SEL_M ((GPIO_FUNC178_IN_SEL_V)<<(GPIO_FUNC178_IN_SEL_S))
#define GPIO_FUNC178_IN_SEL_V 0x3F
#define GPIO_FUNC178_IN_SEL_S 0

#define GPIO_FUNC179_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x03fc)




# 5460 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG179_IN_SEL (BIT(7))
#define GPIO_SIG179_IN_SEL_M (BIT(7))
#define GPIO_SIG179_IN_SEL_V 0x1
#define GPIO_SIG179_IN_SEL_S 7


#define GPIO_FUNC179_IN_INV_SEL (BIT(6))
#define GPIO_FUNC179_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC179_IN_INV_SEL_V 0x1
#define GPIO_FUNC179_IN_INV_SEL_S 6


#define GPIO_FUNC179_IN_SEL 0x0000003F
#define GPIO_FUNC179_IN_SEL_M ((GPIO_FUNC179_IN_SEL_V)<<(GPIO_FUNC179_IN_SEL_S))
#define GPIO_FUNC179_IN_SEL_V 0x3F
#define GPIO_FUNC179_IN_SEL_S 0

#define GPIO_FUNC180_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0400)




# 5481 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG180_IN_SEL (BIT(7))
#define GPIO_SIG180_IN_SEL_M (BIT(7))
#define GPIO_SIG180_IN_SEL_V 0x1
#define GPIO_SIG180_IN_SEL_S 7


#define GPIO_FUNC180_IN_INV_SEL (BIT(6))
#define GPIO_FUNC180_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC180_IN_INV_SEL_V 0x1
#define GPIO_FUNC180_IN_INV_SEL_S 6


#define GPIO_FUNC180_IN_SEL 0x0000003F
#define GPIO_FUNC180_IN_SEL_M ((GPIO_FUNC180_IN_SEL_V)<<(GPIO_FUNC180_IN_SEL_S))
#define GPIO_FUNC180_IN_SEL_V 0x3F
#define GPIO_FUNC180_IN_SEL_S 0

#define GPIO_FUNC181_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0404)




# 5502 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG181_IN_SEL (BIT(7))
#define GPIO_SIG181_IN_SEL_M (BIT(7))
#define GPIO_SIG181_IN_SEL_V 0x1
#define GPIO_SIG181_IN_SEL_S 7


#define GPIO_FUNC181_IN_INV_SEL (BIT(6))
#define GPIO_FUNC181_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC181_IN_INV_SEL_V 0x1
#define GPIO_FUNC181_IN_INV_SEL_S 6


#define GPIO_FUNC181_IN_SEL 0x0000003F
#define GPIO_FUNC181_IN_SEL_M ((GPIO_FUNC181_IN_SEL_V)<<(GPIO_FUNC181_IN_SEL_S))
#define GPIO_FUNC181_IN_SEL_V 0x3F
#define GPIO_FUNC181_IN_SEL_S 0

#define GPIO_FUNC182_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0408)




# 5523 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG182_IN_SEL (BIT(7))
#define GPIO_SIG182_IN_SEL_M (BIT(7))
#define GPIO_SIG182_IN_SEL_V 0x1
#define GPIO_SIG182_IN_SEL_S 7


#define GPIO_FUNC182_IN_INV_SEL (BIT(6))
#define GPIO_FUNC182_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC182_IN_INV_SEL_V 0x1
#define GPIO_FUNC182_IN_INV_SEL_S 6


#define GPIO_FUNC182_IN_SEL 0x0000003F
#define GPIO_FUNC182_IN_SEL_M ((GPIO_FUNC182_IN_SEL_V)<<(GPIO_FUNC182_IN_SEL_S))
#define GPIO_FUNC182_IN_SEL_V 0x3F
#define GPIO_FUNC182_IN_SEL_S 0

#define GPIO_FUNC183_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x040c)




# 5544 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG183_IN_SEL (BIT(7))
#define GPIO_SIG183_IN_SEL_M (BIT(7))
#define GPIO_SIG183_IN_SEL_V 0x1
#define GPIO_SIG183_IN_SEL_S 7


#define GPIO_FUNC183_IN_INV_SEL (BIT(6))
#define GPIO_FUNC183_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC183_IN_INV_SEL_V 0x1
#define GPIO_FUNC183_IN_INV_SEL_S 6


#define GPIO_FUNC183_IN_SEL 0x0000003F
#define GPIO_FUNC183_IN_SEL_M ((GPIO_FUNC183_IN_SEL_V)<<(GPIO_FUNC183_IN_SEL_S))
#define GPIO_FUNC183_IN_SEL_V 0x3F
#define GPIO_FUNC183_IN_SEL_S 0

#define GPIO_FUNC184_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0410)




# 5565 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG184_IN_SEL (BIT(7))
#define GPIO_SIG184_IN_SEL_M (BIT(7))
#define GPIO_SIG184_IN_SEL_V 0x1
#define GPIO_SIG184_IN_SEL_S 7


#define GPIO_FUNC184_IN_INV_SEL (BIT(6))
#define GPIO_FUNC184_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC184_IN_INV_SEL_V 0x1
#define GPIO_FUNC184_IN_INV_SEL_S 6


#define GPIO_FUNC184_IN_SEL 0x0000003F
#define GPIO_FUNC184_IN_SEL_M ((GPIO_FUNC184_IN_SEL_V)<<(GPIO_FUNC184_IN_SEL_S))
#define GPIO_FUNC184_IN_SEL_V 0x3F
#define GPIO_FUNC184_IN_SEL_S 0

#define GPIO_FUNC185_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0414)




# 5586 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG185_IN_SEL (BIT(7))
#define GPIO_SIG185_IN_SEL_M (BIT(7))
#define GPIO_SIG185_IN_SEL_V 0x1
#define GPIO_SIG185_IN_SEL_S 7


#define GPIO_FUNC185_IN_INV_SEL (BIT(6))
#define GPIO_FUNC185_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC185_IN_INV_SEL_V 0x1
#define GPIO_FUNC185_IN_INV_SEL_S 6


#define GPIO_FUNC185_IN_SEL 0x0000003F
#define GPIO_FUNC185_IN_SEL_M ((GPIO_FUNC185_IN_SEL_V)<<(GPIO_FUNC185_IN_SEL_S))
#define GPIO_FUNC185_IN_SEL_V 0x3F
#define GPIO_FUNC185_IN_SEL_S 0

#define GPIO_FUNC186_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0418)




# 5607 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG186_IN_SEL (BIT(7))
#define GPIO_SIG186_IN_SEL_M (BIT(7))
#define GPIO_SIG186_IN_SEL_V 0x1
#define GPIO_SIG186_IN_SEL_S 7


#define GPIO_FUNC186_IN_INV_SEL (BIT(6))
#define GPIO_FUNC186_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC186_IN_INV_SEL_V 0x1
#define GPIO_FUNC186_IN_INV_SEL_S 6


#define GPIO_FUNC186_IN_SEL 0x0000003F
#define GPIO_FUNC186_IN_SEL_M ((GPIO_FUNC186_IN_SEL_V)<<(GPIO_FUNC186_IN_SEL_S))
#define GPIO_FUNC186_IN_SEL_V 0x3F
#define GPIO_FUNC186_IN_SEL_S 0

#define GPIO_FUNC187_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x041c)




# 5628 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG187_IN_SEL (BIT(7))
#define GPIO_SIG187_IN_SEL_M (BIT(7))
#define GPIO_SIG187_IN_SEL_V 0x1
#define GPIO_SIG187_IN_SEL_S 7


#define GPIO_FUNC187_IN_INV_SEL (BIT(6))
#define GPIO_FUNC187_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC187_IN_INV_SEL_V 0x1
#define GPIO_FUNC187_IN_INV_SEL_S 6


#define GPIO_FUNC187_IN_SEL 0x0000003F
#define GPIO_FUNC187_IN_SEL_M ((GPIO_FUNC187_IN_SEL_V)<<(GPIO_FUNC187_IN_SEL_S))
#define GPIO_FUNC187_IN_SEL_V 0x3F
#define GPIO_FUNC187_IN_SEL_S 0

#define GPIO_FUNC188_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0420)




# 5649 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG188_IN_SEL (BIT(7))
#define GPIO_SIG188_IN_SEL_M (BIT(7))
#define GPIO_SIG188_IN_SEL_V 0x1
#define GPIO_SIG188_IN_SEL_S 7


#define GPIO_FUNC188_IN_INV_SEL (BIT(6))
#define GPIO_FUNC188_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC188_IN_INV_SEL_V 0x1
#define GPIO_FUNC188_IN_INV_SEL_S 6


#define GPIO_FUNC188_IN_SEL 0x0000003F
#define GPIO_FUNC188_IN_SEL_M ((GPIO_FUNC188_IN_SEL_V)<<(GPIO_FUNC188_IN_SEL_S))
#define GPIO_FUNC188_IN_SEL_V 0x3F
#define GPIO_FUNC188_IN_SEL_S 0

#define GPIO_FUNC189_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0424)




# 5670 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG189_IN_SEL (BIT(7))
#define GPIO_SIG189_IN_SEL_M (BIT(7))
#define GPIO_SIG189_IN_SEL_V 0x1
#define GPIO_SIG189_IN_SEL_S 7


#define GPIO_FUNC189_IN_INV_SEL (BIT(6))
#define GPIO_FUNC189_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC189_IN_INV_SEL_V 0x1
#define GPIO_FUNC189_IN_INV_SEL_S 6


#define GPIO_FUNC189_IN_SEL 0x0000003F
#define GPIO_FUNC189_IN_SEL_M ((GPIO_FUNC189_IN_SEL_V)<<(GPIO_FUNC189_IN_SEL_S))
#define GPIO_FUNC189_IN_SEL_V 0x3F
#define GPIO_FUNC189_IN_SEL_S 0

#define GPIO_FUNC190_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0428)




# 5691 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG190_IN_SEL (BIT(7))
#define GPIO_SIG190_IN_SEL_M (BIT(7))
#define GPIO_SIG190_IN_SEL_V 0x1
#define GPIO_SIG190_IN_SEL_S 7


#define GPIO_FUNC190_IN_INV_SEL (BIT(6))
#define GPIO_FUNC190_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC190_IN_INV_SEL_V 0x1
#define GPIO_FUNC190_IN_INV_SEL_S 6


#define GPIO_FUNC190_IN_SEL 0x0000003F
#define GPIO_FUNC190_IN_SEL_M ((GPIO_FUNC190_IN_SEL_V)<<(GPIO_FUNC190_IN_SEL_S))
#define GPIO_FUNC190_IN_SEL_V 0x3F
#define GPIO_FUNC190_IN_SEL_S 0

#define GPIO_FUNC191_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x042c)




# 5712 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG191_IN_SEL (BIT(7))
#define GPIO_SIG191_IN_SEL_M (BIT(7))
#define GPIO_SIG191_IN_SEL_V 0x1
#define GPIO_SIG191_IN_SEL_S 7


#define GPIO_FUNC191_IN_INV_SEL (BIT(6))
#define GPIO_FUNC191_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC191_IN_INV_SEL_V 0x1
#define GPIO_FUNC191_IN_INV_SEL_S 6


#define GPIO_FUNC191_IN_SEL 0x0000003F
#define GPIO_FUNC191_IN_SEL_M ((GPIO_FUNC191_IN_SEL_V)<<(GPIO_FUNC191_IN_SEL_S))
#define GPIO_FUNC191_IN_SEL_V 0x3F
#define GPIO_FUNC191_IN_SEL_S 0

#define GPIO_FUNC192_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0430)




# 5733 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG192_IN_SEL (BIT(7))
#define GPIO_SIG192_IN_SEL_M (BIT(7))
#define GPIO_SIG192_IN_SEL_V 0x1
#define GPIO_SIG192_IN_SEL_S 7


#define GPIO_FUNC192_IN_INV_SEL (BIT(6))
#define GPIO_FUNC192_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC192_IN_INV_SEL_V 0x1
#define GPIO_FUNC192_IN_INV_SEL_S 6


#define GPIO_FUNC192_IN_SEL 0x0000003F
#define GPIO_FUNC192_IN_SEL_M ((GPIO_FUNC192_IN_SEL_V)<<(GPIO_FUNC192_IN_SEL_S))
#define GPIO_FUNC192_IN_SEL_V 0x3F
#define GPIO_FUNC192_IN_SEL_S 0

#define GPIO_FUNC193_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0434)




# 5754 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG193_IN_SEL (BIT(7))
#define GPIO_SIG193_IN_SEL_M (BIT(7))
#define GPIO_SIG193_IN_SEL_V 0x1
#define GPIO_SIG193_IN_SEL_S 7


#define GPIO_FUNC193_IN_INV_SEL (BIT(6))
#define GPIO_FUNC193_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC193_IN_INV_SEL_V 0x1
#define GPIO_FUNC193_IN_INV_SEL_S 6


#define GPIO_FUNC193_IN_SEL 0x0000003F
#define GPIO_FUNC193_IN_SEL_M ((GPIO_FUNC193_IN_SEL_V)<<(GPIO_FUNC193_IN_SEL_S))
#define GPIO_FUNC193_IN_SEL_V 0x3F
#define GPIO_FUNC193_IN_SEL_S 0

#define GPIO_FUNC194_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0438)




# 5775 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG194_IN_SEL (BIT(7))
#define GPIO_SIG194_IN_SEL_M (BIT(7))
#define GPIO_SIG194_IN_SEL_V 0x1
#define GPIO_SIG194_IN_SEL_S 7


#define GPIO_FUNC194_IN_INV_SEL (BIT(6))
#define GPIO_FUNC194_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC194_IN_INV_SEL_V 0x1
#define GPIO_FUNC194_IN_INV_SEL_S 6


#define GPIO_FUNC194_IN_SEL 0x0000003F
#define GPIO_FUNC194_IN_SEL_M ((GPIO_FUNC194_IN_SEL_V)<<(GPIO_FUNC194_IN_SEL_S))
#define GPIO_FUNC194_IN_SEL_V 0x3F
#define GPIO_FUNC194_IN_SEL_S 0

#define GPIO_FUNC195_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x043c)




# 5796 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG195_IN_SEL (BIT(7))
#define GPIO_SIG195_IN_SEL_M (BIT(7))
#define GPIO_SIG195_IN_SEL_V 0x1
#define GPIO_SIG195_IN_SEL_S 7


#define GPIO_FUNC195_IN_INV_SEL (BIT(6))
#define GPIO_FUNC195_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC195_IN_INV_SEL_V 0x1
#define GPIO_FUNC195_IN_INV_SEL_S 6


#define GPIO_FUNC195_IN_SEL 0x0000003F
#define GPIO_FUNC195_IN_SEL_M ((GPIO_FUNC195_IN_SEL_V)<<(GPIO_FUNC195_IN_SEL_S))
#define GPIO_FUNC195_IN_SEL_V 0x3F
#define GPIO_FUNC195_IN_SEL_S 0

#define GPIO_FUNC196_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0440)




# 5817 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG196_IN_SEL (BIT(7))
#define GPIO_SIG196_IN_SEL_M (BIT(7))
#define GPIO_SIG196_IN_SEL_V 0x1
#define GPIO_SIG196_IN_SEL_S 7


#define GPIO_FUNC196_IN_INV_SEL (BIT(6))
#define GPIO_FUNC196_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC196_IN_INV_SEL_V 0x1
#define GPIO_FUNC196_IN_INV_SEL_S 6


#define GPIO_FUNC196_IN_SEL 0x0000003F
#define GPIO_FUNC196_IN_SEL_M ((GPIO_FUNC196_IN_SEL_V)<<(GPIO_FUNC196_IN_SEL_S))
#define GPIO_FUNC196_IN_SEL_V 0x3F
#define GPIO_FUNC196_IN_SEL_S 0

#define GPIO_FUNC197_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0444)




# 5838 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG197_IN_SEL (BIT(7))
#define GPIO_SIG197_IN_SEL_M (BIT(7))
#define GPIO_SIG197_IN_SEL_V 0x1
#define GPIO_SIG197_IN_SEL_S 7


#define GPIO_FUNC197_IN_INV_SEL (BIT(6))
#define GPIO_FUNC197_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC197_IN_INV_SEL_V 0x1
#define GPIO_FUNC197_IN_INV_SEL_S 6


#define GPIO_FUNC197_IN_SEL 0x0000003F
#define GPIO_FUNC197_IN_SEL_M ((GPIO_FUNC197_IN_SEL_V)<<(GPIO_FUNC197_IN_SEL_S))
#define GPIO_FUNC197_IN_SEL_V 0x3F
#define GPIO_FUNC197_IN_SEL_S 0

#define GPIO_FUNC198_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0448)




# 5859 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG198_IN_SEL (BIT(7))
#define GPIO_SIG198_IN_SEL_M (BIT(7))
#define GPIO_SIG198_IN_SEL_V 0x1
#define GPIO_SIG198_IN_SEL_S 7


#define GPIO_FUNC198_IN_INV_SEL (BIT(6))
#define GPIO_FUNC198_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC198_IN_INV_SEL_V 0x1
#define GPIO_FUNC198_IN_INV_SEL_S 6


#define GPIO_FUNC198_IN_SEL 0x0000003F
#define GPIO_FUNC198_IN_SEL_M ((GPIO_FUNC198_IN_SEL_V)<<(GPIO_FUNC198_IN_SEL_S))
#define GPIO_FUNC198_IN_SEL_V 0x3F
#define GPIO_FUNC198_IN_SEL_S 0

#define GPIO_FUNC199_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x044c)




# 5880 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG199_IN_SEL (BIT(7))
#define GPIO_SIG199_IN_SEL_M (BIT(7))
#define GPIO_SIG199_IN_SEL_V 0x1
#define GPIO_SIG199_IN_SEL_S 7


#define GPIO_FUNC199_IN_INV_SEL (BIT(6))
#define GPIO_FUNC199_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC199_IN_INV_SEL_V 0x1
#define GPIO_FUNC199_IN_INV_SEL_S 6


#define GPIO_FUNC199_IN_SEL 0x0000003F
#define GPIO_FUNC199_IN_SEL_M ((GPIO_FUNC199_IN_SEL_V)<<(GPIO_FUNC199_IN_SEL_S))
#define GPIO_FUNC199_IN_SEL_V 0x3F
#define GPIO_FUNC199_IN_SEL_S 0

#define GPIO_FUNC200_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0450)




# 5901 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG200_IN_SEL (BIT(7))
#define GPIO_SIG200_IN_SEL_M (BIT(7))
#define GPIO_SIG200_IN_SEL_V 0x1
#define GPIO_SIG200_IN_SEL_S 7


#define GPIO_FUNC200_IN_INV_SEL (BIT(6))
#define GPIO_FUNC200_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC200_IN_INV_SEL_V 0x1
#define GPIO_FUNC200_IN_INV_SEL_S 6


#define GPIO_FUNC200_IN_SEL 0x0000003F
#define GPIO_FUNC200_IN_SEL_M ((GPIO_FUNC200_IN_SEL_V)<<(GPIO_FUNC200_IN_SEL_S))
#define GPIO_FUNC200_IN_SEL_V 0x3F
#define GPIO_FUNC200_IN_SEL_S 0

#define GPIO_FUNC201_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0454)




# 5922 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG201_IN_SEL (BIT(7))
#define GPIO_SIG201_IN_SEL_M (BIT(7))
#define GPIO_SIG201_IN_SEL_V 0x1
#define GPIO_SIG201_IN_SEL_S 7


#define GPIO_FUNC201_IN_INV_SEL (BIT(6))
#define GPIO_FUNC201_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC201_IN_INV_SEL_V 0x1
#define GPIO_FUNC201_IN_INV_SEL_S 6


#define GPIO_FUNC201_IN_SEL 0x0000003F
#define GPIO_FUNC201_IN_SEL_M ((GPIO_FUNC201_IN_SEL_V)<<(GPIO_FUNC201_IN_SEL_S))
#define GPIO_FUNC201_IN_SEL_V 0x3F
#define GPIO_FUNC201_IN_SEL_S 0

#define GPIO_FUNC202_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0458)




# 5943 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG202_IN_SEL (BIT(7))
#define GPIO_SIG202_IN_SEL_M (BIT(7))
#define GPIO_SIG202_IN_SEL_V 0x1
#define GPIO_SIG202_IN_SEL_S 7


#define GPIO_FUNC202_IN_INV_SEL (BIT(6))
#define GPIO_FUNC202_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC202_IN_INV_SEL_V 0x1
#define GPIO_FUNC202_IN_INV_SEL_S 6


#define GPIO_FUNC202_IN_SEL 0x0000003F
#define GPIO_FUNC202_IN_SEL_M ((GPIO_FUNC202_IN_SEL_V)<<(GPIO_FUNC202_IN_SEL_S))
#define GPIO_FUNC202_IN_SEL_V 0x3F
#define GPIO_FUNC202_IN_SEL_S 0

#define GPIO_FUNC203_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x045c)




# 5964 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG203_IN_SEL (BIT(7))
#define GPIO_SIG203_IN_SEL_M (BIT(7))
#define GPIO_SIG203_IN_SEL_V 0x1
#define GPIO_SIG203_IN_SEL_S 7


#define GPIO_FUNC203_IN_INV_SEL (BIT(6))
#define GPIO_FUNC203_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC203_IN_INV_SEL_V 0x1
#define GPIO_FUNC203_IN_INV_SEL_S 6


#define GPIO_FUNC203_IN_SEL 0x0000003F
#define GPIO_FUNC203_IN_SEL_M ((GPIO_FUNC203_IN_SEL_V)<<(GPIO_FUNC203_IN_SEL_S))
#define GPIO_FUNC203_IN_SEL_V 0x3F
#define GPIO_FUNC203_IN_SEL_S 0

#define GPIO_FUNC204_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0460)




# 5985 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG204_IN_SEL (BIT(7))
#define GPIO_SIG204_IN_SEL_M (BIT(7))
#define GPIO_SIG204_IN_SEL_V 0x1
#define GPIO_SIG204_IN_SEL_S 7


#define GPIO_FUNC204_IN_INV_SEL (BIT(6))
#define GPIO_FUNC204_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC204_IN_INV_SEL_V 0x1
#define GPIO_FUNC204_IN_INV_SEL_S 6


#define GPIO_FUNC204_IN_SEL 0x0000003F
#define GPIO_FUNC204_IN_SEL_M ((GPIO_FUNC204_IN_SEL_V)<<(GPIO_FUNC204_IN_SEL_S))
#define GPIO_FUNC204_IN_SEL_V 0x3F
#define GPIO_FUNC204_IN_SEL_S 0

#define GPIO_FUNC205_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0464)




# 6006 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG205_IN_SEL (BIT(7))
#define GPIO_SIG205_IN_SEL_M (BIT(7))
#define GPIO_SIG205_IN_SEL_V 0x1
#define GPIO_SIG205_IN_SEL_S 7


#define GPIO_FUNC205_IN_INV_SEL (BIT(6))
#define GPIO_FUNC205_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC205_IN_INV_SEL_V 0x1
#define GPIO_FUNC205_IN_INV_SEL_S 6


#define GPIO_FUNC205_IN_SEL 0x0000003F
#define GPIO_FUNC205_IN_SEL_M ((GPIO_FUNC205_IN_SEL_V)<<(GPIO_FUNC205_IN_SEL_S))
#define GPIO_FUNC205_IN_SEL_V 0x3F
#define GPIO_FUNC205_IN_SEL_S 0

#define GPIO_FUNC206_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0468)




# 6027 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG206_IN_SEL (BIT(7))
#define GPIO_SIG206_IN_SEL_M (BIT(7))
#define GPIO_SIG206_IN_SEL_V 0x1
#define GPIO_SIG206_IN_SEL_S 7


#define GPIO_FUNC206_IN_INV_SEL (BIT(6))
#define GPIO_FUNC206_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC206_IN_INV_SEL_V 0x1
#define GPIO_FUNC206_IN_INV_SEL_S 6


#define GPIO_FUNC206_IN_SEL 0x0000003F
#define GPIO_FUNC206_IN_SEL_M ((GPIO_FUNC206_IN_SEL_V)<<(GPIO_FUNC206_IN_SEL_S))
#define GPIO_FUNC206_IN_SEL_V 0x3F
#define GPIO_FUNC206_IN_SEL_S 0

#define GPIO_FUNC207_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x046c)




# 6048 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG207_IN_SEL (BIT(7))
#define GPIO_SIG207_IN_SEL_M (BIT(7))
#define GPIO_SIG207_IN_SEL_V 0x1
#define GPIO_SIG207_IN_SEL_S 7


#define GPIO_FUNC207_IN_INV_SEL (BIT(6))
#define GPIO_FUNC207_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC207_IN_INV_SEL_V 0x1
#define GPIO_FUNC207_IN_INV_SEL_S 6


#define GPIO_FUNC207_IN_SEL 0x0000003F
#define GPIO_FUNC207_IN_SEL_M ((GPIO_FUNC207_IN_SEL_V)<<(GPIO_FUNC207_IN_SEL_S))
#define GPIO_FUNC207_IN_SEL_V 0x3F
#define GPIO_FUNC207_IN_SEL_S 0

#define GPIO_FUNC208_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0470)




# 6069 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG208_IN_SEL (BIT(7))
#define GPIO_SIG208_IN_SEL_M (BIT(7))
#define GPIO_SIG208_IN_SEL_V 0x1
#define GPIO_SIG208_IN_SEL_S 7


#define GPIO_FUNC208_IN_INV_SEL (BIT(6))
#define GPIO_FUNC208_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC208_IN_INV_SEL_V 0x1
#define GPIO_FUNC208_IN_INV_SEL_S 6


#define GPIO_FUNC208_IN_SEL 0x0000003F
#define GPIO_FUNC208_IN_SEL_M ((GPIO_FUNC208_IN_SEL_V)<<(GPIO_FUNC208_IN_SEL_S))
#define GPIO_FUNC208_IN_SEL_V 0x3F
#define GPIO_FUNC208_IN_SEL_S 0

#define GPIO_FUNC209_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0474)




# 6090 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG209_IN_SEL (BIT(7))
#define GPIO_SIG209_IN_SEL_M (BIT(7))
#define GPIO_SIG209_IN_SEL_V 0x1
#define GPIO_SIG209_IN_SEL_S 7


#define GPIO_FUNC209_IN_INV_SEL (BIT(6))
#define GPIO_FUNC209_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC209_IN_INV_SEL_V 0x1
#define GPIO_FUNC209_IN_INV_SEL_S 6


#define GPIO_FUNC209_IN_SEL 0x0000003F
#define GPIO_FUNC209_IN_SEL_M ((GPIO_FUNC209_IN_SEL_V)<<(GPIO_FUNC209_IN_SEL_S))
#define GPIO_FUNC209_IN_SEL_V 0x3F
#define GPIO_FUNC209_IN_SEL_S 0

#define GPIO_FUNC210_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0478)




# 6111 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG210_IN_SEL (BIT(7))
#define GPIO_SIG210_IN_SEL_M (BIT(7))
#define GPIO_SIG210_IN_SEL_V 0x1
#define GPIO_SIG210_IN_SEL_S 7


#define GPIO_FUNC210_IN_INV_SEL (BIT(6))
#define GPIO_FUNC210_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC210_IN_INV_SEL_V 0x1
#define GPIO_FUNC210_IN_INV_SEL_S 6


#define GPIO_FUNC210_IN_SEL 0x0000003F
#define GPIO_FUNC210_IN_SEL_M ((GPIO_FUNC210_IN_SEL_V)<<(GPIO_FUNC210_IN_SEL_S))
#define GPIO_FUNC210_IN_SEL_V 0x3F
#define GPIO_FUNC210_IN_SEL_S 0

#define GPIO_FUNC211_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x047c)




# 6132 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG211_IN_SEL (BIT(7))
#define GPIO_SIG211_IN_SEL_M (BIT(7))
#define GPIO_SIG211_IN_SEL_V 0x1
#define GPIO_SIG211_IN_SEL_S 7


#define GPIO_FUNC211_IN_INV_SEL (BIT(6))
#define GPIO_FUNC211_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC211_IN_INV_SEL_V 0x1
#define GPIO_FUNC211_IN_INV_SEL_S 6


#define GPIO_FUNC211_IN_SEL 0x0000003F
#define GPIO_FUNC211_IN_SEL_M ((GPIO_FUNC211_IN_SEL_V)<<(GPIO_FUNC211_IN_SEL_S))
#define GPIO_FUNC211_IN_SEL_V 0x3F
#define GPIO_FUNC211_IN_SEL_S 0

#define GPIO_FUNC212_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0480)




# 6153 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG212_IN_SEL (BIT(7))
#define GPIO_SIG212_IN_SEL_M (BIT(7))
#define GPIO_SIG212_IN_SEL_V 0x1
#define GPIO_SIG212_IN_SEL_S 7


#define GPIO_FUNC212_IN_INV_SEL (BIT(6))
#define GPIO_FUNC212_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC212_IN_INV_SEL_V 0x1
#define GPIO_FUNC212_IN_INV_SEL_S 6


#define GPIO_FUNC212_IN_SEL 0x0000003F
#define GPIO_FUNC212_IN_SEL_M ((GPIO_FUNC212_IN_SEL_V)<<(GPIO_FUNC212_IN_SEL_S))
#define GPIO_FUNC212_IN_SEL_V 0x3F
#define GPIO_FUNC212_IN_SEL_S 0

#define GPIO_FUNC213_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0484)




# 6174 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG213_IN_SEL (BIT(7))
#define GPIO_SIG213_IN_SEL_M (BIT(7))
#define GPIO_SIG213_IN_SEL_V 0x1
#define GPIO_SIG213_IN_SEL_S 7


#define GPIO_FUNC213_IN_INV_SEL (BIT(6))
#define GPIO_FUNC213_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC213_IN_INV_SEL_V 0x1
#define GPIO_FUNC213_IN_INV_SEL_S 6


#define GPIO_FUNC213_IN_SEL 0x0000003F
#define GPIO_FUNC213_IN_SEL_M ((GPIO_FUNC213_IN_SEL_V)<<(GPIO_FUNC213_IN_SEL_S))
#define GPIO_FUNC213_IN_SEL_V 0x3F
#define GPIO_FUNC213_IN_SEL_S 0

#define GPIO_FUNC214_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0488)




# 6195 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG214_IN_SEL (BIT(7))
#define GPIO_SIG214_IN_SEL_M (BIT(7))
#define GPIO_SIG214_IN_SEL_V 0x1
#define GPIO_SIG214_IN_SEL_S 7


#define GPIO_FUNC214_IN_INV_SEL (BIT(6))
#define GPIO_FUNC214_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC214_IN_INV_SEL_V 0x1
#define GPIO_FUNC214_IN_INV_SEL_S 6


#define GPIO_FUNC214_IN_SEL 0x0000003F
#define GPIO_FUNC214_IN_SEL_M ((GPIO_FUNC214_IN_SEL_V)<<(GPIO_FUNC214_IN_SEL_S))
#define GPIO_FUNC214_IN_SEL_V 0x3F
#define GPIO_FUNC214_IN_SEL_S 0

#define GPIO_FUNC215_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x048c)




# 6216 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG215_IN_SEL (BIT(7))
#define GPIO_SIG215_IN_SEL_M (BIT(7))
#define GPIO_SIG215_IN_SEL_V 0x1
#define GPIO_SIG215_IN_SEL_S 7


#define GPIO_FUNC215_IN_INV_SEL (BIT(6))
#define GPIO_FUNC215_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC215_IN_INV_SEL_V 0x1
#define GPIO_FUNC215_IN_INV_SEL_S 6


#define GPIO_FUNC215_IN_SEL 0x0000003F
#define GPIO_FUNC215_IN_SEL_M ((GPIO_FUNC215_IN_SEL_V)<<(GPIO_FUNC215_IN_SEL_S))
#define GPIO_FUNC215_IN_SEL_V 0x3F
#define GPIO_FUNC215_IN_SEL_S 0

#define GPIO_FUNC216_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0490)




# 6237 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG216_IN_SEL (BIT(7))
#define GPIO_SIG216_IN_SEL_M (BIT(7))
#define GPIO_SIG216_IN_SEL_V 0x1
#define GPIO_SIG216_IN_SEL_S 7


#define GPIO_FUNC216_IN_INV_SEL (BIT(6))
#define GPIO_FUNC216_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC216_IN_INV_SEL_V 0x1
#define GPIO_FUNC216_IN_INV_SEL_S 6


#define GPIO_FUNC216_IN_SEL 0x0000003F
#define GPIO_FUNC216_IN_SEL_M ((GPIO_FUNC216_IN_SEL_V)<<(GPIO_FUNC216_IN_SEL_S))
#define GPIO_FUNC216_IN_SEL_V 0x3F
#define GPIO_FUNC216_IN_SEL_S 0

#define GPIO_FUNC217_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0494)




# 6258 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG217_IN_SEL (BIT(7))
#define GPIO_SIG217_IN_SEL_M (BIT(7))
#define GPIO_SIG217_IN_SEL_V 0x1
#define GPIO_SIG217_IN_SEL_S 7


#define GPIO_FUNC217_IN_INV_SEL (BIT(6))
#define GPIO_FUNC217_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC217_IN_INV_SEL_V 0x1
#define GPIO_FUNC217_IN_INV_SEL_S 6


#define GPIO_FUNC217_IN_SEL 0x0000003F
#define GPIO_FUNC217_IN_SEL_M ((GPIO_FUNC217_IN_SEL_V)<<(GPIO_FUNC217_IN_SEL_S))
#define GPIO_FUNC217_IN_SEL_V 0x3F
#define GPIO_FUNC217_IN_SEL_S 0

#define GPIO_FUNC218_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0498)




# 6279 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG218_IN_SEL (BIT(7))
#define GPIO_SIG218_IN_SEL_M (BIT(7))
#define GPIO_SIG218_IN_SEL_V 0x1
#define GPIO_SIG218_IN_SEL_S 7


#define GPIO_FUNC218_IN_INV_SEL (BIT(6))
#define GPIO_FUNC218_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC218_IN_INV_SEL_V 0x1
#define GPIO_FUNC218_IN_INV_SEL_S 6


#define GPIO_FUNC218_IN_SEL 0x0000003F
#define GPIO_FUNC218_IN_SEL_M ((GPIO_FUNC218_IN_SEL_V)<<(GPIO_FUNC218_IN_SEL_S))
#define GPIO_FUNC218_IN_SEL_V 0x3F
#define GPIO_FUNC218_IN_SEL_S 0

#define GPIO_FUNC219_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x049c)




# 6300 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG219_IN_SEL (BIT(7))
#define GPIO_SIG219_IN_SEL_M (BIT(7))
#define GPIO_SIG219_IN_SEL_V 0x1
#define GPIO_SIG219_IN_SEL_S 7


#define GPIO_FUNC219_IN_INV_SEL (BIT(6))
#define GPIO_FUNC219_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC219_IN_INV_SEL_V 0x1
#define GPIO_FUNC219_IN_INV_SEL_S 6


#define GPIO_FUNC219_IN_SEL 0x0000003F
#define GPIO_FUNC219_IN_SEL_M ((GPIO_FUNC219_IN_SEL_V)<<(GPIO_FUNC219_IN_SEL_S))
#define GPIO_FUNC219_IN_SEL_V 0x3F
#define GPIO_FUNC219_IN_SEL_S 0

#define GPIO_FUNC220_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04a0)




# 6321 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG220_IN_SEL (BIT(7))
#define GPIO_SIG220_IN_SEL_M (BIT(7))
#define GPIO_SIG220_IN_SEL_V 0x1
#define GPIO_SIG220_IN_SEL_S 7


#define GPIO_FUNC220_IN_INV_SEL (BIT(6))
#define GPIO_FUNC220_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC220_IN_INV_SEL_V 0x1
#define GPIO_FUNC220_IN_INV_SEL_S 6


#define GPIO_FUNC220_IN_SEL 0x0000003F
#define GPIO_FUNC220_IN_SEL_M ((GPIO_FUNC220_IN_SEL_V)<<(GPIO_FUNC220_IN_SEL_S))
#define GPIO_FUNC220_IN_SEL_V 0x3F
#define GPIO_FUNC220_IN_SEL_S 0

#define GPIO_FUNC221_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04a4)




# 6342 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG221_IN_SEL (BIT(7))
#define GPIO_SIG221_IN_SEL_M (BIT(7))
#define GPIO_SIG221_IN_SEL_V 0x1
#define GPIO_SIG221_IN_SEL_S 7


#define GPIO_FUNC221_IN_INV_SEL (BIT(6))
#define GPIO_FUNC221_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC221_IN_INV_SEL_V 0x1
#define GPIO_FUNC221_IN_INV_SEL_S 6


#define GPIO_FUNC221_IN_SEL 0x0000003F
#define GPIO_FUNC221_IN_SEL_M ((GPIO_FUNC221_IN_SEL_V)<<(GPIO_FUNC221_IN_SEL_S))
#define GPIO_FUNC221_IN_SEL_V 0x3F
#define GPIO_FUNC221_IN_SEL_S 0

#define GPIO_FUNC222_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04a8)




# 6363 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG222_IN_SEL (BIT(7))
#define GPIO_SIG222_IN_SEL_M (BIT(7))
#define GPIO_SIG222_IN_SEL_V 0x1
#define GPIO_SIG222_IN_SEL_S 7


#define GPIO_FUNC222_IN_INV_SEL (BIT(6))
#define GPIO_FUNC222_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC222_IN_INV_SEL_V 0x1
#define GPIO_FUNC222_IN_INV_SEL_S 6


#define GPIO_FUNC222_IN_SEL 0x0000003F
#define GPIO_FUNC222_IN_SEL_M ((GPIO_FUNC222_IN_SEL_V)<<(GPIO_FUNC222_IN_SEL_S))
#define GPIO_FUNC222_IN_SEL_V 0x3F
#define GPIO_FUNC222_IN_SEL_S 0

#define GPIO_FUNC223_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04ac)




# 6384 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG223_IN_SEL (BIT(7))
#define GPIO_SIG223_IN_SEL_M (BIT(7))
#define GPIO_SIG223_IN_SEL_V 0x1
#define GPIO_SIG223_IN_SEL_S 7


#define GPIO_FUNC223_IN_INV_SEL (BIT(6))
#define GPIO_FUNC223_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC223_IN_INV_SEL_V 0x1
#define GPIO_FUNC223_IN_INV_SEL_S 6


#define GPIO_FUNC223_IN_SEL 0x0000003F
#define GPIO_FUNC223_IN_SEL_M ((GPIO_FUNC223_IN_SEL_V)<<(GPIO_FUNC223_IN_SEL_S))
#define GPIO_FUNC223_IN_SEL_V 0x3F
#define GPIO_FUNC223_IN_SEL_S 0

#define GPIO_FUNC224_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04b0)




# 6405 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG224_IN_SEL (BIT(7))
#define GPIO_SIG224_IN_SEL_M (BIT(7))
#define GPIO_SIG224_IN_SEL_V 0x1
#define GPIO_SIG224_IN_SEL_S 7


#define GPIO_FUNC224_IN_INV_SEL (BIT(6))
#define GPIO_FUNC224_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC224_IN_INV_SEL_V 0x1
#define GPIO_FUNC224_IN_INV_SEL_S 6


#define GPIO_FUNC224_IN_SEL 0x0000003F
#define GPIO_FUNC224_IN_SEL_M ((GPIO_FUNC224_IN_SEL_V)<<(GPIO_FUNC224_IN_SEL_S))
#define GPIO_FUNC224_IN_SEL_V 0x3F
#define GPIO_FUNC224_IN_SEL_S 0

#define GPIO_FUNC225_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04b4)




# 6426 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG225_IN_SEL (BIT(7))
#define GPIO_SIG225_IN_SEL_M (BIT(7))
#define GPIO_SIG225_IN_SEL_V 0x1
#define GPIO_SIG225_IN_SEL_S 7


#define GPIO_FUNC225_IN_INV_SEL (BIT(6))
#define GPIO_FUNC225_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC225_IN_INV_SEL_V 0x1
#define GPIO_FUNC225_IN_INV_SEL_S 6


#define GPIO_FUNC225_IN_SEL 0x0000003F
#define GPIO_FUNC225_IN_SEL_M ((GPIO_FUNC225_IN_SEL_V)<<(GPIO_FUNC225_IN_SEL_S))
#define GPIO_FUNC225_IN_SEL_V 0x3F
#define GPIO_FUNC225_IN_SEL_S 0

#define GPIO_FUNC226_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04b8)




# 6447 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG226_IN_SEL (BIT(7))
#define GPIO_SIG226_IN_SEL_M (BIT(7))
#define GPIO_SIG226_IN_SEL_V 0x1
#define GPIO_SIG226_IN_SEL_S 7


#define GPIO_FUNC226_IN_INV_SEL (BIT(6))
#define GPIO_FUNC226_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC226_IN_INV_SEL_V 0x1
#define GPIO_FUNC226_IN_INV_SEL_S 6


#define GPIO_FUNC226_IN_SEL 0x0000003F
#define GPIO_FUNC226_IN_SEL_M ((GPIO_FUNC226_IN_SEL_V)<<(GPIO_FUNC226_IN_SEL_S))
#define GPIO_FUNC226_IN_SEL_V 0x3F
#define GPIO_FUNC226_IN_SEL_S 0

#define GPIO_FUNC227_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04bc)




# 6468 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG227_IN_SEL (BIT(7))
#define GPIO_SIG227_IN_SEL_M (BIT(7))
#define GPIO_SIG227_IN_SEL_V 0x1
#define GPIO_SIG227_IN_SEL_S 7


#define GPIO_FUNC227_IN_INV_SEL (BIT(6))
#define GPIO_FUNC227_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC227_IN_INV_SEL_V 0x1
#define GPIO_FUNC227_IN_INV_SEL_S 6


#define GPIO_FUNC227_IN_SEL 0x0000003F
#define GPIO_FUNC227_IN_SEL_M ((GPIO_FUNC227_IN_SEL_V)<<(GPIO_FUNC227_IN_SEL_S))
#define GPIO_FUNC227_IN_SEL_V 0x3F
#define GPIO_FUNC227_IN_SEL_S 0

#define GPIO_FUNC228_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04c0)




# 6489 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG228_IN_SEL (BIT(7))
#define GPIO_SIG228_IN_SEL_M (BIT(7))
#define GPIO_SIG228_IN_SEL_V 0x1
#define GPIO_SIG228_IN_SEL_S 7


#define GPIO_FUNC228_IN_INV_SEL (BIT(6))
#define GPIO_FUNC228_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC228_IN_INV_SEL_V 0x1
#define GPIO_FUNC228_IN_INV_SEL_S 6


#define GPIO_FUNC228_IN_SEL 0x0000003F
#define GPIO_FUNC228_IN_SEL_M ((GPIO_FUNC228_IN_SEL_V)<<(GPIO_FUNC228_IN_SEL_S))
#define GPIO_FUNC228_IN_SEL_V 0x3F
#define GPIO_FUNC228_IN_SEL_S 0

#define GPIO_FUNC229_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04c4)




# 6510 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG229_IN_SEL (BIT(7))
#define GPIO_SIG229_IN_SEL_M (BIT(7))
#define GPIO_SIG229_IN_SEL_V 0x1
#define GPIO_SIG229_IN_SEL_S 7


#define GPIO_FUNC229_IN_INV_SEL (BIT(6))
#define GPIO_FUNC229_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC229_IN_INV_SEL_V 0x1
#define GPIO_FUNC229_IN_INV_SEL_S 6


#define GPIO_FUNC229_IN_SEL 0x0000003F
#define GPIO_FUNC229_IN_SEL_M ((GPIO_FUNC229_IN_SEL_V)<<(GPIO_FUNC229_IN_SEL_S))
#define GPIO_FUNC229_IN_SEL_V 0x3F
#define GPIO_FUNC229_IN_SEL_S 0

#define GPIO_FUNC230_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04c8)




# 6531 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG230_IN_SEL (BIT(7))
#define GPIO_SIG230_IN_SEL_M (BIT(7))
#define GPIO_SIG230_IN_SEL_V 0x1
#define GPIO_SIG230_IN_SEL_S 7


#define GPIO_FUNC230_IN_INV_SEL (BIT(6))
#define GPIO_FUNC230_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC230_IN_INV_SEL_V 0x1
#define GPIO_FUNC230_IN_INV_SEL_S 6


#define GPIO_FUNC230_IN_SEL 0x0000003F
#define GPIO_FUNC230_IN_SEL_M ((GPIO_FUNC230_IN_SEL_V)<<(GPIO_FUNC230_IN_SEL_S))
#define GPIO_FUNC230_IN_SEL_V 0x3F
#define GPIO_FUNC230_IN_SEL_S 0

#define GPIO_FUNC231_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04cc)




# 6552 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG231_IN_SEL (BIT(7))
#define GPIO_SIG231_IN_SEL_M (BIT(7))
#define GPIO_SIG231_IN_SEL_V 0x1
#define GPIO_SIG231_IN_SEL_S 7


#define GPIO_FUNC231_IN_INV_SEL (BIT(6))
#define GPIO_FUNC231_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC231_IN_INV_SEL_V 0x1
#define GPIO_FUNC231_IN_INV_SEL_S 6


#define GPIO_FUNC231_IN_SEL 0x0000003F
#define GPIO_FUNC231_IN_SEL_M ((GPIO_FUNC231_IN_SEL_V)<<(GPIO_FUNC231_IN_SEL_S))
#define GPIO_FUNC231_IN_SEL_V 0x3F
#define GPIO_FUNC231_IN_SEL_S 0

#define GPIO_FUNC232_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04d0)




# 6573 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG232_IN_SEL (BIT(7))
#define GPIO_SIG232_IN_SEL_M (BIT(7))
#define GPIO_SIG232_IN_SEL_V 0x1
#define GPIO_SIG232_IN_SEL_S 7


#define GPIO_FUNC232_IN_INV_SEL (BIT(6))
#define GPIO_FUNC232_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC232_IN_INV_SEL_V 0x1
#define GPIO_FUNC232_IN_INV_SEL_S 6


#define GPIO_FUNC232_IN_SEL 0x0000003F
#define GPIO_FUNC232_IN_SEL_M ((GPIO_FUNC232_IN_SEL_V)<<(GPIO_FUNC232_IN_SEL_S))
#define GPIO_FUNC232_IN_SEL_V 0x3F
#define GPIO_FUNC232_IN_SEL_S 0

#define GPIO_FUNC233_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04d4)




# 6594 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG233_IN_SEL (BIT(7))
#define GPIO_SIG233_IN_SEL_M (BIT(7))
#define GPIO_SIG233_IN_SEL_V 0x1
#define GPIO_SIG233_IN_SEL_S 7


#define GPIO_FUNC233_IN_INV_SEL (BIT(6))
#define GPIO_FUNC233_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC233_IN_INV_SEL_V 0x1
#define GPIO_FUNC233_IN_INV_SEL_S 6


#define GPIO_FUNC233_IN_SEL 0x0000003F
#define GPIO_FUNC233_IN_SEL_M ((GPIO_FUNC233_IN_SEL_V)<<(GPIO_FUNC233_IN_SEL_S))
#define GPIO_FUNC233_IN_SEL_V 0x3F
#define GPIO_FUNC233_IN_SEL_S 0

#define GPIO_FUNC234_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04d8)




# 6615 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG234_IN_SEL (BIT(7))
#define GPIO_SIG234_IN_SEL_M (BIT(7))
#define GPIO_SIG234_IN_SEL_V 0x1
#define GPIO_SIG234_IN_SEL_S 7


#define GPIO_FUNC234_IN_INV_SEL (BIT(6))
#define GPIO_FUNC234_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC234_IN_INV_SEL_V 0x1
#define GPIO_FUNC234_IN_INV_SEL_S 6


#define GPIO_FUNC234_IN_SEL 0x0000003F
#define GPIO_FUNC234_IN_SEL_M ((GPIO_FUNC234_IN_SEL_V)<<(GPIO_FUNC234_IN_SEL_S))
#define GPIO_FUNC234_IN_SEL_V 0x3F
#define GPIO_FUNC234_IN_SEL_S 0

#define GPIO_FUNC235_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04dc)




# 6636 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG235_IN_SEL (BIT(7))
#define GPIO_SIG235_IN_SEL_M (BIT(7))
#define GPIO_SIG235_IN_SEL_V 0x1
#define GPIO_SIG235_IN_SEL_S 7


#define GPIO_FUNC235_IN_INV_SEL (BIT(6))
#define GPIO_FUNC235_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC235_IN_INV_SEL_V 0x1
#define GPIO_FUNC235_IN_INV_SEL_S 6


#define GPIO_FUNC235_IN_SEL 0x0000003F
#define GPIO_FUNC235_IN_SEL_M ((GPIO_FUNC235_IN_SEL_V)<<(GPIO_FUNC235_IN_SEL_S))
#define GPIO_FUNC235_IN_SEL_V 0x3F
#define GPIO_FUNC235_IN_SEL_S 0

#define GPIO_FUNC236_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04e0)




# 6657 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG236_IN_SEL (BIT(7))
#define GPIO_SIG236_IN_SEL_M (BIT(7))
#define GPIO_SIG236_IN_SEL_V 0x1
#define GPIO_SIG236_IN_SEL_S 7


#define GPIO_FUNC236_IN_INV_SEL (BIT(6))
#define GPIO_FUNC236_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC236_IN_INV_SEL_V 0x1
#define GPIO_FUNC236_IN_INV_SEL_S 6


#define GPIO_FUNC236_IN_SEL 0x0000003F
#define GPIO_FUNC236_IN_SEL_M ((GPIO_FUNC236_IN_SEL_V)<<(GPIO_FUNC236_IN_SEL_S))
#define GPIO_FUNC236_IN_SEL_V 0x3F
#define GPIO_FUNC236_IN_SEL_S 0

#define GPIO_FUNC237_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04e4)




# 6678 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG237_IN_SEL (BIT(7))
#define GPIO_SIG237_IN_SEL_M (BIT(7))
#define GPIO_SIG237_IN_SEL_V 0x1
#define GPIO_SIG237_IN_SEL_S 7


#define GPIO_FUNC237_IN_INV_SEL (BIT(6))
#define GPIO_FUNC237_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC237_IN_INV_SEL_V 0x1
#define GPIO_FUNC237_IN_INV_SEL_S 6


#define GPIO_FUNC237_IN_SEL 0x0000003F
#define GPIO_FUNC237_IN_SEL_M ((GPIO_FUNC237_IN_SEL_V)<<(GPIO_FUNC237_IN_SEL_S))
#define GPIO_FUNC237_IN_SEL_V 0x3F
#define GPIO_FUNC237_IN_SEL_S 0

#define GPIO_FUNC238_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04e8)




# 6699 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG238_IN_SEL (BIT(7))
#define GPIO_SIG238_IN_SEL_M (BIT(7))
#define GPIO_SIG238_IN_SEL_V 0x1
#define GPIO_SIG238_IN_SEL_S 7


#define GPIO_FUNC238_IN_INV_SEL (BIT(6))
#define GPIO_FUNC238_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC238_IN_INV_SEL_V 0x1
#define GPIO_FUNC238_IN_INV_SEL_S 6


#define GPIO_FUNC238_IN_SEL 0x0000003F
#define GPIO_FUNC238_IN_SEL_M ((GPIO_FUNC238_IN_SEL_V)<<(GPIO_FUNC238_IN_SEL_S))
#define GPIO_FUNC238_IN_SEL_V 0x3F
#define GPIO_FUNC238_IN_SEL_S 0

#define GPIO_FUNC239_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04ec)




# 6720 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG239_IN_SEL (BIT(7))
#define GPIO_SIG239_IN_SEL_M (BIT(7))
#define GPIO_SIG239_IN_SEL_V 0x1
#define GPIO_SIG239_IN_SEL_S 7


#define GPIO_FUNC239_IN_INV_SEL (BIT(6))
#define GPIO_FUNC239_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC239_IN_INV_SEL_V 0x1
#define GPIO_FUNC239_IN_INV_SEL_S 6


#define GPIO_FUNC239_IN_SEL 0x0000003F
#define GPIO_FUNC239_IN_SEL_M ((GPIO_FUNC239_IN_SEL_V)<<(GPIO_FUNC239_IN_SEL_S))
#define GPIO_FUNC239_IN_SEL_V 0x3F
#define GPIO_FUNC239_IN_SEL_S 0

#define GPIO_FUNC240_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04f0)




# 6741 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG240_IN_SEL (BIT(7))
#define GPIO_SIG240_IN_SEL_M (BIT(7))
#define GPIO_SIG240_IN_SEL_V 0x1
#define GPIO_SIG240_IN_SEL_S 7


#define GPIO_FUNC240_IN_INV_SEL (BIT(6))
#define GPIO_FUNC240_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC240_IN_INV_SEL_V 0x1
#define GPIO_FUNC240_IN_INV_SEL_S 6


#define GPIO_FUNC240_IN_SEL 0x0000003F
#define GPIO_FUNC240_IN_SEL_M ((GPIO_FUNC240_IN_SEL_V)<<(GPIO_FUNC240_IN_SEL_S))
#define GPIO_FUNC240_IN_SEL_V 0x3F
#define GPIO_FUNC240_IN_SEL_S 0

#define GPIO_FUNC241_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04f4)




# 6762 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG241_IN_SEL (BIT(7))
#define GPIO_SIG241_IN_SEL_M (BIT(7))
#define GPIO_SIG241_IN_SEL_V 0x1
#define GPIO_SIG241_IN_SEL_S 7


#define GPIO_FUNC241_IN_INV_SEL (BIT(6))
#define GPIO_FUNC241_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC241_IN_INV_SEL_V 0x1
#define GPIO_FUNC241_IN_INV_SEL_S 6


#define GPIO_FUNC241_IN_SEL 0x0000003F
#define GPIO_FUNC241_IN_SEL_M ((GPIO_FUNC241_IN_SEL_V)<<(GPIO_FUNC241_IN_SEL_S))
#define GPIO_FUNC241_IN_SEL_V 0x3F
#define GPIO_FUNC241_IN_SEL_S 0

#define GPIO_FUNC242_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04f8)




# 6783 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG242_IN_SEL (BIT(7))
#define GPIO_SIG242_IN_SEL_M (BIT(7))
#define GPIO_SIG242_IN_SEL_V 0x1
#define GPIO_SIG242_IN_SEL_S 7


#define GPIO_FUNC242_IN_INV_SEL (BIT(6))
#define GPIO_FUNC242_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC242_IN_INV_SEL_V 0x1
#define GPIO_FUNC242_IN_INV_SEL_S 6


#define GPIO_FUNC242_IN_SEL 0x0000003F
#define GPIO_FUNC242_IN_SEL_M ((GPIO_FUNC242_IN_SEL_V)<<(GPIO_FUNC242_IN_SEL_S))
#define GPIO_FUNC242_IN_SEL_V 0x3F
#define GPIO_FUNC242_IN_SEL_S 0

#define GPIO_FUNC243_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x04fc)




# 6804 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG243_IN_SEL (BIT(7))
#define GPIO_SIG243_IN_SEL_M (BIT(7))
#define GPIO_SIG243_IN_SEL_V 0x1
#define GPIO_SIG243_IN_SEL_S 7


#define GPIO_FUNC243_IN_INV_SEL (BIT(6))
#define GPIO_FUNC243_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC243_IN_INV_SEL_V 0x1
#define GPIO_FUNC243_IN_INV_SEL_S 6


#define GPIO_FUNC243_IN_SEL 0x0000003F
#define GPIO_FUNC243_IN_SEL_M ((GPIO_FUNC243_IN_SEL_V)<<(GPIO_FUNC243_IN_SEL_S))
#define GPIO_FUNC243_IN_SEL_V 0x3F
#define GPIO_FUNC243_IN_SEL_S 0

#define GPIO_FUNC244_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0500)




# 6825 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG244_IN_SEL (BIT(7))
#define GPIO_SIG244_IN_SEL_M (BIT(7))
#define GPIO_SIG244_IN_SEL_V 0x1
#define GPIO_SIG244_IN_SEL_S 7


#define GPIO_FUNC244_IN_INV_SEL (BIT(6))
#define GPIO_FUNC244_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC244_IN_INV_SEL_V 0x1
#define GPIO_FUNC244_IN_INV_SEL_S 6


#define GPIO_FUNC244_IN_SEL 0x0000003F
#define GPIO_FUNC244_IN_SEL_M ((GPIO_FUNC244_IN_SEL_V)<<(GPIO_FUNC244_IN_SEL_S))
#define GPIO_FUNC244_IN_SEL_V 0x3F
#define GPIO_FUNC244_IN_SEL_S 0

#define GPIO_FUNC245_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0504)




# 6846 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG245_IN_SEL (BIT(7))
#define GPIO_SIG245_IN_SEL_M (BIT(7))
#define GPIO_SIG245_IN_SEL_V 0x1
#define GPIO_SIG245_IN_SEL_S 7


#define GPIO_FUNC245_IN_INV_SEL (BIT(6))
#define GPIO_FUNC245_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC245_IN_INV_SEL_V 0x1
#define GPIO_FUNC245_IN_INV_SEL_S 6


#define GPIO_FUNC245_IN_SEL 0x0000003F
#define GPIO_FUNC245_IN_SEL_M ((GPIO_FUNC245_IN_SEL_V)<<(GPIO_FUNC245_IN_SEL_S))
#define GPIO_FUNC245_IN_SEL_V 0x3F
#define GPIO_FUNC245_IN_SEL_S 0

#define GPIO_FUNC246_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0508)




# 6867 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG246_IN_SEL (BIT(7))
#define GPIO_SIG246_IN_SEL_M (BIT(7))
#define GPIO_SIG246_IN_SEL_V 0x1
#define GPIO_SIG246_IN_SEL_S 7


#define GPIO_FUNC246_IN_INV_SEL (BIT(6))
#define GPIO_FUNC246_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC246_IN_INV_SEL_V 0x1
#define GPIO_FUNC246_IN_INV_SEL_S 6


#define GPIO_FUNC246_IN_SEL 0x0000003F
#define GPIO_FUNC246_IN_SEL_M ((GPIO_FUNC246_IN_SEL_V)<<(GPIO_FUNC246_IN_SEL_S))
#define GPIO_FUNC246_IN_SEL_V 0x3F
#define GPIO_FUNC246_IN_SEL_S 0

#define GPIO_FUNC247_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x050c)




# 6888 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG247_IN_SEL (BIT(7))
#define GPIO_SIG247_IN_SEL_M (BIT(7))
#define GPIO_SIG247_IN_SEL_V 0x1
#define GPIO_SIG247_IN_SEL_S 7


#define GPIO_FUNC247_IN_INV_SEL (BIT(6))
#define GPIO_FUNC247_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC247_IN_INV_SEL_V 0x1
#define GPIO_FUNC247_IN_INV_SEL_S 6


#define GPIO_FUNC247_IN_SEL 0x0000003F
#define GPIO_FUNC247_IN_SEL_M ((GPIO_FUNC247_IN_SEL_V)<<(GPIO_FUNC247_IN_SEL_S))
#define GPIO_FUNC247_IN_SEL_V 0x3F
#define GPIO_FUNC247_IN_SEL_S 0

#define GPIO_FUNC248_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0510)




# 6909 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG248_IN_SEL (BIT(7))
#define GPIO_SIG248_IN_SEL_M (BIT(7))
#define GPIO_SIG248_IN_SEL_V 0x1
#define GPIO_SIG248_IN_SEL_S 7


#define GPIO_FUNC248_IN_INV_SEL (BIT(6))
#define GPIO_FUNC248_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC248_IN_INV_SEL_V 0x1
#define GPIO_FUNC248_IN_INV_SEL_S 6


#define GPIO_FUNC248_IN_SEL 0x0000003F
#define GPIO_FUNC248_IN_SEL_M ((GPIO_FUNC248_IN_SEL_V)<<(GPIO_FUNC248_IN_SEL_S))
#define GPIO_FUNC248_IN_SEL_V 0x3F
#define GPIO_FUNC248_IN_SEL_S 0

#define GPIO_FUNC249_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0514)




# 6930 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG249_IN_SEL (BIT(7))
#define GPIO_SIG249_IN_SEL_M (BIT(7))
#define GPIO_SIG249_IN_SEL_V 0x1
#define GPIO_SIG249_IN_SEL_S 7


#define GPIO_FUNC249_IN_INV_SEL (BIT(6))
#define GPIO_FUNC249_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC249_IN_INV_SEL_V 0x1
#define GPIO_FUNC249_IN_INV_SEL_S 6


#define GPIO_FUNC249_IN_SEL 0x0000003F
#define GPIO_FUNC249_IN_SEL_M ((GPIO_FUNC249_IN_SEL_V)<<(GPIO_FUNC249_IN_SEL_S))
#define GPIO_FUNC249_IN_SEL_V 0x3F
#define GPIO_FUNC249_IN_SEL_S 0

#define GPIO_FUNC250_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0518)




# 6951 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG250_IN_SEL (BIT(7))
#define GPIO_SIG250_IN_SEL_M (BIT(7))
#define GPIO_SIG250_IN_SEL_V 0x1
#define GPIO_SIG250_IN_SEL_S 7


#define GPIO_FUNC250_IN_INV_SEL (BIT(6))
#define GPIO_FUNC250_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC250_IN_INV_SEL_V 0x1
#define GPIO_FUNC250_IN_INV_SEL_S 6


#define GPIO_FUNC250_IN_SEL 0x0000003F
#define GPIO_FUNC250_IN_SEL_M ((GPIO_FUNC250_IN_SEL_V)<<(GPIO_FUNC250_IN_SEL_S))
#define GPIO_FUNC250_IN_SEL_V 0x3F
#define GPIO_FUNC250_IN_SEL_S 0

#define GPIO_FUNC251_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x051c)




# 6972 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG251_IN_SEL (BIT(7))
#define GPIO_SIG251_IN_SEL_M (BIT(7))
#define GPIO_SIG251_IN_SEL_V 0x1
#define GPIO_SIG251_IN_SEL_S 7


#define GPIO_FUNC251_IN_INV_SEL (BIT(6))
#define GPIO_FUNC251_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC251_IN_INV_SEL_V 0x1
#define GPIO_FUNC251_IN_INV_SEL_S 6


#define GPIO_FUNC251_IN_SEL 0x0000003F
#define GPIO_FUNC251_IN_SEL_M ((GPIO_FUNC251_IN_SEL_V)<<(GPIO_FUNC251_IN_SEL_S))
#define GPIO_FUNC251_IN_SEL_V 0x3F
#define GPIO_FUNC251_IN_SEL_S 0

#define GPIO_FUNC252_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0520)




# 6993 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG252_IN_SEL (BIT(7))
#define GPIO_SIG252_IN_SEL_M (BIT(7))
#define GPIO_SIG252_IN_SEL_V 0x1
#define GPIO_SIG252_IN_SEL_S 7


#define GPIO_FUNC252_IN_INV_SEL (BIT(6))
#define GPIO_FUNC252_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC252_IN_INV_SEL_V 0x1
#define GPIO_FUNC252_IN_INV_SEL_S 6


#define GPIO_FUNC252_IN_SEL 0x0000003F
#define GPIO_FUNC252_IN_SEL_M ((GPIO_FUNC252_IN_SEL_V)<<(GPIO_FUNC252_IN_SEL_S))
#define GPIO_FUNC252_IN_SEL_V 0x3F
#define GPIO_FUNC252_IN_SEL_S 0

#define GPIO_FUNC253_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0524)




# 7014 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG253_IN_SEL (BIT(7))
#define GPIO_SIG253_IN_SEL_M (BIT(7))
#define GPIO_SIG253_IN_SEL_V 0x1
#define GPIO_SIG253_IN_SEL_S 7


#define GPIO_FUNC253_IN_INV_SEL (BIT(6))
#define GPIO_FUNC253_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC253_IN_INV_SEL_V 0x1
#define GPIO_FUNC253_IN_INV_SEL_S 6


#define GPIO_FUNC253_IN_SEL 0x0000003F
#define GPIO_FUNC253_IN_SEL_M ((GPIO_FUNC253_IN_SEL_V)<<(GPIO_FUNC253_IN_SEL_S))
#define GPIO_FUNC253_IN_SEL_V 0x3F
#define GPIO_FUNC253_IN_SEL_S 0

#define GPIO_FUNC254_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0528)




# 7035 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG254_IN_SEL (BIT(7))
#define GPIO_SIG254_IN_SEL_M (BIT(7))
#define GPIO_SIG254_IN_SEL_V 0x1
#define GPIO_SIG254_IN_SEL_S 7


#define GPIO_FUNC254_IN_INV_SEL (BIT(6))
#define GPIO_FUNC254_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC254_IN_INV_SEL_V 0x1
#define GPIO_FUNC254_IN_INV_SEL_S 6


#define GPIO_FUNC254_IN_SEL 0x0000003F
#define GPIO_FUNC254_IN_SEL_M ((GPIO_FUNC254_IN_SEL_V)<<(GPIO_FUNC254_IN_SEL_S))
#define GPIO_FUNC254_IN_SEL_V 0x3F
#define GPIO_FUNC254_IN_SEL_S 0

#define GPIO_FUNC255_IN_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x052c)




# 7056 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_SIG255_IN_SEL (BIT(7))
#define GPIO_SIG255_IN_SEL_M (BIT(7))
#define GPIO_SIG255_IN_SEL_V 0x1
#define GPIO_SIG255_IN_SEL_S 7


#define GPIO_FUNC255_IN_INV_SEL (BIT(6))
#define GPIO_FUNC255_IN_INV_SEL_M (BIT(6))
#define GPIO_FUNC255_IN_INV_SEL_V 0x1
#define GPIO_FUNC255_IN_INV_SEL_S 6


#define GPIO_FUNC255_IN_SEL 0x0000003F
#define GPIO_FUNC255_IN_SEL_M ((GPIO_FUNC255_IN_SEL_V)<<(GPIO_FUNC255_IN_SEL_S))
#define GPIO_FUNC255_IN_SEL_V 0x3F
#define GPIO_FUNC255_IN_SEL_S 0

#define GPIO_FUNC0_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0530)




# 7077 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC0_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC0_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC0_OEN_INV_SEL_V 0x1
#define GPIO_FUNC0_OEN_INV_SEL_S 11




# 7084 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC0_OEN_SEL (BIT(10))
#define GPIO_FUNC0_OEN_SEL_M (BIT(10))
#define GPIO_FUNC0_OEN_SEL_V 0x1
#define GPIO_FUNC0_OEN_SEL_S 10




# 7091 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC0_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC0_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC0_OUT_INV_SEL_V 0x1
#define GPIO_FUNC0_OUT_INV_SEL_S 9


#define GPIO_FUNC0_OUT_SEL 0x000001FF
#define GPIO_FUNC0_OUT_SEL_M ((GPIO_FUNC0_OUT_SEL_V)<<(GPIO_FUNC0_OUT_SEL_S))
#define GPIO_FUNC0_OUT_SEL_V 0x1FF
#define GPIO_FUNC0_OUT_SEL_S 0

#define GPIO_FUNC1_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0534)




# 7106 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC1_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC1_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC1_OEN_INV_SEL_V 0x1
#define GPIO_FUNC1_OEN_INV_SEL_S 11




# 7113 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC1_OEN_SEL (BIT(10))
#define GPIO_FUNC1_OEN_SEL_M (BIT(10))
#define GPIO_FUNC1_OEN_SEL_V 0x1
#define GPIO_FUNC1_OEN_SEL_S 10




# 7120 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC1_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC1_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC1_OUT_INV_SEL_V 0x1
#define GPIO_FUNC1_OUT_INV_SEL_S 9


#define GPIO_FUNC1_OUT_SEL 0x000001FF
#define GPIO_FUNC1_OUT_SEL_M ((GPIO_FUNC1_OUT_SEL_V)<<(GPIO_FUNC1_OUT_SEL_S))
#define GPIO_FUNC1_OUT_SEL_V 0x1FF
#define GPIO_FUNC1_OUT_SEL_S 0

#define GPIO_FUNC2_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0538)




# 7135 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC2_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC2_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC2_OEN_INV_SEL_V 0x1
#define GPIO_FUNC2_OEN_INV_SEL_S 11




# 7142 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC2_OEN_SEL (BIT(10))
#define GPIO_FUNC2_OEN_SEL_M (BIT(10))
#define GPIO_FUNC2_OEN_SEL_V 0x1
#define GPIO_FUNC2_OEN_SEL_S 10




# 7149 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC2_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC2_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC2_OUT_INV_SEL_V 0x1
#define GPIO_FUNC2_OUT_INV_SEL_S 9


#define GPIO_FUNC2_OUT_SEL 0x000001FF
#define GPIO_FUNC2_OUT_SEL_M ((GPIO_FUNC2_OUT_SEL_V)<<(GPIO_FUNC2_OUT_SEL_S))
#define GPIO_FUNC2_OUT_SEL_V 0x1FF
#define GPIO_FUNC2_OUT_SEL_S 0

#define GPIO_FUNC3_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x053c)




# 7164 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC3_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC3_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC3_OEN_INV_SEL_V 0x1
#define GPIO_FUNC3_OEN_INV_SEL_S 11




# 7171 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC3_OEN_SEL (BIT(10))
#define GPIO_FUNC3_OEN_SEL_M (BIT(10))
#define GPIO_FUNC3_OEN_SEL_V 0x1
#define GPIO_FUNC3_OEN_SEL_S 10




# 7178 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC3_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC3_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC3_OUT_INV_SEL_V 0x1
#define GPIO_FUNC3_OUT_INV_SEL_S 9


#define GPIO_FUNC3_OUT_SEL 0x000001FF
#define GPIO_FUNC3_OUT_SEL_M ((GPIO_FUNC3_OUT_SEL_V)<<(GPIO_FUNC3_OUT_SEL_S))
#define GPIO_FUNC3_OUT_SEL_V 0x1FF
#define GPIO_FUNC3_OUT_SEL_S 0

#define GPIO_FUNC4_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0540)




# 7193 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC4_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC4_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC4_OEN_INV_SEL_V 0x1
#define GPIO_FUNC4_OEN_INV_SEL_S 11




# 7200 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC4_OEN_SEL (BIT(10))
#define GPIO_FUNC4_OEN_SEL_M (BIT(10))
#define GPIO_FUNC4_OEN_SEL_V 0x1
#define GPIO_FUNC4_OEN_SEL_S 10




# 7207 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC4_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC4_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC4_OUT_INV_SEL_V 0x1
#define GPIO_FUNC4_OUT_INV_SEL_S 9


#define GPIO_FUNC4_OUT_SEL 0x000001FF
#define GPIO_FUNC4_OUT_SEL_M ((GPIO_FUNC4_OUT_SEL_V)<<(GPIO_FUNC4_OUT_SEL_S))
#define GPIO_FUNC4_OUT_SEL_V 0x1FF
#define GPIO_FUNC4_OUT_SEL_S 0

#define GPIO_FUNC5_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0544)




# 7222 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC5_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC5_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC5_OEN_INV_SEL_V 0x1
#define GPIO_FUNC5_OEN_INV_SEL_S 11




# 7229 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC5_OEN_SEL (BIT(10))
#define GPIO_FUNC5_OEN_SEL_M (BIT(10))
#define GPIO_FUNC5_OEN_SEL_V 0x1
#define GPIO_FUNC5_OEN_SEL_S 10




# 7236 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC5_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC5_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC5_OUT_INV_SEL_V 0x1
#define GPIO_FUNC5_OUT_INV_SEL_S 9


#define GPIO_FUNC5_OUT_SEL 0x000001FF
#define GPIO_FUNC5_OUT_SEL_M ((GPIO_FUNC5_OUT_SEL_V)<<(GPIO_FUNC5_OUT_SEL_S))
#define GPIO_FUNC5_OUT_SEL_V 0x1FF
#define GPIO_FUNC5_OUT_SEL_S 0

#define GPIO_FUNC6_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0548)




# 7251 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC6_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC6_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC6_OEN_INV_SEL_V 0x1
#define GPIO_FUNC6_OEN_INV_SEL_S 11




# 7258 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC6_OEN_SEL (BIT(10))
#define GPIO_FUNC6_OEN_SEL_M (BIT(10))
#define GPIO_FUNC6_OEN_SEL_V 0x1
#define GPIO_FUNC6_OEN_SEL_S 10




# 7265 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC6_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC6_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC6_OUT_INV_SEL_V 0x1
#define GPIO_FUNC6_OUT_INV_SEL_S 9


#define GPIO_FUNC6_OUT_SEL 0x000001FF
#define GPIO_FUNC6_OUT_SEL_M ((GPIO_FUNC6_OUT_SEL_V)<<(GPIO_FUNC6_OUT_SEL_S))
#define GPIO_FUNC6_OUT_SEL_V 0x1FF
#define GPIO_FUNC6_OUT_SEL_S 0

#define GPIO_FUNC7_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x054c)




# 7280 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC7_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC7_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC7_OEN_INV_SEL_V 0x1
#define GPIO_FUNC7_OEN_INV_SEL_S 11




# 7287 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC7_OEN_SEL (BIT(10))
#define GPIO_FUNC7_OEN_SEL_M (BIT(10))
#define GPIO_FUNC7_OEN_SEL_V 0x1
#define GPIO_FUNC7_OEN_SEL_S 10




# 7294 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC7_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC7_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC7_OUT_INV_SEL_V 0x1
#define GPIO_FUNC7_OUT_INV_SEL_S 9


#define GPIO_FUNC7_OUT_SEL 0x000001FF
#define GPIO_FUNC7_OUT_SEL_M ((GPIO_FUNC7_OUT_SEL_V)<<(GPIO_FUNC7_OUT_SEL_S))
#define GPIO_FUNC7_OUT_SEL_V 0x1FF
#define GPIO_FUNC7_OUT_SEL_S 0

#define GPIO_FUNC8_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0550)




# 7309 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC8_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC8_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC8_OEN_INV_SEL_V 0x1
#define GPIO_FUNC8_OEN_INV_SEL_S 11




# 7316 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC8_OEN_SEL (BIT(10))
#define GPIO_FUNC8_OEN_SEL_M (BIT(10))
#define GPIO_FUNC8_OEN_SEL_V 0x1
#define GPIO_FUNC8_OEN_SEL_S 10




# 7323 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC8_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC8_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC8_OUT_INV_SEL_V 0x1
#define GPIO_FUNC8_OUT_INV_SEL_S 9


#define GPIO_FUNC8_OUT_SEL 0x000001FF
#define GPIO_FUNC8_OUT_SEL_M ((GPIO_FUNC8_OUT_SEL_V)<<(GPIO_FUNC8_OUT_SEL_S))
#define GPIO_FUNC8_OUT_SEL_V 0x1FF
#define GPIO_FUNC8_OUT_SEL_S 0

#define GPIO_FUNC9_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0554)




# 7338 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC9_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC9_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC9_OEN_INV_SEL_V 0x1
#define GPIO_FUNC9_OEN_INV_SEL_S 11




# 7345 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC9_OEN_SEL (BIT(10))
#define GPIO_FUNC9_OEN_SEL_M (BIT(10))
#define GPIO_FUNC9_OEN_SEL_V 0x1
#define GPIO_FUNC9_OEN_SEL_S 10




# 7352 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC9_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC9_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC9_OUT_INV_SEL_V 0x1
#define GPIO_FUNC9_OUT_INV_SEL_S 9


#define GPIO_FUNC9_OUT_SEL 0x000001FF
#define GPIO_FUNC9_OUT_SEL_M ((GPIO_FUNC9_OUT_SEL_V)<<(GPIO_FUNC9_OUT_SEL_S))
#define GPIO_FUNC9_OUT_SEL_V 0x1FF
#define GPIO_FUNC9_OUT_SEL_S 0

#define GPIO_FUNC10_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0558)




# 7367 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC10_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC10_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC10_OEN_INV_SEL_V 0x1
#define GPIO_FUNC10_OEN_INV_SEL_S 11




# 7374 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC10_OEN_SEL (BIT(10))
#define GPIO_FUNC10_OEN_SEL_M (BIT(10))
#define GPIO_FUNC10_OEN_SEL_V 0x1
#define GPIO_FUNC10_OEN_SEL_S 10




# 7381 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC10_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC10_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC10_OUT_INV_SEL_V 0x1
#define GPIO_FUNC10_OUT_INV_SEL_S 9


#define GPIO_FUNC10_OUT_SEL 0x000001FF
#define GPIO_FUNC10_OUT_SEL_M ((GPIO_FUNC10_OUT_SEL_V)<<(GPIO_FUNC10_OUT_SEL_S))
#define GPIO_FUNC10_OUT_SEL_V 0x1FF
#define GPIO_FUNC10_OUT_SEL_S 0

#define GPIO_FUNC11_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x055c)




# 7396 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC11_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC11_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC11_OEN_INV_SEL_V 0x1
#define GPIO_FUNC11_OEN_INV_SEL_S 11




# 7403 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC11_OEN_SEL (BIT(10))
#define GPIO_FUNC11_OEN_SEL_M (BIT(10))
#define GPIO_FUNC11_OEN_SEL_V 0x1
#define GPIO_FUNC11_OEN_SEL_S 10




# 7410 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC11_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC11_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC11_OUT_INV_SEL_V 0x1
#define GPIO_FUNC11_OUT_INV_SEL_S 9


#define GPIO_FUNC11_OUT_SEL 0x000001FF
#define GPIO_FUNC11_OUT_SEL_M ((GPIO_FUNC11_OUT_SEL_V)<<(GPIO_FUNC11_OUT_SEL_S))
#define GPIO_FUNC11_OUT_SEL_V 0x1FF
#define GPIO_FUNC11_OUT_SEL_S 0

#define GPIO_FUNC12_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0560)




# 7425 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC12_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC12_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC12_OEN_INV_SEL_V 0x1
#define GPIO_FUNC12_OEN_INV_SEL_S 11




# 7432 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC12_OEN_SEL (BIT(10))
#define GPIO_FUNC12_OEN_SEL_M (BIT(10))
#define GPIO_FUNC12_OEN_SEL_V 0x1
#define GPIO_FUNC12_OEN_SEL_S 10




# 7439 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC12_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC12_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC12_OUT_INV_SEL_V 0x1
#define GPIO_FUNC12_OUT_INV_SEL_S 9


#define GPIO_FUNC12_OUT_SEL 0x000001FF
#define GPIO_FUNC12_OUT_SEL_M ((GPIO_FUNC12_OUT_SEL_V)<<(GPIO_FUNC12_OUT_SEL_S))
#define GPIO_FUNC12_OUT_SEL_V 0x1FF
#define GPIO_FUNC12_OUT_SEL_S 0

#define GPIO_FUNC13_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0564)




# 7454 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC13_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC13_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC13_OEN_INV_SEL_V 0x1
#define GPIO_FUNC13_OEN_INV_SEL_S 11




# 7461 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC13_OEN_SEL (BIT(10))
#define GPIO_FUNC13_OEN_SEL_M (BIT(10))
#define GPIO_FUNC13_OEN_SEL_V 0x1
#define GPIO_FUNC13_OEN_SEL_S 10




# 7468 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC13_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC13_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC13_OUT_INV_SEL_V 0x1
#define GPIO_FUNC13_OUT_INV_SEL_S 9


#define GPIO_FUNC13_OUT_SEL 0x000001FF
#define GPIO_FUNC13_OUT_SEL_M ((GPIO_FUNC13_OUT_SEL_V)<<(GPIO_FUNC13_OUT_SEL_S))
#define GPIO_FUNC13_OUT_SEL_V 0x1FF
#define GPIO_FUNC13_OUT_SEL_S 0

#define GPIO_FUNC14_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0568)




# 7483 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC14_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC14_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC14_OEN_INV_SEL_V 0x1
#define GPIO_FUNC14_OEN_INV_SEL_S 11




# 7490 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC14_OEN_SEL (BIT(10))
#define GPIO_FUNC14_OEN_SEL_M (BIT(10))
#define GPIO_FUNC14_OEN_SEL_V 0x1
#define GPIO_FUNC14_OEN_SEL_S 10




# 7497 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC14_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC14_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC14_OUT_INV_SEL_V 0x1
#define GPIO_FUNC14_OUT_INV_SEL_S 9


#define GPIO_FUNC14_OUT_SEL 0x000001FF
#define GPIO_FUNC14_OUT_SEL_M ((GPIO_FUNC14_OUT_SEL_V)<<(GPIO_FUNC14_OUT_SEL_S))
#define GPIO_FUNC14_OUT_SEL_V 0x1FF
#define GPIO_FUNC14_OUT_SEL_S 0

#define GPIO_FUNC15_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x056c)




# 7512 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC15_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC15_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC15_OEN_INV_SEL_V 0x1
#define GPIO_FUNC15_OEN_INV_SEL_S 11




# 7519 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC15_OEN_SEL (BIT(10))
#define GPIO_FUNC15_OEN_SEL_M (BIT(10))
#define GPIO_FUNC15_OEN_SEL_V 0x1
#define GPIO_FUNC15_OEN_SEL_S 10




# 7526 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC15_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC15_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC15_OUT_INV_SEL_V 0x1
#define GPIO_FUNC15_OUT_INV_SEL_S 9


#define GPIO_FUNC15_OUT_SEL 0x000001FF
#define GPIO_FUNC15_OUT_SEL_M ((GPIO_FUNC15_OUT_SEL_V)<<(GPIO_FUNC15_OUT_SEL_S))
#define GPIO_FUNC15_OUT_SEL_V 0x1FF
#define GPIO_FUNC15_OUT_SEL_S 0

#define GPIO_FUNC16_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0570)




# 7541 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC16_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC16_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC16_OEN_INV_SEL_V 0x1
#define GPIO_FUNC16_OEN_INV_SEL_S 11




# 7548 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC16_OEN_SEL (BIT(10))
#define GPIO_FUNC16_OEN_SEL_M (BIT(10))
#define GPIO_FUNC16_OEN_SEL_V 0x1
#define GPIO_FUNC16_OEN_SEL_S 10




# 7555 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC16_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC16_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC16_OUT_INV_SEL_V 0x1
#define GPIO_FUNC16_OUT_INV_SEL_S 9


#define GPIO_FUNC16_OUT_SEL 0x000001FF
#define GPIO_FUNC16_OUT_SEL_M ((GPIO_FUNC16_OUT_SEL_V)<<(GPIO_FUNC16_OUT_SEL_S))
#define GPIO_FUNC16_OUT_SEL_V 0x1FF
#define GPIO_FUNC16_OUT_SEL_S 0

#define GPIO_FUNC17_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0574)




# 7570 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC17_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC17_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC17_OEN_INV_SEL_V 0x1
#define GPIO_FUNC17_OEN_INV_SEL_S 11




# 7577 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC17_OEN_SEL (BIT(10))
#define GPIO_FUNC17_OEN_SEL_M (BIT(10))
#define GPIO_FUNC17_OEN_SEL_V 0x1
#define GPIO_FUNC17_OEN_SEL_S 10




# 7584 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC17_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC17_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC17_OUT_INV_SEL_V 0x1
#define GPIO_FUNC17_OUT_INV_SEL_S 9


#define GPIO_FUNC17_OUT_SEL 0x000001FF
#define GPIO_FUNC17_OUT_SEL_M ((GPIO_FUNC17_OUT_SEL_V)<<(GPIO_FUNC17_OUT_SEL_S))
#define GPIO_FUNC17_OUT_SEL_V 0x1FF
#define GPIO_FUNC17_OUT_SEL_S 0

#define GPIO_FUNC18_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0578)




# 7599 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC18_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC18_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC18_OEN_INV_SEL_V 0x1
#define GPIO_FUNC18_OEN_INV_SEL_S 11




# 7606 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC18_OEN_SEL (BIT(10))
#define GPIO_FUNC18_OEN_SEL_M (BIT(10))
#define GPIO_FUNC18_OEN_SEL_V 0x1
#define GPIO_FUNC18_OEN_SEL_S 10




# 7613 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC18_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC18_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC18_OUT_INV_SEL_V 0x1
#define GPIO_FUNC18_OUT_INV_SEL_S 9


#define GPIO_FUNC18_OUT_SEL 0x000001FF
#define GPIO_FUNC18_OUT_SEL_M ((GPIO_FUNC18_OUT_SEL_V)<<(GPIO_FUNC18_OUT_SEL_S))
#define GPIO_FUNC18_OUT_SEL_V 0x1FF
#define GPIO_FUNC18_OUT_SEL_S 0

#define GPIO_FUNC19_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x057c)




# 7628 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC19_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC19_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC19_OEN_INV_SEL_V 0x1
#define GPIO_FUNC19_OEN_INV_SEL_S 11




# 7635 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC19_OEN_SEL (BIT(10))
#define GPIO_FUNC19_OEN_SEL_M (BIT(10))
#define GPIO_FUNC19_OEN_SEL_V 0x1
#define GPIO_FUNC19_OEN_SEL_S 10




# 7642 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC19_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC19_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC19_OUT_INV_SEL_V 0x1
#define GPIO_FUNC19_OUT_INV_SEL_S 9


#define GPIO_FUNC19_OUT_SEL 0x000001FF
#define GPIO_FUNC19_OUT_SEL_M ((GPIO_FUNC19_OUT_SEL_V)<<(GPIO_FUNC19_OUT_SEL_S))
#define GPIO_FUNC19_OUT_SEL_V 0x1FF
#define GPIO_FUNC19_OUT_SEL_S 0

#define GPIO_FUNC20_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0580)




# 7657 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC20_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC20_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC20_OEN_INV_SEL_V 0x1
#define GPIO_FUNC20_OEN_INV_SEL_S 11




# 7664 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC20_OEN_SEL (BIT(10))
#define GPIO_FUNC20_OEN_SEL_M (BIT(10))
#define GPIO_FUNC20_OEN_SEL_V 0x1
#define GPIO_FUNC20_OEN_SEL_S 10




# 7671 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC20_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC20_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC20_OUT_INV_SEL_V 0x1
#define GPIO_FUNC20_OUT_INV_SEL_S 9


#define GPIO_FUNC20_OUT_SEL 0x000001FF
#define GPIO_FUNC20_OUT_SEL_M ((GPIO_FUNC20_OUT_SEL_V)<<(GPIO_FUNC20_OUT_SEL_S))
#define GPIO_FUNC20_OUT_SEL_V 0x1FF
#define GPIO_FUNC20_OUT_SEL_S 0

#define GPIO_FUNC21_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0584)




# 7686 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC21_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC21_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC21_OEN_INV_SEL_V 0x1
#define GPIO_FUNC21_OEN_INV_SEL_S 11




# 7693 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC21_OEN_SEL (BIT(10))
#define GPIO_FUNC21_OEN_SEL_M (BIT(10))
#define GPIO_FUNC21_OEN_SEL_V 0x1
#define GPIO_FUNC21_OEN_SEL_S 10




# 7700 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC21_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC21_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC21_OUT_INV_SEL_V 0x1
#define GPIO_FUNC21_OUT_INV_SEL_S 9


#define GPIO_FUNC21_OUT_SEL 0x000001FF
#define GPIO_FUNC21_OUT_SEL_M ((GPIO_FUNC21_OUT_SEL_V)<<(GPIO_FUNC21_OUT_SEL_S))
#define GPIO_FUNC21_OUT_SEL_V 0x1FF
#define GPIO_FUNC21_OUT_SEL_S 0

#define GPIO_FUNC22_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0588)




# 7715 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC22_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC22_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC22_OEN_INV_SEL_V 0x1
#define GPIO_FUNC22_OEN_INV_SEL_S 11




# 7722 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC22_OEN_SEL (BIT(10))
#define GPIO_FUNC22_OEN_SEL_M (BIT(10))
#define GPIO_FUNC22_OEN_SEL_V 0x1
#define GPIO_FUNC22_OEN_SEL_S 10




# 7729 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC22_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC22_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC22_OUT_INV_SEL_V 0x1
#define GPIO_FUNC22_OUT_INV_SEL_S 9


#define GPIO_FUNC22_OUT_SEL 0x000001FF
#define GPIO_FUNC22_OUT_SEL_M ((GPIO_FUNC22_OUT_SEL_V)<<(GPIO_FUNC22_OUT_SEL_S))
#define GPIO_FUNC22_OUT_SEL_V 0x1FF
#define GPIO_FUNC22_OUT_SEL_S 0

#define GPIO_FUNC23_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x058c)




# 7744 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC23_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC23_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC23_OEN_INV_SEL_V 0x1
#define GPIO_FUNC23_OEN_INV_SEL_S 11




# 7751 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC23_OEN_SEL (BIT(10))
#define GPIO_FUNC23_OEN_SEL_M (BIT(10))
#define GPIO_FUNC23_OEN_SEL_V 0x1
#define GPIO_FUNC23_OEN_SEL_S 10




# 7758 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC23_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC23_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC23_OUT_INV_SEL_V 0x1
#define GPIO_FUNC23_OUT_INV_SEL_S 9


#define GPIO_FUNC23_OUT_SEL 0x000001FF
#define GPIO_FUNC23_OUT_SEL_M ((GPIO_FUNC23_OUT_SEL_V)<<(GPIO_FUNC23_OUT_SEL_S))
#define GPIO_FUNC23_OUT_SEL_V 0x1FF
#define GPIO_FUNC23_OUT_SEL_S 0

#define GPIO_FUNC24_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0590)




# 7773 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC24_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC24_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC24_OEN_INV_SEL_V 0x1
#define GPIO_FUNC24_OEN_INV_SEL_S 11




# 7780 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC24_OEN_SEL (BIT(10))
#define GPIO_FUNC24_OEN_SEL_M (BIT(10))
#define GPIO_FUNC24_OEN_SEL_V 0x1
#define GPIO_FUNC24_OEN_SEL_S 10




# 7787 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC24_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC24_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC24_OUT_INV_SEL_V 0x1
#define GPIO_FUNC24_OUT_INV_SEL_S 9


#define GPIO_FUNC24_OUT_SEL 0x000001FF
#define GPIO_FUNC24_OUT_SEL_M ((GPIO_FUNC24_OUT_SEL_V)<<(GPIO_FUNC24_OUT_SEL_S))
#define GPIO_FUNC24_OUT_SEL_V 0x1FF
#define GPIO_FUNC24_OUT_SEL_S 0

#define GPIO_FUNC25_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0594)




# 7802 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC25_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC25_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC25_OEN_INV_SEL_V 0x1
#define GPIO_FUNC25_OEN_INV_SEL_S 11




# 7809 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC25_OEN_SEL (BIT(10))
#define GPIO_FUNC25_OEN_SEL_M (BIT(10))
#define GPIO_FUNC25_OEN_SEL_V 0x1
#define GPIO_FUNC25_OEN_SEL_S 10




# 7816 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC25_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC25_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC25_OUT_INV_SEL_V 0x1
#define GPIO_FUNC25_OUT_INV_SEL_S 9


#define GPIO_FUNC25_OUT_SEL 0x000001FF
#define GPIO_FUNC25_OUT_SEL_M ((GPIO_FUNC25_OUT_SEL_V)<<(GPIO_FUNC25_OUT_SEL_S))
#define GPIO_FUNC25_OUT_SEL_V 0x1FF
#define GPIO_FUNC25_OUT_SEL_S 0

#define GPIO_FUNC26_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x0598)




# 7831 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC26_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC26_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC26_OEN_INV_SEL_V 0x1
#define GPIO_FUNC26_OEN_INV_SEL_S 11




# 7838 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC26_OEN_SEL (BIT(10))
#define GPIO_FUNC26_OEN_SEL_M (BIT(10))
#define GPIO_FUNC26_OEN_SEL_V 0x1
#define GPIO_FUNC26_OEN_SEL_S 10




# 7845 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC26_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC26_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC26_OUT_INV_SEL_V 0x1
#define GPIO_FUNC26_OUT_INV_SEL_S 9


#define GPIO_FUNC26_OUT_SEL 0x000001FF
#define GPIO_FUNC26_OUT_SEL_M ((GPIO_FUNC26_OUT_SEL_V)<<(GPIO_FUNC26_OUT_SEL_S))
#define GPIO_FUNC26_OUT_SEL_V 0x1FF
#define GPIO_FUNC26_OUT_SEL_S 0

#define GPIO_FUNC27_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x059c)




# 7860 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC27_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC27_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC27_OEN_INV_SEL_V 0x1
#define GPIO_FUNC27_OEN_INV_SEL_S 11




# 7867 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC27_OEN_SEL (BIT(10))
#define GPIO_FUNC27_OEN_SEL_M (BIT(10))
#define GPIO_FUNC27_OEN_SEL_V 0x1
#define GPIO_FUNC27_OEN_SEL_S 10




# 7874 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC27_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC27_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC27_OUT_INV_SEL_V 0x1
#define GPIO_FUNC27_OUT_INV_SEL_S 9


#define GPIO_FUNC27_OUT_SEL 0x000001FF
#define GPIO_FUNC27_OUT_SEL_M ((GPIO_FUNC27_OUT_SEL_V)<<(GPIO_FUNC27_OUT_SEL_S))
#define GPIO_FUNC27_OUT_SEL_V 0x1FF
#define GPIO_FUNC27_OUT_SEL_S 0

#define GPIO_FUNC28_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05a0)




# 7889 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC28_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC28_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC28_OEN_INV_SEL_V 0x1
#define GPIO_FUNC28_OEN_INV_SEL_S 11




# 7896 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC28_OEN_SEL (BIT(10))
#define GPIO_FUNC28_OEN_SEL_M (BIT(10))
#define GPIO_FUNC28_OEN_SEL_V 0x1
#define GPIO_FUNC28_OEN_SEL_S 10




# 7903 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC28_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC28_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC28_OUT_INV_SEL_V 0x1
#define GPIO_FUNC28_OUT_INV_SEL_S 9


#define GPIO_FUNC28_OUT_SEL 0x000001FF
#define GPIO_FUNC28_OUT_SEL_M ((GPIO_FUNC28_OUT_SEL_V)<<(GPIO_FUNC28_OUT_SEL_S))
#define GPIO_FUNC28_OUT_SEL_V 0x1FF
#define GPIO_FUNC28_OUT_SEL_S 0

#define GPIO_FUNC29_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05a4)




# 7918 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC29_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC29_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC29_OEN_INV_SEL_V 0x1
#define GPIO_FUNC29_OEN_INV_SEL_S 11




# 7925 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC29_OEN_SEL (BIT(10))
#define GPIO_FUNC29_OEN_SEL_M (BIT(10))
#define GPIO_FUNC29_OEN_SEL_V 0x1
#define GPIO_FUNC29_OEN_SEL_S 10




# 7932 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC29_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC29_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC29_OUT_INV_SEL_V 0x1
#define GPIO_FUNC29_OUT_INV_SEL_S 9


#define GPIO_FUNC29_OUT_SEL 0x000001FF
#define GPIO_FUNC29_OUT_SEL_M ((GPIO_FUNC29_OUT_SEL_V)<<(GPIO_FUNC29_OUT_SEL_S))
#define GPIO_FUNC29_OUT_SEL_V 0x1FF
#define GPIO_FUNC29_OUT_SEL_S 0

#define GPIO_FUNC30_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05a8)




# 7947 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC30_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC30_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC30_OEN_INV_SEL_V 0x1
#define GPIO_FUNC30_OEN_INV_SEL_S 11




# 7954 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC30_OEN_SEL (BIT(10))
#define GPIO_FUNC30_OEN_SEL_M (BIT(10))
#define GPIO_FUNC30_OEN_SEL_V 0x1
#define GPIO_FUNC30_OEN_SEL_S 10




# 7961 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC30_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC30_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC30_OUT_INV_SEL_V 0x1
#define GPIO_FUNC30_OUT_INV_SEL_S 9


#define GPIO_FUNC30_OUT_SEL 0x000001FF
#define GPIO_FUNC30_OUT_SEL_M ((GPIO_FUNC30_OUT_SEL_V)<<(GPIO_FUNC30_OUT_SEL_S))
#define GPIO_FUNC30_OUT_SEL_V 0x1FF
#define GPIO_FUNC30_OUT_SEL_S 0

#define GPIO_FUNC31_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05ac)




# 7976 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC31_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC31_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC31_OEN_INV_SEL_V 0x1
#define GPIO_FUNC31_OEN_INV_SEL_S 11




# 7983 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC31_OEN_SEL (BIT(10))
#define GPIO_FUNC31_OEN_SEL_M (BIT(10))
#define GPIO_FUNC31_OEN_SEL_V 0x1
#define GPIO_FUNC31_OEN_SEL_S 10




# 7990 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC31_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC31_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC31_OUT_INV_SEL_V 0x1
#define GPIO_FUNC31_OUT_INV_SEL_S 9


#define GPIO_FUNC31_OUT_SEL 0x000001FF
#define GPIO_FUNC31_OUT_SEL_M ((GPIO_FUNC31_OUT_SEL_V)<<(GPIO_FUNC31_OUT_SEL_S))
#define GPIO_FUNC31_OUT_SEL_V 0x1FF
#define GPIO_FUNC31_OUT_SEL_S 0

#define GPIO_FUNC32_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05b0)




# 8005 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC32_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC32_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC32_OEN_INV_SEL_V 0x1
#define GPIO_FUNC32_OEN_INV_SEL_S 11




# 8012 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC32_OEN_SEL (BIT(10))
#define GPIO_FUNC32_OEN_SEL_M (BIT(10))
#define GPIO_FUNC32_OEN_SEL_V 0x1
#define GPIO_FUNC32_OEN_SEL_S 10




# 8019 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC32_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC32_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC32_OUT_INV_SEL_V 0x1
#define GPIO_FUNC32_OUT_INV_SEL_S 9


#define GPIO_FUNC32_OUT_SEL 0x000001FF
#define GPIO_FUNC32_OUT_SEL_M ((GPIO_FUNC32_OUT_SEL_V)<<(GPIO_FUNC32_OUT_SEL_S))
#define GPIO_FUNC32_OUT_SEL_V 0x1FF
#define GPIO_FUNC32_OUT_SEL_S 0

#define GPIO_FUNC33_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05b4)




# 8034 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC33_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC33_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC33_OEN_INV_SEL_V 0x1
#define GPIO_FUNC33_OEN_INV_SEL_S 11




# 8041 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC33_OEN_SEL (BIT(10))
#define GPIO_FUNC33_OEN_SEL_M (BIT(10))
#define GPIO_FUNC33_OEN_SEL_V 0x1
#define GPIO_FUNC33_OEN_SEL_S 10




# 8048 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC33_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC33_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC33_OUT_INV_SEL_V 0x1
#define GPIO_FUNC33_OUT_INV_SEL_S 9


#define GPIO_FUNC33_OUT_SEL 0x000001FF
#define GPIO_FUNC33_OUT_SEL_M ((GPIO_FUNC33_OUT_SEL_V)<<(GPIO_FUNC33_OUT_SEL_S))
#define GPIO_FUNC33_OUT_SEL_V 0x1FF
#define GPIO_FUNC33_OUT_SEL_S 0

#define GPIO_FUNC34_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05b8)




# 8063 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC34_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC34_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC34_OEN_INV_SEL_V 0x1
#define GPIO_FUNC34_OEN_INV_SEL_S 11




# 8070 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC34_OEN_SEL (BIT(10))
#define GPIO_FUNC34_OEN_SEL_M (BIT(10))
#define GPIO_FUNC34_OEN_SEL_V 0x1
#define GPIO_FUNC34_OEN_SEL_S 10




# 8077 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC34_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC34_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC34_OUT_INV_SEL_V 0x1
#define GPIO_FUNC34_OUT_INV_SEL_S 9


#define GPIO_FUNC34_OUT_SEL 0x000001FF
#define GPIO_FUNC34_OUT_SEL_M ((GPIO_FUNC34_OUT_SEL_V)<<(GPIO_FUNC34_OUT_SEL_S))
#define GPIO_FUNC34_OUT_SEL_V 0x1FF
#define GPIO_FUNC34_OUT_SEL_S 0

#define GPIO_FUNC35_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05bc)




# 8092 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC35_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC35_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC35_OEN_INV_SEL_V 0x1
#define GPIO_FUNC35_OEN_INV_SEL_S 11




# 8099 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC35_OEN_SEL (BIT(10))
#define GPIO_FUNC35_OEN_SEL_M (BIT(10))
#define GPIO_FUNC35_OEN_SEL_V 0x1
#define GPIO_FUNC35_OEN_SEL_S 10




# 8106 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC35_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC35_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC35_OUT_INV_SEL_V 0x1
#define GPIO_FUNC35_OUT_INV_SEL_S 9


#define GPIO_FUNC35_OUT_SEL 0x000001FF
#define GPIO_FUNC35_OUT_SEL_M ((GPIO_FUNC35_OUT_SEL_V)<<(GPIO_FUNC35_OUT_SEL_S))
#define GPIO_FUNC35_OUT_SEL_V 0x1FF
#define GPIO_FUNC35_OUT_SEL_S 0

#define GPIO_FUNC36_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05c0)




# 8121 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC36_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC36_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC36_OEN_INV_SEL_V 0x1
#define GPIO_FUNC36_OEN_INV_SEL_S 11




# 8128 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC36_OEN_SEL (BIT(10))
#define GPIO_FUNC36_OEN_SEL_M (BIT(10))
#define GPIO_FUNC36_OEN_SEL_V 0x1
#define GPIO_FUNC36_OEN_SEL_S 10




# 8135 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC36_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC36_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC36_OUT_INV_SEL_V 0x1
#define GPIO_FUNC36_OUT_INV_SEL_S 9


#define GPIO_FUNC36_OUT_SEL 0x000001FF
#define GPIO_FUNC36_OUT_SEL_M ((GPIO_FUNC36_OUT_SEL_V)<<(GPIO_FUNC36_OUT_SEL_S))
#define GPIO_FUNC36_OUT_SEL_V 0x1FF
#define GPIO_FUNC36_OUT_SEL_S 0

#define GPIO_FUNC37_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05c4)




# 8150 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC37_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC37_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC37_OEN_INV_SEL_V 0x1
#define GPIO_FUNC37_OEN_INV_SEL_S 11




# 8157 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC37_OEN_SEL (BIT(10))
#define GPIO_FUNC37_OEN_SEL_M (BIT(10))
#define GPIO_FUNC37_OEN_SEL_V 0x1
#define GPIO_FUNC37_OEN_SEL_S 10




# 8164 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC37_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC37_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC37_OUT_INV_SEL_V 0x1
#define GPIO_FUNC37_OUT_INV_SEL_S 9


#define GPIO_FUNC37_OUT_SEL 0x000001FF
#define GPIO_FUNC37_OUT_SEL_M ((GPIO_FUNC37_OUT_SEL_V)<<(GPIO_FUNC37_OUT_SEL_S))
#define GPIO_FUNC37_OUT_SEL_V 0x1FF
#define GPIO_FUNC37_OUT_SEL_S 0

#define GPIO_FUNC38_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05c8)




# 8179 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC38_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC38_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC38_OEN_INV_SEL_V 0x1
#define GPIO_FUNC38_OEN_INV_SEL_S 11




# 8186 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC38_OEN_SEL (BIT(10))
#define GPIO_FUNC38_OEN_SEL_M (BIT(10))
#define GPIO_FUNC38_OEN_SEL_V 0x1
#define GPIO_FUNC38_OEN_SEL_S 10




# 8193 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC38_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC38_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC38_OUT_INV_SEL_V 0x1
#define GPIO_FUNC38_OUT_INV_SEL_S 9


#define GPIO_FUNC38_OUT_SEL 0x000001FF
#define GPIO_FUNC38_OUT_SEL_M ((GPIO_FUNC38_OUT_SEL_V)<<(GPIO_FUNC38_OUT_SEL_S))
#define GPIO_FUNC38_OUT_SEL_V 0x1FF
#define GPIO_FUNC38_OUT_SEL_S 0

#define GPIO_FUNC39_OUT_SEL_CFG_REG (DR_REG_GPIO_BASE + 0x05cc)




# 8208 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC39_OEN_INV_SEL (BIT(11))
#define GPIO_FUNC39_OEN_INV_SEL_M (BIT(11))
#define GPIO_FUNC39_OEN_INV_SEL_V 0x1
#define GPIO_FUNC39_OEN_INV_SEL_S 11




# 8215 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC39_OEN_SEL (BIT(10))
#define GPIO_FUNC39_OEN_SEL_M (BIT(10))
#define GPIO_FUNC39_OEN_SEL_V 0x1
#define GPIO_FUNC39_OEN_SEL_S 10




# 8222 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h"
#define GPIO_FUNC39_OUT_INV_SEL (BIT(9))
#define GPIO_FUNC39_OUT_INV_SEL_M (BIT(9))
#define GPIO_FUNC39_OUT_INV_SEL_V 0x1
#define GPIO_FUNC39_OUT_INV_SEL_S 9


#define GPIO_FUNC39_OUT_SEL 0x000001FF
#define GPIO_FUNC39_OUT_SEL_M ((GPIO_FUNC39_OUT_SEL_V)<<(GPIO_FUNC39_OUT_SEL_S))
#define GPIO_FUNC39_OUT_SEL_V 0x1FF
#define GPIO_FUNC39_OUT_SEL_S 0
# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_struct.h" 1














#define _SOC_GPIO_STRUCT_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_struct.h" 2


extern "C" {


typedef volatile struct {
    uint32_t bt_select; 
    uint32_t out; 
    uint32_t out_w1ts; 
    uint32_t out_w1tc; 
    union {
        struct {
            uint32_t data: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } out1;
    union {
        struct {
            uint32_t data: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } out1_w1ts;
    union {
        struct {
            uint32_t data: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } out1_w1tc;
    union {
        struct {
            uint32_t sel: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } sdio_select;
    uint32_t enable; 
    uint32_t enable_w1ts; 
    uint32_t enable_w1tc; 
    union {
        struct {
            uint32_t data: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } enable1;
    union {
        struct {
            uint32_t data: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } enable1_w1ts;
    union {
        struct {
            uint32_t data: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } enable1_w1tc;
    union {
        struct {
            uint32_t strapping: 16; 
            uint32_t reserved16:16;
        };
        uint32_t val;
    } strap;
    uint32_t in; 
    union {
        struct {
            uint32_t data: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } in1;
    uint32_t status; 
    uint32_t status_w1ts; 
    uint32_t status_w1tc; 
    union {
        struct {
            uint32_t intr_st: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } status1;
    union {
        struct {
            uint32_t intr_st: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } status1_w1ts;
    union {
        struct {
            uint32_t intr_st: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } status1_w1tc;
    uint32_t reserved_5c;
    uint32_t acpu_int; 
    uint32_t acpu_nmi_int; 
    uint32_t pcpu_int; 
    uint32_t pcpu_nmi_int; 
    uint32_t cpusdio_int; 
    union {
        struct {
            uint32_t intr: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } acpu_int1;
    union {
        struct {
            uint32_t intr: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } acpu_nmi_int1;
    union {
        struct {
            uint32_t intr: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } pcpu_int1;
    union {
        struct {
            uint32_t intr: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } pcpu_nmi_int1;
    union {
        struct {
            uint32_t intr: 8; 
            uint32_t reserved8: 24;
        };
        uint32_t val;
    } cpusdio_int1;
    union {
        struct {
            uint32_t reserved0: 2;
            uint32_t pad_driver: 1; 
            uint32_t reserved3: 4;
            uint32_t int_type: 3; 
            uint32_t wakeup_enable: 1; 
            uint32_t config: 2; 
            uint32_t int_ena: 5; 
            uint32_t reserved18: 14;
        };
        uint32_t val;
    } pin[40];
    union {
        struct {
            uint32_t rtc_max: 10;
            uint32_t reserved10: 21;
            uint32_t start: 1;
        };
        uint32_t val;
    } cali_conf;
    union {
        struct {
            uint32_t value_sync2: 20;
            uint32_t reserved20: 10;
            uint32_t rdy_real: 1;
            uint32_t rdy_sync2: 1;
        };
        uint32_t val;
    } cali_data;
    union {
        struct {
            uint32_t func_sel: 6; 
            uint32_t sig_in_inv: 1; 
            uint32_t sig_in_sel: 1; 
            uint32_t reserved8: 24; 
        };
        uint32_t val;
    } func_in_sel_cfg[256];
    union {
        struct {
            uint32_t func_sel: 9; 
            uint32_t inv_sel: 1; 
            uint32_t oen_sel: 1; 
            uint32_t oen_inv_sel: 1; 
            uint32_t reserved12: 20; 
        };
        uint32_t val;
    } func_out_sel_cfg[40];
} gpio_dev_t;
extern gpio_dev_t GPIO;


}
# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h" 1














#define _SOC_RTC_IO_REG_H_ 


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h" 2
#define RTC_GPIO_OUT_REG (DR_REG_RTCIO_BASE + 0x0)


#define RTC_GPIO_OUT_DATA 0x0003FFFF
#define RTC_GPIO_OUT_DATA_M ((RTC_GPIO_OUT_DATA_V)<<(RTC_GPIO_OUT_DATA_S))
#define RTC_GPIO_OUT_DATA_V 0x3FFFF
#define RTC_GPIO_OUT_DATA_S 14

#define RTC_GPIO_OUT_W1TS_REG (DR_REG_RTCIO_BASE + 0x4)


#define RTC_GPIO_OUT_DATA_W1TS 0x0003FFFF
#define RTC_GPIO_OUT_DATA_W1TS_M ((RTC_GPIO_OUT_DATA_W1TS_V)<<(RTC_GPIO_OUT_DATA_W1TS_S))
#define RTC_GPIO_OUT_DATA_W1TS_V 0x3FFFF
#define RTC_GPIO_OUT_DATA_W1TS_S 14

#define RTC_GPIO_OUT_W1TC_REG (DR_REG_RTCIO_BASE + 0x8)


#define RTC_GPIO_OUT_DATA_W1TC 0x0003FFFF
#define RTC_GPIO_OUT_DATA_W1TC_M ((RTC_GPIO_OUT_DATA_W1TC_V)<<(RTC_GPIO_OUT_DATA_W1TC_S))
#define RTC_GPIO_OUT_DATA_W1TC_V 0x3FFFF
#define RTC_GPIO_OUT_DATA_W1TC_S 14

#define RTC_GPIO_ENABLE_REG (DR_REG_RTCIO_BASE + 0xc)


#define RTC_GPIO_ENABLE 0x0003FFFF
#define RTC_GPIO_ENABLE_M ((RTC_GPIO_ENABLE_V)<<(RTC_GPIO_ENABLE_S))
#define RTC_GPIO_ENABLE_V 0x3FFFF
#define RTC_GPIO_ENABLE_S 14

#define RTC_GPIO_ENABLE_W1TS_REG (DR_REG_RTCIO_BASE + 0x10)


#define RTC_GPIO_ENABLE_W1TS 0x0003FFFF
#define RTC_GPIO_ENABLE_W1TS_M ((RTC_GPIO_ENABLE_W1TS_V)<<(RTC_GPIO_ENABLE_W1TS_S))
#define RTC_GPIO_ENABLE_W1TS_V 0x3FFFF
#define RTC_GPIO_ENABLE_W1TS_S 14

#define RTC_GPIO_ENABLE_W1TC_REG (DR_REG_RTCIO_BASE + 0x14)


#define RTC_GPIO_ENABLE_W1TC 0x0003FFFF
#define RTC_GPIO_ENABLE_W1TC_M ((RTC_GPIO_ENABLE_W1TC_V)<<(RTC_GPIO_ENABLE_W1TC_S))
#define RTC_GPIO_ENABLE_W1TC_V 0x3FFFF
#define RTC_GPIO_ENABLE_W1TC_S 14

#define RTC_GPIO_STATUS_REG (DR_REG_RTCIO_BASE + 0x18)


#define RTC_GPIO_STATUS_INT 0x0003FFFF
#define RTC_GPIO_STATUS_INT_M ((RTC_GPIO_STATUS_INT_V)<<(RTC_GPIO_STATUS_INT_S))
#define RTC_GPIO_STATUS_INT_V 0x3FFFF
#define RTC_GPIO_STATUS_INT_S 14

#define RTC_GPIO_STATUS_W1TS_REG (DR_REG_RTCIO_BASE + 0x1c)


#define RTC_GPIO_STATUS_INT_W1TS 0x0003FFFF
#define RTC_GPIO_STATUS_INT_W1TS_M ((RTC_GPIO_STATUS_INT_W1TS_V)<<(RTC_GPIO_STATUS_INT_W1TS_S))
#define RTC_GPIO_STATUS_INT_W1TS_V 0x3FFFF
#define RTC_GPIO_STATUS_INT_W1TS_S 14

#define RTC_GPIO_STATUS_W1TC_REG (DR_REG_RTCIO_BASE + 0x20)


#define RTC_GPIO_STATUS_INT_W1TC 0x0003FFFF
#define RTC_GPIO_STATUS_INT_W1TC_M ((RTC_GPIO_STATUS_INT_W1TC_V)<<(RTC_GPIO_STATUS_INT_W1TC_S))
#define RTC_GPIO_STATUS_INT_W1TC_V 0x3FFFF
#define RTC_GPIO_STATUS_INT_W1TC_S 14

#define RTC_GPIO_IN_REG (DR_REG_RTCIO_BASE + 0x24)


#define RTC_GPIO_IN_NEXT 0x0003FFFF
#define RTC_GPIO_IN_NEXT_M ((RTC_GPIO_IN_NEXT_V)<<(RTC_GPIO_IN_NEXT_S))
#define RTC_GPIO_IN_NEXT_V 0x3FFFF
#define RTC_GPIO_IN_NEXT_S 14

#define RTC_GPIO_PIN0_REG (DR_REG_RTCIO_BASE + 0x28)


#define RTC_GPIO_PIN0_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN0_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN0_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN0_WAKEUP_ENABLE_S 10




# 109 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN0_INT_TYPE 0x00000007
#define RTC_GPIO_PIN0_INT_TYPE_M ((RTC_GPIO_PIN0_INT_TYPE_V)<<(RTC_GPIO_PIN0_INT_TYPE_S))
#define RTC_GPIO_PIN0_INT_TYPE_V 0x7
#define RTC_GPIO_PIN0_INT_TYPE_S 7


#define RTC_GPIO_PIN0_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN0_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN0_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN0_PAD_DRIVER_S 2

#define RTC_GPIO_PIN1_REG (DR_REG_RTCIO_BASE + 0x2c)


#define RTC_GPIO_PIN1_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN1_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN1_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN1_WAKEUP_ENABLE_S 10




# 130 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN1_INT_TYPE 0x00000007
#define RTC_GPIO_PIN1_INT_TYPE_M ((RTC_GPIO_PIN1_INT_TYPE_V)<<(RTC_GPIO_PIN1_INT_TYPE_S))
#define RTC_GPIO_PIN1_INT_TYPE_V 0x7
#define RTC_GPIO_PIN1_INT_TYPE_S 7


#define RTC_GPIO_PIN1_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN1_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN1_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN1_PAD_DRIVER_S 2

#define RTC_GPIO_PIN2_REG (DR_REG_RTCIO_BASE + 0x30)


#define RTC_GPIO_PIN2_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN2_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN2_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN2_WAKEUP_ENABLE_S 10




# 151 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN2_INT_TYPE 0x00000007
#define RTC_GPIO_PIN2_INT_TYPE_M ((RTC_GPIO_PIN2_INT_TYPE_V)<<(RTC_GPIO_PIN2_INT_TYPE_S))
#define RTC_GPIO_PIN2_INT_TYPE_V 0x7
#define RTC_GPIO_PIN2_INT_TYPE_S 7


#define RTC_GPIO_PIN2_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN2_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN2_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN2_PAD_DRIVER_S 2

#define RTC_GPIO_PIN3_REG (DR_REG_RTCIO_BASE + 0x34)


#define RTC_GPIO_PIN3_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN3_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN3_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN3_WAKEUP_ENABLE_S 10




# 172 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN3_INT_TYPE 0x00000007
#define RTC_GPIO_PIN3_INT_TYPE_M ((RTC_GPIO_PIN3_INT_TYPE_V)<<(RTC_GPIO_PIN3_INT_TYPE_S))
#define RTC_GPIO_PIN3_INT_TYPE_V 0x7
#define RTC_GPIO_PIN3_INT_TYPE_S 7


#define RTC_GPIO_PIN3_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN3_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN3_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN3_PAD_DRIVER_S 2

#define RTC_GPIO_PIN4_REG (DR_REG_RTCIO_BASE + 0x38)


#define RTC_GPIO_PIN4_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN4_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN4_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN4_WAKEUP_ENABLE_S 10




# 193 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN4_INT_TYPE 0x00000007
#define RTC_GPIO_PIN4_INT_TYPE_M ((RTC_GPIO_PIN4_INT_TYPE_V)<<(RTC_GPIO_PIN4_INT_TYPE_S))
#define RTC_GPIO_PIN4_INT_TYPE_V 0x7
#define RTC_GPIO_PIN4_INT_TYPE_S 7


#define RTC_GPIO_PIN4_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN4_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN4_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN4_PAD_DRIVER_S 2

#define RTC_GPIO_PIN5_REG (DR_REG_RTCIO_BASE + 0x3c)


#define RTC_GPIO_PIN5_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN5_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN5_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN5_WAKEUP_ENABLE_S 10




# 214 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN5_INT_TYPE 0x00000007
#define RTC_GPIO_PIN5_INT_TYPE_M ((RTC_GPIO_PIN5_INT_TYPE_V)<<(RTC_GPIO_PIN5_INT_TYPE_S))
#define RTC_GPIO_PIN5_INT_TYPE_V 0x7
#define RTC_GPIO_PIN5_INT_TYPE_S 7


#define RTC_GPIO_PIN5_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN5_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN5_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN5_PAD_DRIVER_S 2

#define RTC_GPIO_PIN6_REG (DR_REG_RTCIO_BASE + 0x40)


#define RTC_GPIO_PIN6_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN6_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN6_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN6_WAKEUP_ENABLE_S 10




# 235 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN6_INT_TYPE 0x00000007
#define RTC_GPIO_PIN6_INT_TYPE_M ((RTC_GPIO_PIN6_INT_TYPE_V)<<(RTC_GPIO_PIN6_INT_TYPE_S))
#define RTC_GPIO_PIN6_INT_TYPE_V 0x7
#define RTC_GPIO_PIN6_INT_TYPE_S 7


#define RTC_GPIO_PIN6_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN6_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN6_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN6_PAD_DRIVER_S 2

#define RTC_GPIO_PIN7_REG (DR_REG_RTCIO_BASE + 0x44)


#define RTC_GPIO_PIN7_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN7_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN7_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN7_WAKEUP_ENABLE_S 10




# 256 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN7_INT_TYPE 0x00000007
#define RTC_GPIO_PIN7_INT_TYPE_M ((RTC_GPIO_PIN7_INT_TYPE_V)<<(RTC_GPIO_PIN7_INT_TYPE_S))
#define RTC_GPIO_PIN7_INT_TYPE_V 0x7
#define RTC_GPIO_PIN7_INT_TYPE_S 7


#define RTC_GPIO_PIN7_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN7_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN7_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN7_PAD_DRIVER_S 2

#define RTC_GPIO_PIN8_REG (DR_REG_RTCIO_BASE + 0x48)


#define RTC_GPIO_PIN8_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN8_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN8_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN8_WAKEUP_ENABLE_S 10




# 277 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN8_INT_TYPE 0x00000007
#define RTC_GPIO_PIN8_INT_TYPE_M ((RTC_GPIO_PIN8_INT_TYPE_V)<<(RTC_GPIO_PIN8_INT_TYPE_S))
#define RTC_GPIO_PIN8_INT_TYPE_V 0x7
#define RTC_GPIO_PIN8_INT_TYPE_S 7


#define RTC_GPIO_PIN8_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN8_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN8_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN8_PAD_DRIVER_S 2

#define RTC_GPIO_PIN9_REG (DR_REG_RTCIO_BASE + 0x4c)


#define RTC_GPIO_PIN9_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN9_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN9_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN9_WAKEUP_ENABLE_S 10




# 298 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN9_INT_TYPE 0x00000007
#define RTC_GPIO_PIN9_INT_TYPE_M ((RTC_GPIO_PIN9_INT_TYPE_V)<<(RTC_GPIO_PIN9_INT_TYPE_S))
#define RTC_GPIO_PIN9_INT_TYPE_V 0x7
#define RTC_GPIO_PIN9_INT_TYPE_S 7


#define RTC_GPIO_PIN9_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN9_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN9_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN9_PAD_DRIVER_S 2

#define RTC_GPIO_PIN10_REG (DR_REG_RTCIO_BASE + 0x50)


#define RTC_GPIO_PIN10_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN10_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN10_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN10_WAKEUP_ENABLE_S 10




# 319 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN10_INT_TYPE 0x00000007
#define RTC_GPIO_PIN10_INT_TYPE_M ((RTC_GPIO_PIN10_INT_TYPE_V)<<(RTC_GPIO_PIN10_INT_TYPE_S))
#define RTC_GPIO_PIN10_INT_TYPE_V 0x7
#define RTC_GPIO_PIN10_INT_TYPE_S 7


#define RTC_GPIO_PIN10_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN10_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN10_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN10_PAD_DRIVER_S 2

#define RTC_GPIO_PIN11_REG (DR_REG_RTCIO_BASE + 0x54)


#define RTC_GPIO_PIN11_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN11_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN11_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN11_WAKEUP_ENABLE_S 10




# 340 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN11_INT_TYPE 0x00000007
#define RTC_GPIO_PIN11_INT_TYPE_M ((RTC_GPIO_PIN11_INT_TYPE_V)<<(RTC_GPIO_PIN11_INT_TYPE_S))
#define RTC_GPIO_PIN11_INT_TYPE_V 0x7
#define RTC_GPIO_PIN11_INT_TYPE_S 7


#define RTC_GPIO_PIN11_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN11_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN11_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN11_PAD_DRIVER_S 2

#define RTC_GPIO_PIN12_REG (DR_REG_RTCIO_BASE + 0x58)


#define RTC_GPIO_PIN12_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN12_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN12_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN12_WAKEUP_ENABLE_S 10




# 361 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN12_INT_TYPE 0x00000007
#define RTC_GPIO_PIN12_INT_TYPE_M ((RTC_GPIO_PIN12_INT_TYPE_V)<<(RTC_GPIO_PIN12_INT_TYPE_S))
#define RTC_GPIO_PIN12_INT_TYPE_V 0x7
#define RTC_GPIO_PIN12_INT_TYPE_S 7


#define RTC_GPIO_PIN12_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN12_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN12_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN12_PAD_DRIVER_S 2

#define RTC_GPIO_PIN13_REG (DR_REG_RTCIO_BASE + 0x5c)


#define RTC_GPIO_PIN13_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN13_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN13_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN13_WAKEUP_ENABLE_S 10




# 382 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN13_INT_TYPE 0x00000007
#define RTC_GPIO_PIN13_INT_TYPE_M ((RTC_GPIO_PIN13_INT_TYPE_V)<<(RTC_GPIO_PIN13_INT_TYPE_S))
#define RTC_GPIO_PIN13_INT_TYPE_V 0x7
#define RTC_GPIO_PIN13_INT_TYPE_S 7


#define RTC_GPIO_PIN13_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN13_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN13_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN13_PAD_DRIVER_S 2

#define RTC_GPIO_PIN14_REG (DR_REG_RTCIO_BASE + 0x60)


#define RTC_GPIO_PIN14_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN14_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN14_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN14_WAKEUP_ENABLE_S 10




# 403 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN14_INT_TYPE 0x00000007
#define RTC_GPIO_PIN14_INT_TYPE_M ((RTC_GPIO_PIN14_INT_TYPE_V)<<(RTC_GPIO_PIN14_INT_TYPE_S))
#define RTC_GPIO_PIN14_INT_TYPE_V 0x7
#define RTC_GPIO_PIN14_INT_TYPE_S 7


#define RTC_GPIO_PIN14_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN14_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN14_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN14_PAD_DRIVER_S 2

#define RTC_GPIO_PIN15_REG (DR_REG_RTCIO_BASE + 0x64)


#define RTC_GPIO_PIN15_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN15_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN15_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN15_WAKEUP_ENABLE_S 10




# 424 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN15_INT_TYPE 0x00000007
#define RTC_GPIO_PIN15_INT_TYPE_M ((RTC_GPIO_PIN15_INT_TYPE_V)<<(RTC_GPIO_PIN15_INT_TYPE_S))
#define RTC_GPIO_PIN15_INT_TYPE_V 0x7
#define RTC_GPIO_PIN15_INT_TYPE_S 7


#define RTC_GPIO_PIN15_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN15_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN15_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN15_PAD_DRIVER_S 2

#define RTC_GPIO_PIN16_REG (DR_REG_RTCIO_BASE + 0x68)


#define RTC_GPIO_PIN16_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN16_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN16_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN16_WAKEUP_ENABLE_S 10




# 445 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN16_INT_TYPE 0x00000007
#define RTC_GPIO_PIN16_INT_TYPE_M ((RTC_GPIO_PIN16_INT_TYPE_V)<<(RTC_GPIO_PIN16_INT_TYPE_S))
#define RTC_GPIO_PIN16_INT_TYPE_V 0x7
#define RTC_GPIO_PIN16_INT_TYPE_S 7


#define RTC_GPIO_PIN16_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN16_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN16_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN16_PAD_DRIVER_S 2

#define RTC_GPIO_PIN17_REG (DR_REG_RTCIO_BASE + 0x6c)


#define RTC_GPIO_PIN17_WAKEUP_ENABLE (BIT(10))
#define RTC_GPIO_PIN17_WAKEUP_ENABLE_M (BIT(10))
#define RTC_GPIO_PIN17_WAKEUP_ENABLE_V 0x1
#define RTC_GPIO_PIN17_WAKEUP_ENABLE_S 10




# 466 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_GPIO_PIN17_INT_TYPE 0x00000007
#define RTC_GPIO_PIN17_INT_TYPE_M ((RTC_GPIO_PIN17_INT_TYPE_V)<<(RTC_GPIO_PIN17_INT_TYPE_S))
#define RTC_GPIO_PIN17_INT_TYPE_V 0x7
#define RTC_GPIO_PIN17_INT_TYPE_S 7


#define RTC_GPIO_PIN17_PAD_DRIVER (BIT(2))
#define RTC_GPIO_PIN17_PAD_DRIVER_M (BIT(2))
#define RTC_GPIO_PIN17_PAD_DRIVER_V 0x1
#define RTC_GPIO_PIN17_PAD_DRIVER_S 2

#define RTC_IO_RTC_DEBUG_SEL_REG (DR_REG_RTCIO_BASE + 0x70)


#define RTC_IO_DEBUG_12M_NO_GATING (BIT(25))
#define RTC_IO_DEBUG_12M_NO_GATING_M (BIT(25))
#define RTC_IO_DEBUG_12M_NO_GATING_V 0x1
#define RTC_IO_DEBUG_12M_NO_GATING_S 25


#define RTC_IO_DEBUG_SEL4 0x0000001F
#define RTC_IO_DEBUG_SEL4_M ((RTC_IO_DEBUG_SEL4_V)<<(RTC_IO_DEBUG_SEL4_S))
#define RTC_IO_DEBUG_SEL4_V 0x1F
#define RTC_IO_DEBUG_SEL4_S 20


#define RTC_IO_DEBUG_SEL3 0x0000001F
#define RTC_IO_DEBUG_SEL3_M ((RTC_IO_DEBUG_SEL3_V)<<(RTC_IO_DEBUG_SEL3_S))
#define RTC_IO_DEBUG_SEL3_V 0x1F
#define RTC_IO_DEBUG_SEL3_S 15


#define RTC_IO_DEBUG_SEL2 0x0000001F
#define RTC_IO_DEBUG_SEL2_M ((RTC_IO_DEBUG_SEL2_V)<<(RTC_IO_DEBUG_SEL2_S))
#define RTC_IO_DEBUG_SEL2_V 0x1F
#define RTC_IO_DEBUG_SEL2_S 10


#define RTC_IO_DEBUG_SEL1 0x0000001F
#define RTC_IO_DEBUG_SEL1_M ((RTC_IO_DEBUG_SEL1_V)<<(RTC_IO_DEBUG_SEL1_S))
#define RTC_IO_DEBUG_SEL1_V 0x1F
#define RTC_IO_DEBUG_SEL1_S 5


#define RTC_IO_DEBUG_SEL0 0x0000001F
#define RTC_IO_DEBUG_SEL0_M ((RTC_IO_DEBUG_SEL0_V)<<(RTC_IO_DEBUG_SEL0_S))
#define RTC_IO_DEBUG_SEL0_V 0x1F
#define RTC_IO_DEBUG_SEL0_S 0
#define RTC_IO_DEBUG_SEL0_8M 1
#define RTC_IO_DEBUG_SEL0_32K_XTAL 4
#define RTC_IO_DEBUG_SEL0_150K_OSC 5

#define RTC_IO_DIG_PAD_HOLD_REG (DR_REG_RTCIO_BASE + 0x74)


#define RTC_IO_DIG_PAD_HOLD 0xFFFFFFFF
#define RTC_IO_DIG_PAD_HOLD_M ((RTC_IO_DIG_PAD_HOLD_V)<<(RTC_IO_DIG_PAD_HOLD_S))
#define RTC_IO_DIG_PAD_HOLD_V 0xFFFFFFFF
#define RTC_IO_DIG_PAD_HOLD_S 0

#define RTC_IO_HALL_SENS_REG (DR_REG_RTCIO_BASE + 0x78)


#define RTC_IO_XPD_HALL (BIT(31))
#define RTC_IO_XPD_HALL_M (BIT(31))
#define RTC_IO_XPD_HALL_V 0x1
#define RTC_IO_XPD_HALL_S 31


#define RTC_IO_HALL_PHASE (BIT(30))
#define RTC_IO_HALL_PHASE_M (BIT(30))
#define RTC_IO_HALL_PHASE_V 0x1
#define RTC_IO_HALL_PHASE_S 30

#define RTC_IO_SENSOR_PADS_REG (DR_REG_RTCIO_BASE + 0x7c)


#define RTC_IO_SENSE1_HOLD (BIT(31))
#define RTC_IO_SENSE1_HOLD_M (BIT(31))
#define RTC_IO_SENSE1_HOLD_V 0x1
#define RTC_IO_SENSE1_HOLD_S 31


#define RTC_IO_SENSE2_HOLD (BIT(30))
#define RTC_IO_SENSE2_HOLD_M (BIT(30))
#define RTC_IO_SENSE2_HOLD_V 0x1
#define RTC_IO_SENSE2_HOLD_S 30


#define RTC_IO_SENSE3_HOLD (BIT(29))
#define RTC_IO_SENSE3_HOLD_M (BIT(29))
#define RTC_IO_SENSE3_HOLD_V 0x1
#define RTC_IO_SENSE3_HOLD_S 29


#define RTC_IO_SENSE4_HOLD (BIT(28))
#define RTC_IO_SENSE4_HOLD_M (BIT(28))
#define RTC_IO_SENSE4_HOLD_V 0x1
#define RTC_IO_SENSE4_HOLD_S 28


#define RTC_IO_SENSE1_MUX_SEL (BIT(27))
#define RTC_IO_SENSE1_MUX_SEL_M (BIT(27))
#define RTC_IO_SENSE1_MUX_SEL_V 0x1
#define RTC_IO_SENSE1_MUX_SEL_S 27


#define RTC_IO_SENSE2_MUX_SEL (BIT(26))
#define RTC_IO_SENSE2_MUX_SEL_M (BIT(26))
#define RTC_IO_SENSE2_MUX_SEL_V 0x1
#define RTC_IO_SENSE2_MUX_SEL_S 26


#define RTC_IO_SENSE3_MUX_SEL (BIT(25))
#define RTC_IO_SENSE3_MUX_SEL_M (BIT(25))
#define RTC_IO_SENSE3_MUX_SEL_V 0x1
#define RTC_IO_SENSE3_MUX_SEL_S 25


#define RTC_IO_SENSE4_MUX_SEL (BIT(24))
#define RTC_IO_SENSE4_MUX_SEL_M (BIT(24))
#define RTC_IO_SENSE4_MUX_SEL_V 0x1
#define RTC_IO_SENSE4_MUX_SEL_S 24


#define RTC_IO_SENSE1_FUN_SEL 0x00000003
#define RTC_IO_SENSE1_FUN_SEL_M ((RTC_IO_SENSE1_FUN_SEL_V)<<(RTC_IO_SENSE1_FUN_SEL_S))
#define RTC_IO_SENSE1_FUN_SEL_V 0x3
#define RTC_IO_SENSE1_FUN_SEL_S 22


#define RTC_IO_SENSE1_SLP_SEL (BIT(21))
#define RTC_IO_SENSE1_SLP_SEL_M (BIT(21))
#define RTC_IO_SENSE1_SLP_SEL_V 0x1
#define RTC_IO_SENSE1_SLP_SEL_S 21


#define RTC_IO_SENSE1_SLP_IE (BIT(20))
#define RTC_IO_SENSE1_SLP_IE_M (BIT(20))
#define RTC_IO_SENSE1_SLP_IE_V 0x1
#define RTC_IO_SENSE1_SLP_IE_S 20


#define RTC_IO_SENSE1_FUN_IE (BIT(19))
#define RTC_IO_SENSE1_FUN_IE_M (BIT(19))
#define RTC_IO_SENSE1_FUN_IE_V 0x1
#define RTC_IO_SENSE1_FUN_IE_S 19


#define RTC_IO_SENSE2_FUN_SEL 0x00000003
#define RTC_IO_SENSE2_FUN_SEL_M ((RTC_IO_SENSE2_FUN_SEL_V)<<(RTC_IO_SENSE2_FUN_SEL_S))
#define RTC_IO_SENSE2_FUN_SEL_V 0x3
#define RTC_IO_SENSE2_FUN_SEL_S 17


#define RTC_IO_SENSE2_SLP_SEL (BIT(16))
#define RTC_IO_SENSE2_SLP_SEL_M (BIT(16))
#define RTC_IO_SENSE2_SLP_SEL_V 0x1
#define RTC_IO_SENSE2_SLP_SEL_S 16


#define RTC_IO_SENSE2_SLP_IE (BIT(15))
#define RTC_IO_SENSE2_SLP_IE_M (BIT(15))
#define RTC_IO_SENSE2_SLP_IE_V 0x1
#define RTC_IO_SENSE2_SLP_IE_S 15


#define RTC_IO_SENSE2_FUN_IE (BIT(14))
#define RTC_IO_SENSE2_FUN_IE_M (BIT(14))
#define RTC_IO_SENSE2_FUN_IE_V 0x1
#define RTC_IO_SENSE2_FUN_IE_S 14


#define RTC_IO_SENSE3_FUN_SEL 0x00000003
#define RTC_IO_SENSE3_FUN_SEL_M ((RTC_IO_SENSE3_FUN_SEL_V)<<(RTC_IO_SENSE3_FUN_SEL_S))
#define RTC_IO_SENSE3_FUN_SEL_V 0x3
#define RTC_IO_SENSE3_FUN_SEL_S 12


#define RTC_IO_SENSE3_SLP_SEL (BIT(11))
#define RTC_IO_SENSE3_SLP_SEL_M (BIT(11))
#define RTC_IO_SENSE3_SLP_SEL_V 0x1
#define RTC_IO_SENSE3_SLP_SEL_S 11


#define RTC_IO_SENSE3_SLP_IE (BIT(10))
#define RTC_IO_SENSE3_SLP_IE_M (BIT(10))
#define RTC_IO_SENSE3_SLP_IE_V 0x1
#define RTC_IO_SENSE3_SLP_IE_S 10


#define RTC_IO_SENSE3_FUN_IE (BIT(9))
#define RTC_IO_SENSE3_FUN_IE_M (BIT(9))
#define RTC_IO_SENSE3_FUN_IE_V 0x1
#define RTC_IO_SENSE3_FUN_IE_S 9


#define RTC_IO_SENSE4_FUN_SEL 0x00000003
#define RTC_IO_SENSE4_FUN_SEL_M ((RTC_IO_SENSE4_FUN_SEL_V)<<(RTC_IO_SENSE4_FUN_SEL_S))
#define RTC_IO_SENSE4_FUN_SEL_V 0x3
#define RTC_IO_SENSE4_FUN_SEL_S 7


#define RTC_IO_SENSE4_SLP_SEL (BIT(6))
#define RTC_IO_SENSE4_SLP_SEL_M (BIT(6))
#define RTC_IO_SENSE4_SLP_SEL_V 0x1
#define RTC_IO_SENSE4_SLP_SEL_S 6


#define RTC_IO_SENSE4_SLP_IE (BIT(5))
#define RTC_IO_SENSE4_SLP_IE_M (BIT(5))
#define RTC_IO_SENSE4_SLP_IE_V 0x1
#define RTC_IO_SENSE4_SLP_IE_S 5


#define RTC_IO_SENSE4_FUN_IE (BIT(4))
#define RTC_IO_SENSE4_FUN_IE_M (BIT(4))
#define RTC_IO_SENSE4_FUN_IE_V 0x1
#define RTC_IO_SENSE4_FUN_IE_S 4

#define RTC_IO_ADC_PAD_REG (DR_REG_RTCIO_BASE + 0x80)


#define RTC_IO_ADC1_HOLD (BIT(31))
#define RTC_IO_ADC1_HOLD_M (BIT(31))
#define RTC_IO_ADC1_HOLD_V 0x1
#define RTC_IO_ADC1_HOLD_S 31


#define RTC_IO_ADC2_HOLD (BIT(30))
#define RTC_IO_ADC2_HOLD_M (BIT(30))
#define RTC_IO_ADC2_HOLD_V 0x1
#define RTC_IO_ADC2_HOLD_S 30


#define RTC_IO_ADC1_MUX_SEL (BIT(29))
#define RTC_IO_ADC1_MUX_SEL_M (BIT(29))
#define RTC_IO_ADC1_MUX_SEL_V 0x1
#define RTC_IO_ADC1_MUX_SEL_S 29


#define RTC_IO_ADC2_MUX_SEL (BIT(28))
#define RTC_IO_ADC2_MUX_SEL_M (BIT(28))
#define RTC_IO_ADC2_MUX_SEL_V 0x1
#define RTC_IO_ADC2_MUX_SEL_S 28


#define RTC_IO_ADC1_FUN_SEL 0x00000003
#define RTC_IO_ADC1_FUN_SEL_M ((RTC_IO_ADC1_FUN_SEL_V)<<(RTC_IO_ADC1_FUN_SEL_S))
#define RTC_IO_ADC1_FUN_SEL_V 0x3
#define RTC_IO_ADC1_FUN_SEL_S 26


#define RTC_IO_ADC1_SLP_SEL (BIT(25))
#define RTC_IO_ADC1_SLP_SEL_M (BIT(25))
#define RTC_IO_ADC1_SLP_SEL_V 0x1
#define RTC_IO_ADC1_SLP_SEL_S 25


#define RTC_IO_ADC1_SLP_IE (BIT(24))
#define RTC_IO_ADC1_SLP_IE_M (BIT(24))
#define RTC_IO_ADC1_SLP_IE_V 0x1
#define RTC_IO_ADC1_SLP_IE_S 24


#define RTC_IO_ADC1_FUN_IE (BIT(23))
#define RTC_IO_ADC1_FUN_IE_M (BIT(23))
#define RTC_IO_ADC1_FUN_IE_V 0x1
#define RTC_IO_ADC1_FUN_IE_S 23


#define RTC_IO_ADC2_FUN_SEL 0x00000003
#define RTC_IO_ADC2_FUN_SEL_M ((RTC_IO_ADC2_FUN_SEL_V)<<(RTC_IO_ADC2_FUN_SEL_S))
#define RTC_IO_ADC2_FUN_SEL_V 0x3
#define RTC_IO_ADC2_FUN_SEL_S 21


#define RTC_IO_ADC2_SLP_SEL (BIT(20))
#define RTC_IO_ADC2_SLP_SEL_M (BIT(20))
#define RTC_IO_ADC2_SLP_SEL_V 0x1
#define RTC_IO_ADC2_SLP_SEL_S 20


#define RTC_IO_ADC2_SLP_IE (BIT(19))
#define RTC_IO_ADC2_SLP_IE_M (BIT(19))
#define RTC_IO_ADC2_SLP_IE_V 0x1
#define RTC_IO_ADC2_SLP_IE_S 19


#define RTC_IO_ADC2_FUN_IE (BIT(18))
#define RTC_IO_ADC2_FUN_IE_M (BIT(18))
#define RTC_IO_ADC2_FUN_IE_V 0x1
#define RTC_IO_ADC2_FUN_IE_S 18

#define RTC_IO_PAD_DAC1_REG (DR_REG_RTCIO_BASE + 0x84)


#define RTC_IO_PDAC1_DRV 0x00000003
#define RTC_IO_PDAC1_DRV_M ((RTC_IO_PDAC1_DRV_V)<<(RTC_IO_PDAC1_DRV_S))
#define RTC_IO_PDAC1_DRV_V 0x3
#define RTC_IO_PDAC1_DRV_S 30


#define RTC_IO_PDAC1_HOLD (BIT(29))
#define RTC_IO_PDAC1_HOLD_M (BIT(29))
#define RTC_IO_PDAC1_HOLD_V 0x1
#define RTC_IO_PDAC1_HOLD_S 29


#define RTC_IO_PDAC1_RDE (BIT(28))
#define RTC_IO_PDAC1_RDE_M (BIT(28))
#define RTC_IO_PDAC1_RDE_V 0x1
#define RTC_IO_PDAC1_RDE_S 28


#define RTC_IO_PDAC1_RUE (BIT(27))
#define RTC_IO_PDAC1_RUE_M (BIT(27))
#define RTC_IO_PDAC1_RUE_V 0x1
#define RTC_IO_PDAC1_RUE_S 27


#define RTC_IO_PDAC1_DAC 0x000000FF
#define RTC_IO_PDAC1_DAC_M ((RTC_IO_PDAC1_DAC_V)<<(RTC_IO_PDAC1_DAC_S))
#define RTC_IO_PDAC1_DAC_V 0xFF
#define RTC_IO_PDAC1_DAC_S 19




# 794 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_IO_PDAC1_XPD_DAC (BIT(18))
#define RTC_IO_PDAC1_XPD_DAC_M (BIT(18))
#define RTC_IO_PDAC1_XPD_DAC_V 0x1
#define RTC_IO_PDAC1_XPD_DAC_S 18


#define RTC_IO_PDAC1_MUX_SEL (BIT(17))
#define RTC_IO_PDAC1_MUX_SEL_M (BIT(17))
#define RTC_IO_PDAC1_MUX_SEL_V 0x1
#define RTC_IO_PDAC1_MUX_SEL_S 17


#define RTC_IO_PDAC1_FUN_SEL 0x00000003
#define RTC_IO_PDAC1_FUN_SEL_M ((RTC_IO_PDAC1_FUN_SEL_V)<<(RTC_IO_PDAC1_FUN_SEL_S))
#define RTC_IO_PDAC1_FUN_SEL_V 0x3
#define RTC_IO_PDAC1_FUN_SEL_S 15


#define RTC_IO_PDAC1_SLP_SEL (BIT(14))
#define RTC_IO_PDAC1_SLP_SEL_M (BIT(14))
#define RTC_IO_PDAC1_SLP_SEL_V 0x1
#define RTC_IO_PDAC1_SLP_SEL_S 14


#define RTC_IO_PDAC1_SLP_IE (BIT(13))
#define RTC_IO_PDAC1_SLP_IE_M (BIT(13))
#define RTC_IO_PDAC1_SLP_IE_V 0x1
#define RTC_IO_PDAC1_SLP_IE_S 13


#define RTC_IO_PDAC1_SLP_OE (BIT(12))
#define RTC_IO_PDAC1_SLP_OE_M (BIT(12))
#define RTC_IO_PDAC1_SLP_OE_V 0x1
#define RTC_IO_PDAC1_SLP_OE_S 12


#define RTC_IO_PDAC1_FUN_IE (BIT(11))
#define RTC_IO_PDAC1_FUN_IE_M (BIT(11))
#define RTC_IO_PDAC1_FUN_IE_V 0x1
#define RTC_IO_PDAC1_FUN_IE_S 11




# 837 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_IO_PDAC1_DAC_XPD_FORCE (BIT(10))
#define RTC_IO_PDAC1_DAC_XPD_FORCE_M (BIT(10))
#define RTC_IO_PDAC1_DAC_XPD_FORCE_V 0x1
#define RTC_IO_PDAC1_DAC_XPD_FORCE_S 10

#define RTC_IO_PAD_DAC2_REG (DR_REG_RTCIO_BASE + 0x88)


#define RTC_IO_PDAC2_DRV 0x00000003
#define RTC_IO_PDAC2_DRV_M ((RTC_IO_PDAC2_DRV_V)<<(RTC_IO_PDAC2_DRV_S))
#define RTC_IO_PDAC2_DRV_V 0x3
#define RTC_IO_PDAC2_DRV_S 30


#define RTC_IO_PDAC2_HOLD (BIT(29))
#define RTC_IO_PDAC2_HOLD_M (BIT(29))
#define RTC_IO_PDAC2_HOLD_V 0x1
#define RTC_IO_PDAC2_HOLD_S 29


#define RTC_IO_PDAC2_RDE (BIT(28))
#define RTC_IO_PDAC2_RDE_M (BIT(28))
#define RTC_IO_PDAC2_RDE_V 0x1
#define RTC_IO_PDAC2_RDE_S 28


#define RTC_IO_PDAC2_RUE (BIT(27))
#define RTC_IO_PDAC2_RUE_M (BIT(27))
#define RTC_IO_PDAC2_RUE_V 0x1
#define RTC_IO_PDAC2_RUE_S 27


#define RTC_IO_PDAC2_DAC 0x000000FF
#define RTC_IO_PDAC2_DAC_M ((RTC_IO_PDAC2_DAC_V)<<(RTC_IO_PDAC2_DAC_S))
#define RTC_IO_PDAC2_DAC_V 0xFF
#define RTC_IO_PDAC2_DAC_S 19




# 876 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_IO_PDAC2_XPD_DAC (BIT(18))
#define RTC_IO_PDAC2_XPD_DAC_M (BIT(18))
#define RTC_IO_PDAC2_XPD_DAC_V 0x1
#define RTC_IO_PDAC2_XPD_DAC_S 18


#define RTC_IO_PDAC2_MUX_SEL (BIT(17))
#define RTC_IO_PDAC2_MUX_SEL_M (BIT(17))
#define RTC_IO_PDAC2_MUX_SEL_V 0x1
#define RTC_IO_PDAC2_MUX_SEL_S 17


#define RTC_IO_PDAC2_FUN_SEL 0x00000003
#define RTC_IO_PDAC2_FUN_SEL_M ((RTC_IO_PDAC2_FUN_SEL_V)<<(RTC_IO_PDAC2_FUN_SEL_S))
#define RTC_IO_PDAC2_FUN_SEL_V 0x3
#define RTC_IO_PDAC2_FUN_SEL_S 15


#define RTC_IO_PDAC2_SLP_SEL (BIT(14))
#define RTC_IO_PDAC2_SLP_SEL_M (BIT(14))
#define RTC_IO_PDAC2_SLP_SEL_V 0x1
#define RTC_IO_PDAC2_SLP_SEL_S 14


#define RTC_IO_PDAC2_SLP_IE (BIT(13))
#define RTC_IO_PDAC2_SLP_IE_M (BIT(13))
#define RTC_IO_PDAC2_SLP_IE_V 0x1
#define RTC_IO_PDAC2_SLP_IE_S 13


#define RTC_IO_PDAC2_SLP_OE (BIT(12))
#define RTC_IO_PDAC2_SLP_OE_M (BIT(12))
#define RTC_IO_PDAC2_SLP_OE_V 0x1
#define RTC_IO_PDAC2_SLP_OE_S 12


#define RTC_IO_PDAC2_FUN_IE (BIT(11))
#define RTC_IO_PDAC2_FUN_IE_M (BIT(11))
#define RTC_IO_PDAC2_FUN_IE_V 0x1
#define RTC_IO_PDAC2_FUN_IE_S 11




# 919 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_IO_PDAC2_DAC_XPD_FORCE (BIT(10))
#define RTC_IO_PDAC2_DAC_XPD_FORCE_M (BIT(10))
#define RTC_IO_PDAC2_DAC_XPD_FORCE_V 0x1
#define RTC_IO_PDAC2_DAC_XPD_FORCE_S 10

#define RTC_IO_XTAL_32K_PAD_REG (DR_REG_RTCIO_BASE + 0x8c)


#define RTC_IO_X32N_DRV 0x00000003
#define RTC_IO_X32N_DRV_M ((RTC_IO_X32N_DRV_V)<<(RTC_IO_X32N_DRV_S))
#define RTC_IO_X32N_DRV_V 0x3
#define RTC_IO_X32N_DRV_S 30


#define RTC_IO_X32N_HOLD (BIT(29))
#define RTC_IO_X32N_HOLD_M (BIT(29))
#define RTC_IO_X32N_HOLD_V 0x1
#define RTC_IO_X32N_HOLD_S 29


#define RTC_IO_X32N_RDE (BIT(28))
#define RTC_IO_X32N_RDE_M (BIT(28))
#define RTC_IO_X32N_RDE_V 0x1
#define RTC_IO_X32N_RDE_S 28


#define RTC_IO_X32N_RUE (BIT(27))
#define RTC_IO_X32N_RUE_M (BIT(27))
#define RTC_IO_X32N_RUE_V 0x1
#define RTC_IO_X32N_RUE_S 27


#define RTC_IO_X32P_DRV 0x00000003
#define RTC_IO_X32P_DRV_M ((RTC_IO_X32P_DRV_V)<<(RTC_IO_X32P_DRV_S))
#define RTC_IO_X32P_DRV_V 0x3
#define RTC_IO_X32P_DRV_S 25


#define RTC_IO_X32P_HOLD (BIT(24))
#define RTC_IO_X32P_HOLD_M (BIT(24))
#define RTC_IO_X32P_HOLD_V 0x1
#define RTC_IO_X32P_HOLD_S 24


#define RTC_IO_X32P_RDE (BIT(23))
#define RTC_IO_X32P_RDE_M (BIT(23))
#define RTC_IO_X32P_RDE_V 0x1
#define RTC_IO_X32P_RDE_S 23


#define RTC_IO_X32P_RUE (BIT(22))
#define RTC_IO_X32P_RUE_M (BIT(22))
#define RTC_IO_X32P_RUE_V 0x1
#define RTC_IO_X32P_RUE_S 22


#define RTC_IO_DAC_XTAL_32K 0x00000003
#define RTC_IO_DAC_XTAL_32K_M ((RTC_IO_DAC_XTAL_32K_V)<<(RTC_IO_DAC_XTAL_32K_S))
#define RTC_IO_DAC_XTAL_32K_V 0x3
#define RTC_IO_DAC_XTAL_32K_S 20


#define RTC_IO_XPD_XTAL_32K (BIT(19))
#define RTC_IO_XPD_XTAL_32K_M (BIT(19))
#define RTC_IO_XPD_XTAL_32K_V 0x1
#define RTC_IO_XPD_XTAL_32K_S 19


#define RTC_IO_X32N_MUX_SEL (BIT(18))
#define RTC_IO_X32N_MUX_SEL_M (BIT(18))
#define RTC_IO_X32N_MUX_SEL_V 0x1
#define RTC_IO_X32N_MUX_SEL_S 18


#define RTC_IO_X32P_MUX_SEL (BIT(17))
#define RTC_IO_X32P_MUX_SEL_M (BIT(17))
#define RTC_IO_X32P_MUX_SEL_V 0x1
#define RTC_IO_X32P_MUX_SEL_S 17


#define RTC_IO_X32N_FUN_SEL 0x00000003
#define RTC_IO_X32N_FUN_SEL_M ((RTC_IO_X32N_FUN_SEL_V)<<(RTC_IO_X32N_FUN_SEL_S))
#define RTC_IO_X32N_FUN_SEL_V 0x3
#define RTC_IO_X32N_FUN_SEL_S 15


#define RTC_IO_X32N_SLP_SEL (BIT(14))
#define RTC_IO_X32N_SLP_SEL_M (BIT(14))
#define RTC_IO_X32N_SLP_SEL_V 0x1
#define RTC_IO_X32N_SLP_SEL_S 14


#define RTC_IO_X32N_SLP_IE (BIT(13))
#define RTC_IO_X32N_SLP_IE_M (BIT(13))
#define RTC_IO_X32N_SLP_IE_V 0x1
#define RTC_IO_X32N_SLP_IE_S 13


#define RTC_IO_X32N_SLP_OE (BIT(12))
#define RTC_IO_X32N_SLP_OE_M (BIT(12))
#define RTC_IO_X32N_SLP_OE_V 0x1
#define RTC_IO_X32N_SLP_OE_S 12


#define RTC_IO_X32N_FUN_IE (BIT(11))
#define RTC_IO_X32N_FUN_IE_M (BIT(11))
#define RTC_IO_X32N_FUN_IE_V 0x1
#define RTC_IO_X32N_FUN_IE_S 11


#define RTC_IO_X32P_FUN_SEL 0x00000003
#define RTC_IO_X32P_FUN_SEL_M ((RTC_IO_X32P_FUN_SEL_V)<<(RTC_IO_X32P_FUN_SEL_S))
#define RTC_IO_X32P_FUN_SEL_V 0x3
#define RTC_IO_X32P_FUN_SEL_S 9


#define RTC_IO_X32P_SLP_SEL (BIT(8))
#define RTC_IO_X32P_SLP_SEL_M (BIT(8))
#define RTC_IO_X32P_SLP_SEL_V 0x1
#define RTC_IO_X32P_SLP_SEL_S 8


#define RTC_IO_X32P_SLP_IE (BIT(7))
#define RTC_IO_X32P_SLP_IE_M (BIT(7))
#define RTC_IO_X32P_SLP_IE_V 0x1
#define RTC_IO_X32P_SLP_IE_S 7


#define RTC_IO_X32P_SLP_OE (BIT(6))
#define RTC_IO_X32P_SLP_OE_M (BIT(6))
#define RTC_IO_X32P_SLP_OE_V 0x1
#define RTC_IO_X32P_SLP_OE_S 6


#define RTC_IO_X32P_FUN_IE (BIT(5))
#define RTC_IO_X32P_FUN_IE_M (BIT(5))
#define RTC_IO_X32P_FUN_IE_V 0x1
#define RTC_IO_X32P_FUN_IE_S 5


#define RTC_IO_DRES_XTAL_32K 0x00000003
#define RTC_IO_DRES_XTAL_32K_M ((RTC_IO_DRES_XTAL_32K_V)<<(RTC_IO_DRES_XTAL_32K_S))
#define RTC_IO_DRES_XTAL_32K_V 0x3
#define RTC_IO_DRES_XTAL_32K_S 3


#define RTC_IO_DBIAS_XTAL_32K 0x00000003
#define RTC_IO_DBIAS_XTAL_32K_M ((RTC_IO_DBIAS_XTAL_32K_V)<<(RTC_IO_DBIAS_XTAL_32K_S))
#define RTC_IO_DBIAS_XTAL_32K_V 0x3
#define RTC_IO_DBIAS_XTAL_32K_S 1

#define RTC_IO_TOUCH_CFG_REG (DR_REG_RTCIO_BASE + 0x90)


#define RTC_IO_TOUCH_XPD_BIAS (BIT(31))
#define RTC_IO_TOUCH_XPD_BIAS_M (BIT(31))
#define RTC_IO_TOUCH_XPD_BIAS_V 0x1
#define RTC_IO_TOUCH_XPD_BIAS_S 31


#define RTC_IO_TOUCH_DREFH 0x00000003
#define RTC_IO_TOUCH_DREFH_M ((RTC_IO_TOUCH_DREFH_V)<<(RTC_IO_TOUCH_DREFH_S))
#define RTC_IO_TOUCH_DREFH_V 0x3
#define RTC_IO_TOUCH_DREFH_S 29


#define RTC_IO_TOUCH_DREFL 0x00000003
#define RTC_IO_TOUCH_DREFL_M ((RTC_IO_TOUCH_DREFL_V)<<(RTC_IO_TOUCH_DREFL_S))
#define RTC_IO_TOUCH_DREFL_V 0x3
#define RTC_IO_TOUCH_DREFL_S 27


#define RTC_IO_TOUCH_DRANGE 0x00000003
#define RTC_IO_TOUCH_DRANGE_M ((RTC_IO_TOUCH_DRANGE_V)<<(RTC_IO_TOUCH_DRANGE_S))
#define RTC_IO_TOUCH_DRANGE_V 0x3
#define RTC_IO_TOUCH_DRANGE_S 25




# 1098 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_IO_TOUCH_DCUR 0x00000003
#define RTC_IO_TOUCH_DCUR_M ((RTC_IO_TOUCH_DCUR_V)<<(RTC_IO_TOUCH_DCUR_S))
#define RTC_IO_TOUCH_DCUR_V 0x3
#define RTC_IO_TOUCH_DCUR_S 23

#define RTC_IO_TOUCH_PAD0_REG (DR_REG_RTCIO_BASE + 0x94)


#define RTC_IO_TOUCH_PAD0_HOLD (BIT(31))
#define RTC_IO_TOUCH_PAD0_HOLD_M (BIT(31))
#define RTC_IO_TOUCH_PAD0_HOLD_V 0x1
#define RTC_IO_TOUCH_PAD0_HOLD_S 31


#define RTC_IO_TOUCH_PAD0_DRV 0x00000003
#define RTC_IO_TOUCH_PAD0_DRV_M ((RTC_IO_TOUCH_PAD0_DRV_V)<<(RTC_IO_TOUCH_PAD0_DRV_S))
#define RTC_IO_TOUCH_PAD0_DRV_V 0x3
#define RTC_IO_TOUCH_PAD0_DRV_S 29


#define RTC_IO_TOUCH_PAD0_RDE (BIT(28))
#define RTC_IO_TOUCH_PAD0_RDE_M (BIT(28))
#define RTC_IO_TOUCH_PAD0_RDE_V 0x1
#define RTC_IO_TOUCH_PAD0_RDE_S 28


#define RTC_IO_TOUCH_PAD0_RUE (BIT(27))
#define RTC_IO_TOUCH_PAD0_RUE_M (BIT(27))
#define RTC_IO_TOUCH_PAD0_RUE_V 0x1
#define RTC_IO_TOUCH_PAD0_RUE_S 27


#define RTC_IO_TOUCH_PAD0_DAC 0x00000007
#define RTC_IO_TOUCH_PAD0_DAC_M ((RTC_IO_TOUCH_PAD0_DAC_V)<<(RTC_IO_TOUCH_PAD0_DAC_S))
#define RTC_IO_TOUCH_PAD0_DAC_V 0x7
#define RTC_IO_TOUCH_PAD0_DAC_S 23


#define RTC_IO_TOUCH_PAD0_START (BIT(22))
#define RTC_IO_TOUCH_PAD0_START_M (BIT(22))
#define RTC_IO_TOUCH_PAD0_START_V 0x1
#define RTC_IO_TOUCH_PAD0_START_S 22


#define RTC_IO_TOUCH_PAD0_TIE_OPT (BIT(21))
#define RTC_IO_TOUCH_PAD0_TIE_OPT_M (BIT(21))
#define RTC_IO_TOUCH_PAD0_TIE_OPT_V 0x1
#define RTC_IO_TOUCH_PAD0_TIE_OPT_S 21


#define RTC_IO_TOUCH_PAD0_XPD (BIT(20))
#define RTC_IO_TOUCH_PAD0_XPD_M (BIT(20))
#define RTC_IO_TOUCH_PAD0_XPD_V 0x1
#define RTC_IO_TOUCH_PAD0_XPD_S 20


#define RTC_IO_TOUCH_PAD0_MUX_SEL (BIT(19))
#define RTC_IO_TOUCH_PAD0_MUX_SEL_M (BIT(19))
#define RTC_IO_TOUCH_PAD0_MUX_SEL_V 0x1
#define RTC_IO_TOUCH_PAD0_MUX_SEL_S 19


#define RTC_IO_TOUCH_PAD0_FUN_SEL 0x00000003
#define RTC_IO_TOUCH_PAD0_FUN_SEL_M ((RTC_IO_TOUCH_PAD0_FUN_SEL_V)<<(RTC_IO_TOUCH_PAD0_FUN_SEL_S))
#define RTC_IO_TOUCH_PAD0_FUN_SEL_V 0x3
#define RTC_IO_TOUCH_PAD0_FUN_SEL_S 17


#define RTC_IO_TOUCH_PAD0_SLP_SEL (BIT(16))
#define RTC_IO_TOUCH_PAD0_SLP_SEL_M (BIT(16))
#define RTC_IO_TOUCH_PAD0_SLP_SEL_V 0x1
#define RTC_IO_TOUCH_PAD0_SLP_SEL_S 16


#define RTC_IO_TOUCH_PAD0_SLP_IE (BIT(15))
#define RTC_IO_TOUCH_PAD0_SLP_IE_M (BIT(15))
#define RTC_IO_TOUCH_PAD0_SLP_IE_V 0x1
#define RTC_IO_TOUCH_PAD0_SLP_IE_S 15


#define RTC_IO_TOUCH_PAD0_SLP_OE (BIT(14))
#define RTC_IO_TOUCH_PAD0_SLP_OE_M (BIT(14))
#define RTC_IO_TOUCH_PAD0_SLP_OE_V 0x1
#define RTC_IO_TOUCH_PAD0_SLP_OE_S 14


#define RTC_IO_TOUCH_PAD0_FUN_IE (BIT(13))
#define RTC_IO_TOUCH_PAD0_FUN_IE_M (BIT(13))
#define RTC_IO_TOUCH_PAD0_FUN_IE_V 0x1
#define RTC_IO_TOUCH_PAD0_FUN_IE_S 13


#define RTC_IO_TOUCH_PAD0_TO_GPIO (BIT(12))
#define RTC_IO_TOUCH_PAD0_TO_GPIO_M (BIT(12))
#define RTC_IO_TOUCH_PAD0_TO_GPIO_V 0x1
#define RTC_IO_TOUCH_PAD0_TO_GPIO_S 12

#define RTC_IO_TOUCH_PAD1_REG (DR_REG_RTCIO_BASE + 0x98)


#define RTC_IO_TOUCH_PAD1_HOLD (BIT(31))
#define RTC_IO_TOUCH_PAD1_HOLD_M (BIT(31))
#define RTC_IO_TOUCH_PAD1_HOLD_V 0x1
#define RTC_IO_TOUCH_PAD1_HOLD_S 31


#define RTC_IO_TOUCH_PAD1_DRV 0x00000003
#define RTC_IO_TOUCH_PAD1_DRV_M ((RTC_IO_TOUCH_PAD1_DRV_V)<<(RTC_IO_TOUCH_PAD1_DRV_S))
#define RTC_IO_TOUCH_PAD1_DRV_V 0x3
#define RTC_IO_TOUCH_PAD1_DRV_S 29


#define RTC_IO_TOUCH_PAD1_RDE (BIT(28))
#define RTC_IO_TOUCH_PAD1_RDE_M (BIT(28))
#define RTC_IO_TOUCH_PAD1_RDE_V 0x1
#define RTC_IO_TOUCH_PAD1_RDE_S 28


#define RTC_IO_TOUCH_PAD1_RUE (BIT(27))
#define RTC_IO_TOUCH_PAD1_RUE_M (BIT(27))
#define RTC_IO_TOUCH_PAD1_RUE_V 0x1
#define RTC_IO_TOUCH_PAD1_RUE_S 27


#define RTC_IO_TOUCH_PAD1_DAC 0x00000007
#define RTC_IO_TOUCH_PAD1_DAC_M ((RTC_IO_TOUCH_PAD1_DAC_V)<<(RTC_IO_TOUCH_PAD1_DAC_S))
#define RTC_IO_TOUCH_PAD1_DAC_V 0x7
#define RTC_IO_TOUCH_PAD1_DAC_S 23


#define RTC_IO_TOUCH_PAD1_START (BIT(22))
#define RTC_IO_TOUCH_PAD1_START_M (BIT(22))
#define RTC_IO_TOUCH_PAD1_START_V 0x1
#define RTC_IO_TOUCH_PAD1_START_S 22


#define RTC_IO_TOUCH_PAD1_TIE_OPT (BIT(21))
#define RTC_IO_TOUCH_PAD1_TIE_OPT_M (BIT(21))
#define RTC_IO_TOUCH_PAD1_TIE_OPT_V 0x1
#define RTC_IO_TOUCH_PAD1_TIE_OPT_S 21


#define RTC_IO_TOUCH_PAD1_XPD (BIT(20))
#define RTC_IO_TOUCH_PAD1_XPD_M (BIT(20))
#define RTC_IO_TOUCH_PAD1_XPD_V 0x1
#define RTC_IO_TOUCH_PAD1_XPD_S 20


#define RTC_IO_TOUCH_PAD1_MUX_SEL (BIT(19))
#define RTC_IO_TOUCH_PAD1_MUX_SEL_M (BIT(19))
#define RTC_IO_TOUCH_PAD1_MUX_SEL_V 0x1
#define RTC_IO_TOUCH_PAD1_MUX_SEL_S 19


#define RTC_IO_TOUCH_PAD1_FUN_SEL 0x00000003
#define RTC_IO_TOUCH_PAD1_FUN_SEL_M ((RTC_IO_TOUCH_PAD1_FUN_SEL_V)<<(RTC_IO_TOUCH_PAD1_FUN_SEL_S))
#define RTC_IO_TOUCH_PAD1_FUN_SEL_V 0x3
#define RTC_IO_TOUCH_PAD1_FUN_SEL_S 17


#define RTC_IO_TOUCH_PAD1_SLP_SEL (BIT(16))
#define RTC_IO_TOUCH_PAD1_SLP_SEL_M (BIT(16))
#define RTC_IO_TOUCH_PAD1_SLP_SEL_V 0x1
#define RTC_IO_TOUCH_PAD1_SLP_SEL_S 16


#define RTC_IO_TOUCH_PAD1_SLP_IE (BIT(15))
#define RTC_IO_TOUCH_PAD1_SLP_IE_M (BIT(15))
#define RTC_IO_TOUCH_PAD1_SLP_IE_V 0x1
#define RTC_IO_TOUCH_PAD1_SLP_IE_S 15


#define RTC_IO_TOUCH_PAD1_SLP_OE (BIT(14))
#define RTC_IO_TOUCH_PAD1_SLP_OE_M (BIT(14))
#define RTC_IO_TOUCH_PAD1_SLP_OE_V 0x1
#define RTC_IO_TOUCH_PAD1_SLP_OE_S 14


#define RTC_IO_TOUCH_PAD1_FUN_IE (BIT(13))
#define RTC_IO_TOUCH_PAD1_FUN_IE_M (BIT(13))
#define RTC_IO_TOUCH_PAD1_FUN_IE_V 0x1
#define RTC_IO_TOUCH_PAD1_FUN_IE_S 13


#define RTC_IO_TOUCH_PAD1_TO_GPIO (BIT(12))
#define RTC_IO_TOUCH_PAD1_TO_GPIO_M (BIT(12))
#define RTC_IO_TOUCH_PAD1_TO_GPIO_V 0x1
#define RTC_IO_TOUCH_PAD1_TO_GPIO_S 12

#define RTC_IO_TOUCH_PAD2_REG (DR_REG_RTCIO_BASE + 0x9c)


#define RTC_IO_TOUCH_PAD2_HOLD (BIT(31))
#define RTC_IO_TOUCH_PAD2_HOLD_M (BIT(31))
#define RTC_IO_TOUCH_PAD2_HOLD_V 0x1
#define RTC_IO_TOUCH_PAD2_HOLD_S 31


#define RTC_IO_TOUCH_PAD2_DRV 0x00000003
#define RTC_IO_TOUCH_PAD2_DRV_M ((RTC_IO_TOUCH_PAD2_DRV_V)<<(RTC_IO_TOUCH_PAD2_DRV_S))
#define RTC_IO_TOUCH_PAD2_DRV_V 0x3
#define RTC_IO_TOUCH_PAD2_DRV_S 29


#define RTC_IO_TOUCH_PAD2_RDE (BIT(28))
#define RTC_IO_TOUCH_PAD2_RDE_M (BIT(28))
#define RTC_IO_TOUCH_PAD2_RDE_V 0x1
#define RTC_IO_TOUCH_PAD2_RDE_S 28


#define RTC_IO_TOUCH_PAD2_RUE (BIT(27))
#define RTC_IO_TOUCH_PAD2_RUE_M (BIT(27))
#define RTC_IO_TOUCH_PAD2_RUE_V 0x1
#define RTC_IO_TOUCH_PAD2_RUE_S 27


#define RTC_IO_TOUCH_PAD2_DAC 0x00000007
#define RTC_IO_TOUCH_PAD2_DAC_M ((RTC_IO_TOUCH_PAD2_DAC_V)<<(RTC_IO_TOUCH_PAD2_DAC_S))
#define RTC_IO_TOUCH_PAD2_DAC_V 0x7
#define RTC_IO_TOUCH_PAD2_DAC_S 23


#define RTC_IO_TOUCH_PAD2_START (BIT(22))
#define RTC_IO_TOUCH_PAD2_START_M (BIT(22))
#define RTC_IO_TOUCH_PAD2_START_V 0x1
#define RTC_IO_TOUCH_PAD2_START_S 22


#define RTC_IO_TOUCH_PAD2_TIE_OPT (BIT(21))
#define RTC_IO_TOUCH_PAD2_TIE_OPT_M (BIT(21))
#define RTC_IO_TOUCH_PAD2_TIE_OPT_V 0x1
#define RTC_IO_TOUCH_PAD2_TIE_OPT_S 21


#define RTC_IO_TOUCH_PAD2_XPD (BIT(20))
#define RTC_IO_TOUCH_PAD2_XPD_M (BIT(20))
#define RTC_IO_TOUCH_PAD2_XPD_V 0x1
#define RTC_IO_TOUCH_PAD2_XPD_S 20


#define RTC_IO_TOUCH_PAD2_MUX_SEL (BIT(19))
#define RTC_IO_TOUCH_PAD2_MUX_SEL_M (BIT(19))
#define RTC_IO_TOUCH_PAD2_MUX_SEL_V 0x1
#define RTC_IO_TOUCH_PAD2_MUX_SEL_S 19


#define RTC_IO_TOUCH_PAD2_FUN_SEL 0x00000003
#define RTC_IO_TOUCH_PAD2_FUN_SEL_M ((RTC_IO_TOUCH_PAD2_FUN_SEL_V)<<(RTC_IO_TOUCH_PAD2_FUN_SEL_S))
#define RTC_IO_TOUCH_PAD2_FUN_SEL_V 0x3
#define RTC_IO_TOUCH_PAD2_FUN_SEL_S 17


#define RTC_IO_TOUCH_PAD2_SLP_SEL (BIT(16))
#define RTC_IO_TOUCH_PAD2_SLP_SEL_M (BIT(16))
#define RTC_IO_TOUCH_PAD2_SLP_SEL_V 0x1
#define RTC_IO_TOUCH_PAD2_SLP_SEL_S 16


#define RTC_IO_TOUCH_PAD2_SLP_IE (BIT(15))
#define RTC_IO_TOUCH_PAD2_SLP_IE_M (BIT(15))
#define RTC_IO_TOUCH_PAD2_SLP_IE_V 0x1
#define RTC_IO_TOUCH_PAD2_SLP_IE_S 15


#define RTC_IO_TOUCH_PAD2_SLP_OE (BIT(14))
#define RTC_IO_TOUCH_PAD2_SLP_OE_M (BIT(14))
#define RTC_IO_TOUCH_PAD2_SLP_OE_V 0x1
#define RTC_IO_TOUCH_PAD2_SLP_OE_S 14


#define RTC_IO_TOUCH_PAD2_FUN_IE (BIT(13))
#define RTC_IO_TOUCH_PAD2_FUN_IE_M (BIT(13))
#define RTC_IO_TOUCH_PAD2_FUN_IE_V 0x1
#define RTC_IO_TOUCH_PAD2_FUN_IE_S 13


#define RTC_IO_TOUCH_PAD2_TO_GPIO (BIT(12))
#define RTC_IO_TOUCH_PAD2_TO_GPIO_M (BIT(12))
#define RTC_IO_TOUCH_PAD2_TO_GPIO_V 0x1
#define RTC_IO_TOUCH_PAD2_TO_GPIO_S 12

#define RTC_IO_TOUCH_PAD3_REG (DR_REG_RTCIO_BASE + 0xa0)


#define RTC_IO_TOUCH_PAD3_HOLD (BIT(31))
#define RTC_IO_TOUCH_PAD3_HOLD_M (BIT(31))
#define RTC_IO_TOUCH_PAD3_HOLD_V 0x1
#define RTC_IO_TOUCH_PAD3_HOLD_S 31


#define RTC_IO_TOUCH_PAD3_DRV 0x00000003
#define RTC_IO_TOUCH_PAD3_DRV_M ((RTC_IO_TOUCH_PAD3_DRV_V)<<(RTC_IO_TOUCH_PAD3_DRV_S))
#define RTC_IO_TOUCH_PAD3_DRV_V 0x3
#define RTC_IO_TOUCH_PAD3_DRV_S 29


#define RTC_IO_TOUCH_PAD3_RDE (BIT(28))
#define RTC_IO_TOUCH_PAD3_RDE_M (BIT(28))
#define RTC_IO_TOUCH_PAD3_RDE_V 0x1
#define RTC_IO_TOUCH_PAD3_RDE_S 28


#define RTC_IO_TOUCH_PAD3_RUE (BIT(27))
#define RTC_IO_TOUCH_PAD3_RUE_M (BIT(27))
#define RTC_IO_TOUCH_PAD3_RUE_V 0x1
#define RTC_IO_TOUCH_PAD3_RUE_S 27


#define RTC_IO_TOUCH_PAD3_DAC 0x00000007
#define RTC_IO_TOUCH_PAD3_DAC_M ((RTC_IO_TOUCH_PAD3_DAC_V)<<(RTC_IO_TOUCH_PAD3_DAC_S))
#define RTC_IO_TOUCH_PAD3_DAC_V 0x7
#define RTC_IO_TOUCH_PAD3_DAC_S 23


#define RTC_IO_TOUCH_PAD3_START (BIT(22))
#define RTC_IO_TOUCH_PAD3_START_M (BIT(22))
#define RTC_IO_TOUCH_PAD3_START_V 0x1
#define RTC_IO_TOUCH_PAD3_START_S 22


#define RTC_IO_TOUCH_PAD3_TIE_OPT (BIT(21))
#define RTC_IO_TOUCH_PAD3_TIE_OPT_M (BIT(21))
#define RTC_IO_TOUCH_PAD3_TIE_OPT_V 0x1
#define RTC_IO_TOUCH_PAD3_TIE_OPT_S 21


#define RTC_IO_TOUCH_PAD3_XPD (BIT(20))
#define RTC_IO_TOUCH_PAD3_XPD_M (BIT(20))
#define RTC_IO_TOUCH_PAD3_XPD_V 0x1
#define RTC_IO_TOUCH_PAD3_XPD_S 20


#define RTC_IO_TOUCH_PAD3_MUX_SEL (BIT(19))
#define RTC_IO_TOUCH_PAD3_MUX_SEL_M (BIT(19))
#define RTC_IO_TOUCH_PAD3_MUX_SEL_V 0x1
#define RTC_IO_TOUCH_PAD3_MUX_SEL_S 19


#define RTC_IO_TOUCH_PAD3_FUN_SEL 0x00000003
#define RTC_IO_TOUCH_PAD3_FUN_SEL_M ((RTC_IO_TOUCH_PAD3_FUN_SEL_V)<<(RTC_IO_TOUCH_PAD3_FUN_SEL_S))
#define RTC_IO_TOUCH_PAD3_FUN_SEL_V 0x3
#define RTC_IO_TOUCH_PAD3_FUN_SEL_S 17


#define RTC_IO_TOUCH_PAD3_SLP_SEL (BIT(16))
#define RTC_IO_TOUCH_PAD3_SLP_SEL_M (BIT(16))
#define RTC_IO_TOUCH_PAD3_SLP_SEL_V 0x1
#define RTC_IO_TOUCH_PAD3_SLP_SEL_S 16


#define RTC_IO_TOUCH_PAD3_SLP_IE (BIT(15))
#define RTC_IO_TOUCH_PAD3_SLP_IE_M (BIT(15))
#define RTC_IO_TOUCH_PAD3_SLP_IE_V 0x1
#define RTC_IO_TOUCH_PAD3_SLP_IE_S 15


#define RTC_IO_TOUCH_PAD3_SLP_OE (BIT(14))
#define RTC_IO_TOUCH_PAD3_SLP_OE_M (BIT(14))
#define RTC_IO_TOUCH_PAD3_SLP_OE_V 0x1
#define RTC_IO_TOUCH_PAD3_SLP_OE_S 14


#define RTC_IO_TOUCH_PAD3_FUN_IE (BIT(13))
#define RTC_IO_TOUCH_PAD3_FUN_IE_M (BIT(13))
#define RTC_IO_TOUCH_PAD3_FUN_IE_V 0x1
#define RTC_IO_TOUCH_PAD3_FUN_IE_S 13


#define RTC_IO_TOUCH_PAD3_TO_GPIO (BIT(12))
#define RTC_IO_TOUCH_PAD3_TO_GPIO_M (BIT(12))
#define RTC_IO_TOUCH_PAD3_TO_GPIO_V 0x1
#define RTC_IO_TOUCH_PAD3_TO_GPIO_S 12

#define RTC_IO_TOUCH_PAD4_REG (DR_REG_RTCIO_BASE + 0xa4)


#define RTC_IO_TOUCH_PAD4_HOLD (BIT(31))
#define RTC_IO_TOUCH_PAD4_HOLD_M (BIT(31))
#define RTC_IO_TOUCH_PAD4_HOLD_V 0x1
#define RTC_IO_TOUCH_PAD4_HOLD_S 31


#define RTC_IO_TOUCH_PAD4_DRV 0x00000003
#define RTC_IO_TOUCH_PAD4_DRV_M ((RTC_IO_TOUCH_PAD4_DRV_V)<<(RTC_IO_TOUCH_PAD4_DRV_S))
#define RTC_IO_TOUCH_PAD4_DRV_V 0x3
#define RTC_IO_TOUCH_PAD4_DRV_S 29


#define RTC_IO_TOUCH_PAD4_RDE (BIT(28))
#define RTC_IO_TOUCH_PAD4_RDE_M (BIT(28))
#define RTC_IO_TOUCH_PAD4_RDE_V 0x1
#define RTC_IO_TOUCH_PAD4_RDE_S 28


#define RTC_IO_TOUCH_PAD4_RUE (BIT(27))
#define RTC_IO_TOUCH_PAD4_RUE_M (BIT(27))
#define RTC_IO_TOUCH_PAD4_RUE_V 0x1
#define RTC_IO_TOUCH_PAD4_RUE_S 27


#define RTC_IO_TOUCH_PAD4_DAC 0x00000007
#define RTC_IO_TOUCH_PAD4_DAC_M ((RTC_IO_TOUCH_PAD4_DAC_V)<<(RTC_IO_TOUCH_PAD4_DAC_S))
#define RTC_IO_TOUCH_PAD4_DAC_V 0x7
#define RTC_IO_TOUCH_PAD4_DAC_S 23


#define RTC_IO_TOUCH_PAD4_START (BIT(22))
#define RTC_IO_TOUCH_PAD4_START_M (BIT(22))
#define RTC_IO_TOUCH_PAD4_START_V 0x1
#define RTC_IO_TOUCH_PAD4_START_S 22


#define RTC_IO_TOUCH_PAD4_TIE_OPT (BIT(21))
#define RTC_IO_TOUCH_PAD4_TIE_OPT_M (BIT(21))
#define RTC_IO_TOUCH_PAD4_TIE_OPT_V 0x1
#define RTC_IO_TOUCH_PAD4_TIE_OPT_S 21


#define RTC_IO_TOUCH_PAD4_XPD (BIT(20))
#define RTC_IO_TOUCH_PAD4_XPD_M (BIT(20))
#define RTC_IO_TOUCH_PAD4_XPD_V 0x1
#define RTC_IO_TOUCH_PAD4_XPD_S 20


#define RTC_IO_TOUCH_PAD4_MUX_SEL (BIT(19))
#define RTC_IO_TOUCH_PAD4_MUX_SEL_M (BIT(19))
#define RTC_IO_TOUCH_PAD4_MUX_SEL_V 0x1
#define RTC_IO_TOUCH_PAD4_MUX_SEL_S 19


#define RTC_IO_TOUCH_PAD4_FUN_SEL 0x00000003
#define RTC_IO_TOUCH_PAD4_FUN_SEL_M ((RTC_IO_TOUCH_PAD4_FUN_SEL_V)<<(RTC_IO_TOUCH_PAD4_FUN_SEL_S))
#define RTC_IO_TOUCH_PAD4_FUN_SEL_V 0x3
#define RTC_IO_TOUCH_PAD4_FUN_SEL_S 17


#define RTC_IO_TOUCH_PAD4_SLP_SEL (BIT(16))
#define RTC_IO_TOUCH_PAD4_SLP_SEL_M (BIT(16))
#define RTC_IO_TOUCH_PAD4_SLP_SEL_V 0x1
#define RTC_IO_TOUCH_PAD4_SLP_SEL_S 16


#define RTC_IO_TOUCH_PAD4_SLP_IE (BIT(15))
#define RTC_IO_TOUCH_PAD4_SLP_IE_M (BIT(15))
#define RTC_IO_TOUCH_PAD4_SLP_IE_V 0x1
#define RTC_IO_TOUCH_PAD4_SLP_IE_S 15


#define RTC_IO_TOUCH_PAD4_SLP_OE (BIT(14))
#define RTC_IO_TOUCH_PAD4_SLP_OE_M (BIT(14))
#define RTC_IO_TOUCH_PAD4_SLP_OE_V 0x1
#define RTC_IO_TOUCH_PAD4_SLP_OE_S 14


#define RTC_IO_TOUCH_PAD4_FUN_IE (BIT(13))
#define RTC_IO_TOUCH_PAD4_FUN_IE_M (BIT(13))
#define RTC_IO_TOUCH_PAD4_FUN_IE_V 0x1
#define RTC_IO_TOUCH_PAD4_FUN_IE_S 13


#define RTC_IO_TOUCH_PAD4_TO_GPIO (BIT(12))
#define RTC_IO_TOUCH_PAD4_TO_GPIO_M (BIT(12))
#define RTC_IO_TOUCH_PAD4_TO_GPIO_V 0x1
#define RTC_IO_TOUCH_PAD4_TO_GPIO_S 12

#define RTC_IO_TOUCH_PAD5_REG (DR_REG_RTCIO_BASE + 0xa8)


#define RTC_IO_TOUCH_PAD5_HOLD (BIT(31))
#define RTC_IO_TOUCH_PAD5_HOLD_M (BIT(31))
#define RTC_IO_TOUCH_PAD5_HOLD_V 0x1
#define RTC_IO_TOUCH_PAD5_HOLD_S 31


#define RTC_IO_TOUCH_PAD5_DRV 0x00000003
#define RTC_IO_TOUCH_PAD5_DRV_M ((RTC_IO_TOUCH_PAD5_DRV_V)<<(RTC_IO_TOUCH_PAD5_DRV_S))
#define RTC_IO_TOUCH_PAD5_DRV_V 0x3
#define RTC_IO_TOUCH_PAD5_DRV_S 29


#define RTC_IO_TOUCH_PAD5_RDE (BIT(28))
#define RTC_IO_TOUCH_PAD5_RDE_M (BIT(28))
#define RTC_IO_TOUCH_PAD5_RDE_V 0x1
#define RTC_IO_TOUCH_PAD5_RDE_S 28


#define RTC_IO_TOUCH_PAD5_RUE (BIT(27))
#define RTC_IO_TOUCH_PAD5_RUE_M (BIT(27))
#define RTC_IO_TOUCH_PAD5_RUE_V 0x1
#define RTC_IO_TOUCH_PAD5_RUE_S 27


#define RTC_IO_TOUCH_PAD5_DAC 0x00000007
#define RTC_IO_TOUCH_PAD5_DAC_M ((RTC_IO_TOUCH_PAD5_DAC_V)<<(RTC_IO_TOUCH_PAD5_DAC_S))
#define RTC_IO_TOUCH_PAD5_DAC_V 0x7
#define RTC_IO_TOUCH_PAD5_DAC_S 23


#define RTC_IO_TOUCH_PAD5_START (BIT(22))
#define RTC_IO_TOUCH_PAD5_START_M (BIT(22))
#define RTC_IO_TOUCH_PAD5_START_V 0x1
#define RTC_IO_TOUCH_PAD5_START_S 22


#define RTC_IO_TOUCH_PAD5_TIE_OPT (BIT(21))
#define RTC_IO_TOUCH_PAD5_TIE_OPT_M (BIT(21))
#define RTC_IO_TOUCH_PAD5_TIE_OPT_V 0x1
#define RTC_IO_TOUCH_PAD5_TIE_OPT_S 21


#define RTC_IO_TOUCH_PAD5_XPD (BIT(20))
#define RTC_IO_TOUCH_PAD5_XPD_M (BIT(20))
#define RTC_IO_TOUCH_PAD5_XPD_V 0x1
#define RTC_IO_TOUCH_PAD5_XPD_S 20


#define RTC_IO_TOUCH_PAD5_MUX_SEL (BIT(19))
#define RTC_IO_TOUCH_PAD5_MUX_SEL_M (BIT(19))
#define RTC_IO_TOUCH_PAD5_MUX_SEL_V 0x1
#define RTC_IO_TOUCH_PAD5_MUX_SEL_S 19


#define RTC_IO_TOUCH_PAD5_FUN_SEL 0x00000003
#define RTC_IO_TOUCH_PAD5_FUN_SEL_M ((RTC_IO_TOUCH_PAD5_FUN_SEL_V)<<(RTC_IO_TOUCH_PAD5_FUN_SEL_S))
#define RTC_IO_TOUCH_PAD5_FUN_SEL_V 0x3
#define RTC_IO_TOUCH_PAD5_FUN_SEL_S 17


#define RTC_IO_TOUCH_PAD5_SLP_SEL (BIT(16))
#define RTC_IO_TOUCH_PAD5_SLP_SEL_M (BIT(16))
#define RTC_IO_TOUCH_PAD5_SLP_SEL_V 0x1
#define RTC_IO_TOUCH_PAD5_SLP_SEL_S 16


#define RTC_IO_TOUCH_PAD5_SLP_IE (BIT(15))
#define RTC_IO_TOUCH_PAD5_SLP_IE_M (BIT(15))
#define RTC_IO_TOUCH_PAD5_SLP_IE_V 0x1
#define RTC_IO_TOUCH_PAD5_SLP_IE_S 15


#define RTC_IO_TOUCH_PAD5_SLP_OE (BIT(14))
#define RTC_IO_TOUCH_PAD5_SLP_OE_M (BIT(14))
#define RTC_IO_TOUCH_PAD5_SLP_OE_V 0x1
#define RTC_IO_TOUCH_PAD5_SLP_OE_S 14


#define RTC_IO_TOUCH_PAD5_FUN_IE (BIT(13))
#define RTC_IO_TOUCH_PAD5_FUN_IE_M (BIT(13))
#define RTC_IO_TOUCH_PAD5_FUN_IE_V 0x1
#define RTC_IO_TOUCH_PAD5_FUN_IE_S 13


#define RTC_IO_TOUCH_PAD5_TO_GPIO (BIT(12))
#define RTC_IO_TOUCH_PAD5_TO_GPIO_M (BIT(12))
#define RTC_IO_TOUCH_PAD5_TO_GPIO_V 0x1
#define RTC_IO_TOUCH_PAD5_TO_GPIO_S 12

#define RTC_IO_TOUCH_PAD6_REG (DR_REG_RTCIO_BASE + 0xac)


#define RTC_IO_TOUCH_PAD6_HOLD (BIT(31))
#define RTC_IO_TOUCH_PAD6_HOLD_M (BIT(31))
#define RTC_IO_TOUCH_PAD6_HOLD_V 0x1
#define RTC_IO_TOUCH_PAD6_HOLD_S 31


#define RTC_IO_TOUCH_PAD6_DRV 0x00000003
#define RTC_IO_TOUCH_PAD6_DRV_M ((RTC_IO_TOUCH_PAD6_DRV_V)<<(RTC_IO_TOUCH_PAD6_DRV_S))
#define RTC_IO_TOUCH_PAD6_DRV_V 0x3
#define RTC_IO_TOUCH_PAD6_DRV_S 29


#define RTC_IO_TOUCH_PAD6_RDE (BIT(28))
#define RTC_IO_TOUCH_PAD6_RDE_M (BIT(28))
#define RTC_IO_TOUCH_PAD6_RDE_V 0x1
#define RTC_IO_TOUCH_PAD6_RDE_S 28


#define RTC_IO_TOUCH_PAD6_RUE (BIT(27))
#define RTC_IO_TOUCH_PAD6_RUE_M (BIT(27))
#define RTC_IO_TOUCH_PAD6_RUE_V 0x1
#define RTC_IO_TOUCH_PAD6_RUE_S 27


#define RTC_IO_TOUCH_PAD6_DAC 0x00000007
#define RTC_IO_TOUCH_PAD6_DAC_M ((RTC_IO_TOUCH_PAD6_DAC_V)<<(RTC_IO_TOUCH_PAD6_DAC_S))
#define RTC_IO_TOUCH_PAD6_DAC_V 0x7
#define RTC_IO_TOUCH_PAD6_DAC_S 23


#define RTC_IO_TOUCH_PAD6_START (BIT(22))
#define RTC_IO_TOUCH_PAD6_START_M (BIT(22))
#define RTC_IO_TOUCH_PAD6_START_V 0x1
#define RTC_IO_TOUCH_PAD6_START_S 22


#define RTC_IO_TOUCH_PAD6_TIE_OPT (BIT(21))
#define RTC_IO_TOUCH_PAD6_TIE_OPT_M (BIT(21))
#define RTC_IO_TOUCH_PAD6_TIE_OPT_V 0x1
#define RTC_IO_TOUCH_PAD6_TIE_OPT_S 21


#define RTC_IO_TOUCH_PAD6_XPD (BIT(20))
#define RTC_IO_TOUCH_PAD6_XPD_M (BIT(20))
#define RTC_IO_TOUCH_PAD6_XPD_V 0x1
#define RTC_IO_TOUCH_PAD6_XPD_S 20


#define RTC_IO_TOUCH_PAD6_MUX_SEL (BIT(19))
#define RTC_IO_TOUCH_PAD6_MUX_SEL_M (BIT(19))
#define RTC_IO_TOUCH_PAD6_MUX_SEL_V 0x1
#define RTC_IO_TOUCH_PAD6_MUX_SEL_S 19


#define RTC_IO_TOUCH_PAD6_FUN_SEL 0x00000003
#define RTC_IO_TOUCH_PAD6_FUN_SEL_M ((RTC_IO_TOUCH_PAD6_FUN_SEL_V)<<(RTC_IO_TOUCH_PAD6_FUN_SEL_S))
#define RTC_IO_TOUCH_PAD6_FUN_SEL_V 0x3
#define RTC_IO_TOUCH_PAD6_FUN_SEL_S 17


#define RTC_IO_TOUCH_PAD6_SLP_SEL (BIT(16))
#define RTC_IO_TOUCH_PAD6_SLP_SEL_M (BIT(16))
#define RTC_IO_TOUCH_PAD6_SLP_SEL_V 0x1
#define RTC_IO_TOUCH_PAD6_SLP_SEL_S 16


#define RTC_IO_TOUCH_PAD6_SLP_IE (BIT(15))
#define RTC_IO_TOUCH_PAD6_SLP_IE_M (BIT(15))
#define RTC_IO_TOUCH_PAD6_SLP_IE_V 0x1
#define RTC_IO_TOUCH_PAD6_SLP_IE_S 15


#define RTC_IO_TOUCH_PAD6_SLP_OE (BIT(14))
#define RTC_IO_TOUCH_PAD6_SLP_OE_M (BIT(14))
#define RTC_IO_TOUCH_PAD6_SLP_OE_V 0x1
#define RTC_IO_TOUCH_PAD6_SLP_OE_S 14


#define RTC_IO_TOUCH_PAD6_FUN_IE (BIT(13))
#define RTC_IO_TOUCH_PAD6_FUN_IE_M (BIT(13))
#define RTC_IO_TOUCH_PAD6_FUN_IE_V 0x1
#define RTC_IO_TOUCH_PAD6_FUN_IE_S 13


#define RTC_IO_TOUCH_PAD6_TO_GPIO (BIT(12))
#define RTC_IO_TOUCH_PAD6_TO_GPIO_M (BIT(12))
#define RTC_IO_TOUCH_PAD6_TO_GPIO_V 0x1
#define RTC_IO_TOUCH_PAD6_TO_GPIO_S 12

#define RTC_IO_TOUCH_PAD7_REG (DR_REG_RTCIO_BASE + 0xb0)


#define RTC_IO_TOUCH_PAD7_HOLD (BIT(31))
#define RTC_IO_TOUCH_PAD7_HOLD_M (BIT(31))
#define RTC_IO_TOUCH_PAD7_HOLD_V 0x1
#define RTC_IO_TOUCH_PAD7_HOLD_S 31


#define RTC_IO_TOUCH_PAD7_DRV 0x00000003
#define RTC_IO_TOUCH_PAD7_DRV_M ((RTC_IO_TOUCH_PAD7_DRV_V)<<(RTC_IO_TOUCH_PAD7_DRV_S))
#define RTC_IO_TOUCH_PAD7_DRV_V 0x3
#define RTC_IO_TOUCH_PAD7_DRV_S 29


#define RTC_IO_TOUCH_PAD7_RDE (BIT(28))
#define RTC_IO_TOUCH_PAD7_RDE_M (BIT(28))
#define RTC_IO_TOUCH_PAD7_RDE_V 0x1
#define RTC_IO_TOUCH_PAD7_RDE_S 28


#define RTC_IO_TOUCH_PAD7_RUE (BIT(27))
#define RTC_IO_TOUCH_PAD7_RUE_M (BIT(27))
#define RTC_IO_TOUCH_PAD7_RUE_V 0x1
#define RTC_IO_TOUCH_PAD7_RUE_S 27


#define RTC_IO_TOUCH_PAD7_DAC 0x00000007
#define RTC_IO_TOUCH_PAD7_DAC_M ((RTC_IO_TOUCH_PAD7_DAC_V)<<(RTC_IO_TOUCH_PAD7_DAC_S))
#define RTC_IO_TOUCH_PAD7_DAC_V 0x7
#define RTC_IO_TOUCH_PAD7_DAC_S 23


#define RTC_IO_TOUCH_PAD7_START (BIT(22))
#define RTC_IO_TOUCH_PAD7_START_M (BIT(22))
#define RTC_IO_TOUCH_PAD7_START_V 0x1
#define RTC_IO_TOUCH_PAD7_START_S 22


#define RTC_IO_TOUCH_PAD7_TIE_OPT (BIT(21))
#define RTC_IO_TOUCH_PAD7_TIE_OPT_M (BIT(21))
#define RTC_IO_TOUCH_PAD7_TIE_OPT_V 0x1
#define RTC_IO_TOUCH_PAD7_TIE_OPT_S 21


#define RTC_IO_TOUCH_PAD7_XPD (BIT(20))
#define RTC_IO_TOUCH_PAD7_XPD_M (BIT(20))
#define RTC_IO_TOUCH_PAD7_XPD_V 0x1
#define RTC_IO_TOUCH_PAD7_XPD_S 20


#define RTC_IO_TOUCH_PAD7_MUX_SEL (BIT(19))
#define RTC_IO_TOUCH_PAD7_MUX_SEL_M (BIT(19))
#define RTC_IO_TOUCH_PAD7_MUX_SEL_V 0x1
#define RTC_IO_TOUCH_PAD7_MUX_SEL_S 19


#define RTC_IO_TOUCH_PAD7_FUN_SEL 0x00000003
#define RTC_IO_TOUCH_PAD7_FUN_SEL_M ((RTC_IO_TOUCH_PAD7_FUN_SEL_V)<<(RTC_IO_TOUCH_PAD7_FUN_SEL_S))
#define RTC_IO_TOUCH_PAD7_FUN_SEL_V 0x3
#define RTC_IO_TOUCH_PAD7_FUN_SEL_S 17


#define RTC_IO_TOUCH_PAD7_SLP_SEL (BIT(16))
#define RTC_IO_TOUCH_PAD7_SLP_SEL_M (BIT(16))
#define RTC_IO_TOUCH_PAD7_SLP_SEL_V 0x1
#define RTC_IO_TOUCH_PAD7_SLP_SEL_S 16


#define RTC_IO_TOUCH_PAD7_SLP_IE (BIT(15))
#define RTC_IO_TOUCH_PAD7_SLP_IE_M (BIT(15))
#define RTC_IO_TOUCH_PAD7_SLP_IE_V 0x1
#define RTC_IO_TOUCH_PAD7_SLP_IE_S 15


#define RTC_IO_TOUCH_PAD7_SLP_OE (BIT(14))
#define RTC_IO_TOUCH_PAD7_SLP_OE_M (BIT(14))
#define RTC_IO_TOUCH_PAD7_SLP_OE_V 0x1
#define RTC_IO_TOUCH_PAD7_SLP_OE_S 14


#define RTC_IO_TOUCH_PAD7_FUN_IE (BIT(13))
#define RTC_IO_TOUCH_PAD7_FUN_IE_M (BIT(13))
#define RTC_IO_TOUCH_PAD7_FUN_IE_V 0x1
#define RTC_IO_TOUCH_PAD7_FUN_IE_S 13


#define RTC_IO_TOUCH_PAD7_TO_GPIO (BIT(12))
#define RTC_IO_TOUCH_PAD7_TO_GPIO_M (BIT(12))
#define RTC_IO_TOUCH_PAD7_TO_GPIO_V 0x1
#define RTC_IO_TOUCH_PAD7_TO_GPIO_S 12

#define RTC_IO_TOUCH_PAD8_REG (DR_REG_RTCIO_BASE + 0xb4)


#define RTC_IO_TOUCH_PAD8_DAC 0x00000007
#define RTC_IO_TOUCH_PAD8_DAC_M ((RTC_IO_TOUCH_PAD8_DAC_V)<<(RTC_IO_TOUCH_PAD8_DAC_S))
#define RTC_IO_TOUCH_PAD8_DAC_V 0x7
#define RTC_IO_TOUCH_PAD8_DAC_S 23


#define RTC_IO_TOUCH_PAD8_START (BIT(22))
#define RTC_IO_TOUCH_PAD8_START_M (BIT(22))
#define RTC_IO_TOUCH_PAD8_START_V 0x1
#define RTC_IO_TOUCH_PAD8_START_S 22


#define RTC_IO_TOUCH_PAD8_TIE_OPT (BIT(21))
#define RTC_IO_TOUCH_PAD8_TIE_OPT_M (BIT(21))
#define RTC_IO_TOUCH_PAD8_TIE_OPT_V 0x1
#define RTC_IO_TOUCH_PAD8_TIE_OPT_S 21


#define RTC_IO_TOUCH_PAD8_XPD (BIT(20))
#define RTC_IO_TOUCH_PAD8_XPD_M (BIT(20))
#define RTC_IO_TOUCH_PAD8_XPD_V 0x1
#define RTC_IO_TOUCH_PAD8_XPD_S 20


#define RTC_IO_TOUCH_PAD8_TO_GPIO (BIT(19))
#define RTC_IO_TOUCH_PAD8_TO_GPIO_M (BIT(19))
#define RTC_IO_TOUCH_PAD8_TO_GPIO_V 0x1
#define RTC_IO_TOUCH_PAD8_TO_GPIO_S 19

#define RTC_IO_TOUCH_PAD9_REG (DR_REG_RTCIO_BASE + 0xb8)


#define RTC_IO_TOUCH_PAD9_DAC 0x00000007
#define RTC_IO_TOUCH_PAD9_DAC_M ((RTC_IO_TOUCH_PAD9_DAC_V)<<(RTC_IO_TOUCH_PAD9_DAC_S))
#define RTC_IO_TOUCH_PAD9_DAC_V 0x7
#define RTC_IO_TOUCH_PAD9_DAC_S 23


#define RTC_IO_TOUCH_PAD9_START (BIT(22))
#define RTC_IO_TOUCH_PAD9_START_M (BIT(22))
#define RTC_IO_TOUCH_PAD9_START_V 0x1
#define RTC_IO_TOUCH_PAD9_START_S 22


#define RTC_IO_TOUCH_PAD9_TIE_OPT (BIT(21))
#define RTC_IO_TOUCH_PAD9_TIE_OPT_M (BIT(21))
#define RTC_IO_TOUCH_PAD9_TIE_OPT_V 0x1
#define RTC_IO_TOUCH_PAD9_TIE_OPT_S 21


#define RTC_IO_TOUCH_PAD9_XPD (BIT(20))
#define RTC_IO_TOUCH_PAD9_XPD_M (BIT(20))
#define RTC_IO_TOUCH_PAD9_XPD_V 0x1
#define RTC_IO_TOUCH_PAD9_XPD_S 20


#define RTC_IO_TOUCH_PAD9_TO_GPIO (BIT(19))
#define RTC_IO_TOUCH_PAD9_TO_GPIO_M (BIT(19))
#define RTC_IO_TOUCH_PAD9_TO_GPIO_V 0x1
#define RTC_IO_TOUCH_PAD9_TO_GPIO_S 19

#define RTC_IO_EXT_WAKEUP0_REG (DR_REG_RTCIO_BASE + 0xbc)


#define RTC_IO_EXT_WAKEUP0_SEL 0x0000001F
#define RTC_IO_EXT_WAKEUP0_SEL_M ((RTC_IO_EXT_WAKEUP0_SEL_V)<<(RTC_IO_EXT_WAKEUP0_SEL_S))
#define RTC_IO_EXT_WAKEUP0_SEL_V 0x1F
#define RTC_IO_EXT_WAKEUP0_SEL_S 27

#define RTC_IO_XTL_EXT_CTR_REG (DR_REG_RTCIO_BASE + 0xc0)




# 1915 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/rtc_io_reg.h"
#define RTC_IO_XTL_EXT_CTR_SEL 0x0000001F
#define RTC_IO_XTL_EXT_CTR_SEL_M ((RTC_IO_XTL_EXT_CTR_SEL_V)<<(RTC_IO_XTL_EXT_CTR_SEL_S))
#define RTC_IO_XTL_EXT_CTR_SEL_V 0x1F
#define RTC_IO_XTL_EXT_CTR_SEL_S 27

#define RTC_IO_SAR_I2C_IO_REG (DR_REG_RTCIO_BASE + 0xc4)


#define RTC_IO_SAR_I2C_SDA_SEL 0x00000003
#define RTC_IO_SAR_I2C_SDA_SEL_M ((RTC_IO_SAR_I2C_SDA_SEL_V)<<(RTC_IO_SAR_I2C_SDA_SEL_S))
#define RTC_IO_SAR_I2C_SDA_SEL_V 0x3
#define RTC_IO_SAR_I2C_SDA_SEL_S 30


#define RTC_IO_SAR_I2C_SCL_SEL 0x00000003
#define RTC_IO_SAR_I2C_SCL_SEL_M ((RTC_IO_SAR_I2C_SCL_SEL_V)<<(RTC_IO_SAR_I2C_SCL_SEL_S))
#define RTC_IO_SAR_I2C_SCL_SEL_V 0x3
#define RTC_IO_SAR_I2C_SCL_SEL_S 28


#define RTC_IO_SAR_DEBUG_BIT_SEL 0x0000001F
#define RTC_IO_SAR_DEBUG_BIT_SEL_M ((RTC_IO_SAR_DEBUG_BIT_SEL_V)<<(RTC_IO_SAR_DEBUG_BIT_SEL_S))
#define RTC_IO_SAR_DEBUG_BIT_SEL_V 0x1F
#define RTC_IO_SAR_DEBUG_BIT_SEL_S 23

#define RTC_IO_DATE_REG (DR_REG_RTCIO_BASE + 0xc8)


#define RTC_IO_IO_DATE 0x0FFFFFFF
#define RTC_IO_IO_DATE_M ((RTC_IO_IO_DATE_V)<<(RTC_IO_IO_DATE_S))
#define RTC_IO_IO_DATE_V 0xFFFFFFF
#define RTC_IO_IO_DATE_S 0
#define RTC_IO_RTC_IO_DATE_VERSION 0x1703160
# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/io_mux_reg.h" 1














#define _SOC_IO_MUX_REG_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/soc.h" 1













# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/io_mux_reg.h" 2



#define SLP_OE (BIT(0))
#define SLP_OE_M (BIT(0))
#define SLP_OE_V 1
#define SLP_OE_S 0

#define SLP_SEL (BIT(1))
#define SLP_SEL_M (BIT(1))
#define SLP_SEL_V 1
#define SLP_SEL_S 1

#define SLP_PD (BIT(2))
#define SLP_PD_M (BIT(2))
#define SLP_PD_V 1
#define SLP_PD_S 2

#define SLP_PU (BIT(3))
#define SLP_PU_M (BIT(3))
#define SLP_PU_V 1
#define SLP_PU_S 3

#define SLP_IE (BIT(4))
#define SLP_IE_M (BIT(4))
#define SLP_IE_V 1
#define SLP_IE_S 4

#define SLP_DRV 0x3
#define SLP_DRV_M (SLP_DRV_V << SLP_DRV_S)
#define SLP_DRV_V 0x3
#define SLP_DRV_S 5

#define FUN_PD (BIT(7))
#define FUN_PD_M (BIT(7))
#define FUN_PD_V 1
#define FUN_PD_S 7

#define FUN_PU (BIT(8))
#define FUN_PU_M (BIT(8))
#define FUN_PU_V 1
#define FUN_PU_S 8

#define FUN_IE (BIT(9))
#define FUN_IE_M (FUN_IE_V << FUN_IE_S)
#define FUN_IE_V 1
#define FUN_IE_S 9

#define FUN_DRV 0x3
#define FUN_DRV_M (FUN_DRV_V << FUN_DRV_S)
#define FUN_DRV_V 0x3
#define FUN_DRV_S 10

#define MCU_SEL 0x7
#define MCU_SEL_M (MCU_SEL_V << MCU_SEL_S)
#define MCU_SEL_V 0x7
#define MCU_SEL_S 12

#define PIN_INPUT_ENABLE(PIN_NAME) SET_PERI_REG_MASK(PIN_NAME,FUN_IE)
#define PIN_INPUT_DISABLE(PIN_NAME) CLEAR_PERI_REG_MASK(PIN_NAME,FUN_IE)
#define PIN_SET_DRV(PIN_NAME,drv) REG_SET_FIELD(PIN_NAME, FUN_DRV, (drv));


























# 93 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/io_mux_reg.h"
static inline void __attribute__ ((deprecated)) PIN_PULLUP_DIS(uint32_t PIN_NAME)
{
    ({ do { if (__builtin_constant_p(!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC)) && !(!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))) { extern __attribute__((error("(Cannot use REG_CLR_BIT for DPORT registers use DPORT_REG_CLR_BIT)"))) void failed_compile_time_assert(void); failed_compile_time_assert(); } (("(Cannot use REG_CLR_BIT for DPORT registers use DPORT_REG_CLR_BIT)" && (!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))) ? (void)0 : __assert_func ("A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/io_mux_reg.h", 95, __PRETTY_FUNCTION__, "\"(Cannot use REG_CLR_BIT for DPORT registers use DPORT_REG_CLR_BIT)\" && (!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))")); } while(0);; (*(volatile uint32_t*)(PIN_NAME) &= ~(((1UL << (8))))); });
}

static inline void __attribute__ ((deprecated)) PIN_PULLUP_EN(uint32_t PIN_NAME)
{
    ({ do { if (__builtin_constant_p(!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC)) && !(!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))) { extern __attribute__((error("(Cannot use REG_SET_BIT for DPORT registers use DPORT_REG_SET_BIT)"))) void failed_compile_time_assert(void); failed_compile_time_assert(); } (("(Cannot use REG_SET_BIT for DPORT registers use DPORT_REG_SET_BIT)" && (!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))) ? (void)0 : __assert_func ("A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/io_mux_reg.h", 100, __PRETTY_FUNCTION__, "\"(Cannot use REG_SET_BIT for DPORT registers use DPORT_REG_SET_BIT)\" && (!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))")); } while(0);; (*(volatile uint32_t*)(PIN_NAME) |= (((1UL << (8))))); });
}

static inline void __attribute__ ((deprecated)) PIN_PULLDWN_DIS(uint32_t PIN_NAME)
{
    ({ do { if (__builtin_constant_p(!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC)) && !(!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))) { extern __attribute__((error("(Cannot use REG_CLR_BIT for DPORT registers use DPORT_REG_CLR_BIT)"))) void failed_compile_time_assert(void); failed_compile_time_assert(); } (("(Cannot use REG_CLR_BIT for DPORT registers use DPORT_REG_CLR_BIT)" && (!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))) ? (void)0 : __assert_func ("A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/io_mux_reg.h", 105, __PRETTY_FUNCTION__, "\"(Cannot use REG_CLR_BIT for DPORT registers use DPORT_REG_CLR_BIT)\" && (!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))")); } while(0);; (*(volatile uint32_t*)(PIN_NAME) &= ~(((1UL << (7))))); });
}

static inline void __attribute__ ((deprecated)) PIN_PULLDWN_EN(uint32_t PIN_NAME)
{
    ({ do { if (__builtin_constant_p(!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC)) && !(!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))) { extern __attribute__((error("(Cannot use REG_SET_BIT for DPORT registers use DPORT_REG_SET_BIT)"))) void failed_compile_time_assert(void); failed_compile_time_assert(); } (("(Cannot use REG_SET_BIT for DPORT registers use DPORT_REG_SET_BIT)" && (!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))) ? (void)0 : __assert_func ("A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/io_mux_reg.h", 110, __PRETTY_FUNCTION__, "\"(Cannot use REG_SET_BIT for DPORT registers use DPORT_REG_SET_BIT)\" && (!((((PIN_NAME)) >= 0x3ff00000) && ((PIN_NAME)) <= 0x3ff13FFC))")); } while(0);; (*(volatile uint32_t*)(PIN_NAME) |= (((1UL << (7))))); });
}


#define PIN_FUNC_SELECT(PIN_NAME,FUNC) REG_SET_FIELD(PIN_NAME, MCU_SEL, FUNC)

#define PIN_FUNC_GPIO 2

#define PIN_CTRL (DR_REG_IO_MUX_BASE +0x00)
#define CLK_OUT3 0xf
#define CLK_OUT3_V CLK_OUT3
#define CLK_OUT3_S 8
#define CLK_OUT3_M (CLK_OUT3_V << CLK_OUT3_S)
#define CLK_OUT2 0xf
#define CLK_OUT2_V CLK_OUT2
#define CLK_OUT2_S 4
#define CLK_OUT2_M (CLK_OUT2_V << CLK_OUT2_S)
#define CLK_OUT1 0xf
#define CLK_OUT1_V CLK_OUT1
#define CLK_OUT1_S 0
#define CLK_OUT1_M (CLK_OUT1_V << CLK_OUT1_S)

#define PERIPHS_IO_MUX_GPIO0_U (DR_REG_IO_MUX_BASE +0x44)
#define IO_MUX_GPIO0_REG PERIPHS_IO_MUX_GPIO0_U
#define FUNC_GPIO0_EMAC_TX_CLK 5
#define FUNC_GPIO0_GPIO0 2
#define FUNC_GPIO0_CLK_OUT1 1
#define FUNC_GPIO0_GPIO0_0 0

#define PERIPHS_IO_MUX_U0TXD_U (DR_REG_IO_MUX_BASE +0x88)
#define IO_MUX_GPIO1_REG PERIPHS_IO_MUX_U0TXD_U
#define FUNC_U0TXD_EMAC_RXD2 5
#define FUNC_U0TXD_GPIO1 2
#define FUNC_U0TXD_CLK_OUT3 1
#define FUNC_U0TXD_U0TXD 0

#define PERIPHS_IO_MUX_GPIO2_U (DR_REG_IO_MUX_BASE +0x40)
#define IO_MUX_GPIO2_REG PERIPHS_IO_MUX_GPIO2_U
#define FUNC_GPIO2_SD_DATA0 4
#define FUNC_GPIO2_HS2_DATA0 3
#define FUNC_GPIO2_GPIO2 2
#define FUNC_GPIO2_HSPIWP 1
#define FUNC_GPIO2_GPIO2_0 0

#define PERIPHS_IO_MUX_U0RXD_U (DR_REG_IO_MUX_BASE +0x84)
#define IO_MUX_GPIO3_REG PERIPHS_IO_MUX_U0RXD_U
#define FUNC_U0RXD_GPIO3 2
#define FUNC_U0RXD_CLK_OUT2 1
#define FUNC_U0RXD_U0RXD 0

#define PERIPHS_IO_MUX_GPIO4_U (DR_REG_IO_MUX_BASE +0x48)
#define IO_MUX_GPIO4_REG PERIPHS_IO_MUX_GPIO4_U
#define FUNC_GPIO4_EMAC_TX_ER 5
#define FUNC_GPIO4_SD_DATA1 4
#define FUNC_GPIO4_HS2_DATA1 3
#define FUNC_GPIO4_GPIO4 2
#define FUNC_GPIO4_HSPIHD 1
#define FUNC_GPIO4_GPIO4_0 0

#define PERIPHS_IO_MUX_GPIO5_U (DR_REG_IO_MUX_BASE +0x6c)
#define IO_MUX_GPIO5_REG PERIPHS_IO_MUX_GPIO5_U
#define FUNC_GPIO5_EMAC_RX_CLK 5
#define FUNC_GPIO5_HS1_DATA6 3
#define FUNC_GPIO5_GPIO5 2
#define FUNC_GPIO5_VSPICS0 1
#define FUNC_GPIO5_GPIO5_0 0

#define PERIPHS_IO_MUX_SD_CLK_U (DR_REG_IO_MUX_BASE +0x60)
#define IO_MUX_GPIO6_REG PERIPHS_IO_MUX_SD_CLK_U
#define FUNC_SD_CLK_U1CTS 4
#define FUNC_SD_CLK_HS1_CLK 3
#define FUNC_SD_CLK_GPIO6 2
#define FUNC_SD_CLK_SPICLK 1
#define FUNC_SD_CLK_SD_CLK 0

#define PERIPHS_IO_MUX_SD_DATA0_U (DR_REG_IO_MUX_BASE +0x64)
#define IO_MUX_GPIO7_REG PERIPHS_IO_MUX_SD_DATA0_U
#define FUNC_SD_DATA0_U2RTS 4
#define FUNC_SD_DATA0_HS1_DATA0 3
#define FUNC_SD_DATA0_GPIO7 2
#define FUNC_SD_DATA0_SPIQ 1
#define FUNC_SD_DATA0_SD_DATA0 0

#define PERIPHS_IO_MUX_SD_DATA1_U (DR_REG_IO_MUX_BASE +0x68)
#define IO_MUX_GPIO8_REG PERIPHS_IO_MUX_SD_DATA1_U
#define FUNC_SD_DATA1_U2CTS 4
#define FUNC_SD_DATA1_HS1_DATA1 3
#define FUNC_SD_DATA1_GPIO8 2
#define FUNC_SD_DATA1_SPID 1
#define FUNC_SD_DATA1_SD_DATA1 0

#define PERIPHS_IO_MUX_SD_DATA2_U (DR_REG_IO_MUX_BASE +0x54)
#define IO_MUX_GPIO9_REG PERIPHS_IO_MUX_SD_DATA2_U
#define FUNC_SD_DATA2_U1RXD 4
#define FUNC_SD_DATA2_HS1_DATA2 3
#define FUNC_SD_DATA2_GPIO9 2
#define FUNC_SD_DATA2_SPIHD 1
#define FUNC_SD_DATA2_SD_DATA2 0

#define PERIPHS_IO_MUX_SD_DATA3_U (DR_REG_IO_MUX_BASE +0x58)
#define IO_MUX_GPIO10_REG PERIPHS_IO_MUX_SD_DATA3_U
#define FUNC_SD_DATA3_U1TXD 4
#define FUNC_SD_DATA3_HS1_DATA3 3
#define FUNC_SD_DATA3_GPIO10 2
#define FUNC_SD_DATA3_SPIWP 1
#define FUNC_SD_DATA3_SD_DATA3 0

#define PERIPHS_IO_MUX_SD_CMD_U (DR_REG_IO_MUX_BASE +0x5c)
#define IO_MUX_GPIO11_REG PERIPHS_IO_MUX_SD_CMD_U
#define FUNC_SD_CMD_U1RTS 4
#define FUNC_SD_CMD_HS1_CMD 3
#define FUNC_SD_CMD_GPIO11 2
#define FUNC_SD_CMD_SPICS0 1
#define FUNC_SD_CMD_SD_CMD 0

#define PERIPHS_IO_MUX_MTDI_U (DR_REG_IO_MUX_BASE +0x34)
#define IO_MUX_GPIO12_REG PERIPHS_IO_MUX_MTDI_U
#define FUNC_MTDI_EMAC_TXD3 5
#define FUNC_MTDI_SD_DATA2 4
#define FUNC_MTDI_HS2_DATA2 3
#define FUNC_MTDI_GPIO12 2
#define FUNC_MTDI_HSPIQ 1
#define FUNC_MTDI_MTDI 0

#define PERIPHS_IO_MUX_MTCK_U (DR_REG_IO_MUX_BASE +0x38)
#define IO_MUX_GPIO13_REG PERIPHS_IO_MUX_MTCK_U
#define FUNC_MTCK_EMAC_RX_ER 5
#define FUNC_MTCK_SD_DATA3 4
#define FUNC_MTCK_HS2_DATA3 3
#define FUNC_MTCK_GPIO13 2
#define FUNC_MTCK_HSPID 1
#define FUNC_MTCK_MTCK 0

#define PERIPHS_IO_MUX_MTMS_U (DR_REG_IO_MUX_BASE +0x30)
#define IO_MUX_GPIO14_REG PERIPHS_IO_MUX_MTMS_U
#define FUNC_MTMS_EMAC_TXD2 5
#define FUNC_MTMS_SD_CLK 4
#define FUNC_MTMS_HS2_CLK 3
#define FUNC_MTMS_GPIO14 2
#define FUNC_MTMS_HSPICLK 1
#define FUNC_MTMS_MTMS 0

#define PERIPHS_IO_MUX_MTDO_U (DR_REG_IO_MUX_BASE +0x3c)
#define IO_MUX_GPIO15_REG PERIPHS_IO_MUX_MTDO_U
#define FUNC_MTDO_EMAC_RXD3 5
#define FUNC_MTDO_SD_CMD 4
#define FUNC_MTDO_HS2_CMD 3
#define FUNC_MTDO_GPIO15 2
#define FUNC_MTDO_HSPICS0 1
#define FUNC_MTDO_MTDO 0

#define PERIPHS_IO_MUX_GPIO16_U (DR_REG_IO_MUX_BASE +0x4c)
#define IO_MUX_GPIO16_REG PERIPHS_IO_MUX_GPIO16_U
#define FUNC_GPIO16_EMAC_CLK_OUT 5
#define FUNC_GPIO16_U2RXD 4
#define FUNC_GPIO16_HS1_DATA4 3
#define FUNC_GPIO16_GPIO16 2
#define FUNC_GPIO16_GPIO16_0 0

#define PERIPHS_IO_MUX_GPIO17_U (DR_REG_IO_MUX_BASE +0x50)
#define IO_MUX_GPIO17_REG PERIPHS_IO_MUX_GPIO17_U
#define FUNC_GPIO17_EMAC_CLK_OUT_180 5
#define FUNC_GPIO17_U2TXD 4
#define FUNC_GPIO17_HS1_DATA5 3
#define FUNC_GPIO17_GPIO17 2
#define FUNC_GPIO17_GPIO17_0 0

#define PERIPHS_IO_MUX_GPIO18_U (DR_REG_IO_MUX_BASE +0x70)
#define IO_MUX_GPIO18_REG PERIPHS_IO_MUX_GPIO18_U
#define FUNC_GPIO18_HS1_DATA7 3
#define FUNC_GPIO18_GPIO18 2
#define FUNC_GPIO18_VSPICLK 1
#define FUNC_GPIO18_GPIO18_0 0

#define PERIPHS_IO_MUX_GPIO19_U (DR_REG_IO_MUX_BASE +0x74)
#define IO_MUX_GPIO19_REG PERIPHS_IO_MUX_GPIO19_U
#define FUNC_GPIO19_EMAC_TXD0 5
#define FUNC_GPIO19_U0CTS 3
#define FUNC_GPIO19_GPIO19 2
#define FUNC_GPIO19_VSPIQ 1
#define FUNC_GPIO19_GPIO19_0 0

#define PERIPHS_IO_MUX_GPIO20_U (DR_REG_IO_MUX_BASE +0x78)
#define IO_MUX_GPIO20_REG PERIPHS_IO_MUX_GPIO20_U
#define FUNC_GPIO20_GPIO20 2
#define FUNC_GPIO20_GPIO20_0 0

#define PERIPHS_IO_MUX_GPIO21_U (DR_REG_IO_MUX_BASE +0x7c)
#define IO_MUX_GPIO21_REG PERIPHS_IO_MUX_GPIO21_U
#define FUNC_GPIO21_EMAC_TX_EN 5
#define FUNC_GPIO21_GPIO21 2
#define FUNC_GPIO21_VSPIHD 1
#define FUNC_GPIO21_GPIO21_0 0

#define PERIPHS_IO_MUX_GPIO22_U (DR_REG_IO_MUX_BASE +0x80)
#define IO_MUX_GPIO22_REG PERIPHS_IO_MUX_GPIO22_U
#define FUNC_GPIO22_EMAC_TXD1 5
#define FUNC_GPIO22_U0RTS 3
#define FUNC_GPIO22_GPIO22 2
#define FUNC_GPIO22_VSPIWP 1
#define FUNC_GPIO22_GPIO22_0 0

#define PERIPHS_IO_MUX_GPIO23_U (DR_REG_IO_MUX_BASE +0x8c)
#define IO_MUX_GPIO23_REG PERIPHS_IO_MUX_GPIO23_U
#define FUNC_GPIO23_HS1_STROBE 3
#define FUNC_GPIO23_GPIO23 2
#define FUNC_GPIO23_VSPID 1
#define FUNC_GPIO23_GPIO23_0 0

#define PERIPHS_IO_MUX_GPIO24_U (DR_REG_IO_MUX_BASE +0x90)
#define IO_MUX_GPIO24_REG PERIPHS_IO_MUX_GPIO24_U
#define FUNC_GPIO24_GPIO24 2
#define FUNC_GPIO24_GPIO24_0 0

#define PERIPHS_IO_MUX_GPIO25_U (DR_REG_IO_MUX_BASE +0x24)
#define IO_MUX_GPIO25_REG PERIPHS_IO_MUX_GPIO25_U
#define FUNC_GPIO25_EMAC_RXD0 5
#define FUNC_GPIO25_GPIO25 2
#define FUNC_GPIO25_GPIO25_0 0

#define PERIPHS_IO_MUX_GPIO26_U (DR_REG_IO_MUX_BASE +0x28)
#define IO_MUX_GPIO26_REG PERIPHS_IO_MUX_GPIO26_U
#define FUNC_GPIO26_EMAC_RXD1 5
#define FUNC_GPIO26_GPIO26 2
#define FUNC_GPIO26_GPIO26_0 0

#define PERIPHS_IO_MUX_GPIO27_U (DR_REG_IO_MUX_BASE +0x2c)
#define IO_MUX_GPIO27_REG PERIPHS_IO_MUX_GPIO27_U
#define FUNC_GPIO27_EMAC_RX_DV 5
#define FUNC_GPIO27_GPIO27 2
#define FUNC_GPIO27_GPIO27_0 0

#define PERIPHS_IO_MUX_GPIO32_U (DR_REG_IO_MUX_BASE +0x1c)
#define IO_MUX_GPIO32_REG PERIPHS_IO_MUX_GPIO32_U
#define FUNC_GPIO32_GPIO32 2
#define FUNC_GPIO32_GPIO32_0 0

#define PERIPHS_IO_MUX_GPIO33_U (DR_REG_IO_MUX_BASE +0x20)
#define IO_MUX_GPIO33_REG PERIPHS_IO_MUX_GPIO33_U
#define FUNC_GPIO33_GPIO33 2
#define FUNC_GPIO33_GPIO33_0 0

#define PERIPHS_IO_MUX_GPIO34_U (DR_REG_IO_MUX_BASE +0x14)
#define IO_MUX_GPIO34_REG PERIPHS_IO_MUX_GPIO34_U
#define FUNC_GPIO34_GPIO34 2
#define FUNC_GPIO34_GPIO34_0 0

#define PERIPHS_IO_MUX_GPIO35_U (DR_REG_IO_MUX_BASE +0x18)
#define IO_MUX_GPIO35_REG PERIPHS_IO_MUX_GPIO35_U
#define FUNC_GPIO35_GPIO35 2
#define FUNC_GPIO35_GPIO35_0 0

#define PERIPHS_IO_MUX_GPIO36_U (DR_REG_IO_MUX_BASE +0x04)
#define IO_MUX_GPIO36_REG PERIPHS_IO_MUX_GPIO36_U
#define FUNC_GPIO36_GPIO36 2
#define FUNC_GPIO36_GPIO36_0 0

#define PERIPHS_IO_MUX_GPIO37_U (DR_REG_IO_MUX_BASE +0x08)
#define IO_MUX_GPIO37_REG PERIPHS_IO_MUX_GPIO37_U
#define FUNC_GPIO37_GPIO37 2
#define FUNC_GPIO37_GPIO37_0 0

#define PERIPHS_IO_MUX_GPIO38_U (DR_REG_IO_MUX_BASE +0x0c)
#define IO_MUX_GPIO38_REG PERIPHS_IO_MUX_GPIO38_U
#define FUNC_GPIO38_GPIO38 2
#define FUNC_GPIO38_GPIO38_0 0

#define PERIPHS_IO_MUX_GPIO39_U (DR_REG_IO_MUX_BASE +0x10)
#define IO_MUX_GPIO39_REG PERIPHS_IO_MUX_GPIO39_U
#define FUNC_GPIO39_GPIO39 2
#define FUNC_GPIO39_GPIO39_0 0
# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_sig_map.h" 1














#define _SOC_GPIO_SIG_MAP_H_ 

#define SPICLK_IN_IDX 0
#define SPICLK_OUT_IDX 0
#define SPIQ_IN_IDX 1
#define SPIQ_OUT_IDX 1
#define SPID_IN_IDX 2
#define SPID_OUT_IDX 2
#define SPIHD_IN_IDX 3
#define SPIHD_OUT_IDX 3
#define SPIWP_IN_IDX 4
#define SPIWP_OUT_IDX 4
#define SPICS0_IN_IDX 5
#define SPICS0_OUT_IDX 5
#define SPICS1_IN_IDX 6
#define SPICS1_OUT_IDX 6
#define SPICS2_IN_IDX 7
#define SPICS2_OUT_IDX 7
#define HSPICLK_IN_IDX 8
#define HSPICLK_OUT_IDX 8
#define HSPIQ_IN_IDX 9
#define HSPIQ_OUT_IDX 9
#define HSPID_IN_IDX 10
#define HSPID_OUT_IDX 10
#define HSPICS0_IN_IDX 11
#define HSPICS0_OUT_IDX 11
#define HSPIHD_IN_IDX 12
#define HSPIHD_OUT_IDX 12
#define HSPIWP_IN_IDX 13
#define HSPIWP_OUT_IDX 13
#define U0RXD_IN_IDX 14
#define U0TXD_OUT_IDX 14
#define U0CTS_IN_IDX 15
#define U0RTS_OUT_IDX 15
#define U0DSR_IN_IDX 16
#define U0DTR_OUT_IDX 16
#define U1RXD_IN_IDX 17
#define U1TXD_OUT_IDX 17
#define U1CTS_IN_IDX 18
#define U1RTS_OUT_IDX 18
#define I2CM_SCL_O_IDX 19
#define I2CM_SDA_I_IDX 20
#define I2CM_SDA_O_IDX 20
#define EXT_I2C_SCL_O_IDX 21
#define EXT_I2C_SDA_O_IDX 22
#define EXT_I2C_SDA_I_IDX 22
#define I2S0O_BCK_IN_IDX 23
#define I2S0O_BCK_OUT_IDX 23
#define I2S1O_BCK_IN_IDX 24
#define I2S1O_BCK_OUT_IDX 24
#define I2S0O_WS_IN_IDX 25
#define I2S0O_WS_OUT_IDX 25
#define I2S1O_WS_IN_IDX 26
#define I2S1O_WS_OUT_IDX 26
#define I2S0I_BCK_IN_IDX 27
#define I2S0I_BCK_OUT_IDX 27
#define I2S0I_WS_IN_IDX 28
#define I2S0I_WS_OUT_IDX 28
#define I2CEXT0_SCL_IN_IDX 29
#define I2CEXT0_SCL_OUT_IDX 29
#define I2CEXT0_SDA_IN_IDX 30
#define I2CEXT0_SDA_OUT_IDX 30
#define PWM0_SYNC0_IN_IDX 31
#define SDIO_TOHOST_INT_OUT_IDX 31
#define PWM0_SYNC1_IN_IDX 32
#define PWM0_OUT0A_IDX 32
#define PWM0_SYNC2_IN_IDX 33
#define PWM0_OUT0B_IDX 33
#define PWM0_F0_IN_IDX 34
#define PWM0_OUT1A_IDX 34
#define PWM0_F1_IN_IDX 35
#define PWM0_OUT1B_IDX 35
#define PWM0_F2_IN_IDX 36
#define PWM0_OUT2A_IDX 36
#define GPIO_BT_ACTIVE_IDX 37
#define PWM0_OUT2B_IDX 37
#define GPIO_BT_PRIORITY_IDX 38
#define PCNT_SIG_CH0_IN0_IDX 39
#define PCNT_SIG_CH1_IN0_IDX 40
#define GPIO_WLAN_ACTIVE_IDX 40
#define PCNT_CTRL_CH0_IN0_IDX 41
#define BB_DIAG0_IDX 41
#define PCNT_CTRL_CH1_IN0_IDX 42
#define BB_DIAG1_IDX 42
#define PCNT_SIG_CH0_IN1_IDX 43
#define BB_DIAG2_IDX 43
#define PCNT_SIG_CH1_IN1_IDX 44
#define BB_DIAG3_IDX 44
#define PCNT_CTRL_CH0_IN1_IDX 45
#define BB_DIAG4_IDX 45
#define PCNT_CTRL_CH1_IN1_IDX 46
#define BB_DIAG5_IDX 46
#define PCNT_SIG_CH0_IN2_IDX 47
#define BB_DIAG6_IDX 47
#define PCNT_SIG_CH1_IN2_IDX 48
#define BB_DIAG7_IDX 48
#define PCNT_CTRL_CH0_IN2_IDX 49
#define BB_DIAG8_IDX 49
#define PCNT_CTRL_CH1_IN2_IDX 50
#define BB_DIAG9_IDX 50
#define PCNT_SIG_CH0_IN3_IDX 51
#define BB_DIAG10_IDX 51
#define PCNT_SIG_CH1_IN3_IDX 52
#define BB_DIAG11_IDX 52
#define PCNT_CTRL_CH0_IN3_IDX 53
#define BB_DIAG12_IDX 53
#define PCNT_CTRL_CH1_IN3_IDX 54
#define BB_DIAG13_IDX 54
#define PCNT_SIG_CH0_IN4_IDX 55
#define BB_DIAG14_IDX 55
#define PCNT_SIG_CH1_IN4_IDX 56
#define BB_DIAG15_IDX 56
#define PCNT_CTRL_CH0_IN4_IDX 57
#define BB_DIAG16_IDX 57
#define PCNT_CTRL_CH1_IN4_IDX 58
#define BB_DIAG17_IDX 58
#define BB_DIAG18_IDX 59
#define BB_DIAG19_IDX 60
#define HSPICS1_IN_IDX 61
#define HSPICS1_OUT_IDX 61
#define HSPICS2_IN_IDX 62
#define HSPICS2_OUT_IDX 62
#define VSPICLK_IN_IDX 63
#define VSPICLK_OUT_IDX 63
#define VSPIQ_IN_IDX 64
#define VSPIQ_OUT_IDX 64
#define VSPID_IN_IDX 65
#define VSPID_OUT_IDX 65
#define VSPIHD_IN_IDX 66
#define VSPIHD_OUT_IDX 66
#define VSPIWP_IN_IDX 67
#define VSPIWP_OUT_IDX 67
#define VSPICS0_IN_IDX 68
#define VSPICS0_OUT_IDX 68
#define VSPICS1_IN_IDX 69
#define VSPICS1_OUT_IDX 69
#define VSPICS2_IN_IDX 70
#define VSPICS2_OUT_IDX 70
#define PCNT_SIG_CH0_IN5_IDX 71
#define LEDC_HS_SIG_OUT0_IDX 71
#define PCNT_SIG_CH1_IN5_IDX 72
#define LEDC_HS_SIG_OUT1_IDX 72
#define PCNT_CTRL_CH0_IN5_IDX 73
#define LEDC_HS_SIG_OUT2_IDX 73
#define PCNT_CTRL_CH1_IN5_IDX 74
#define LEDC_HS_SIG_OUT3_IDX 74
#define PCNT_SIG_CH0_IN6_IDX 75
#define LEDC_HS_SIG_OUT4_IDX 75
#define PCNT_SIG_CH1_IN6_IDX 76
#define LEDC_HS_SIG_OUT5_IDX 76
#define PCNT_CTRL_CH0_IN6_IDX 77
#define LEDC_HS_SIG_OUT6_IDX 77
#define PCNT_CTRL_CH1_IN6_IDX 78
#define LEDC_HS_SIG_OUT7_IDX 78
#define PCNT_SIG_CH0_IN7_IDX 79
#define LEDC_LS_SIG_OUT0_IDX 79
#define PCNT_SIG_CH1_IN7_IDX 80
#define LEDC_LS_SIG_OUT1_IDX 80
#define PCNT_CTRL_CH0_IN7_IDX 81
#define LEDC_LS_SIG_OUT2_IDX 81
#define PCNT_CTRL_CH1_IN7_IDX 82
#define LEDC_LS_SIG_OUT3_IDX 82
#define RMT_SIG_IN0_IDX 83
#define LEDC_LS_SIG_OUT4_IDX 83
#define RMT_SIG_IN1_IDX 84
#define LEDC_LS_SIG_OUT5_IDX 84
#define RMT_SIG_IN2_IDX 85
#define LEDC_LS_SIG_OUT6_IDX 85
#define RMT_SIG_IN3_IDX 86
#define LEDC_LS_SIG_OUT7_IDX 86
#define RMT_SIG_IN4_IDX 87
#define RMT_SIG_OUT0_IDX 87
#define RMT_SIG_IN5_IDX 88
#define RMT_SIG_OUT1_IDX 88
#define RMT_SIG_IN6_IDX 89
#define RMT_SIG_OUT2_IDX 89
#define RMT_SIG_IN7_IDX 90
#define RMT_SIG_OUT3_IDX 90
#define RMT_SIG_OUT4_IDX 91
#define RMT_SIG_OUT5_IDX 92
#define EXT_ADC_START_IDX 93
#define RMT_SIG_OUT6_IDX 93
#define CAN_RX_IDX 94
#define RMT_SIG_OUT7_IDX 94
#define I2CEXT1_SCL_IN_IDX 95
#define I2CEXT1_SCL_OUT_IDX 95
#define I2CEXT1_SDA_IN_IDX 96
#define I2CEXT1_SDA_OUT_IDX 96
#define HOST_CARD_DETECT_N_1_IDX 97
#define HOST_CCMD_OD_PULLUP_EN_N_IDX 97
#define HOST_CARD_DETECT_N_2_IDX 98
#define HOST_RST_N_1_IDX 98
#define HOST_CARD_WRITE_PRT_1_IDX 99
#define HOST_RST_N_2_IDX 99
#define HOST_CARD_WRITE_PRT_2_IDX 100
#define GPIO_SD0_OUT_IDX 100
#define HOST_CARD_INT_N_1_IDX 101
#define GPIO_SD1_OUT_IDX 101
#define HOST_CARD_INT_N_2_IDX 102
#define GPIO_SD2_OUT_IDX 102
#define PWM1_SYNC0_IN_IDX 103
#define GPIO_SD3_OUT_IDX 103
#define PWM1_SYNC1_IN_IDX 104
#define GPIO_SD4_OUT_IDX 104
#define PWM1_SYNC2_IN_IDX 105
#define GPIO_SD5_OUT_IDX 105
#define PWM1_F0_IN_IDX 106
#define GPIO_SD6_OUT_IDX 106
#define PWM1_F1_IN_IDX 107
#define GPIO_SD7_OUT_IDX 107
#define PWM1_F2_IN_IDX 108
#define PWM1_OUT0A_IDX 108
#define PWM0_CAP0_IN_IDX 109
#define PWM1_OUT0B_IDX 109
#define PWM0_CAP1_IN_IDX 110
#define PWM1_OUT1A_IDX 110
#define PWM0_CAP2_IN_IDX 111
#define PWM1_OUT1B_IDX 111
#define PWM1_CAP0_IN_IDX 112
#define PWM1_OUT2A_IDX 112
#define PWM1_CAP1_IN_IDX 113
#define PWM1_OUT2B_IDX 113
#define PWM1_CAP2_IN_IDX 114
#define PWM2_OUT1H_IDX 114
#define PWM2_FLTA_IDX 115
#define PWM2_OUT1L_IDX 115
#define PWM2_FLTB_IDX 116
#define PWM2_OUT2H_IDX 116
#define PWM2_CAP1_IN_IDX 117
#define PWM2_OUT2L_IDX 117
#define PWM2_CAP2_IN_IDX 118
#define PWM2_OUT3H_IDX 118
#define PWM2_CAP3_IN_IDX 119
#define PWM2_OUT3L_IDX 119
#define PWM3_FLTA_IDX 120
#define PWM2_OUT4H_IDX 120
#define PWM3_FLTB_IDX 121
#define PWM2_OUT4L_IDX 121
#define PWM3_CAP1_IN_IDX 122
#define PWM3_CAP2_IN_IDX 123
#define CAN_TX_IDX 123
#define PWM3_CAP3_IN_IDX 124
#define CAN_BUS_OFF_ON_IDX 124
#define CAN_CLKOUT_IDX 125
#define SPID4_IN_IDX 128
#define SPID4_OUT_IDX 128
#define SPID5_IN_IDX 129
#define SPID5_OUT_IDX 129
#define SPID6_IN_IDX 130
#define SPID6_OUT_IDX 130
#define SPID7_IN_IDX 131
#define SPID7_OUT_IDX 131
#define HSPID4_IN_IDX 132
#define HSPID4_OUT_IDX 132
#define HSPID5_IN_IDX 133
#define HSPID5_OUT_IDX 133
#define HSPID6_IN_IDX 134
#define HSPID6_OUT_IDX 134
#define HSPID7_IN_IDX 135
#define HSPID7_OUT_IDX 135
#define VSPID4_IN_IDX 136
#define VSPID4_OUT_IDX 136
#define VSPID5_IN_IDX 137
#define VSPID5_OUT_IDX 137
#define VSPID6_IN_IDX 138
#define VSPID6_OUT_IDX 138
#define VSPID7_IN_IDX 139
#define VSPID7_OUT_IDX 139
#define I2S0I_DATA_IN0_IDX 140
#define I2S0O_DATA_OUT0_IDX 140
#define I2S0I_DATA_IN1_IDX 141
#define I2S0O_DATA_OUT1_IDX 141
#define I2S0I_DATA_IN2_IDX 142
#define I2S0O_DATA_OUT2_IDX 142
#define I2S0I_DATA_IN3_IDX 143
#define I2S0O_DATA_OUT3_IDX 143
#define I2S0I_DATA_IN4_IDX 144
#define I2S0O_DATA_OUT4_IDX 144
#define I2S0I_DATA_IN5_IDX 145
#define I2S0O_DATA_OUT5_IDX 145
#define I2S0I_DATA_IN6_IDX 146
#define I2S0O_DATA_OUT6_IDX 146
#define I2S0I_DATA_IN7_IDX 147
#define I2S0O_DATA_OUT7_IDX 147
#define I2S0I_DATA_IN8_IDX 148
#define I2S0O_DATA_OUT8_IDX 148
#define I2S0I_DATA_IN9_IDX 149
#define I2S0O_DATA_OUT9_IDX 149
#define I2S0I_DATA_IN10_IDX 150
#define I2S0O_DATA_OUT10_IDX 150
#define I2S0I_DATA_IN11_IDX 151
#define I2S0O_DATA_OUT11_IDX 151
#define I2S0I_DATA_IN12_IDX 152
#define I2S0O_DATA_OUT12_IDX 152
#define I2S0I_DATA_IN13_IDX 153
#define I2S0O_DATA_OUT13_IDX 153
#define I2S0I_DATA_IN14_IDX 154
#define I2S0O_DATA_OUT14_IDX 154
#define I2S0I_DATA_IN15_IDX 155
#define I2S0O_DATA_OUT15_IDX 155
#define I2S0O_DATA_OUT16_IDX 156
#define I2S0O_DATA_OUT17_IDX 157
#define I2S0O_DATA_OUT18_IDX 158
#define I2S0O_DATA_OUT19_IDX 159
#define I2S0O_DATA_OUT20_IDX 160
#define I2S0O_DATA_OUT21_IDX 161
#define I2S0O_DATA_OUT22_IDX 162
#define I2S0O_DATA_OUT23_IDX 163
#define I2S1I_BCK_IN_IDX 164
#define I2S1I_BCK_OUT_IDX 164
#define I2S1I_WS_IN_IDX 165
#define I2S1I_WS_OUT_IDX 165
#define I2S1I_DATA_IN0_IDX 166
#define I2S1O_DATA_OUT0_IDX 166
#define I2S1I_DATA_IN1_IDX 167
#define I2S1O_DATA_OUT1_IDX 167
#define I2S1I_DATA_IN2_IDX 168
#define I2S1O_DATA_OUT2_IDX 168
#define I2S1I_DATA_IN3_IDX 169
#define I2S1O_DATA_OUT3_IDX 169
#define I2S1I_DATA_IN4_IDX 170
#define I2S1O_DATA_OUT4_IDX 170
#define I2S1I_DATA_IN5_IDX 171
#define I2S1O_DATA_OUT5_IDX 171
#define I2S1I_DATA_IN6_IDX 172
#define I2S1O_DATA_OUT6_IDX 172
#define I2S1I_DATA_IN7_IDX 173
#define I2S1O_DATA_OUT7_IDX 173
#define I2S1I_DATA_IN8_IDX 174
#define I2S1O_DATA_OUT8_IDX 174
#define I2S1I_DATA_IN9_IDX 175
#define I2S1O_DATA_OUT9_IDX 175
#define I2S1I_DATA_IN10_IDX 176
#define I2S1O_DATA_OUT10_IDX 176
#define I2S1I_DATA_IN11_IDX 177
#define I2S1O_DATA_OUT11_IDX 177
#define I2S1I_DATA_IN12_IDX 178
#define I2S1O_DATA_OUT12_IDX 178
#define I2S1I_DATA_IN13_IDX 179
#define I2S1O_DATA_OUT13_IDX 179
#define I2S1I_DATA_IN14_IDX 180
#define I2S1O_DATA_OUT14_IDX 180
#define I2S1I_DATA_IN15_IDX 181
#define I2S1O_DATA_OUT15_IDX 181
#define I2S1O_DATA_OUT16_IDX 182
#define I2S1O_DATA_OUT17_IDX 183
#define I2S1O_DATA_OUT18_IDX 184
#define I2S1O_DATA_OUT19_IDX 185
#define I2S1O_DATA_OUT20_IDX 186
#define I2S1O_DATA_OUT21_IDX 187
#define I2S1O_DATA_OUT22_IDX 188
#define I2S1O_DATA_OUT23_IDX 189
#define I2S0I_H_SYNC_IDX 190
#define PWM3_OUT1H_IDX 190
#define I2S0I_V_SYNC_IDX 191
#define PWM3_OUT1L_IDX 191
#define I2S0I_H_ENABLE_IDX 192
#define PWM3_OUT2H_IDX 192
#define I2S1I_H_SYNC_IDX 193
#define PWM3_OUT2L_IDX 193
#define I2S1I_V_SYNC_IDX 194
#define PWM3_OUT3H_IDX 194
#define I2S1I_H_ENABLE_IDX 195
#define PWM3_OUT3L_IDX 195
#define PWM3_OUT4H_IDX 196
#define PWM3_OUT4L_IDX 197
#define U2RXD_IN_IDX 198
#define U2TXD_OUT_IDX 198
#define U2CTS_IN_IDX 199
#define U2RTS_OUT_IDX 199
#define EMAC_MDC_I_IDX 200
#define EMAC_MDC_O_IDX 200
#define EMAC_MDI_I_IDX 201
#define EMAC_MDO_O_IDX 201
#define EMAC_CRS_I_IDX 202
#define EMAC_CRS_O_IDX 202
#define EMAC_COL_I_IDX 203
#define EMAC_COL_O_IDX 203
#define PCMFSYNC_IN_IDX 204
#define BT_AUDIO0_IRQ_IDX 204
#define PCMCLK_IN_IDX 205
#define BT_AUDIO1_IRQ_IDX 205
#define PCMDIN_IDX 206
#define BT_AUDIO2_IRQ_IDX 206
#define BLE_AUDIO0_IRQ_IDX 207
#define BLE_AUDIO1_IRQ_IDX 208
#define BLE_AUDIO2_IRQ_IDX 209
#define PCMFSYNC_OUT_IDX 210
#define PCMCLK_OUT_IDX 211
#define PCMDOUT_IDX 212
#define BLE_AUDIO_SYNC0_P_IDX 213
#define BLE_AUDIO_SYNC1_P_IDX 214
#define BLE_AUDIO_SYNC2_P_IDX 215
#define ANT_SEL0_IDX 216
#define ANT_SEL1_IDX 217
#define ANT_SEL2_IDX 218
#define ANT_SEL3_IDX 219
#define ANT_SEL4_IDX 220
#define ANT_SEL5_IDX 221
#define ANT_SEL6_IDX 222
#define ANT_SEL7_IDX 223
#define SIG_IN_FUNC224_IDX 224
#define SIG_IN_FUNC225_IDX 225
#define SIG_IN_FUNC226_IDX 226
#define SIG_IN_FUNC227_IDX 227
#define SIG_IN_FUNC228_IDX 228
#define SIG_GPIO_OUT_IDX 256
# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h" 1















#define _ROM_GPIO_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_attr.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_attr.h"













# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h" 1













# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_pins.h" 1















#define _GPIO_PINS_H 

extern "C"
{


#define GPIO_PIN_COUNT 40


}
# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h" 2


extern "C" {







# 33 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"





# 37 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
#define GPIO_REG_READ(reg) READ_PERI_REG(reg)
#define GPIO_REG_WRITE(reg,val) WRITE_PERI_REG(reg, val)
#define GPIO_ID_PIN0 0
#define GPIO_ID_PIN(n) (GPIO_ID_PIN0+(n))
#define GPIO_PIN_ADDR(i) (GPIO_PIN0_REG + i*4)

#define GPIO_FUNC_IN_HIGH 0x38
#define GPIO_FUNC_IN_LOW 0x30

#define GPIO_ID_IS_PIN_REGISTER(reg_id) ((reg_id >= GPIO_ID_PIN0) && (reg_id <= GPIO_ID_PIN(GPIO_PIN_COUNT-1)))


#define GPIO_REGID_TO_PINIDX(reg_id) ((reg_id) - GPIO_ID_PIN0)

typedef enum {
    GPIO_PIN_INTR_DISABLE = 0,
    GPIO_PIN_INTR_POSEDGE = 1,
    GPIO_PIN_INTR_NEGEDGE = 2,
    GPIO_PIN_INTR_ANYEDGE = 3,
    GPIO_PIN_INTR_LOLEVEL = 4,
    GPIO_PIN_INTR_HILEVEL = 5
} GPIO_INT_TYPE;

#define GPIO_OUTPUT_SET(gpio_no,bit_value) ((gpio_no < 32) ? gpio_output_set(bit_value<<gpio_no, (bit_value ? 0 : 1)<<gpio_no, 1<<gpio_no,0) : gpio_output_set_high(bit_value<<(gpio_no - 32), (bit_value ? 0 : 1)<<(gpio_no - 32), 1<<(gpio_no -32),0))


#define GPIO_DIS_OUTPUT(gpio_no) ((gpio_no < 32) ? gpio_output_set(0,0,0, 1<<gpio_no) : gpio_output_set_high(0,0,0, 1<<(gpio_no - 32)))
#define GPIO_INPUT_GET(gpio_no) ((gpio_no < 32) ? ((gpio_input_get()>>gpio_no)&BIT0) : ((gpio_input_get_high()>>(gpio_no - 32))&BIT0))


typedef void (* gpio_intr_handler_fn_t)(uint32_t intr_mask, bool high, void *arg);


















# 78 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_init(void);






























# 95 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_output_set(uint32_t set_mask, uint32_t clear_mask, uint32_t enable_mask, uint32_t disable_mask);






























# 112 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_output_set_high(uint32_t set_mask, uint32_t clear_mask, uint32_t enable_mask, uint32_t disable_mask);














# 121 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
uint32_t gpio_input_get(void);














# 130 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
uint32_t gpio_input_get_high(void);






















# 143 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_intr_handler_register(gpio_intr_handler_fn_t fn, void *arg);
















# 153 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
uint32_t gpio_intr_pending(void);
















# 163 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
uint32_t gpio_intr_pending_high(void);
















# 173 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_intr_ack(uint32_t ack_mask);
















# 183 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_intr_ack_high(uint32_t ack_mask);




















# 195 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_pin_wakeup_enable(uint32_t i, GPIO_INT_TYPE intr_state);
















# 205 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_pin_wakeup_disable(void);




























# 221 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_matrix_in(uint32_t gpio, uint32_t signal_idx, bool inv);




























# 237 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_matrix_out(uint32_t gpio, uint32_t signal_idx, bool out_inv, bool oen_inv);














# 246 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_pad_select_gpio(uint8_t gpio_num);


















# 257 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_pad_set_drv(uint8_t gpio_num, uint8_t drv);














# 266 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_pad_pullup(uint8_t gpio_num);














# 275 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_pad_pulldown(uint8_t gpio_num);














# 284 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_pad_unhold(uint8_t gpio_num);














# 293 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/gpio.h"
void gpio_pad_hold(uint8_t gpio_num);






}
# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_attr.h" 1













# 26 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h" 1















#define __ESP_INTR_ALLOC_H__ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h" 2




# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
extern "C" {



















# 39 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"

#define ESP_INTR_FLAG_LEVEL1 (1<<1) 
#define ESP_INTR_FLAG_LEVEL2 (1<<2) 
#define ESP_INTR_FLAG_LEVEL3 (1<<3) 
#define ESP_INTR_FLAG_LEVEL4 (1<<4) 
#define ESP_INTR_FLAG_LEVEL5 (1<<5) 
#define ESP_INTR_FLAG_LEVEL6 (1<<6) 
#define ESP_INTR_FLAG_NMI (1<<7) 
#define ESP_INTR_FLAG_SHARED (1<<8) 
#define ESP_INTR_FLAG_EDGE (1<<9) 
#define ESP_INTR_FLAG_IRAM (1<<10) 
#define ESP_INTR_FLAG_INTRDISABLED (1<<11) 

#define ESP_INTR_FLAG_LOWMED (ESP_INTR_FLAG_LEVEL1|ESP_INTR_FLAG_LEVEL2|ESP_INTR_FLAG_LEVEL3) 
#define ESP_INTR_FLAG_HIGH (ESP_INTR_FLAG_LEVEL4|ESP_INTR_FLAG_LEVEL5|ESP_INTR_FLAG_LEVEL6|ESP_INTR_FLAG_NMI) 

#define ESP_INTR_FLAG_LEVELMASK (ESP_INTR_FLAG_LEVEL1|ESP_INTR_FLAG_LEVEL2|ESP_INTR_FLAG_LEVEL3| ESP_INTR_FLAG_LEVEL4|ESP_INTR_FLAG_LEVEL5|ESP_INTR_FLAG_LEVEL6| ESP_INTR_FLAG_NMI) 










# 65 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"











# 71 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
#define ETS_INTERNAL_TIMER0_INTR_SOURCE -1 
#define ETS_INTERNAL_TIMER1_INTR_SOURCE -2 
#define ETS_INTERNAL_TIMER2_INTR_SOURCE -3 
#define ETS_INTERNAL_SW0_INTR_SOURCE -4 
#define ETS_INTERNAL_SW1_INTR_SOURCE -5 
#define ETS_INTERNAL_PROFILING_INTR_SOURCE -6 




#define ETS_INTERNAL_INTR_SOURCE_OFF (-ETS_INTERNAL_PROFILING_INTR_SOURCE)

typedef void (*intr_handler_t)(void *arg);


typedef struct intr_handle_data_t intr_handle_data_t;
typedef intr_handle_data_t* intr_handle_t ;






























# 104 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
esp_err_t esp_intr_mark_shared(int intno, int cpu, bool is_in_iram);
























# 118 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
esp_err_t esp_intr_reserve(int intno, int cpu);


































































# 153 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
esp_err_t esp_intr_alloc(int source, int flags, intr_handler_t handler, void *arg, intr_handle_t *ret_handle);







































































# 191 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
esp_err_t esp_intr_alloc_intrstatus(int source, int flags, uint32_t intrstatusreg, uint32_t intrstatusmask, intr_handler_t handler, void *arg, intr_handle_t *ret_handle);





































# 212 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
esp_err_t esp_intr_free(intr_handle_t handle);















# 222 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
int esp_intr_get_cpu(intr_handle_t handle);














# 231 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
int esp_intr_get_intno(intr_handle_t handle);
































# 249 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
esp_err_t esp_intr_disable(intr_handle_t handle);






















# 262 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
esp_err_t esp_intr_enable(intr_handle_t handle);
























# 276 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
esp_err_t esp_intr_set_in_iram(intr_handle_t handle, bool is_in_iram);






# 281 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
void esp_intr_noniram_disable();







# 287 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h"
void esp_intr_noniram_enable();





}
# 27 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_periph.h" 1















#define _SOC_GPIO_PERIPH_H 
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_periph.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_pins.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_periph.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/io_mux_reg.h" 1













# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_periph.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_struct.h" 1













# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_periph.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h" 1













# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_periph.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_sig_map.h" 1













# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_periph.h" 2


extern "C"
{


extern const uint32_t GPIO_PIN_MUX_REG[40];


}
# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 2


extern "C" {


#define GPIO_SEL_0 (BIT(0)) 
#define GPIO_SEL_1 (BIT(1)) 
#define GPIO_SEL_2 (BIT(2)) 
















#define GPIO_SEL_3 (BIT(3)) 
#define GPIO_SEL_4 (BIT(4)) 
#define GPIO_SEL_5 (BIT(5)) 
#define GPIO_SEL_6 (BIT(6)) 
#define GPIO_SEL_7 (BIT(7)) 
#define GPIO_SEL_8 (BIT(8)) 
#define GPIO_SEL_9 (BIT(9)) 
#define GPIO_SEL_10 (BIT(10)) 
#define GPIO_SEL_11 (BIT(11)) 
#define GPIO_SEL_12 (BIT(12)) 
#define GPIO_SEL_13 (BIT(13)) 
#define GPIO_SEL_14 (BIT(14)) 
#define GPIO_SEL_15 (BIT(15)) 
#define GPIO_SEL_16 (BIT(16)) 
#define GPIO_SEL_17 (BIT(17)) 
#define GPIO_SEL_18 (BIT(18)) 
#define GPIO_SEL_19 (BIT(19)) 

#define GPIO_SEL_21 (BIT(21)) 
#define GPIO_SEL_22 (BIT(22)) 
#define GPIO_SEL_23 (BIT(23)) 

#define GPIO_SEL_25 (BIT(25)) 
#define GPIO_SEL_26 (BIT(26)) 
#define GPIO_SEL_27 (BIT(27)) 

#define GPIO_SEL_32 ((uint64_t)(((uint64_t)1)<<32)) 
#define GPIO_SEL_33 ((uint64_t)(((uint64_t)1)<<33)) 
#define GPIO_SEL_34 ((uint64_t)(((uint64_t)1)<<34)) 
#define GPIO_SEL_35 ((uint64_t)(((uint64_t)1)<<35)) 
#define GPIO_SEL_36 ((uint64_t)(((uint64_t)1)<<36)) 
#define GPIO_SEL_37 ((uint64_t)(((uint64_t)1)<<37)) 
#define GPIO_SEL_38 ((uint64_t)(((uint64_t)1)<<38)) 
#define GPIO_SEL_39 ((uint64_t)(((uint64_t)1)<<39)) 

#define GPIO_PIN_REG_0 IO_MUX_GPIO0_REG
#define GPIO_PIN_REG_1 IO_MUX_GPIO1_REG
#define GPIO_PIN_REG_2 IO_MUX_GPIO2_REG
#define GPIO_PIN_REG_3 IO_MUX_GPIO3_REG
#define GPIO_PIN_REG_4 IO_MUX_GPIO4_REG
#define GPIO_PIN_REG_5 IO_MUX_GPIO5_REG
#define GPIO_PIN_REG_6 IO_MUX_GPIO6_REG
#define GPIO_PIN_REG_7 IO_MUX_GPIO7_REG
#define GPIO_PIN_REG_8 IO_MUX_GPIO8_REG
#define GPIO_PIN_REG_9 IO_MUX_GPIO9_REG
#define GPIO_PIN_REG_10 IO_MUX_GPIO10_REG
#define GPIO_PIN_REG_11 IO_MUX_GPIO11_REG
#define GPIO_PIN_REG_12 IO_MUX_GPIO12_REG
#define GPIO_PIN_REG_13 IO_MUX_GPIO13_REG
#define GPIO_PIN_REG_14 IO_MUX_GPIO14_REG
#define GPIO_PIN_REG_15 IO_MUX_GPIO15_REG
#define GPIO_PIN_REG_16 IO_MUX_GPIO16_REG
#define GPIO_PIN_REG_17 IO_MUX_GPIO17_REG
#define GPIO_PIN_REG_18 IO_MUX_GPIO18_REG
#define GPIO_PIN_REG_19 IO_MUX_GPIO19_REG
#define GPIO_PIN_REG_20 IO_MUX_GPIO20_REG
#define GPIO_PIN_REG_21 IO_MUX_GPIO21_REG
#define GPIO_PIN_REG_22 IO_MUX_GPIO22_REG
#define GPIO_PIN_REG_23 IO_MUX_GPIO23_REG
#define GPIO_PIN_REG_25 IO_MUX_GPIO25_REG
#define GPIO_PIN_REG_26 IO_MUX_GPIO26_REG
#define GPIO_PIN_REG_27 IO_MUX_GPIO27_REG
#define GPIO_PIN_REG_32 IO_MUX_GPIO32_REG
#define GPIO_PIN_REG_33 IO_MUX_GPIO33_REG
#define GPIO_PIN_REG_34 IO_MUX_GPIO34_REG
#define GPIO_PIN_REG_35 IO_MUX_GPIO35_REG
#define GPIO_PIN_REG_36 IO_MUX_GPIO36_REG
#define GPIO_PIN_REG_37 IO_MUX_GPIO37_REG
#define GPIO_PIN_REG_38 IO_MUX_GPIO38_REG
#define GPIO_PIN_REG_39 IO_MUX_GPIO39_REG

#define GPIO_APP_CPU_INTR_ENA (BIT(0))
#define GPIO_APP_CPU_NMI_INTR_ENA (BIT(1))
#define GPIO_PRO_CPU_INTR_ENA (BIT(2))
#define GPIO_PRO_CPU_NMI_INTR_ENA (BIT(3))
#define GPIO_SDIO_EXT_INTR_ENA (BIT(4))

#define GPIO_MODE_DEF_DISABLE (0)
#define GPIO_MODE_DEF_INPUT (BIT0)
#define GPIO_MODE_DEF_OUTPUT (BIT1)
#define GPIO_MODE_DEF_OD (BIT2)




#define GPIO_IS_VALID_GPIO(gpio_num) ((gpio_num < GPIO_PIN_COUNT && GPIO_PIN_MUX_REG[gpio_num] != 0)) 
#define GPIO_IS_VALID_OUTPUT_GPIO(gpio_num) ((GPIO_IS_VALID_GPIO(gpio_num)) && (gpio_num < 34)) 

typedef enum {
    GPIO_NUM_0 = 0, 
    GPIO_NUM_1 = 1, 
    GPIO_NUM_2 = 2, 








# 138 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"

    GPIO_NUM_3 = 3, 
    GPIO_NUM_4 = 4, 
    GPIO_NUM_5 = 5, 
    GPIO_NUM_6 = 6, 
    GPIO_NUM_7 = 7, 
    GPIO_NUM_8 = 8, 
    GPIO_NUM_9 = 9, 
    GPIO_NUM_10 = 10, 
    GPIO_NUM_11 = 11, 
    GPIO_NUM_12 = 12, 
    GPIO_NUM_13 = 13, 
    GPIO_NUM_14 = 14, 
    GPIO_NUM_15 = 15, 
    GPIO_NUM_16 = 16, 
    GPIO_NUM_17 = 17, 
    GPIO_NUM_18 = 18, 
    GPIO_NUM_19 = 19, 

    GPIO_NUM_21 = 21, 
    GPIO_NUM_22 = 22, 
    GPIO_NUM_23 = 23, 

    GPIO_NUM_25 = 25, 
    GPIO_NUM_26 = 26, 
    GPIO_NUM_27 = 27, 

    GPIO_NUM_32 = 32, 
    GPIO_NUM_33 = 33, 
    GPIO_NUM_34 = 34, 
    GPIO_NUM_35 = 35, 
    GPIO_NUM_36 = 36, 
    GPIO_NUM_37 = 37, 
    GPIO_NUM_38 = 38, 
    GPIO_NUM_39 = 39, 
    GPIO_NUM_MAX = 40,

} gpio_num_t;

typedef enum {
    GPIO_INTR_DISABLE = 0, 
    GPIO_INTR_POSEDGE = 1, 
    GPIO_INTR_NEGEDGE = 2, 
    GPIO_INTR_ANYEDGE = 3, 
    GPIO_INTR_LOW_LEVEL = 4, 
    GPIO_INTR_HIGH_LEVEL = 5, 
    GPIO_INTR_MAX,
} gpio_int_type_t;

typedef enum {
    GPIO_MODE_DISABLE = (0), 
    GPIO_MODE_INPUT = (0x00000001), 
    GPIO_MODE_OUTPUT = (0x00000002), 
    GPIO_MODE_OUTPUT_OD = (((0x00000002))|((0x00000004))), 
    GPIO_MODE_INPUT_OUTPUT_OD = (((0x00000001))|((0x00000002))|((0x00000004))), 
    GPIO_MODE_INPUT_OUTPUT = (((0x00000001))|((0x00000002))), 
} gpio_mode_t;

typedef enum {
    GPIO_PULLUP_DISABLE = 0x0, 
    GPIO_PULLUP_ENABLE = 0x1, 
} gpio_pullup_t;

typedef enum {
    GPIO_PULLDOWN_DISABLE = 0x0, 
    GPIO_PULLDOWN_ENABLE = 0x1, 
} gpio_pulldown_t;






# 209 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
typedef struct {
    uint64_t pin_bit_mask; 
    gpio_mode_t mode; 
    gpio_pullup_t pull_up_en; 
    gpio_pulldown_t pull_down_en; 
    gpio_int_type_t intr_type; 
} gpio_config_t;

typedef enum {
    GPIO_PULLUP_ONLY, 
    GPIO_PULLDOWN_ONLY, 
    GPIO_PULLUP_PULLDOWN, 
    GPIO_FLOATING, 
} gpio_pull_mode_t;

typedef enum {
    GPIO_DRIVE_CAP_0 = 0, 
    GPIO_DRIVE_CAP_1 = 1, 
    GPIO_DRIVE_CAP_2 = 2, 
    GPIO_DRIVE_CAP_DEFAULT = 2, 
    GPIO_DRIVE_CAP_3 = 3, 
    GPIO_DRIVE_CAP_MAX,
} gpio_drive_cap_t;

typedef void (*gpio_isr_t)(void*);
typedef intr_handle_t gpio_isr_handle_t;
























# 248 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_config(const gpio_config_t *pGPIOConfig);






















# 261 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_reset_pin(gpio_num_t gpio_num);






















# 274 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_set_intr_type(gpio_num_t gpio_num, gpio_int_type_t intr_type);
































# 292 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_intr_enable(gpio_num_t gpio_num);




















# 304 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_intr_disable(gpio_num_t gpio_num);






















# 317 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_set_level(gpio_num_t gpio_num, uint32_t level);
























# 331 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
int gpio_get_level(gpio_num_t gpio_num);


























# 346 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_set_direction(gpio_num_t gpio_num, gpio_mode_t mode);


























# 361 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_set_pull_mode(gpio_num_t gpio_num, gpio_pull_mode_t pull);






















# 374 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_wakeup_enable(gpio_num_t gpio_num, gpio_int_type_t intr_type);


















# 385 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_wakeup_disable(gpio_num_t gpio_num);
















































# 411 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_isr_register(void (*fn)(void*), void * arg, int intr_alloc_flags, gpio_isr_handle_t *handle);


















# 422 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_pullup_en(gpio_num_t gpio_num);


















# 433 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_pullup_dis(gpio_num_t gpio_num);


















# 444 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_pulldown_en(gpio_num_t gpio_num);


















# 455 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_pulldown_dis(gpio_num_t gpio_num);






























# 472 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_install_isr_service(int intr_alloc_flags);






# 477 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
void gpio_uninstall_isr_service();
















































# 503 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_isr_handler_add(gpio_num_t gpio_num, gpio_isr_t isr_handler, void* args);




















# 515 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_isr_handler_remove(gpio_num_t gpio_num);




















# 527 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_set_drive_capability(gpio_num_t gpio_num, gpio_drive_cap_t strength);




















# 539 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_get_drive_capability(gpio_num_t gpio_num, gpio_drive_cap_t* strength);








































# 561 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_hold_en(gpio_num_t gpio_num);


































# 580 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
esp_err_t gpio_hold_dis(gpio_num_t gpio_num);


















# 591 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
void gpio_deep_sleep_hold_en(void);








# 597 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
void gpio_deep_sleep_hold_dis(void);










# 604 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
void gpio_iomux_in(uint32_t gpio_num, uint32_t signal_idx);














# 613 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h"
void gpio_iomux_out(uint8_t gpio_num, int func, bool oen_inv);


}
# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h" 1















#define _DRIVER_TOUCH_PAD_H_ 

extern "C" {

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr.h" 1















#define __ESP_INTR_H__ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_api.h" 1











































# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_api.h"





#define __XTENSA_API_H__ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/xtensa/hal.h" 1









































































# 32 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_api.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_context.h" 1





































































# 34 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_api.h" 2



typedef void (*xt_handler)(void *);


typedef void (*xt_exc_handler)(XtExcFrame *);



































# 60 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_api.h"
extern xt_exc_handler xt_set_exception_handler(int n, xt_exc_handler f);





















# 73 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_api.h"
extern xt_handler xt_set_interrupt_handler(int n, xt_handler f, void * arg);

















# 84 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_api.h"
extern void xt_ints_on(unsigned int mask);

















# 95 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_api.h"
extern void xt_ints_off(unsigned int mask);











# 103 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_api.h"
static inline void xt_set_intset(unsigned int arg)
{
    xthal_set_intset(arg);
}













# 115 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_api.h"
static inline void xt_set_intclear(unsigned int arg)
{
    xthal_set_intclear(arg);
}














# 127 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/xtensa_api.h"
extern void * xt_get_interrupt_handler_arg(int n);
# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr.h" 2


extern "C" {


#define ESP_CCOMPARE_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_CCOMPARE_INUM, (func), (void *)(arg))


#define ESP_EPWM_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_EPWM_INUM, (func), (void *)(arg))


#define ESP_MPWM_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_MPWM_INUM, (func), (void *)(arg))


#define ESP_SPI1_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_SPI1_INUM, (func), (void *)(arg))


#define ESP_SPI2_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_SPI2_INUM, (func), (void *)(arg))


#define ESP_SPI3_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_SPI3_INUM, (func), (void *)(arg))


#define ESP_I2S0_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_I2S0_INUM, (func), (void *)(arg))


#define ESP_PCNT_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_PCNT_INUM, (func), (void *)(arg))


#define ESP_LEDC_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_LEDC_INUM, (func), (void *)(arg))


#define ESP_WMAC_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_WMAC_INUM, (func), (void *)(arg))


#define ESP_FRC_TIMER1_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_FRC_TIMER1_INUM, (func), (void *)(arg))


#define ESP_FRC_TIMER2_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_FRC_TIMER2_INUM, (func), (void *)(arg))


#define ESP_GPIO_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_GPIO_INUM, (func), (void *)(arg))


#define ESP_UART0_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_UART0_INUM, (func), (void *)(arg))


#define ESP_WDT_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_WDT_INUM, (func), (void *)(arg))


#define ESP_RTC_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_RTC_INUM, (func), (void *)(arg))


#define ESP_SLC_INTR_ATTACH(func,arg) xt_set_interrupt_handler(ETS_SLC_INUM, (func), (void *)(arg))


#define ESP_RMT_CTRL_INTRL(func,arg) xt_set_interrupt_handler(ETS_RMT_CTRL_INUM, (func), (void *)(arg))


#define ESP_INTR_ENABLE(inum) xt_ints_on((1<<inum))


#define ESP_INTR_DISABLE(inum) xt_ints_off((1<<inum))



}
# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_intr_alloc.h" 1













# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/touch_channel.h" 1















#define _SOC_TOUCH_CHANNEL_H 


#define TOUCH_PAD_GPIO4_CHANNEL TOUCH_PAD_NUM0
#define TOUCH_PAD_NUM0_GPIO_NUM 4

#define TOUCH_PAD_GPIO0_CHANNEL TOUCH_PAD_NUM1
#define TOUCH_PAD_NUM1_GPIO_NUM 0

#define TOUCH_PAD_GPIO2_CHANNEL TOUCH_PAD_NUM2
#define TOUCH_PAD_NUM2_GPIO_NUM 2

#define TOUCH_PAD_GPIO15_CHANNEL TOUCH_PAD_NUM3
#define TOUCH_PAD_NUM3_GPIO_NUM 15

#define TOUCH_PAD_GPIO13_CHANNEL TOUCH_PAD_NUM4
#define TOUCH_PAD_NUM4_GPIO_NUM 13

#define TOUCH_PAD_GPIO12_CHANNEL TOUCH_PAD_NUM5
#define TOUCH_PAD_NUM5_GPIO_NUM 12

#define TOUCH_PAD_GPIO14_CHANNEL TOUCH_PAD_NUM6
#define TOUCH_PAD_NUM6_GPIO_NUM 14

#define TOUCH_PAD_GPIO27_CHANNEL TOUCH_PAD_NUM7
#define TOUCH_PAD_NUM7_GPIO_NUM 27

#define TOUCH_PAD_GPIO33_CHANNEL TOUCH_PAD_NUM8
#define TOUCH_PAD_NUM8_GPIO_NUM 33

#define TOUCH_PAD_GPIO32_CHANNEL TOUCH_PAD_NUM9
#define TOUCH_PAD_NUM9_GPIO_NUM 32
# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h" 2

typedef enum {
    TOUCH_PAD_NUM0 = 0, 
    TOUCH_PAD_NUM1, 
    TOUCH_PAD_NUM2, 
    TOUCH_PAD_NUM3, 
    TOUCH_PAD_NUM4, 
    TOUCH_PAD_NUM5, 
    TOUCH_PAD_NUM6, 
    TOUCH_PAD_NUM7, 
    TOUCH_PAD_NUM8, 
    TOUCH_PAD_NUM9, 
    TOUCH_PAD_MAX,
} touch_pad_t;

typedef enum {
    TOUCH_HVOLT_KEEP = -1, 
    TOUCH_HVOLT_2V4 = 0, 
    TOUCH_HVOLT_2V5, 
    TOUCH_HVOLT_2V6, 
    TOUCH_HVOLT_2V7, 
    TOUCH_HVOLT_MAX,
} touch_high_volt_t;

typedef enum {
    TOUCH_LVOLT_KEEP = -1, 
    TOUCH_LVOLT_0V5 = 0, 
    TOUCH_LVOLT_0V6, 
    TOUCH_LVOLT_0V7, 
    TOUCH_LVOLT_0V8, 
    TOUCH_LVOLT_MAX,
} touch_low_volt_t;

typedef enum {
    TOUCH_HVOLT_ATTEN_KEEP = -1, 
    TOUCH_HVOLT_ATTEN_1V5 = 0, 
    TOUCH_HVOLT_ATTEN_1V, 
    TOUCH_HVOLT_ATTEN_0V5, 
    TOUCH_HVOLT_ATTEN_0V, 
    TOUCH_HVOLT_ATTEN_MAX,
} touch_volt_atten_t;

typedef enum {
    TOUCH_PAD_SLOPE_0 = 0, 
    TOUCH_PAD_SLOPE_1 = 1, 
    TOUCH_PAD_SLOPE_2 = 2, 
    TOUCH_PAD_SLOPE_3 = 3, 
    TOUCH_PAD_SLOPE_4 = 4, 
    TOUCH_PAD_SLOPE_5 = 5, 
    TOUCH_PAD_SLOPE_6 = 6, 
    TOUCH_PAD_SLOPE_7 = 7, 
    TOUCH_PAD_SLOPE_MAX,
} touch_cnt_slope_t;

typedef enum {
    TOUCH_TRIGGER_BELOW = 0, 
    TOUCH_TRIGGER_ABOVE = 1, 
    TOUCH_TRIGGER_MAX,
} touch_trigger_mode_t;

typedef enum {
    TOUCH_TRIGGER_SOURCE_BOTH = 0, 
    TOUCH_TRIGGER_SOURCE_SET1 = 1, 
    TOUCH_TRIGGER_SOURCE_MAX,
} touch_trigger_src_t;

typedef enum {
    TOUCH_PAD_TIE_OPT_LOW = 0, 
    TOUCH_PAD_TIE_OPT_HIGH = 1, 
    TOUCH_PAD_TIE_OPT_MAX,
} touch_tie_opt_t;

typedef enum {
    TOUCH_FSM_MODE_TIMER = 0, 
    TOUCH_FSM_MODE_SW, 
    TOUCH_FSM_MODE_MAX,
} touch_fsm_mode_t;


typedef intr_handle_t touch_isr_handle_t;

#define TOUCH_PAD_SLEEP_CYCLE_DEFAULT (0x1000) 
#define TOUCH_PAD_MEASURE_CYCLE_DEFAULT (0x7fff) 
#define TOUCH_PAD_MEASURE_WAIT_DEFAULT (0xFF) 
#define TOUCH_FSM_MODE_DEFAULT (TOUCH_FSM_MODE_SW) 
#define TOUCH_TRIGGER_MODE_DEFAULT (TOUCH_TRIGGER_BELOW) 
#define TOUCH_TRIGGER_SOURCE_DEFAULT (TOUCH_TRIGGER_SOURCE_SET1) 
#define TOUCH_PAD_BIT_MASK_MAX (0x3ff)
















# 121 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_init();














# 130 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_deinit();


























# 145 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_config(touch_pad_t touch_num, uint16_t threshold);




































# 165 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_read(touch_pad_t touch_num, uint16_t * touch_value);






























# 182 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_read_filtered(touch_pad_t touch_num, uint16_t *touch_value);
































# 200 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_read_raw_data(touch_pad_t touch_num, uint16_t *touch_value);




















# 212 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
typedef void (* filter_cb_t)(uint16_t *raw_value, uint16_t *filtered_value);


















# 223 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_set_filter_read_cb(filter_cb_t read_cb);


























# 238 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_isr_handler_register(void(*fn)(void *), void *arg, int unused, intr_handle_t *handle_unused) __attribute__ ((deprecated));




















# 250 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_isr_register(intr_handler_t fn, void* arg);


















# 261 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_isr_deregister(void(*fn)(void *), void *arg);






















# 274 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_set_meas_time(uint16_t sleep_cycle, uint16_t meas_cycle);














# 283 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_get_meas_time(uint16_t *sleep_cycle, uint16_t *meas_cycle);


























# 298 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_set_voltage(touch_high_volt_t refh, touch_low_volt_t refl, touch_volt_atten_t atten);
















# 308 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_get_voltage(touch_high_volt_t *refh, touch_low_volt_t *refl, touch_volt_atten_t *atten);


























# 323 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_set_cnt_mode(touch_pad_t touch_num, touch_cnt_slope_t slope, touch_tie_opt_t opt);


















# 334 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_get_cnt_mode(touch_pad_t touch_num, touch_cnt_slope_t *slope, touch_tie_opt_t *opt);














# 343 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_io_init(touch_pad_t touch_num);
















# 353 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_set_fsm_mode(touch_fsm_mode_t mode);












# 361 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_get_fsm_mode(touch_fsm_mode_t *mode);










# 368 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_sw_start();
















# 378 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_set_thresh(touch_pad_t touch_num, uint16_t threshold);
















# 388 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_get_thresh(touch_pad_t touch_num, uint16_t *threshold);


















# 399 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_set_trigger_mode(touch_trigger_mode_t mode);












# 407 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_get_trigger_mode(touch_trigger_mode_t *mode);




















# 419 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_set_trigger_source(touch_trigger_src_t src);












# 427 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_get_trigger_source(touch_trigger_src_t *src);
























# 441 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_set_group_mask(uint16_t set1_mask, uint16_t set2_mask, uint16_t en_mask);
















# 451 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_get_group_mask(uint16_t *set1_mask, uint16_t *set2_mask, uint16_t *en_mask);
























# 465 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_clear_group_mask(uint16_t set1_mask, uint16_t set2_mask, uint16_t en_mask);










# 472 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_clear_status();










# 479 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
uint32_t touch_pad_get_status();










# 486 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_intr_enable();










# 493 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_intr_disable();


















# 504 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_set_filter_period(uint32_t new_period_ms);


















# 515 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_get_filter_period(uint32_t* p_period_ms);


































# 534 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_filter_start(uint32_t filter_period_ms);














# 543 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_filter_stop();














# 552 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_filter_delete();














# 561 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/touch_pad.h"
esp_err_t touch_pad_get_wakeup_status(touch_pad_t *pad_num);


}
# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h" 2


extern "C" {







# 29 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
typedef enum {
    ESP_EXT1_WAKEUP_ALL_LOW = 0, 
    ESP_EXT1_WAKEUP_ANY_HIGH = 1 
} esp_sleep_ext1_wakeup_mode_t;






# 37 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
typedef enum {
    ESP_PD_DOMAIN_RTC_PERIPH, 
    ESP_PD_DOMAIN_RTC_SLOW_MEM, 
    ESP_PD_DOMAIN_RTC_FAST_MEM, 
    ESP_PD_DOMAIN_XTAL, 
    ESP_PD_DOMAIN_MAX 
} esp_sleep_pd_domain_t;






# 48 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
typedef enum {
    ESP_PD_OPTION_OFF, 
    ESP_PD_OPTION_ON, 
    ESP_PD_OPTION_AUTO 
} esp_sleep_pd_option_t;






# 57 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
typedef enum {
    ESP_SLEEP_WAKEUP_UNDEFINED, 
    ESP_SLEEP_WAKEUP_ALL, 
    ESP_SLEEP_WAKEUP_EXT0, 
    ESP_SLEEP_WAKEUP_EXT1, 
    ESP_SLEEP_WAKEUP_TIMER, 
    ESP_SLEEP_WAKEUP_TOUCHPAD, 
    ESP_SLEEP_WAKEUP_ULP, 
    ESP_SLEEP_WAKEUP_GPIO, 
    ESP_SLEEP_WAKEUP_UART, 
} esp_sleep_source_t;


typedef esp_sleep_source_t esp_sleep_wakeup_cause_t;
































# 88 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_err_t esp_sleep_disable_wakeup_source(esp_sleep_source_t source);


















# 99 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_err_t esp_sleep_enable_ulp_wakeup();














# 108 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_err_t esp_sleep_enable_timer_wakeup(uint64_t time_in_us);






























# 125 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_err_t esp_sleep_enable_touchpad_wakeup();














# 134 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
touch_pad_t esp_sleep_get_touchpad_wakeup_status();














































# 159 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_err_t esp_sleep_enable_ext0_wakeup(gpio_num_t gpio_num, int level);




























































# 191 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_err_t esp_sleep_enable_ext1_wakeup(uint64_t mask, esp_sleep_ext1_wakeup_mode_t mode);




































# 211 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_err_t esp_sleep_enable_gpio_wakeup();






























# 228 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_err_t esp_sleep_enable_uart_wakeup(int uart_num);














# 237 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
uint64_t esp_sleep_get_ext1_wakeup_status();






















# 250 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_err_t esp_sleep_pd_config(esp_sleep_pd_domain_t domain,
                                   esp_sleep_pd_option_t option);










# 258 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
void esp_deep_sleep_start() __attribute__((noreturn));














# 267 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_err_t esp_light_sleep_start();












































# 291 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
void esp_deep_sleep(uint64_t time_in_us) __attribute__((noreturn));
















# 301 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
void system_deep_sleep(uint64_t time_in_us) __attribute__((noreturn, deprecated));











# 309 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_sleep_wakeup_cause_t esp_sleep_get_wakeup_cause();

























# 324 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
void esp_wake_deep_sleep(void);








# 330 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
typedef void (*esp_deep_sleep_wake_stub_fn_t)(void);






















# 343 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
void esp_set_deep_sleep_wake_stub(esp_deep_sleep_wake_stub_fn_t new_stub);










# 350 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
esp_deep_sleep_wake_stub_fn_t esp_get_deep_sleep_wake_stub(void);










# 357 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
void esp_default_wake_deep_sleep(void);










# 364 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_sleep.h"
void esp_deep_sleep_disable_rom_logging(void);


}
# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_idf_version.h" 1














       


extern "C" {



#define ESP_IDF_VERSION_MAJOR 3

#define ESP_IDF_VERSION_MINOR 3

#define ESP_IDF_VERSION_PATCH 4










# 33 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_idf_version.h"
#define ESP_IDF_VERSION_VAL(major,minor,patch) ((major << 16) | (minor << 8) | (patch))










# 40 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_idf_version.h"
#define ESP_IDF_VERSION ESP_IDF_VERSION_VAL(ESP_IDF_VERSION_MAJOR, ESP_IDF_VERSION_MINOR, ESP_IDF_VERSION_PATCH)
























# 56 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_idf_version.h"
const char* esp_get_idf_version(void);




}
# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h" 2


extern "C" {


typedef enum {
    ESP_MAC_WIFI_STA,
    ESP_MAC_WIFI_SOFTAP,
    ESP_MAC_BT,
    ESP_MAC_ETH,
} esp_mac_type_t;


#define TWO_UNIVERSAL_MAC_ADDR 2
#define FOUR_UNIVERSAL_MAC_ADDR 4
#define UNIVERSAL_MAC_ADDR_NUM CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS







# 44 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
typedef enum {
    ESP_RST_UNKNOWN, 
    ESP_RST_POWERON, 
    ESP_RST_EXT, 
    ESP_RST_SW, 
    ESP_RST_PANIC, 
    ESP_RST_INT_WDT, 
    ESP_RST_TASK_WDT, 
    ESP_RST_WDT, 
    ESP_RST_DEEPSLEEP, 
    ESP_RST_BROWNOUT, 
    ESP_RST_SDIO, 
} esp_reset_reason_t;









# 63 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
void system_init(void) __attribute__ ((deprecated));












# 71 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
void system_restore(void) __attribute__ ((deprecated));







# 77 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
typedef void (*shutdown_handler_t)(void);












# 85 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
esp_err_t esp_register_shutdown_handler(shutdown_handler_t handle);
















# 95 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
void esp_restart(void) __attribute__ ((noreturn));













# 104 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
void system_restart(void) __attribute__ ((deprecated, noreturn));









# 111 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
esp_reset_reason_t esp_reset_reason(void);













# 120 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
uint32_t system_get_time(void) __attribute__ ((deprecated));

















# 131 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
uint32_t esp_get_free_heap_size(void);
















# 141 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
uint32_t esp_get_free_internal_heap_size(void);

















# 152 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
uint32_t system_get_free_heap_size(void) __attribute__ ((deprecated));











# 160 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
uint32_t esp_get_minimum_free_heap_size( void );
































# 178 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
uint32_t esp_random(void);
















# 188 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
void esp_fill_random(void *buf, size_t len);


























# 203 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
esp_err_t esp_base_mac_addr_set(uint8_t *mac);
















# 213 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
esp_err_t esp_base_mac_addr_get(uint8_t *mac);




























# 229 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
esp_err_t esp_efuse_mac_get_custom(uint8_t *mac);














# 238 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
esp_err_t esp_efuse_mac_get_default(uint8_t *mac);





















# 251 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
esp_err_t esp_efuse_read_mac(uint8_t *mac) __attribute__ ((deprecated));


















# 262 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
esp_err_t system_efuse_read_mac(uint8_t *mac) __attribute__ ((deprecated));

























# 277 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
esp_err_t esp_read_mac(uint8_t* mac, esp_mac_type_t type);




























# 293 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
esp_err_t esp_derive_local_mac(uint8_t* local_mac, const uint8_t* universal_mac);















# 303 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
const char* system_get_sdk_version(void) __attribute__ ((deprecated));







# 309 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
typedef enum {
    CHIP_ESP32 = 1, 
} esp_chip_model_t;


#define CHIP_FEATURE_EMB_FLASH BIT(0) 
#define CHIP_FEATURE_WIFI_BGN BIT(1) 
#define CHIP_FEATURE_BLE BIT(4) 
#define CHIP_FEATURE_BT BIT(5) 






# 322 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
typedef struct {
    esp_chip_model_t model; 
    uint32_t features; 
    uint8_t cores; 
    uint8_t revision; 
} esp_chip_info_t;








# 333 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
void esp_chip_info(esp_chip_info_t* out_info);














# 342 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h"
bool soc_has_cache_lock_bug(void);


}
# 129 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h" 2












# 137 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
 StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) ;

















# 149 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
#define pvPortMalloc malloc
#define vPortFree free
#define xPortGetFreeHeapSize esp_get_free_heap_size
#define xPortGetMinimumEverFreeHeapSize esp_get_minimum_free_heap_size








# 158 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
BaseType_t xPortStartScheduler( void ) ;










# 165 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
void vPortEndScheduler( void ) ;









# 173 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
void vPortYieldOtherCore( BaseType_t coreid) ;









# 180 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
void vPortSetStackWatchpoint( void* pxStackStart );








# 186 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
BaseType_t xPortInIsrContext();








# 192 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
BaseType_t xPortInterruptedFromISRContext();














# 202 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
 struct xMEMORY_REGION;
 void vPortStoreTaskMPUSettings( xMPU_SETTINGS *xMPUSettings, const struct xMEMORY_REGION * const xRegions, StackType_t *pxBottomOfStack, uint32_t usStackDepth ) ;
 void vPortReleaseTaskMPUSettings( xMPU_SETTINGS *xMPUSettings );



static inline uint32_t __attribute__((section(".iram1" "." "11"))) xPortGetCoreID() {
    int id;
    __asm__ __volatile__ (
        "rsr.prid %0\n"
        " extui %0,%0,13,1"
        :"=r"(id));
    return id;
}


uint32_t xPortGetTickRateHz(void);


static inline bool __attribute__((section(".iram1" "." "12"))) xPortCanYield(void)
{
    uint32_t ps_reg = 0;

    
    asm volatile ("rsr %0, " "PS" : "=r" (ps_reg));;

    










# 235 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portable.h"
    return ((ps_reg & 0x0000000F) == 0);
}


}


void uxPortCompareSetExtram(volatile uint32_t *addr, uint32_t compare, uint32_t *set);
# 106 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h" 2










# 180 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define INCLUDE_xTimerGetTimerDaemonTaskHandle 0



#define INCLUDE_xQueueGetMutexHolder 0
# 196 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define configUSE_APPLICATION_TASK_TAG 0
# 228 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define configUSE_ALTERNATIVE_API 0
# 248 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define INCLUDE_xTaskResumeFromISR 1



#define INCLUDE_xEventGroupSetBitFromISR 0
# 263 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define configASSERT_DEFINED 1



# 284 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define INCLUDE_xTaskGetSchedulerState 0



#define INCLUDE_xTaskGetCurrentTaskHandle 0
# 301 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define portCLEAN_UP_TCB(pxTCB) ( void ) pxTCB



#define portPRE_TASK_DELETE_HOOK(pvTaskToDelete,pxYieldPending) 



#define portSETUP_TCB(pxTCB) ( void ) pxTCB







#define vQueueAddToRegistry(xQueue,pcName) 
#define vQueueUnregisterQueue(xQueue) 



#define portPOINTER_SIZE_TYPE uint32_t




 


# 329 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define traceSTART() 



 


# 335 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define traceEND() 



 


# 341 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define traceTASK_SWITCHED_IN() 



 


# 347 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define traceINCREASE_TICK_COUNT(x) 



 
#define traceLOW_POWER_IDLE_BEGIN() 



 
#define traceLOW_POWER_IDLE_END() 



 


# 363 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define traceTASK_SWITCHED_OUT() 



 








# 372 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define traceTASK_PRIORITY_INHERIT(pxTCBOfMutexHolder,uxInheritedPriority) 



 






# 380 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define traceTASK_PRIORITY_DISINHERIT(pxTCBOfMutexHolder,uxOriginalPriority) 



 






# 388 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue) 



 






# 396 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define traceBLOCKING_ON_QUEUE_SEND(pxQueue) 









#define traceMOVED_TASK_TO_READY_STATE(pxTCB) 



#define traceREADDED_TASK_TO_READY_STATE(pxTCB) traceMOVED_TASK_TO_READY_STATE( pxTCB )



#define traceMOVED_TASK_TO_DELAYED_LIST() 



#define traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST() 



#define traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB) 



#define traceQUEUE_CREATE(pxNewQueue) 



#define traceQUEUE_CREATE_FAILED(ucQueueType) 



#define traceCREATE_MUTEX(pxNewQueue) 



#define traceCREATE_MUTEX_FAILED() 



#define traceGIVE_MUTEX_RECURSIVE(pxMutex) 



#define traceGIVE_MUTEX_RECURSIVE_FAILED(pxMutex) 



#define traceTAKE_MUTEX_RECURSIVE(pxMutex) 



#define traceTAKE_MUTEX_RECURSIVE_FAILED(pxMutex) 



#define traceCREATE_COUNTING_SEMAPHORE() 



#define traceCREATE_COUNTING_SEMAPHORE_FAILED() 



#define traceQUEUE_SEND(pxQueue) 



#define traceQUEUE_SEND_FAILED(pxQueue) 



#define traceQUEUE_RECEIVE(pxQueue) 



#define traceQUEUE_PEEK(pxQueue) 



#define traceQUEUE_PEEK_FROM_ISR(pxQueue) 



#define traceQUEUE_RECEIVE_FAILED(pxQueue) 



#define traceQUEUE_SEND_FROM_ISR(pxQueue) 



#define traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue) 



#define traceQUEUE_RECEIVE_FROM_ISR(pxQueue) 



#define traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue) 



#define traceQUEUE_PEEK_FROM_ISR_FAILED(pxQueue) 



#define traceQUEUE_DELETE(pxQueue) 



#define traceTASK_CREATE(pxNewTCB) 



#define traceTASK_CREATE_FAILED() 



#define traceTASK_DELETE(pxTaskToDelete) 



#define traceTASK_DELAY_UNTIL() 



#define traceTASK_DELAY() 



#define traceTASK_PRIORITY_SET(pxTask,uxNewPriority) 



#define traceTASK_SUSPEND(pxTaskToSuspend) 



#define traceTASK_RESUME(pxTaskToResume) 



#define traceTASK_RESUME_FROM_ISR(pxTaskToResume) 



#define traceTASK_INCREMENT_TICK(xTickCount) 



#define traceTIMER_CREATE(pxNewTimer) 



#define traceTIMER_CREATE_FAILED() 



#define traceTIMER_COMMAND_SEND(xTimer,xMessageID,xMessageValueValue,xReturn) 



#define traceTIMER_EXPIRED(pxTimer) 



#define traceTIMER_COMMAND_RECEIVED(pxTimer,xMessageID,xMessageValue) 



#define traceMALLOC(pvAddress,uiSize) 



#define traceFREE(pvAddress,uiSize) 



#define traceEVENT_GROUP_CREATE(xEventGroup) 



#define traceEVENT_GROUP_CREATE_FAILED() 



#define traceEVENT_GROUP_SYNC_BLOCK(xEventGroup,uxBitsToSet,uxBitsToWaitFor) 



#define traceEVENT_GROUP_SYNC_END(xEventGroup,uxBitsToSet,uxBitsToWaitFor,xTimeoutOccurred) ( void ) xTimeoutOccurred



#define traceEVENT_GROUP_WAIT_BITS_BLOCK(xEventGroup,uxBitsToWaitFor) 



#define traceEVENT_GROUP_WAIT_BITS_END(xEventGroup,uxBitsToWaitFor,xTimeoutOccurred) ( void ) xTimeoutOccurred



#define traceEVENT_GROUP_CLEAR_BITS(xEventGroup,uxBitsToClear) 



#define traceEVENT_GROUP_CLEAR_BITS_FROM_ISR(xEventGroup,uxBitsToClear) 



#define traceEVENT_GROUP_SET_BITS(xEventGroup,uxBitsToSet) 



#define traceEVENT_GROUP_SET_BITS_FROM_ISR(xEventGroup,uxBitsToSet) 



#define traceEVENT_GROUP_DELETE(xEventGroup) 



#define tracePEND_FUNC_CALL(xFunctionToPend,pvParameter1,ulParameter2,ret) 



#define tracePEND_FUNC_CALL_FROM_ISR(xFunctionToPend,pvParameter1,ulParameter2,ret) 



#define traceQUEUE_REGISTRY_ADD(xQueue,pcQueueName) 



#define traceTASK_NOTIFY_GIVE_FROM_ISR() 



#define traceISR_EXIT_TO_SCHEDULER() 



#define traceISR_EXIT() 



#define traceISR_ENTER(_n_) 



#define configGENERATE_RUN_TIME_STATS 0
# 676 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define configUSE_MALLOC_FAILED_HOOK 0



#define portPRIVILEGE_BIT ( ( UBaseType_t ) 0x00 )







#define pvPortMallocAligned(x,puxStackBuffer) ( ( ( puxStackBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ( puxStackBuffer ) )



#define vPortFreeAligned(pvBlockToFree) vPortFree( pvBlockToFree )







#define configEXPECTED_IDLE_TIME_BEFORE_SLEEP 2
# 712 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define configPRE_SLEEP_PROCESSING(x) 



#define configPOST_SLEEP_PROCESSING(x) 







#define portTASK_USES_FLOATING_POINT() 



#define configUSE_TIME_SLICING 1



#define configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS 0







#define configUSE_STATS_FORMATTING_FUNCTIONS 0



#define configTASKLIST_INCLUDE_COREID 0



#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 



#define configUSE_TRACE_FACILITY 0



#define mtCOVERAGE_TEST_MARKER() 







#define configUSE_PORT_OPTIMISED_TASK_SELECTION 0







#define configUSE_TASK_NOTIFICATIONS 1



#define portTICK_TYPE_IS_ATOMIC 0
# 794 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
 




# 797 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define portTICK_TYPE_ENTER_CRITICAL(mux) portENTER_CRITICAL(mux)
#define portTICK_TYPE_EXIT_CRITICAL(mux) portEXIT_CRITICAL(mux)
#define portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR() portSET_INTERRUPT_MASK_FROM_ISR()
#define portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR(x) portCLEAR_INTERRUPT_MASK_FROM_ISR( ( x ) )
# 810 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"



#define configENABLE_BACKWARD_COMPATIBILITY 1



#define eTaskStateGet eTaskGetState
#define portTickType TickType_t
#define xTaskHandle TaskHandle_t
#define xQueueHandle QueueHandle_t
#define xSemaphoreHandle SemaphoreHandle_t
#define xQueueSetHandle QueueSetHandle_t
#define xQueueSetMemberHandle QueueSetMemberHandle_t
#define xTimeOutType TimeOut_t
#define xMemoryRegion MemoryRegion_t
#define xTaskParameters TaskParameters_t
#define xTaskStatusType TaskStatus_t
#define xTimerHandle TimerHandle_t
#define xCoRoutineHandle CoRoutineHandle_t
#define pdTASK_HOOK_CODE TaskHookFunction_t
#define portTICK_RATE_MS portTICK_PERIOD_MS

 


# 835 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
#define tmrTIMER_CALLBACK TimerCallbackFunction_t
#define pdTASK_CODE TaskFunction_t
#define xListItem ListItem_t
#define xList List_t



#define configESP32_PER_TASK_DATA 1





















# 855 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
struct xSTATIC_LIST_ITEM
{
 TickType_t xDummy1;
 void *pvDummy2[ 4 ];
};
typedef struct xSTATIC_LIST_ITEM StaticListItem_t;


struct xSTATIC_MINI_LIST_ITEM
{
 TickType_t xDummy1;
 void *pvDummy2[ 2 ];
};
typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;


typedef struct xSTATIC_LIST
{
 UBaseType_t uxDummy1;
 void *pvDummy2;
 StaticMiniListItem_t xDummy3;
} StaticList_t;


























# 891 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
typedef struct xSTATIC_TCB
{
 void *pxDummy1;

  xMPU_SETTINGS xDummy2;

 StaticListItem_t xDummy3[ 2 ];
 UBaseType_t uxDummy5;
 void *pxDummy6;
 uint8_t ucDummy7[ ( 16 ) ];
    UBaseType_t uxDummyCoreId;

  void *pxDummy8;


  UBaseType_t uxDummy9;
        uint32_t OldInterruptState;





  UBaseType_t uxDummy12[ 2 ];





  void *pvDummy15[ 1 ];

  void *pvDummyLocalStorageCallBack[ 1 ];






  struct _reent xDummy17;


  uint32_t ulDummy18;
  uint32_t ucDummy19;



  uint8_t uxDummy20;


} StaticTask_t;




























# 955 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
typedef struct xSTATIC_QUEUE
{
 void *pvDummy1[ 3 ];

 union
 {
  void *pvDummy2;
  UBaseType_t uxDummy2;
 } u;

 StaticList_t xDummy3[ 2 ];
 UBaseType_t uxDummy4[ 3 ];






  void *pvDummy7;







 portMUX_TYPE muxDummy; 

} StaticQueue_t;
typedef StaticQueue_t StaticSemaphore_t;




























# 1000 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
typedef struct xSTATIC_EVENT_GROUP
{
 TickType_t xDummy1;
 StaticList_t xDummy2;
# 1013 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
 portMUX_TYPE muxDummy; 

} StaticEventGroup_t;




























# 1031 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
typedef struct xSTATIC_TIMER
{
 void *pvDummy1;
 StaticListItem_t xDummy2;
 TickType_t xDummy3;
 UBaseType_t uxDummy4;
 void *pvDummy5[ 2 ];
# 1046 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"
} StaticTimer_t;


}
# 33 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h" 1







































































































































# 72 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
#define INC_TASK_H 





# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/limits.h" 1

#define _LIBC_LIMITS_H_ 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/newlib.h" 1








# 5 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/limits.h" 2


#define MB_LEN_MAX _MB_LEN_MAX






#define NL_ARGMAX 32





# 130 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/limits.h"

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include-fixed\\limits.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include-fixed\\limits.h" 3 4





























#define _GCC_LIMITS_H_ 





























#define _LIMITS_H___ 


#undef CHAR_BIT
#define CHAR_BIT __CHAR_BIT__







#undef SCHAR_MIN
#define SCHAR_MIN (-SCHAR_MAX - 1)
#undef SCHAR_MAX
#define SCHAR_MAX __SCHAR_MAX__


#undef UCHAR_MAX



#define UCHAR_MAX (SCHAR_MAX * 2 + 1)




#undef CHAR_MIN



#define CHAR_MIN 0

#undef CHAR_MAX
#define CHAR_MAX UCHAR_MAX








#undef SHRT_MIN
#define SHRT_MIN (-SHRT_MAX - 1)
#undef SHRT_MAX
#define SHRT_MAX __SHRT_MAX__


#undef USHRT_MAX



#define USHRT_MAX (SHRT_MAX * 2 + 1)



#undef INT_MIN
#define INT_MIN (-INT_MAX - 1)
#undef INT_MAX
#define INT_MAX __INT_MAX__


#undef UINT_MAX
#define UINT_MAX (INT_MAX * 2U + 1U)



#undef LONG_MIN
#define LONG_MIN (-LONG_MAX - 1L)
#undef LONG_MAX
#define LONG_MAX __LONG_MAX__


#undef ULONG_MAX
#define ULONG_MAX (LONG_MAX * 2UL + 1UL)
# 150 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include-fixed\\limits.h" 3 4

#undef LONG_LONG_MIN
#define LONG_LONG_MIN (-LONG_LONG_MAX - 1LL)
#undef LONG_LONG_MAX
#define LONG_LONG_MAX __LONG_LONG_MAX__


#undef ULONG_LONG_MAX
#define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1ULL)





# 132 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/limits.h" 2




# 135 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/limits.h"



# 137 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/limits.h"
#define _POSIX2_RE_DUP_MAX 255



#define ARG_MAX 4096



#define PATH_MAX 1024
# 79 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h" 1







































































































































# 70 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"





















































# 103 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define LIST_H 
























































# 134 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define configLIST_VOLATILE 



extern "C" {











# 147 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
 
#define listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE 
#define listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE 
#define listFIRST_LIST_INTEGRITY_CHECK_VALUE 
#define listSECOND_LIST_INTEGRITY_CHECK_VALUE 
#define listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem) 
#define listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem) 
#define listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList) 
#define listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList) 
#define listTEST_LIST_ITEM_INTEGRITY(pxItem) 
#define listTEST_LIST_INTEGRITY(pxList) 
# 178 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"





# 181 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
struct xLIST_ITEM
{
 
 TickType_t xItemValue; 
 struct xLIST_ITEM * pxNext; 
 struct xLIST_ITEM * pxPrevious; 
 void * pvOwner; 
 void * pvContainer; 
 
};
typedef struct xLIST_ITEM ListItem_t; 


static_assert(sizeof(StaticListItem_t) == sizeof(ListItem_t), "StaticListItem_t != ListItem_t");


struct xMINI_LIST_ITEM
{
 
 TickType_t xItemValue;
 struct xLIST_ITEM * pxNext;
 struct xLIST_ITEM * pxPrevious;
};
typedef struct xMINI_LIST_ITEM MiniListItem_t;


static_assert(sizeof(StaticMiniListItem_t) == sizeof(MiniListItem_t), "StaticMiniListItem_t != MiniListItem_t");








# 214 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
typedef struct xLIST
{
 
 UBaseType_t uxNumberOfItems;
 ListItem_t * pxIndex; 
 MiniListItem_t xListEnd; 
 
} List_t;


static_assert(sizeof(StaticList_t) == sizeof(List_t), "StaticList_t != List_t");















# 234 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listSET_LIST_ITEM_OWNER(pxListItem,pxOwner) ( ( pxListItem )->pvOwner = ( void * ) ( pxOwner ) )














# 243 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listGET_LIST_ITEM_OWNER(pxListItem) ( ( pxListItem )->pvOwner )














# 252 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listSET_LIST_ITEM_VALUE(pxListItem,xValue) ( ( pxListItem )->xItemValue = ( xValue ) )
















# 262 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listGET_LIST_ITEM_VALUE(pxListItem) ( ( pxListItem )->xItemValue )














# 271 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxList) ( ( ( pxList )->xListEnd ).pxNext->xItemValue )












# 279 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listGET_HEAD_ENTRY(pxList) ( ( ( pxList )->xListEnd ).pxNext )












# 287 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listGET_NEXT(pxListItem) ( ( pxListItem )->pxNext )












# 295 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listGET_END_MARKER(pxList) ( ( ListItem_t const * ) ( &( ( pxList )->xListEnd ) ) )














# 304 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listLIST_IS_EMPTY(pxList) ( ( BaseType_t ) ( ( pxList )->uxNumberOfItems == ( UBaseType_t ) 0 ) )






# 309 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listCURRENT_LIST_LENGTH(pxList) ( ( pxList )->uxNumberOfItems )








































# 331 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList) { List_t * const pxConstList = ( pxList );   ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( void * ) ( pxConstList )->pxIndex == ( void * ) &( ( pxConstList )->xListEnd ) ) { ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; } ( pxTCB ) = ( pxConstList )->pxIndex->pvOwner; }
# 345 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"































# 361 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listGET_OWNER_OF_HEAD_ENTRY(pxList) ( (&( ( pxList )->xListEnd ))->pxNext->pvOwner )


















# 372 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listIS_CONTAINED_WITHIN(pxList,pxListItem) ( ( BaseType_t ) ( ( pxListItem )->pvContainer == ( void * ) ( pxList ) ) )












# 380 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listLIST_ITEM_CONTAINER(pxListItem) ( ( pxListItem )->pvContainer )










# 387 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
#define listLIST_IS_INITIALISED(pxList) ( ( pxList )->xListEnd.xItemValue == portMAX_DELAY )




















# 399 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
void vListInitialise( List_t * const pxList );


















# 410 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
void vListInitialiseItem( ListItem_t * const pxItem );






















# 423 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem );






































# 444 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem );


























# 459 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/list.h"
UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove );


}
# 81 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/portmacro.h" 1































































































































# 82 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h" 2


extern "C" {







# 91 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
#define tskKERNEL_VERSION_NUMBER "V8.2.0"
#define tskKERNEL_VERSION_MAJOR 8
#define tskKERNEL_VERSION_MINOR 2
#define tskKERNEL_VERSION_BUILD 0






# 99 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
#define tskNO_AFFINITY INT_MAX


















# 110 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
typedef void * TaskHandle_t;








# 116 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
typedef BaseType_t (*TaskHookFunction_t)( void * );


typedef enum
{
 eRunning = 0, 
 eReady, 
 eBlocked, 
 eSuspended, 
 eDeleted 
} eTaskState;


typedef enum
{
 eNoAction = 0, 
 eSetBits, 
 eIncrement, 
 eSetValueWithOverwrite, 
 eSetValueWithoutOverwrite 
} eNotifyAction;







# 142 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
typedef struct xTIME_OUT
{
 BaseType_t xOverflowCount;
 TickType_t xTimeOnEntering;
} TimeOut_t;






# 151 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
typedef struct xMEMORY_REGION
{
 void *pvBaseAddress;
 uint32_t ulLengthInBytes;
 uint32_t ulParameters;
} MemoryRegion_t;






# 161 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
typedef struct xTASK_PARAMETERS
{
 TaskFunction_t pvTaskCode;
 const char * const pcName; 
 uint32_t usStackDepth;
 void *pvParameters;
 UBaseType_t uxPriority;
 StackType_t *puxStackBuffer;
 MemoryRegion_t xRegions[ 1 ];
} TaskParameters_t;







# 176 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
typedef struct xTASK_STATUS
{
 TaskHandle_t xHandle; 
 const char *pcTaskName;  
 UBaseType_t xTaskNumber; 
 eTaskState eCurrentState; 
 UBaseType_t uxCurrentPriority; 
 UBaseType_t uxBasePriority; 
 uint32_t ulRunTimeCounter; 
 StackType_t *pxStackBase; 
 uint32_t usStackHighWaterMark; 



} TaskStatus_t;








# 196 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
typedef struct xTASK_SNAPSHOT
{
 void *pxTCB; 
 StackType_t *pxTopOfStack; 
 StackType_t *pxEndOfStack; 


# 202 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
} TaskSnapshot_t;






# 207 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
typedef enum
{
 eAbortSleep = 0, 
 eStandardSleep, 
 eNoTasksWaitingTimeout 
} eSleepModeStatus;











# 220 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
#define tskIDLE_PRIORITY ( ( UBaseType_t ) 0U )














# 229 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
#define taskYIELD() portYIELD()






















# 245 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
#define taskENTER_CRITICAL(mux) _Pragma("GCC warning \"'taskENTER_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portENTER_CRITICAL(mux)'\"") portENTER_CRITICAL(mux)

#define taskENTER_CRITICAL_ISR(mux) portENTER_CRITICAL_ISR(mux)






















# 263 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
#define taskEXIT_CRITICAL(mux) _Pragma("GCC warning \"'taskEXIT_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portEXIT_CRITICAL(mux)'\"") portEXIT_CRITICAL(mux)

#define taskEXIT_CRITICAL_ISR(mux) portEXIT_CRITICAL_ISR(mux)














# 274 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
#define taskDISABLE_INTERRUPTS() portDISABLE_INTERRUPTS()














# 283 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
#define taskENABLE_INTERRUPTS() portENABLE_INTERRUPTS()






# 288 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
#define taskSCHEDULER_SUSPENDED ( ( BaseType_t ) 0 )
#define taskSCHEDULER_NOT_STARTED ( ( BaseType_t ) 1 )
#define taskSCHEDULER_RUNNING ( ( BaseType_t ) 2 )







# 297 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"













































































# 337 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
 BaseType_t xTaskCreatePinnedToCore( TaskFunction_t pvTaskCode,
          const char * const pcName,
          const uint32_t usStackDepth,
          void * const pvParameters,
          UBaseType_t uxPriority,
          TaskHandle_t * const pvCreatedTask,
          const BaseType_t xCoreID);






































































































































































# 432 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
 static inline __attribute__((section(".iram1" "." "13"))) BaseType_t xTaskCreate(
   TaskFunction_t pvTaskCode,
   const char * const pcName,
   const uint32_t usStackDepth,
   void * const pvParameters,
   UBaseType_t uxPriority,
   TaskHandle_t * const pvCreatedTask)
 {
  return xTaskCreatePinnedToCore( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pvCreatedTask, 0x7fffffff );
 }

























































































# 501 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"































































































































































































# 612 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"




























































































































# 676 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
 BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask ) ;






















































































# 722 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) ;












































































# 763 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskDelete( TaskHandle_t xTaskToDelete ) ;






# 769 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"



















































































# 811 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskDelay( const TickType_t xTicksToDelay ) ;












































































































# 867 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) ;


















































































# 910 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) ;


















# 921 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) ;




























# 937 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
eTaskState eTaskGetState( TaskHandle_t xTask ) ;








































































# 975 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) ;






























































































# 1024 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskSuspend( TaskHandle_t xTaskToSuspend ) ;






















































































# 1069 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskResume( TaskHandle_t xTaskToResume ) ;














































# 1094 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) ;






# 1099 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
















































# 1124 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskStartScheduler( void ) ;






































































































# 1177 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskEndScheduler( void ) ;






























































































# 1227 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskSuspendAll( void ) ;
































































































# 1277 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskResumeAll( void ) ;






# 1283 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"













# 1290 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
TickType_t xTaskGetTickCount( void ) ;
























# 1304 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
TickType_t xTaskGetTickCountFromISR( void ) ;




















# 1316 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
UBaseType_t uxTaskGetNumberOfTasks( void ) ;




















# 1328 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) ; 


































# 1347 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) ;






























# 1364 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
uint8_t* pxTaskGetStackStart( TaskHandle_t xTask) ;












# 1395 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
 
























# 1408 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
 void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue ) ;


 
























# 1424 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
 void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex ) ;



  




# 1431 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
  typedef void (*TlsDeleteCallbackFunction_t)( int, void * );

  












































# 1456 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
  void vTaskSetThreadLocalStoragePointerAndDelCallback( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue, TlsDeleteCallbackFunction_t pvDelCallback);





















# 1470 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) ;


















# 1481 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
TaskHandle_t xTaskGetIdleTaskHandle( void );






















# 1494 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
TaskHandle_t xTaskGetIdleTaskHandleForCPU( UBaseType_t cpuid );






































































































































































































# 1595 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime );


















































































# 1638 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskList( char * pcWriteBuffer ) ; 
































































































# 1688 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskGetRunTimeStats( char *pcWriteBuffer ) ; 
















































































































































# 1762 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );








































































































































































# 1848 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );














































































































































# 1921 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );




















































































# 1965 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
#define xTaskNotifyGive(xTaskToNotify) xTaskNotify( ( xTaskToNotify ), 0, eIncrement )






































































































# 2018 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken );


































































































































# 2085 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );






# 2090 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"






























# 2106 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskIncrementTick( void ) ;






























































# 2139 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) ;
void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) ;






















# 2153 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait ) ;
















































# 2179 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) ;
BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) ;
















# 2190 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskSwitchContext( void ) ;








# 2196 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
TickType_t uxTaskResetEventItemValue( void ) ;






# 2201 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
TaskHandle_t xTaskGetCurrentTaskHandle( void ) ;














# 2211 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
TaskHandle_t xTaskGetCurrentTaskHandleForCPU( BaseType_t cpuid );







# 2217 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) ;








# 2223 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) ;








# 2229 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskMissedYield( void ) ;








# 2235 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskGetSchedulerState( void ) ;








# 2241 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) ;








# 2247 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) ;






# 2252 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) ;







# 2258 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
BaseType_t xTaskGetAffinity( TaskHandle_t xTask ) ;








# 2264 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) ;
















# 2274 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void vTaskStepTick( const TickType_t xTicksToJump ) ;




























# 2290 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
eSleepModeStatus eTaskConfirmSleepModeStatus( void ) ;








# 2296 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
void *pvTaskIncrementMutexHeldCount( void );


















# 2307 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h"
UBaseType_t uxTaskGetSnapshotAll( TaskSnapshot_t * const pxTaskSnapshotArray, const UBaseType_t uxArraySize, UBaseType_t * const pxTcbSz );




}
# 34 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h" 1







































































































































# 71 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define SEMAPHORE_H 





# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h" 1







































































































































# 72 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define QUEUE_H 






extern "C" {












# 88 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
typedef void * QueueHandle_t;










# 95 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
typedef void * QueueSetHandle_t;










# 102 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
typedef void * QueueSetMemberHandle_t;



#define queueSEND_TO_BACK ( ( BaseType_t ) 0 )
#define queueSEND_TO_FRONT ( ( BaseType_t ) 1 )
#define queueOVERWRITE ( ( BaseType_t ) 2 )


#define queueQUEUE_TYPE_BASE ( ( uint8_t ) 0U )
#define queueQUEUE_TYPE_SET ( ( uint8_t ) 0U )
#define queueQUEUE_TYPE_MUTEX ( ( uint8_t ) 1U )
#define queueQUEUE_TYPE_COUNTING_SEMAPHORE ( ( uint8_t ) 2U )
#define queueQUEUE_TYPE_BINARY_SEMAPHORE ( ( uint8_t ) 3U )
#define queueQUEUE_TYPE_RECURSIVE_MUTEX ( ( uint8_t ) 4U )
































































































# 168 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueueCreate(uxQueueLength,uxItemSize) xQueueGenericCreate( ( uxQueueLength ), ( uxItemSize ), ( queueQUEUE_TYPE_BASE ) )















































































































































# 246 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"











































































































































# 316 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueueSendToFront(xQueue,pvItemToQueue,xTicksToWait) xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_FRONT )












































































































































# 388 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueueSendToBack(xQueue,pvItemToQueue,xTicksToWait) xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_BACK )
















































































































































# 462 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueueSend(xQueue,pvItemToQueue,xTicksToWait) xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_BACK )
















































































































































# 536 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueueOverwrite(xQueue,pvItemToQueue) xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), 0, queueOVERWRITE )





















































































































































# 613 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition ) ;










































































































































































# 700 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueuePeek(xQueue,pvBuffer,xTicksToWait) xQueueGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdTRUE )














































# 725 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue, void * const pvBuffer ) ;




















































































































































































# 817 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueueReceive(xQueue,pvBuffer,xTicksToWait) xQueueGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdFALSE )













































































































































































# 906 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeek ) ;


















# 917 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue ) ;






















# 930 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue ) ;
















# 940 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
void vQueueDelete( QueueHandle_t xQueue ) ;


















































































































# 999 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueueSendToFrontFromISR(xQueue,pvItemToQueue,pxHigherPriorityTaskWoken) xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_FRONT )



















































































































# 1059 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueueSendToBackFromISR(xQueue,pvItemToQueue,pxHigherPriorityTaskWoken) xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_BACK )




















































































































































# 1135 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueueOverwriteFromISR(xQueue,pvItemToQueue,pxHigherPriorityTaskWoken) xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueOVERWRITE )




























































































































# 1199 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueueSendFromISR(xQueue,pvItemToQueue,pxHigherPriorityTaskWoken) xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_BACK )



































































































































# 1267 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition ) ;
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken ) ;

























































































































































# 1347 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken ) ;









# 1354 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue ) ;
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue ) ;
UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue ) ;






























# 1374 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
BaseType_t xQueueAltGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, BaseType_t xCopyPosition );
BaseType_t xQueueAltGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, BaseType_t xJustPeeking );
#define xQueueAltSendToFront(xQueue,pvItemToQueue,xTicksToWait) xQueueAltGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_FRONT )
#define xQueueAltSendToBack(xQueue,pvItemToQueue,xTicksToWait) xQueueAltGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_BACK )
#define xQueueAltReceive(xQueue,pvBuffer,xTicksToWait) xQueueAltGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdFALSE )
#define xQueueAltPeek(xQueue,pvBuffer,xTicksToWait) xQueueAltGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdTRUE )


















# 1390 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken );
BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxTaskWoken );
BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait );
BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait );










# 1400 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType ) ;
QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue ) ;
QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount ) ;
QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue ) ;
void* xQueueGetMutexHolder( QueueHandle_t xSemaphore ) ;








# 1410 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait ) ;
BaseType_t xQueueGiveMutexRecursive( QueueHandle_t pxMutex ) ;



















# 1423 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
#define xQueueReset(xQueue) xQueueGenericReset( xQueue, pdFALSE )












































# 1451 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"



















# 1465 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"

























# 1482 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"









# 1488 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
 QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType ) ;










































































































# 1548 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength ) ;












































# 1572 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet ) ;


































# 1591 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet ) ;




































































# 1627 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, const TickType_t xTicksToWait ) ;






# 1632 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/queue.h"
QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet ) ;



void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait ) ;
BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue ) ;
void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber ) ;
UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue ) ;
uint8_t ucQueueGetQueueType( QueueHandle_t xQueue ) ;



}
# 78 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h" 2

typedef QueueHandle_t SemaphoreHandle_t;

#define semBINARY_SEMAPHORE_QUEUE_LENGTH ( ( uint8_t ) 1U )
#define semSEMAPHORE_QUEUE_ITEM_LENGTH ( ( uint8_t ) 0U )
#define semGIVE_BLOCK_TIME ( ( TickType_t ) 0U )



















































































# 128 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define vSemaphoreCreateBinary(xSemaphore) { ( xSemaphore ) = xQueueGenericCreate( ( UBaseType_t ) 1, semSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_BINARY_SEMAPHORE ); if( ( xSemaphore ) != NULL ) { ( void ) xSemaphoreGive( ( xSemaphore ) ); } }
# 137 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"



















































































































# 197 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreCreateBinary() xQueueGenericCreate( ( UBaseType_t ) 1, semSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_BINARY_SEMAPHORE )







































































































# 255 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"



















































































































# 313 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreTake(xSemaphore,xBlockTime) xQueueGenericReceive( ( QueueHandle_t ) ( xSemaphore ), NULL, ( xBlockTime ), pdFALSE )








































































































































































# 399 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreTakeRecursive(xMutex,xBlockTime) xQueueTakeMutexRecursive( ( xMutex ), ( xBlockTime ) )

























# 414 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreAltTake(xSemaphore,xBlockTime) xQueueAltGenericReceive( ( QueueHandle_t ) ( xSemaphore ), NULL, ( xBlockTime ), pdFALSE )



















































































































# 474 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreGive(xSemaphore) xQueueGenericSend( ( QueueHandle_t ) ( xSemaphore ), NULL, semGIVE_BLOCK_TIME, queueSEND_TO_BACK )




























































































































































# 554 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreGiveRecursive(xMutex) xQueueGiveMutexRecursive( ( xMutex ) )

























# 569 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreAltGive(xSemaphore) xQueueAltGenericSend( ( QueueHandle_t ) ( xSemaphore ), NULL, semGIVE_BLOCK_TIME, queueSEND_TO_BACK )




































































































































































# 654 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreGiveFromISR(xSemaphore,pxHigherPriorityTaskWoken) xQueueGiveFromISR( ( QueueHandle_t ) ( xSemaphore ), ( pxHigherPriorityTaskWoken ) )


















































# 681 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreTakeFromISR(xSemaphore,pxHigherPriorityTaskWoken) xQueueReceiveFromISR( ( QueueHandle_t ) ( xSemaphore ), NULL, ( pxHigherPriorityTaskWoken ) )






































































































# 735 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreCreateMutex() xQueueCreateMutex( queueQUEUE_TYPE_MUTEX )











































































































# 796 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"





















































































































# 856 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreCreateRecursiveMutex() xQueueCreateMutex( queueQUEUE_TYPE_RECURSIVE_MUTEX )



































































































































# 928 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"















































































































































# 1001 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreCreateCounting(uxMaxCount,uxInitialCount) xQueueCreateCountingSemaphore( ( uxMaxCount ), ( uxInitialCount ) )



























































































































































# 1085 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"















# 1093 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define vSemaphoreDelete(xSemaphore) vQueueDelete( ( QueueHandle_t ) ( xSemaphore ) )




















# 1105 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define xSemaphoreGetMutexHolder(xSemaphore) xQueueGetMutexHolder( ( xSemaphore ) )














# 1114 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/semphr.h"
#define uxSemaphoreGetCount(xSemaphore) uxQueueMessagesWaiting( ( QueueHandle_t ) ( xSemaphore ) )
# 35 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h"
#define HAL_ESP32_HAL_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 29 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"



































# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdio.h"









# 30 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 1









# 31 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdarg.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdarg.h" 3 4


























# 32 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h"













# 9 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h"





# 33 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h" 1









# 34 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/math.h" 1


#define _MATH_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 1







# 6 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/math.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/ieeefp.h" 1
# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/math.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1

















# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/math.h" 2

extern "C" {






# 14 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/math.h"
union __dmath
{
  double d;
  __ULong i[2];
};

union __fmath
{
  float f;
  __ULong i[1];
};


union __ldmath
{
  long double ld;
  __ULong i[4];
};



#define _M_LN2 0.693147180559945309417


 


#define HUGE_VAL (__builtin_huge_val())



#define HUGE_VALF (__builtin_huge_valf())



#define HUGE_VALL (__builtin_huge_vall())



#define INFINITY (__builtin_inff())



#define NAN (__builtin_nanf(""))
# 105 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/math.h"



extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);

















# 150 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/math.h"
#define FLT_EVAL_METHOD __FLT_EVAL_METHOD__
#define __TMP_FLT_EVAL_METHOD 



    typedef float float_t;
    typedef double double_t;
# 173 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/math.h"
#undef FLT_EVAL_METHOD


#define FP_NAN 0
#define FP_INFINITE 1
#define FP_ZERO 2
#define FP_SUBNORMAL 3
#define FP_NORMAL 4


#define FP_ILOGB0 (-INT_MAX)


#define FP_ILOGBNAN INT_MAX



#define MATH_ERRNO 1


#define MATH_ERREXCEPT 2


#define math_errhandling MATH_ERRNO


extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);

#define fpclassify(__x) ((sizeof(__x) == sizeof(float)) ? __fpclassifyf(__x) : __fpclassifyd(__x))




#define isfinite(__y) (__extension__ ({int __cy = fpclassify(__y); __cy != FP_INFINITE && __cy != FP_NAN;}))















# 225 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/math.h"
#define isinf(y) (fpclassify(y) == FP_INFINITE)



#define isnan(y) (fpclassify(y) == FP_NAN)


#define isnormal(y) (fpclassify(y) == FP_NORMAL)
#define signbit(__x) ((sizeof(__x) == sizeof(float)) ? __signbitf(__x) : __signbitd(__x))



#define isgreater(x,y) (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); !isunordered(__x,__y) && (__x > __y);}))


#define isgreaterequal(x,y) (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); !isunordered(__x,__y) && (__x >= __y);}))


#define isless(x,y) (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); !isunordered(__x,__y) && (__x < __y);}))


#define islessequal(x,y) (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); !isunordered(__x,__y) && (__x <= __y);}))


#define islessgreater(x,y) (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); !isunordered(__x,__y) && (__x < __y || __x > __y);}))



#define isunordered(a,b) (__extension__ ({__typeof__(a) __a = (a); __typeof__(b) __b = (b); fpclassify(__a) == FP_NAN || fpclassify(__b) == FP_NAN;}))





extern double infinity (void);
extern double nan (const char *);
extern int finite (double);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);





extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern int finitef (float);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);






extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);




extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);


extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern float nexttowardf (float, long double);
extern double nexttoward (double, long double);
extern long double nexttowardl (long double, long double);
extern long double logbl (long double);
extern long double log2l (long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);

extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
# 469 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/math.h"
extern double drem (double, double);
extern void sincos (double, double *, double *);
extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);

extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);

extern float dremf (float, float);
extern void sincosf (float, float *, float *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);

extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);



extern double exp10 (double);


extern double pow10 (double);


extern float exp10f (float);


extern float pow10f (float);








#define signgam (*__signgam())
extern int *__signgam (void);


#define __signgam_r(ptr) _REENT_SIGNGAM(ptr)





struct __exception



{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};


extern int matherr (struct __exception *e);






#define DOMAIN 1
#define SING 2
#define OVERFLOW 3
#define UNDERFLOW 4
#define TLOSS 5
#define PLOSS 6







#define MAXFLOAT 3.40282347e+38F

#define M_E 2.7182818284590452354
#define M_LOG2E 1.4426950408889634074
#define M_LOG10E 0.43429448190325182765
#define M_LN2 _M_LN2
#define M_LN10 2.30258509299404568402
#define M_PI 3.14159265358979323846
#define M_PI_2 1.57079632679489661923
#define M_PI_4 0.78539816339744830962
#define M_1_PI 0.31830988618379067154
#define M_2_PI 0.63661977236758134308
#define M_2_SQRTPI 1.12837916709551257390
#define M_SQRT2 1.41421356237309504880
#define M_SQRT1_2 0.70710678118654752440





#define M_TWOPI (M_PI * 2.0)
#define M_3PI_4 2.3561944901923448370E0
#define M_SQRTPI 1.77245385090551602792981
#define M_LN2LO 1.9082149292705877000E-10
#define M_LN2HI 6.9314718036912381649E-1
#define M_SQRT3 1.73205080756887719000
#define M_IVLN10 0.43429448190325182765 
#define M_LOG2_E _M_LN2
#define M_INVLN2 1.4426950408889633870E0 



enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};

#define _LIB_VERSION_TYPE enum __fdlibm_version
#define _LIB_VERSION __fdlib_version

extern enum __fdlibm_version __fdlib_version;

#define _IEEE_ __fdlibm_ieee
#define _SVID_ __fdlibm_svid
#define _XOPEN_ __fdlibm_xopen
#define _POSIX_ __fdlibm_posix



}
# 35 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h" 1











# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h"
#define CONFIG_GATTC_ENABLE 1
#define CONFIG_ESP32_PHY_MAX_TX_POWER 20
#define CONFIG_TRACEMEM_RESERVE_DRAM 0x0
#define CONFIG_FREERTOS_MAX_TASK_NAME_LEN 16
#define CONFIG_MQTT_TRANSPORT_SSL 1
#define CONFIG_BLE_SMP_ENABLE 1
#define CONFIG_SPIRAM_TYPE_AUTO 1
#define CONFIG_STACK_CHECK 1
#define CONFIG_MB_SERIAL_TASK_PRIO 10
#define CONFIG_MQTT_PROTOCOL_311 1
#define CONFIG_TCP_RECVMBOX_SIZE 6
#define CONFIG_LWIP_ETHARP_TRUST_IP_MAC 1
#define CONFIG_BLE_SCAN_DUPLICATE 1
#define CONFIG_STACK_CHECK_NORM 1
#define CONFIG_TCP_WND_DEFAULT 5744
#define CONFIG_PARTITION_TABLE_OFFSET 0x8000
#define CONFIG_SW_COEXIST_ENABLE 1
#define CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE 3
#define CONFIG_SPIFFS_USE_MAGIC_LENGTH 1
#define CONFIG_ESPTOOLPY_FLASHSIZE_4MB 1
#define CONFIG_IPC_TASK_STACK_SIZE 1024
#define CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES 16
#define CONFIG_FATFS_PER_FILE_CACHE 1
#define CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY 1
#define CONFIG_ESPTOOLPY_FLASHFREQ "40m"
#define CONFIG_LWIP_TCP_RTO_TIME 3000
#define CONFIG_SCCB_HARDWARE_I2C_PORT1 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA 1
#define CONFIG_UDP_RECVMBOX_SIZE 6
#define CONFIG_APP_RETRIEVE_LEN_ELF_SHA 16
#define CONFIG_ARDUHAL_PARTITION_SCHEME_DEFAULT 1
#define CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE 0
#define CONFIG_MBEDTLS_AES_C 1
#define CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED 1
#define CONFIG_A2DP_SINK_TASK_STACK_SIZE 2048
#define CONFIG_ESP32_WIFI_SOFTAP_BEACON_MAX_LEN 752
#define CONFIG_MBEDTLS_GCM_C 1
#define CONFIG_ESPTOOLPY_FLASHSIZE "4MB"
#define CONFIG_SPIFFS_CACHE_WR 1
#define CONFIG_SPIRAM_CACHE_WORKAROUND 1
#define CONFIG_BROWNOUT_DET_LVL_SEL_0 1
#define CONFIG_D0WD_PSRAM_CS_IO 16
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER 1
#define CONFIG_EMAC_L2_TO_L3_RX_BUF_MODE 1
#define CONFIG_BTDM_CONTROLLER_MODEM_SLEEP 1
#define CONFIG_SPIFFS_CACHE 1
#define CONFIG_INT_WDT 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN 3
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1 1
#define CONFIG_BT_STACK_NO_LOG 1
#define CONFIG_ESP_GRATUITOUS_ARP 1
#define CONFIG_MBEDTLS_ECDSA_C 1
#define CONFIG_ESPTOOLPY_FLASHFREQ_40M 1
#define CONFIG_HTTPD_MAX_REQ_HDR_LEN 512
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE 0
#define CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS 1
#define CONFIG_MBEDTLS_ECDH_C 1
#define CONFIG_SPIRAM_USE_CAPS_ALLOC 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE 1
#define CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM 16
#define CONFIG_MBEDTLS_SSL_ALPN 1
#define CONFIG_MBEDTLS_PEM_WRITE_C 1
#define CONFIG_BT_SPP_ENABLED 1
#define CONFIG_BT_RESERVE_DRAM 0xdb5c
#define CONFIG_APP_COMPILE_TIME_DATE 1
#define CONFIG_CXX_EXCEPTIONS 1
#define CONFIG_D2WD_PSRAM_CLK_IO 9
#define CONFIG_FATFS_FS_LOCK 0
#define CONFIG_IP_LOST_TIMER_INTERVAL 120
#define CONFIG_SPIFFS_META_LENGTH 4
#define CONFIG_ESP32_PANIC_PRINT_REBOOT 1
#define CONFIG_MB_CONTROLLER_NOTIFY_QUEUE_SIZE 20
#define CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED 1
#define CONFIG_CAMERA_CORE1 1
#define CONFIG_ESP32_DPORT_DIS_INTERRUPT_LVL 5
#define CONFIG_MB_SERIAL_BUF_SIZE 256
#define CONFIG_CONSOLE_UART_BAUDRATE 115200
#define CONFIG_SPIRAM_SUPPORT 1
#define CONFIG_MFN56_1X 1
#define CONFIG_LWIP_MAX_SOCKETS 10
#define CONFIG_LWIP_NETIF_LOOPBACK 1
#define CONFIG_LWIP_TCP_ISN_HOOK 1
#define CONFIG_ESP32_PTHREAD_TASK_NAME_DEFAULT "pthread"
#define CONFIG_EMAC_TASK_PRIORITY 20
#define CONFIG_TIMER_TASK_STACK_DEPTH 2048
#define CONFIG_TCP_MSS 1436
#define CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED 1
#define CONFIG_BTDM_CONTROLLER_MODE_BTDM 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN_EFF 3
#define CONFIG_EFUSE_CODE_SCHEME_COMPAT_3_4 1
#define CONFIG_TCPIP_TASK_AFFINITY_CPU0 1
#define CONFIG_FATFS_CODEPAGE 850
#define CONFIG_SPIRAM_SPIWP_SD3_PIN 7
#define CONFIG_ULP_COPROC_RESERVE_MEM 512
#define CONFIG_LWIP_MAX_UDP_PCBS 16
#define CONFIG_ESPTOOLPY_BAUD 921600
#define CONFIG_INT_WDT_CHECK_CPU1 1
#define CONFIG_ADC_CAL_LUT_ENABLE 1
#define CONFIG_FLASHMODE_DIO 1
#define CONFIG_LWIP_ESP_LWIP_ASSERT 1
#define CONFIG_ESPTOOLPY_AFTER_RESET 1
#define CONFIG_OPTIMIZATION_ASSERTIONS_ENABLED 1
#define CONFIG_LWIP_DHCPS_MAX_STATION_NUM 8
#define CONFIG_TOOLPREFIX "xtensa-esp32-elf-"
#define CONFIG_MBEDTLS_ECP_C 1
#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024
#define CONFIG_MBEDTLS_RC4_DISABLED 1
#define CONFIG_FATFS_LFN_STACK 1
#define CONFIG_BTDM_CONTROLLER_FULL_SCAN_SUPPORTED 1
#define CONFIG_CONSOLE_UART_NUM 0
#define CONFIG_ARDUINO_EVENT_RUNNING_CORE 1
#define CONFIG_ESP32_APPTRACE_LOCK_ENABLE 1
#define CONFIG_PTHREAD_STACK_MIN 768
#define CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC 1
#define CONFIG_TCP_OVERSIZE_MSS 1
#define CONFIG_FOUR_UNIVERSAL_MAC_ADDRESS 1
#define CONFIG_CONSOLE_UART_DEFAULT 1
#define CONFIG_A2DP_SOURCE_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN 16384
#define CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS 4
#define CONFIG_ESPTOOLPY_FLASHSIZE_DETECT 1
#define CONFIG_AUTOSTART_ARDUINO 1
#define CONFIG_ARDUINO_RUNNING_CORE 1
#define CONFIG_ESP32_ECO3_CACHE_LOCK_FIX 1
#define CONFIG_PPP_CHAP_SUPPORT 1
#define CONFIG_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_TIMER_TASK_STACK_SIZE 4096
#define CONFIG_ESP32_ENABLE_COREDUMP_TO_NONE 1
#define CONFIG_SPIRAM_BANKSWITCH_ENABLE 1
#define CONFIG_MBEDTLS_X509_CRL_PARSE_C 1
#define CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER 1
#define CONFIG_HTTPD_PURGE_BUF_LEN 32
#define CONFIG_SCAN_DUPLICATE_BY_DEVICE_ADDR 1
#define CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER 1
#define CONFIG_MB_SERIAL_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_PSK_MODES 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_AUTO 1
#define CONFIG_LWIP_DHCPS_LEASE_UNIT 60
#define CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION 1
#define CONFIG_EFUSE_MAX_BLK_LEN 192
#define CONFIG_SPIFFS_USE_MAGIC 1
#define CONFIG_OV7725_SUPPORT 1
#define CONFIG_TCPIP_TASK_STACK_SIZE 2560
#define CONFIG_BLUEDROID_PINNED_TO_CORE_0 1
#define CONFIG_FATFS_CODEPAGE_850 1
#define CONFIG_TASK_WDT 1
#define CONFIG_MTMN_LITE_QUANT 1
#define CONFIG_MAIN_TASK_STACK_SIZE 4096
#define CONFIG_SPIFFS_PAGE_CHECK 1
#define CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_0 1
#define CONFIG_LWIP_MAX_ACTIVE_TCP 16
#define CONFIG_TASK_WDT_TIMEOUT_S 5
#define CONFIG_INT_WDT_TIMEOUT_MS 300
#define CONFIG_ARDUINO_EVENT_RUN_CORE1 1
#define CONFIG_ESPTOOLPY_FLASHMODE "dio"
#define CONFIG_BTC_TASK_STACK_SIZE 8192
#define CONFIG_BLUEDROID_ENABLED 1
#define CONFIG_NEWLIB_STDIN_LINE_ENDING_CR 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA 1
#define CONFIG_ESPTOOLPY_BEFORE "default_reset"
#define CONFIG_ADC2_DISABLE_DAC 1
#define CONFIG_HFP_ENABLE 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_NUM 100
#define CONFIG_ESP32_REV_MIN_0 1
#define CONFIG_LOG_DEFAULT_LEVEL 1
#define CONFIG_TIMER_QUEUE_LENGTH 10
#define CONFIG_ARDUINO_LOOP_STACK_SIZE 8192
#define CONFIG_ESP32_REV_MIN 0
#define CONFIG_SUPPRESS_SELECT_DEBUG_OUTPUT 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_MODE 0
#define CONFIG_OV5640_SUPPORT 1
#define CONFIG_MAKE_WARN_UNDEFINED_VARIABLES 1
#define CONFIG_FATFS_TIMEOUT_MS 10000
#define CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM 32
#define CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS 1
#define CONFIG_MBEDTLS_CCM_C 1
#define CONFIG_SPI_MASTER_ISR_IN_IRAM 1
#define CONFIG_ARDUHAL_PARTITION_SCHEME "default"
#define CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER 20
#define CONFIG_ESP32_RTC_CLK_CAL_CYCLES 1024
#define CONFIG_ESP32_WIFI_TX_BA_WIN 6
#define CONFIG_ESP32_WIFI_NVS_ENABLED 1
#define CONFIG_MDNS_MAX_SERVICES 10
#define CONFIG_ULP_COPROC_ENABLED 1
#define CONFIG_HFP_AUDIO_DATA_PATH_PCM 1
#define CONFIG_IDF_TARGET_ESP32 1
#define CONFIG_EMAC_CHECK_LINK_PERIOD_MS 2000
#define CONFIG_BTDM_LPCLK_SEL_MAIN_XTAL 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED 1
#define CONFIG_LWIP_SNTP_UPDATE_DELAY 3600000
#define CONFIG_LIBSODIUM_USE_MBEDTLS_SHA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK 1
#define CONFIG_DMA_RX_BUF_NUM 10
#define CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_PSK 1
#define CONFIG_TCP_SYNMAXRTX 6
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF 0
#define CONFIG_HEAP_POISONING_LIGHT 1
#define CONFIG_PYTHON "python"
#define CONFIG_SPIRAM_BANKSWITCH_RESERVE 8
#define CONFIG_MBEDTLS_ECP_NIST_OPTIM 1
#define CONFIG_ESP32_TIME_SYSCALL_USE_RTC_FRC1 1
#define CONFIG_ESPTOOLPY_COMPRESSED 1
#define CONFIG_PARTITION_TABLE_FILENAME "partitions_singleapp.csv"
#define CONFIG_MB_CONTROLLER_STACK_SIZE 4096
#define CONFIG_TCP_SND_BUF_DEFAULT 5744
#define CONFIG_GARP_TMR_INTERVAL 60
#define CONFIG_LWIP_DHCP_MAX_NTP_SERVERS 1
#define CONFIG_TCP_MSL 60000
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_1 1
#define CONFIG_LWIP_SO_REUSE_RXTOALL 1
#define CONFIG_MB_CONTROLLER_NOTIFY_TIMEOUT 20
#define CONFIG_ESP32_WIFI_MGMT_SBUF_NUM 32
#define CONFIG_PARTITION_TABLE_SINGLE_APP 1
#define CONFIG_XTENSA_IMPL 1
#define CONFIG_UNITY_ENABLE_FLOAT 1
#define CONFIG_ESP32_WIFI_RX_BA_WIN 16
#define CONFIG_MBEDTLS_X509_CSR_PARSE_C 1
#define CONFIG_SPIFFS_USE_MTIME 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN 0
#define CONFIG_LWIP_DHCP_RESTORE_LAST_IP 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN 2
#define CONFIG_PICO_PSRAM_CS_IO 10
#define CONFIG_EMAC_TASK_STACK_SIZE 3072
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT 1
#define CONFIG_MB_QUEUE_LENGTH 20
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA 1
#define CONFIG_OV2640_SUPPORT 1
#define CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_PSK 1
#define CONFIG_PPP_SUPPORT 1
#define CONFIG_SPIRAM_SPEED_40M 1
#define CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE 2048
#define CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V 1
#define CONFIG_ESP32_DEEP_SLEEP_WAKEUP_DELAY 2000
#define CONFIG_BROWNOUT_DET_LVL 0
#define CONFIG_MBEDTLS_PEM_PARSE_C 1
#define CONFIG_SPIFFS_GC_MAX_RUNS 10
#define CONFIG_ARDUINO_RUN_CORE1 1
#define CONFIG_ESP32_APPTRACE_DEST_NONE 1
#define CONFIG_HP_NANO1 1
#define CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC 1
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA 1
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM 32
#define CONFIG_HTTPD_MAX_URI_LEN 512
#define CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED 1
#define CONFIG_OV7670_SUPPORT 1
#define CONFIG_ARDUHAL_ESP_LOG 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED 1
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ 240
#define CONFIG_MBEDTLS_HARDWARE_AES 1
#define CONFIG_FREERTOS_HZ 1000
#define CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE 1
#define CONFIG_ADC_CAL_EFUSE_TP_ENABLE 1
#define CONFIG_FREERTOS_ASSERT_FAIL_ABORT 1
#define CONFIG_BROWNOUT_DET 1
#define CONFIG_ESP32_XTAL_FREQ 0
#define CONFIG_MONITOR_BAUD_115200B 1
#define CONFIG_LOG_BOOTLOADER_LEVEL 0
#define CONFIG_D2WD_PSRAM_CS_IO 10
#define CONFIG_MBEDTLS_TLS_ENABLED 1
#define CONFIG_LWIP_MAX_RAW_PCBS 16
#define CONFIG_BTU_TASK_STACK_SIZE 4096
#define CONFIG_SMP_ENABLE 1
#define CONFIG_SPIRAM_SIZE -1
#define CONFIG_ARDUINO_UDP_TASK_PRIORITY 3
#define CONFIG_MBEDTLS_SSL_SESSION_TICKETS 1
#define CONFIG_SPIFFS_MAX_PARTITIONS 3
#define CONFIG_ESP_ERR_TO_NAME_LOOKUP 1
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE_0 1
#define CONFIG_MBEDTLS_SSL_RENEGOTIATION 1
#define CONFIG_ESPTOOLPY_BEFORE_RESET 1
#define CONFIG_MB_EVENT_QUEUE_TIMEOUT 20
#define CONFIG_ESPTOOLPY_BAUD_OTHER_VAL 115200
#define CONFIG_PPP_MPPE_SUPPORT 1
#define CONFIG_ENABLE_ARDUINO_DEPENDS 1
#define CONFIG_WARN_WRITE_STRINGS 1
#define CONFIG_SPIFFS_OBJ_NAME_LEN 32
#define CONFIG_ESP32_PTHREAD_TASK_PRIO_DEFAULT 5
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN_EFF 2
#define CONFIG_LOG_BOOTLOADER_LEVEL_NONE 1
#define CONFIG_PARTITION_TABLE_MD5 1
#define CONFIG_TCPIP_RECVMBOX_SIZE 32
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_240 1
#define CONFIG_ESP32_XTAL_FREQ_AUTO 1
#define CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST 1
#define CONFIG_TCP_MAXRTX 12
#define CONFIG_ESPTOOLPY_AFTER "hard_reset"
#define CONFIG_LWIP_IP4_FRAG 1
#define CONFIG_TCPIP_TASK_AFFINITY 0x0
#define CONFIG_LWIP_SO_REUSE 1
#define CONFIG_ARDUINO_UDP_RUN_CORE1 1
#define CONFIG_DMA_TX_BUF_NUM 10
#define CONFIG_LWIP_MAX_LISTENING_TCP 16
#define CONFIG_FREERTOS_INTERRUPT_BACKTRACE 1
#define CONFIG_WL_SECTOR_SIZE 4096
#define CONFIG_ESP32_DEBUG_OCDAWARE 1
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET 1
#define CONFIG_TIMER_TASK_PRIORITY 1
#define CONFIG_PPP_PAP_SUPPORT 1
#define CONFIG_MBEDTLS_TLS_CLIENT 1
#define CONFIG_BTDM_CONTROLLER_HCI_MODE_VHCI 1
#define CONFIG_BT_ENABLED 1
#define CONFIG_ESP32_DEFAULT_PTHREAD_CORE_NO_AFFINITY 1
#define CONFIG_D0WD_PSRAM_CLK_IO 17
#define CONFIG_BT_SSP_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED 1
#define CONFIG_MONITOR_BAUD 115200
#define CONFIG_ESP32_PTHREAD_TASK_CORE_DEFAULT -1
#define CONFIG_ESP32_DEBUG_STUBS_ENABLE 1
#define CONFIG_BLE_ESTABLISH_LINK_CONNECTION_TIMEOUT 30
#define CONFIG_TCPIP_LWIP 1
#define CONFIG_REDUCE_PHY_TX_POWER 1
#define CONFIG_BOOTLOADER_WDT_TIME_MS 9000
#define CONFIG_FREERTOS_CORETIMER_0 1
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT_EFF 1
#define CONFIG_LWIP_IP6_FRAG 1
#define CONFIG_IDF_FIRMWARE_CHIP_ID 0x0000
#define CONFIG_PARTITION_TABLE_CUSTOM_FILENAME "partitions.csv"
#define CONFIG_MBEDTLS_HAVE_TIME 1
#define CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY 1
#define CONFIG_TCP_QUEUE_OOSEQ 1
#define CONFIG_FATFS_ALLOC_PREFER_EXTRAM 1
#define CONFIG_GATTS_ENABLE 1
#define CONFIG_CXX_EXCEPTIONS_EMG_POOL_SIZE 0
#define CONFIG_ADC_CAL_EFUSE_VREF_ENABLE 1
#define CONFIG_MBEDTLS_TLS_SERVER 1
#define CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_SUPPORTED 1
#define CONFIG_FREERTOS_ISR_STACKSIZE 1536
#define CONFIG_SUPPORT_TERMIOS 1
#define CONFIG_CLASSIC_BT_ENABLED 1
#define CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA_PSK 1
#define CONFIG_OPENSSL_ASSERT_DO_NOTHING 1
#define CONFIG_IDF_TARGET "esp32"
#define CONFIG_WL_SECTOR_SIZE_4096 1
#define CONFIG_OPTIMIZATION_LEVEL_DEBUG 1
#define CONFIG_FREERTOS_NO_AFFINITY 0x7FFFFFFF
#define CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED 1
#define CONFIG_HTTPD_ERR_RESP_NO_DELAY 1
#define CONFIG_MB_TIMER_INDEX 0
#define CONFIG_SCAN_DUPLICATE_TYPE 0
#define CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED 1
#define CONFIG_HFP_CLIENT_ENABLE 1
#define CONFIG_NT99141_SUPPORT 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA 1
#define CONFIG_SPI_SLAVE_ISR_IN_IRAM 1
#define CONFIG_SYSTEM_EVENT_QUEUE_SIZE 32
#define CONFIG_BT_ACL_CONNECTIONS 4
#define CONFIG_FATFS_MAX_LFN 255
#define CONFIG_ESP32_WIFI_TX_BUFFER_TYPE 1
#define CONFIG_ESPTOOLPY_BAUD_921600B 1
#define CONFIG_BOOTLOADER_WDT_ENABLE 1
#define CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED 1
#define CONFIG_LWIP_LOOPBACK_MAX_PBUFS 8
#define CONFIG_A2DP_ENABLE 1
#define CONFIG_MB_TIMER_GROUP 0
#define CONFIG_SPI_FLASH_ROM_DRIVER_PATCH 1
#define CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS 5
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE 1
#define CONFIG_SPIFFS_PAGE_SIZE 256
#define CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED 1
#define CONFIG_ESP32_DPORT_WORKAROUND 1
#define CONFIG_GATTS_BLUFI_ENABLE 1
#define CONFIG_PPP_MSCHAP_SUPPORT 1
#define CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU0 1
#define CONFIG_ESP32_PTHREAD_TASK_STACK_SIZE_DEFAULT 2048
#define CONFIG_LWIP_SO_RCVBUF 1
#define CONFIG_MB_TIMER_PORT_ENABLED 1
#define CONFIG_DUPLICATE_SCAN_CACHE_SIZE 20
#define CONFIG_ARDUINO_UDP_RUNNING_CORE 1
#define CONFIG_MONITOR_BAUD_OTHER_VAL 115200
#define CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF 1
#define CONFIG_ESPTOOLPY_PORT "/dev/cu.usbserial-DO00EAB0"
#define CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS 1
#define CONFIG_BTDM_CTRL_BR_EDR_SCO_DATA_PATH_EFF 0
#define CONFIG_LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 1
#define CONFIG_TASK_WDT_PANIC 1
#define CONFIG_OV3660_SUPPORT 1
#define CONFIG_UNITY_ENABLE_DOUBLE 1
#define CONFIG_BLE_ADV_REPORT_DISCARD_THRSHOLD 20
#define CONFIG_BLUEDROID_PINNED_TO_CORE 0
#define CONFIG_HD_NANO1 1
#define CONFIG_BTDM_MODEM_SLEEP_MODE_ORIG 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_FATFS_API_ENCODING_ANSI_OEM 1
#define CONFIG_ARDUINO_IDF_COMMIT "7e63061fa"
#define CONFIG_ARDUINO_IDF_BRANCH "release/v3.3"
# 36 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/esp_system.h" 1













# 37 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2






void vPortYield(void);
void yield(void);
#define optimistic_yield(u) 

#define ESP_REG(addr) *((volatile uint32_t *)(addr))
#define NOP() asm volatile ("nop")

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-log.h" 1














#define __ARDUHAL_LOG_H__ 


extern "C"
{


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h" 1











# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h"
#define CONFIG_GATTC_ENABLE 1
#define CONFIG_ESP32_PHY_MAX_TX_POWER 20
#define CONFIG_TRACEMEM_RESERVE_DRAM 0x0
#define CONFIG_FREERTOS_MAX_TASK_NAME_LEN 16
#define CONFIG_MQTT_TRANSPORT_SSL 1
#define CONFIG_BLE_SMP_ENABLE 1
#define CONFIG_SPIRAM_TYPE_AUTO 1
#define CONFIG_STACK_CHECK 1
#define CONFIG_MB_SERIAL_TASK_PRIO 10
#define CONFIG_MQTT_PROTOCOL_311 1
#define CONFIG_TCP_RECVMBOX_SIZE 6
#define CONFIG_LWIP_ETHARP_TRUST_IP_MAC 1
#define CONFIG_BLE_SCAN_DUPLICATE 1
#define CONFIG_STACK_CHECK_NORM 1
#define CONFIG_TCP_WND_DEFAULT 5744
#define CONFIG_PARTITION_TABLE_OFFSET 0x8000
#define CONFIG_SW_COEXIST_ENABLE 1
#define CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE 3
#define CONFIG_SPIFFS_USE_MAGIC_LENGTH 1
#define CONFIG_ESPTOOLPY_FLASHSIZE_4MB 1
#define CONFIG_IPC_TASK_STACK_SIZE 1024
#define CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES 16
#define CONFIG_FATFS_PER_FILE_CACHE 1
#define CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY 1
#define CONFIG_ESPTOOLPY_FLASHFREQ "40m"
#define CONFIG_LWIP_TCP_RTO_TIME 3000
#define CONFIG_SCCB_HARDWARE_I2C_PORT1 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA 1
#define CONFIG_UDP_RECVMBOX_SIZE 6
#define CONFIG_APP_RETRIEVE_LEN_ELF_SHA 16
#define CONFIG_ARDUHAL_PARTITION_SCHEME_DEFAULT 1
#define CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE 0
#define CONFIG_MBEDTLS_AES_C 1
#define CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED 1
#define CONFIG_A2DP_SINK_TASK_STACK_SIZE 2048
#define CONFIG_ESP32_WIFI_SOFTAP_BEACON_MAX_LEN 752
#define CONFIG_MBEDTLS_GCM_C 1
#define CONFIG_ESPTOOLPY_FLASHSIZE "4MB"
#define CONFIG_SPIFFS_CACHE_WR 1
#define CONFIG_SPIRAM_CACHE_WORKAROUND 1
#define CONFIG_BROWNOUT_DET_LVL_SEL_0 1
#define CONFIG_D0WD_PSRAM_CS_IO 16
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER 1
#define CONFIG_EMAC_L2_TO_L3_RX_BUF_MODE 1
#define CONFIG_BTDM_CONTROLLER_MODEM_SLEEP 1
#define CONFIG_SPIFFS_CACHE 1
#define CONFIG_INT_WDT 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN 3
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1 1
#define CONFIG_BT_STACK_NO_LOG 1
#define CONFIG_ESP_GRATUITOUS_ARP 1
#define CONFIG_MBEDTLS_ECDSA_C 1
#define CONFIG_ESPTOOLPY_FLASHFREQ_40M 1
#define CONFIG_HTTPD_MAX_REQ_HDR_LEN 512
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE 0
#define CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS 1
#define CONFIG_MBEDTLS_ECDH_C 1
#define CONFIG_SPIRAM_USE_CAPS_ALLOC 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE 1
#define CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM 16
#define CONFIG_MBEDTLS_SSL_ALPN 1
#define CONFIG_MBEDTLS_PEM_WRITE_C 1
#define CONFIG_BT_SPP_ENABLED 1
#define CONFIG_BT_RESERVE_DRAM 0xdb5c
#define CONFIG_APP_COMPILE_TIME_DATE 1
#define CONFIG_CXX_EXCEPTIONS 1
#define CONFIG_D2WD_PSRAM_CLK_IO 9
#define CONFIG_FATFS_FS_LOCK 0
#define CONFIG_IP_LOST_TIMER_INTERVAL 120
#define CONFIG_SPIFFS_META_LENGTH 4
#define CONFIG_ESP32_PANIC_PRINT_REBOOT 1
#define CONFIG_MB_CONTROLLER_NOTIFY_QUEUE_SIZE 20
#define CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED 1
#define CONFIG_CAMERA_CORE1 1
#define CONFIG_ESP32_DPORT_DIS_INTERRUPT_LVL 5
#define CONFIG_MB_SERIAL_BUF_SIZE 256
#define CONFIG_CONSOLE_UART_BAUDRATE 115200
#define CONFIG_SPIRAM_SUPPORT 1
#define CONFIG_MFN56_1X 1
#define CONFIG_LWIP_MAX_SOCKETS 10
#define CONFIG_LWIP_NETIF_LOOPBACK 1
#define CONFIG_LWIP_TCP_ISN_HOOK 1
#define CONFIG_ESP32_PTHREAD_TASK_NAME_DEFAULT "pthread"
#define CONFIG_EMAC_TASK_PRIORITY 20
#define CONFIG_TIMER_TASK_STACK_DEPTH 2048
#define CONFIG_TCP_MSS 1436
#define CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED 1
#define CONFIG_BTDM_CONTROLLER_MODE_BTDM 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN_EFF 3
#define CONFIG_EFUSE_CODE_SCHEME_COMPAT_3_4 1
#define CONFIG_TCPIP_TASK_AFFINITY_CPU0 1
#define CONFIG_FATFS_CODEPAGE 850
#define CONFIG_SPIRAM_SPIWP_SD3_PIN 7
#define CONFIG_ULP_COPROC_RESERVE_MEM 512
#define CONFIG_LWIP_MAX_UDP_PCBS 16
#define CONFIG_ESPTOOLPY_BAUD 921600
#define CONFIG_INT_WDT_CHECK_CPU1 1
#define CONFIG_ADC_CAL_LUT_ENABLE 1
#define CONFIG_FLASHMODE_DIO 1
#define CONFIG_LWIP_ESP_LWIP_ASSERT 1
#define CONFIG_ESPTOOLPY_AFTER_RESET 1
#define CONFIG_OPTIMIZATION_ASSERTIONS_ENABLED 1
#define CONFIG_LWIP_DHCPS_MAX_STATION_NUM 8
#define CONFIG_TOOLPREFIX "xtensa-esp32-elf-"
#define CONFIG_MBEDTLS_ECP_C 1
#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024
#define CONFIG_MBEDTLS_RC4_DISABLED 1
#define CONFIG_FATFS_LFN_STACK 1
#define CONFIG_BTDM_CONTROLLER_FULL_SCAN_SUPPORTED 1
#define CONFIG_CONSOLE_UART_NUM 0
#define CONFIG_ARDUINO_EVENT_RUNNING_CORE 1
#define CONFIG_ESP32_APPTRACE_LOCK_ENABLE 1
#define CONFIG_PTHREAD_STACK_MIN 768
#define CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC 1
#define CONFIG_TCP_OVERSIZE_MSS 1
#define CONFIG_FOUR_UNIVERSAL_MAC_ADDRESS 1
#define CONFIG_CONSOLE_UART_DEFAULT 1
#define CONFIG_A2DP_SOURCE_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN 16384
#define CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS 4
#define CONFIG_ESPTOOLPY_FLASHSIZE_DETECT 1
#define CONFIG_AUTOSTART_ARDUINO 1
#define CONFIG_ARDUINO_RUNNING_CORE 1
#define CONFIG_ESP32_ECO3_CACHE_LOCK_FIX 1
#define CONFIG_PPP_CHAP_SUPPORT 1
#define CONFIG_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_TIMER_TASK_STACK_SIZE 4096
#define CONFIG_ESP32_ENABLE_COREDUMP_TO_NONE 1
#define CONFIG_SPIRAM_BANKSWITCH_ENABLE 1
#define CONFIG_MBEDTLS_X509_CRL_PARSE_C 1
#define CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER 1
#define CONFIG_HTTPD_PURGE_BUF_LEN 32
#define CONFIG_SCAN_DUPLICATE_BY_DEVICE_ADDR 1
#define CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER 1
#define CONFIG_MB_SERIAL_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_PSK_MODES 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_AUTO 1
#define CONFIG_LWIP_DHCPS_LEASE_UNIT 60
#define CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION 1
#define CONFIG_EFUSE_MAX_BLK_LEN 192
#define CONFIG_SPIFFS_USE_MAGIC 1
#define CONFIG_OV7725_SUPPORT 1
#define CONFIG_TCPIP_TASK_STACK_SIZE 2560
#define CONFIG_BLUEDROID_PINNED_TO_CORE_0 1
#define CONFIG_FATFS_CODEPAGE_850 1
#define CONFIG_TASK_WDT 1
#define CONFIG_MTMN_LITE_QUANT 1
#define CONFIG_MAIN_TASK_STACK_SIZE 4096
#define CONFIG_SPIFFS_PAGE_CHECK 1
#define CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_0 1
#define CONFIG_LWIP_MAX_ACTIVE_TCP 16
#define CONFIG_TASK_WDT_TIMEOUT_S 5
#define CONFIG_INT_WDT_TIMEOUT_MS 300
#define CONFIG_ARDUINO_EVENT_RUN_CORE1 1
#define CONFIG_ESPTOOLPY_FLASHMODE "dio"
#define CONFIG_BTC_TASK_STACK_SIZE 8192
#define CONFIG_BLUEDROID_ENABLED 1
#define CONFIG_NEWLIB_STDIN_LINE_ENDING_CR 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA 1
#define CONFIG_ESPTOOLPY_BEFORE "default_reset"
#define CONFIG_ADC2_DISABLE_DAC 1
#define CONFIG_HFP_ENABLE 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_NUM 100
#define CONFIG_ESP32_REV_MIN_0 1
#define CONFIG_LOG_DEFAULT_LEVEL 1
#define CONFIG_TIMER_QUEUE_LENGTH 10
#define CONFIG_ARDUINO_LOOP_STACK_SIZE 8192
#define CONFIG_ESP32_REV_MIN 0
#define CONFIG_SUPPRESS_SELECT_DEBUG_OUTPUT 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_MODE 0
#define CONFIG_OV5640_SUPPORT 1
#define CONFIG_MAKE_WARN_UNDEFINED_VARIABLES 1
#define CONFIG_FATFS_TIMEOUT_MS 10000
#define CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM 32
#define CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS 1
#define CONFIG_MBEDTLS_CCM_C 1
#define CONFIG_SPI_MASTER_ISR_IN_IRAM 1
#define CONFIG_ARDUHAL_PARTITION_SCHEME "default"
#define CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER 20
#define CONFIG_ESP32_RTC_CLK_CAL_CYCLES 1024
#define CONFIG_ESP32_WIFI_TX_BA_WIN 6
#define CONFIG_ESP32_WIFI_NVS_ENABLED 1
#define CONFIG_MDNS_MAX_SERVICES 10
#define CONFIG_ULP_COPROC_ENABLED 1
#define CONFIG_HFP_AUDIO_DATA_PATH_PCM 1
#define CONFIG_IDF_TARGET_ESP32 1
#define CONFIG_EMAC_CHECK_LINK_PERIOD_MS 2000
#define CONFIG_BTDM_LPCLK_SEL_MAIN_XTAL 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED 1
#define CONFIG_LWIP_SNTP_UPDATE_DELAY 3600000
#define CONFIG_LIBSODIUM_USE_MBEDTLS_SHA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK 1
#define CONFIG_DMA_RX_BUF_NUM 10
#define CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_PSK 1
#define CONFIG_TCP_SYNMAXRTX 6
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF 0
#define CONFIG_HEAP_POISONING_LIGHT 1
#define CONFIG_PYTHON "python"
#define CONFIG_SPIRAM_BANKSWITCH_RESERVE 8
#define CONFIG_MBEDTLS_ECP_NIST_OPTIM 1
#define CONFIG_ESP32_TIME_SYSCALL_USE_RTC_FRC1 1
#define CONFIG_ESPTOOLPY_COMPRESSED 1
#define CONFIG_PARTITION_TABLE_FILENAME "partitions_singleapp.csv"
#define CONFIG_MB_CONTROLLER_STACK_SIZE 4096
#define CONFIG_TCP_SND_BUF_DEFAULT 5744
#define CONFIG_GARP_TMR_INTERVAL 60
#define CONFIG_LWIP_DHCP_MAX_NTP_SERVERS 1
#define CONFIG_TCP_MSL 60000
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_1 1
#define CONFIG_LWIP_SO_REUSE_RXTOALL 1
#define CONFIG_MB_CONTROLLER_NOTIFY_TIMEOUT 20
#define CONFIG_ESP32_WIFI_MGMT_SBUF_NUM 32
#define CONFIG_PARTITION_TABLE_SINGLE_APP 1
#define CONFIG_XTENSA_IMPL 1
#define CONFIG_UNITY_ENABLE_FLOAT 1
#define CONFIG_ESP32_WIFI_RX_BA_WIN 16
#define CONFIG_MBEDTLS_X509_CSR_PARSE_C 1
#define CONFIG_SPIFFS_USE_MTIME 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN 0
#define CONFIG_LWIP_DHCP_RESTORE_LAST_IP 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN 2
#define CONFIG_PICO_PSRAM_CS_IO 10
#define CONFIG_EMAC_TASK_STACK_SIZE 3072
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT 1
#define CONFIG_MB_QUEUE_LENGTH 20
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA 1
#define CONFIG_OV2640_SUPPORT 1
#define CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_PSK 1
#define CONFIG_PPP_SUPPORT 1
#define CONFIG_SPIRAM_SPEED_40M 1
#define CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE 2048
#define CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V 1
#define CONFIG_ESP32_DEEP_SLEEP_WAKEUP_DELAY 2000
#define CONFIG_BROWNOUT_DET_LVL 0
#define CONFIG_MBEDTLS_PEM_PARSE_C 1
#define CONFIG_SPIFFS_GC_MAX_RUNS 10
#define CONFIG_ARDUINO_RUN_CORE1 1
#define CONFIG_ESP32_APPTRACE_DEST_NONE 1
#define CONFIG_HP_NANO1 1
#define CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC 1
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA 1
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM 32
#define CONFIG_HTTPD_MAX_URI_LEN 512
#define CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED 1
#define CONFIG_OV7670_SUPPORT 1
#define CONFIG_ARDUHAL_ESP_LOG 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED 1
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ 240
#define CONFIG_MBEDTLS_HARDWARE_AES 1
#define CONFIG_FREERTOS_HZ 1000
#define CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE 1
#define CONFIG_ADC_CAL_EFUSE_TP_ENABLE 1
#define CONFIG_FREERTOS_ASSERT_FAIL_ABORT 1
#define CONFIG_BROWNOUT_DET 1
#define CONFIG_ESP32_XTAL_FREQ 0
#define CONFIG_MONITOR_BAUD_115200B 1
#define CONFIG_LOG_BOOTLOADER_LEVEL 0
#define CONFIG_D2WD_PSRAM_CS_IO 10
#define CONFIG_MBEDTLS_TLS_ENABLED 1
#define CONFIG_LWIP_MAX_RAW_PCBS 16
#define CONFIG_BTU_TASK_STACK_SIZE 4096
#define CONFIG_SMP_ENABLE 1
#define CONFIG_SPIRAM_SIZE -1
#define CONFIG_ARDUINO_UDP_TASK_PRIORITY 3
#define CONFIG_MBEDTLS_SSL_SESSION_TICKETS 1
#define CONFIG_SPIFFS_MAX_PARTITIONS 3
#define CONFIG_ESP_ERR_TO_NAME_LOOKUP 1
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE_0 1
#define CONFIG_MBEDTLS_SSL_RENEGOTIATION 1
#define CONFIG_ESPTOOLPY_BEFORE_RESET 1
#define CONFIG_MB_EVENT_QUEUE_TIMEOUT 20
#define CONFIG_ESPTOOLPY_BAUD_OTHER_VAL 115200
#define CONFIG_PPP_MPPE_SUPPORT 1
#define CONFIG_ENABLE_ARDUINO_DEPENDS 1
#define CONFIG_WARN_WRITE_STRINGS 1
#define CONFIG_SPIFFS_OBJ_NAME_LEN 32
#define CONFIG_ESP32_PTHREAD_TASK_PRIO_DEFAULT 5
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN_EFF 2
#define CONFIG_LOG_BOOTLOADER_LEVEL_NONE 1
#define CONFIG_PARTITION_TABLE_MD5 1
#define CONFIG_TCPIP_RECVMBOX_SIZE 32
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_240 1
#define CONFIG_ESP32_XTAL_FREQ_AUTO 1
#define CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST 1
#define CONFIG_TCP_MAXRTX 12
#define CONFIG_ESPTOOLPY_AFTER "hard_reset"
#define CONFIG_LWIP_IP4_FRAG 1
#define CONFIG_TCPIP_TASK_AFFINITY 0x0
#define CONFIG_LWIP_SO_REUSE 1
#define CONFIG_ARDUINO_UDP_RUN_CORE1 1
#define CONFIG_DMA_TX_BUF_NUM 10
#define CONFIG_LWIP_MAX_LISTENING_TCP 16
#define CONFIG_FREERTOS_INTERRUPT_BACKTRACE 1
#define CONFIG_WL_SECTOR_SIZE 4096
#define CONFIG_ESP32_DEBUG_OCDAWARE 1
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET 1
#define CONFIG_TIMER_TASK_PRIORITY 1
#define CONFIG_PPP_PAP_SUPPORT 1
#define CONFIG_MBEDTLS_TLS_CLIENT 1
#define CONFIG_BTDM_CONTROLLER_HCI_MODE_VHCI 1
#define CONFIG_BT_ENABLED 1
#define CONFIG_ESP32_DEFAULT_PTHREAD_CORE_NO_AFFINITY 1
#define CONFIG_D0WD_PSRAM_CLK_IO 17
#define CONFIG_BT_SSP_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED 1
#define CONFIG_MONITOR_BAUD 115200
#define CONFIG_ESP32_PTHREAD_TASK_CORE_DEFAULT -1
#define CONFIG_ESP32_DEBUG_STUBS_ENABLE 1
#define CONFIG_BLE_ESTABLISH_LINK_CONNECTION_TIMEOUT 30
#define CONFIG_TCPIP_LWIP 1
#define CONFIG_REDUCE_PHY_TX_POWER 1
#define CONFIG_BOOTLOADER_WDT_TIME_MS 9000
#define CONFIG_FREERTOS_CORETIMER_0 1
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT_EFF 1
#define CONFIG_LWIP_IP6_FRAG 1
#define CONFIG_IDF_FIRMWARE_CHIP_ID 0x0000
#define CONFIG_PARTITION_TABLE_CUSTOM_FILENAME "partitions.csv"
#define CONFIG_MBEDTLS_HAVE_TIME 1
#define CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY 1
#define CONFIG_TCP_QUEUE_OOSEQ 1
#define CONFIG_FATFS_ALLOC_PREFER_EXTRAM 1
#define CONFIG_GATTS_ENABLE 1
#define CONFIG_CXX_EXCEPTIONS_EMG_POOL_SIZE 0
#define CONFIG_ADC_CAL_EFUSE_VREF_ENABLE 1
#define CONFIG_MBEDTLS_TLS_SERVER 1
#define CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_SUPPORTED 1
#define CONFIG_FREERTOS_ISR_STACKSIZE 1536
#define CONFIG_SUPPORT_TERMIOS 1
#define CONFIG_CLASSIC_BT_ENABLED 1
#define CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA_PSK 1
#define CONFIG_OPENSSL_ASSERT_DO_NOTHING 1
#define CONFIG_IDF_TARGET "esp32"
#define CONFIG_WL_SECTOR_SIZE_4096 1
#define CONFIG_OPTIMIZATION_LEVEL_DEBUG 1
#define CONFIG_FREERTOS_NO_AFFINITY 0x7FFFFFFF
#define CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED 1
#define CONFIG_HTTPD_ERR_RESP_NO_DELAY 1
#define CONFIG_MB_TIMER_INDEX 0
#define CONFIG_SCAN_DUPLICATE_TYPE 0
#define CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED 1
#define CONFIG_HFP_CLIENT_ENABLE 1
#define CONFIG_NT99141_SUPPORT 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA 1
#define CONFIG_SPI_SLAVE_ISR_IN_IRAM 1
#define CONFIG_SYSTEM_EVENT_QUEUE_SIZE 32
#define CONFIG_BT_ACL_CONNECTIONS 4
#define CONFIG_FATFS_MAX_LFN 255
#define CONFIG_ESP32_WIFI_TX_BUFFER_TYPE 1
#define CONFIG_ESPTOOLPY_BAUD_921600B 1
#define CONFIG_BOOTLOADER_WDT_ENABLE 1
#define CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED 1
#define CONFIG_LWIP_LOOPBACK_MAX_PBUFS 8
#define CONFIG_A2DP_ENABLE 1
#define CONFIG_MB_TIMER_GROUP 0
#define CONFIG_SPI_FLASH_ROM_DRIVER_PATCH 1
#define CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS 5
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE 1
#define CONFIG_SPIFFS_PAGE_SIZE 256
#define CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED 1
#define CONFIG_ESP32_DPORT_WORKAROUND 1
#define CONFIG_GATTS_BLUFI_ENABLE 1
#define CONFIG_PPP_MSCHAP_SUPPORT 1
#define CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU0 1
#define CONFIG_ESP32_PTHREAD_TASK_STACK_SIZE_DEFAULT 2048
#define CONFIG_LWIP_SO_RCVBUF 1
#define CONFIG_MB_TIMER_PORT_ENABLED 1
#define CONFIG_DUPLICATE_SCAN_CACHE_SIZE 20
#define CONFIG_ARDUINO_UDP_RUNNING_CORE 1
#define CONFIG_MONITOR_BAUD_OTHER_VAL 115200
#define CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF 1
#define CONFIG_ESPTOOLPY_PORT "/dev/cu.usbserial-DO00EAB0"
#define CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS 1
#define CONFIG_BTDM_CTRL_BR_EDR_SCO_DATA_PATH_EFF 0
#define CONFIG_LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 1
#define CONFIG_TASK_WDT_PANIC 1
#define CONFIG_OV3660_SUPPORT 1
#define CONFIG_UNITY_ENABLE_DOUBLE 1
#define CONFIG_BLE_ADV_REPORT_DISCARD_THRSHOLD 20
#define CONFIG_BLUEDROID_PINNED_TO_CORE 0
#define CONFIG_HD_NANO1 1
#define CONFIG_BTDM_MODEM_SLEEP_MODE_ORIG 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_FATFS_API_ENCODING_ANSI_OEM 1
#define CONFIG_ARDUINO_IDF_COMMIT "7e63061fa"
#define CONFIG_ARDUINO_IDF_BRANCH "release/v3.3"
# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-log.h" 2

#define ARDUHAL_LOG_LEVEL_NONE (0)
#define ARDUHAL_LOG_LEVEL_ERROR (1)
#define ARDUHAL_LOG_LEVEL_WARN (2)
#define ARDUHAL_LOG_LEVEL_INFO (3)
#define ARDUHAL_LOG_LEVEL_DEBUG (4)
#define ARDUHAL_LOG_LEVEL_VERBOSE (5)
# 38 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-log.h"
#define ARDUHAL_LOG_LEVEL CORE_DEBUG_LEVEL



#define CONFIG_ARDUHAL_LOG_COLORS 0
# 66 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-log.h"
#define ARDUHAL_LOG_COLOR_E 
#define ARDUHAL_LOG_COLOR_W 
#define ARDUHAL_LOG_COLOR_I 
#define ARDUHAL_LOG_COLOR_D 
#define ARDUHAL_LOG_COLOR_V 
#define ARDUHAL_LOG_RESET_COLOR 


const char * pathToFileName(const char * path);
int log_printf(const char *fmt, ...);

#define ARDUHAL_SHORT_LOG_FORMAT(letter,format) ARDUHAL_LOG_COLOR_ ## letter format ARDUHAL_LOG_RESET_COLOR "\r\n"
#define ARDUHAL_LOG_FORMAT(letter,format) ARDUHAL_LOG_COLOR_ ## letter "[" #letter "][%s:%u] %s(): " format ARDUHAL_LOG_RESET_COLOR "\r\n", pathToFileName(__FILE__), __LINE__, __FUNCTION__





#define log_v(format,...) 
#define isr_log_v(format,...) 






#define log_d(format,...) 
#define isr_log_d(format,...) 






#define log_i(format,...) 
#define isr_log_i(format,...) 






#define log_w(format,...) 
#define isr_log_w(format,...) 






#define log_e(format,...) 
#define isr_log_e(format,...) 



#define log_n(format,...) log_printf(ARDUHAL_LOG_FORMAT(E, format), ##__VA_ARGS__)
#define isr_log_n(format,...) ets_printf(ARDUHAL_LOG_FORMAT(E, format), ##__VA_ARGS__)





# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h" 1















#define __ESP_LOG_H__ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdarg.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdarg.h" 3 4


























# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h"











# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h"
#define CONFIG_GATTC_ENABLE 1
#define CONFIG_ESP32_PHY_MAX_TX_POWER 20
#define CONFIG_TRACEMEM_RESERVE_DRAM 0x0
#define CONFIG_FREERTOS_MAX_TASK_NAME_LEN 16
#define CONFIG_MQTT_TRANSPORT_SSL 1
#define CONFIG_BLE_SMP_ENABLE 1
#define CONFIG_SPIRAM_TYPE_AUTO 1
#define CONFIG_STACK_CHECK 1
#define CONFIG_MB_SERIAL_TASK_PRIO 10
#define CONFIG_MQTT_PROTOCOL_311 1
#define CONFIG_TCP_RECVMBOX_SIZE 6
#define CONFIG_LWIP_ETHARP_TRUST_IP_MAC 1
#define CONFIG_BLE_SCAN_DUPLICATE 1
#define CONFIG_STACK_CHECK_NORM 1
#define CONFIG_TCP_WND_DEFAULT 5744
#define CONFIG_PARTITION_TABLE_OFFSET 0x8000
#define CONFIG_SW_COEXIST_ENABLE 1
#define CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE 3
#define CONFIG_SPIFFS_USE_MAGIC_LENGTH 1
#define CONFIG_ESPTOOLPY_FLASHSIZE_4MB 1
#define CONFIG_IPC_TASK_STACK_SIZE 1024
#define CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES 16
#define CONFIG_FATFS_PER_FILE_CACHE 1
#define CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY 1
#define CONFIG_ESPTOOLPY_FLASHFREQ "40m"
#define CONFIG_LWIP_TCP_RTO_TIME 3000
#define CONFIG_SCCB_HARDWARE_I2C_PORT1 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA 1
#define CONFIG_UDP_RECVMBOX_SIZE 6
#define CONFIG_APP_RETRIEVE_LEN_ELF_SHA 16
#define CONFIG_ARDUHAL_PARTITION_SCHEME_DEFAULT 1
#define CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE 0
#define CONFIG_MBEDTLS_AES_C 1
#define CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED 1
#define CONFIG_A2DP_SINK_TASK_STACK_SIZE 2048
#define CONFIG_ESP32_WIFI_SOFTAP_BEACON_MAX_LEN 752
#define CONFIG_MBEDTLS_GCM_C 1
#define CONFIG_ESPTOOLPY_FLASHSIZE "4MB"
#define CONFIG_SPIFFS_CACHE_WR 1
#define CONFIG_SPIRAM_CACHE_WORKAROUND 1
#define CONFIG_BROWNOUT_DET_LVL_SEL_0 1
#define CONFIG_D0WD_PSRAM_CS_IO 16
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER 1
#define CONFIG_EMAC_L2_TO_L3_RX_BUF_MODE 1
#define CONFIG_BTDM_CONTROLLER_MODEM_SLEEP 1
#define CONFIG_SPIFFS_CACHE 1
#define CONFIG_INT_WDT 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN 3
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1 1
#define CONFIG_BT_STACK_NO_LOG 1
#define CONFIG_ESP_GRATUITOUS_ARP 1
#define CONFIG_MBEDTLS_ECDSA_C 1
#define CONFIG_ESPTOOLPY_FLASHFREQ_40M 1
#define CONFIG_HTTPD_MAX_REQ_HDR_LEN 512
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE 0
#define CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS 1
#define CONFIG_MBEDTLS_ECDH_C 1
#define CONFIG_SPIRAM_USE_CAPS_ALLOC 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE 1
#define CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM 16
#define CONFIG_MBEDTLS_SSL_ALPN 1
#define CONFIG_MBEDTLS_PEM_WRITE_C 1
#define CONFIG_BT_SPP_ENABLED 1
#define CONFIG_BT_RESERVE_DRAM 0xdb5c
#define CONFIG_APP_COMPILE_TIME_DATE 1
#define CONFIG_CXX_EXCEPTIONS 1
#define CONFIG_D2WD_PSRAM_CLK_IO 9
#define CONFIG_FATFS_FS_LOCK 0
#define CONFIG_IP_LOST_TIMER_INTERVAL 120
#define CONFIG_SPIFFS_META_LENGTH 4
#define CONFIG_ESP32_PANIC_PRINT_REBOOT 1
#define CONFIG_MB_CONTROLLER_NOTIFY_QUEUE_SIZE 20
#define CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED 1
#define CONFIG_CAMERA_CORE1 1
#define CONFIG_ESP32_DPORT_DIS_INTERRUPT_LVL 5
#define CONFIG_MB_SERIAL_BUF_SIZE 256
#define CONFIG_CONSOLE_UART_BAUDRATE 115200
#define CONFIG_SPIRAM_SUPPORT 1
#define CONFIG_MFN56_1X 1
#define CONFIG_LWIP_MAX_SOCKETS 10
#define CONFIG_LWIP_NETIF_LOOPBACK 1
#define CONFIG_LWIP_TCP_ISN_HOOK 1
#define CONFIG_ESP32_PTHREAD_TASK_NAME_DEFAULT "pthread"
#define CONFIG_EMAC_TASK_PRIORITY 20
#define CONFIG_TIMER_TASK_STACK_DEPTH 2048
#define CONFIG_TCP_MSS 1436
#define CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED 1
#define CONFIG_BTDM_CONTROLLER_MODE_BTDM 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN_EFF 3
#define CONFIG_EFUSE_CODE_SCHEME_COMPAT_3_4 1
#define CONFIG_TCPIP_TASK_AFFINITY_CPU0 1
#define CONFIG_FATFS_CODEPAGE 850
#define CONFIG_SPIRAM_SPIWP_SD3_PIN 7
#define CONFIG_ULP_COPROC_RESERVE_MEM 512
#define CONFIG_LWIP_MAX_UDP_PCBS 16
#define CONFIG_ESPTOOLPY_BAUD 921600
#define CONFIG_INT_WDT_CHECK_CPU1 1
#define CONFIG_ADC_CAL_LUT_ENABLE 1
#define CONFIG_FLASHMODE_DIO 1
#define CONFIG_LWIP_ESP_LWIP_ASSERT 1
#define CONFIG_ESPTOOLPY_AFTER_RESET 1
#define CONFIG_OPTIMIZATION_ASSERTIONS_ENABLED 1
#define CONFIG_LWIP_DHCPS_MAX_STATION_NUM 8
#define CONFIG_TOOLPREFIX "xtensa-esp32-elf-"
#define CONFIG_MBEDTLS_ECP_C 1
#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024
#define CONFIG_MBEDTLS_RC4_DISABLED 1
#define CONFIG_FATFS_LFN_STACK 1
#define CONFIG_BTDM_CONTROLLER_FULL_SCAN_SUPPORTED 1
#define CONFIG_CONSOLE_UART_NUM 0
#define CONFIG_ARDUINO_EVENT_RUNNING_CORE 1
#define CONFIG_ESP32_APPTRACE_LOCK_ENABLE 1
#define CONFIG_PTHREAD_STACK_MIN 768
#define CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC 1
#define CONFIG_TCP_OVERSIZE_MSS 1
#define CONFIG_FOUR_UNIVERSAL_MAC_ADDRESS 1
#define CONFIG_CONSOLE_UART_DEFAULT 1
#define CONFIG_A2DP_SOURCE_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN 16384
#define CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS 4
#define CONFIG_ESPTOOLPY_FLASHSIZE_DETECT 1
#define CONFIG_AUTOSTART_ARDUINO 1
#define CONFIG_ARDUINO_RUNNING_CORE 1
#define CONFIG_ESP32_ECO3_CACHE_LOCK_FIX 1
#define CONFIG_PPP_CHAP_SUPPORT 1
#define CONFIG_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_TIMER_TASK_STACK_SIZE 4096
#define CONFIG_ESP32_ENABLE_COREDUMP_TO_NONE 1
#define CONFIG_SPIRAM_BANKSWITCH_ENABLE 1
#define CONFIG_MBEDTLS_X509_CRL_PARSE_C 1
#define CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER 1
#define CONFIG_HTTPD_PURGE_BUF_LEN 32
#define CONFIG_SCAN_DUPLICATE_BY_DEVICE_ADDR 1
#define CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER 1
#define CONFIG_MB_SERIAL_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_PSK_MODES 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_AUTO 1
#define CONFIG_LWIP_DHCPS_LEASE_UNIT 60
#define CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION 1
#define CONFIG_EFUSE_MAX_BLK_LEN 192
#define CONFIG_SPIFFS_USE_MAGIC 1
#define CONFIG_OV7725_SUPPORT 1
#define CONFIG_TCPIP_TASK_STACK_SIZE 2560
#define CONFIG_BLUEDROID_PINNED_TO_CORE_0 1
#define CONFIG_FATFS_CODEPAGE_850 1
#define CONFIG_TASK_WDT 1
#define CONFIG_MTMN_LITE_QUANT 1
#define CONFIG_MAIN_TASK_STACK_SIZE 4096
#define CONFIG_SPIFFS_PAGE_CHECK 1
#define CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_0 1
#define CONFIG_LWIP_MAX_ACTIVE_TCP 16
#define CONFIG_TASK_WDT_TIMEOUT_S 5
#define CONFIG_INT_WDT_TIMEOUT_MS 300
#define CONFIG_ARDUINO_EVENT_RUN_CORE1 1
#define CONFIG_ESPTOOLPY_FLASHMODE "dio"
#define CONFIG_BTC_TASK_STACK_SIZE 8192
#define CONFIG_BLUEDROID_ENABLED 1
#define CONFIG_NEWLIB_STDIN_LINE_ENDING_CR 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA 1
#define CONFIG_ESPTOOLPY_BEFORE "default_reset"
#define CONFIG_ADC2_DISABLE_DAC 1
#define CONFIG_HFP_ENABLE 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_NUM 100
#define CONFIG_ESP32_REV_MIN_0 1
#define CONFIG_LOG_DEFAULT_LEVEL 1
#define CONFIG_TIMER_QUEUE_LENGTH 10
#define CONFIG_ARDUINO_LOOP_STACK_SIZE 8192
#define CONFIG_ESP32_REV_MIN 0
#define CONFIG_SUPPRESS_SELECT_DEBUG_OUTPUT 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_MODE 0
#define CONFIG_OV5640_SUPPORT 1
#define CONFIG_MAKE_WARN_UNDEFINED_VARIABLES 1
#define CONFIG_FATFS_TIMEOUT_MS 10000
#define CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM 32
#define CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS 1
#define CONFIG_MBEDTLS_CCM_C 1
#define CONFIG_SPI_MASTER_ISR_IN_IRAM 1
#define CONFIG_ARDUHAL_PARTITION_SCHEME "default"
#define CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER 20
#define CONFIG_ESP32_RTC_CLK_CAL_CYCLES 1024
#define CONFIG_ESP32_WIFI_TX_BA_WIN 6
#define CONFIG_ESP32_WIFI_NVS_ENABLED 1
#define CONFIG_MDNS_MAX_SERVICES 10
#define CONFIG_ULP_COPROC_ENABLED 1
#define CONFIG_HFP_AUDIO_DATA_PATH_PCM 1
#define CONFIG_IDF_TARGET_ESP32 1
#define CONFIG_EMAC_CHECK_LINK_PERIOD_MS 2000
#define CONFIG_BTDM_LPCLK_SEL_MAIN_XTAL 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED 1
#define CONFIG_LWIP_SNTP_UPDATE_DELAY 3600000
#define CONFIG_LIBSODIUM_USE_MBEDTLS_SHA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK 1
#define CONFIG_DMA_RX_BUF_NUM 10
#define CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_PSK 1
#define CONFIG_TCP_SYNMAXRTX 6
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF 0
#define CONFIG_HEAP_POISONING_LIGHT 1
#define CONFIG_PYTHON "python"
#define CONFIG_SPIRAM_BANKSWITCH_RESERVE 8
#define CONFIG_MBEDTLS_ECP_NIST_OPTIM 1
#define CONFIG_ESP32_TIME_SYSCALL_USE_RTC_FRC1 1
#define CONFIG_ESPTOOLPY_COMPRESSED 1
#define CONFIG_PARTITION_TABLE_FILENAME "partitions_singleapp.csv"
#define CONFIG_MB_CONTROLLER_STACK_SIZE 4096
#define CONFIG_TCP_SND_BUF_DEFAULT 5744
#define CONFIG_GARP_TMR_INTERVAL 60
#define CONFIG_LWIP_DHCP_MAX_NTP_SERVERS 1
#define CONFIG_TCP_MSL 60000
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_1 1
#define CONFIG_LWIP_SO_REUSE_RXTOALL 1
#define CONFIG_MB_CONTROLLER_NOTIFY_TIMEOUT 20
#define CONFIG_ESP32_WIFI_MGMT_SBUF_NUM 32
#define CONFIG_PARTITION_TABLE_SINGLE_APP 1
#define CONFIG_XTENSA_IMPL 1
#define CONFIG_UNITY_ENABLE_FLOAT 1
#define CONFIG_ESP32_WIFI_RX_BA_WIN 16
#define CONFIG_MBEDTLS_X509_CSR_PARSE_C 1
#define CONFIG_SPIFFS_USE_MTIME 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN 0
#define CONFIG_LWIP_DHCP_RESTORE_LAST_IP 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN 2
#define CONFIG_PICO_PSRAM_CS_IO 10
#define CONFIG_EMAC_TASK_STACK_SIZE 3072
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT 1
#define CONFIG_MB_QUEUE_LENGTH 20
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA 1
#define CONFIG_OV2640_SUPPORT 1
#define CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_PSK 1
#define CONFIG_PPP_SUPPORT 1
#define CONFIG_SPIRAM_SPEED_40M 1
#define CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE 2048
#define CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V 1
#define CONFIG_ESP32_DEEP_SLEEP_WAKEUP_DELAY 2000
#define CONFIG_BROWNOUT_DET_LVL 0
#define CONFIG_MBEDTLS_PEM_PARSE_C 1
#define CONFIG_SPIFFS_GC_MAX_RUNS 10
#define CONFIG_ARDUINO_RUN_CORE1 1
#define CONFIG_ESP32_APPTRACE_DEST_NONE 1
#define CONFIG_HP_NANO1 1
#define CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC 1
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA 1
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM 32
#define CONFIG_HTTPD_MAX_URI_LEN 512
#define CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED 1
#define CONFIG_OV7670_SUPPORT 1
#define CONFIG_ARDUHAL_ESP_LOG 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED 1
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ 240
#define CONFIG_MBEDTLS_HARDWARE_AES 1
#define CONFIG_FREERTOS_HZ 1000
#define CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE 1
#define CONFIG_ADC_CAL_EFUSE_TP_ENABLE 1
#define CONFIG_FREERTOS_ASSERT_FAIL_ABORT 1
#define CONFIG_BROWNOUT_DET 1
#define CONFIG_ESP32_XTAL_FREQ 0
#define CONFIG_MONITOR_BAUD_115200B 1
#define CONFIG_LOG_BOOTLOADER_LEVEL 0
#define CONFIG_D2WD_PSRAM_CS_IO 10
#define CONFIG_MBEDTLS_TLS_ENABLED 1
#define CONFIG_LWIP_MAX_RAW_PCBS 16
#define CONFIG_BTU_TASK_STACK_SIZE 4096
#define CONFIG_SMP_ENABLE 1
#define CONFIG_SPIRAM_SIZE -1
#define CONFIG_ARDUINO_UDP_TASK_PRIORITY 3
#define CONFIG_MBEDTLS_SSL_SESSION_TICKETS 1
#define CONFIG_SPIFFS_MAX_PARTITIONS 3
#define CONFIG_ESP_ERR_TO_NAME_LOOKUP 1
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE_0 1
#define CONFIG_MBEDTLS_SSL_RENEGOTIATION 1
#define CONFIG_ESPTOOLPY_BEFORE_RESET 1
#define CONFIG_MB_EVENT_QUEUE_TIMEOUT 20
#define CONFIG_ESPTOOLPY_BAUD_OTHER_VAL 115200
#define CONFIG_PPP_MPPE_SUPPORT 1
#define CONFIG_ENABLE_ARDUINO_DEPENDS 1
#define CONFIG_WARN_WRITE_STRINGS 1
#define CONFIG_SPIFFS_OBJ_NAME_LEN 32
#define CONFIG_ESP32_PTHREAD_TASK_PRIO_DEFAULT 5
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN_EFF 2
#define CONFIG_LOG_BOOTLOADER_LEVEL_NONE 1
#define CONFIG_PARTITION_TABLE_MD5 1
#define CONFIG_TCPIP_RECVMBOX_SIZE 32
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_240 1
#define CONFIG_ESP32_XTAL_FREQ_AUTO 1
#define CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST 1
#define CONFIG_TCP_MAXRTX 12
#define CONFIG_ESPTOOLPY_AFTER "hard_reset"
#define CONFIG_LWIP_IP4_FRAG 1
#define CONFIG_TCPIP_TASK_AFFINITY 0x0
#define CONFIG_LWIP_SO_REUSE 1
#define CONFIG_ARDUINO_UDP_RUN_CORE1 1
#define CONFIG_DMA_TX_BUF_NUM 10
#define CONFIG_LWIP_MAX_LISTENING_TCP 16
#define CONFIG_FREERTOS_INTERRUPT_BACKTRACE 1
#define CONFIG_WL_SECTOR_SIZE 4096
#define CONFIG_ESP32_DEBUG_OCDAWARE 1
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET 1
#define CONFIG_TIMER_TASK_PRIORITY 1
#define CONFIG_PPP_PAP_SUPPORT 1
#define CONFIG_MBEDTLS_TLS_CLIENT 1
#define CONFIG_BTDM_CONTROLLER_HCI_MODE_VHCI 1
#define CONFIG_BT_ENABLED 1
#define CONFIG_ESP32_DEFAULT_PTHREAD_CORE_NO_AFFINITY 1
#define CONFIG_D0WD_PSRAM_CLK_IO 17
#define CONFIG_BT_SSP_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED 1
#define CONFIG_MONITOR_BAUD 115200
#define CONFIG_ESP32_PTHREAD_TASK_CORE_DEFAULT -1
#define CONFIG_ESP32_DEBUG_STUBS_ENABLE 1
#define CONFIG_BLE_ESTABLISH_LINK_CONNECTION_TIMEOUT 30
#define CONFIG_TCPIP_LWIP 1
#define CONFIG_REDUCE_PHY_TX_POWER 1
#define CONFIG_BOOTLOADER_WDT_TIME_MS 9000
#define CONFIG_FREERTOS_CORETIMER_0 1
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT_EFF 1
#define CONFIG_LWIP_IP6_FRAG 1
#define CONFIG_IDF_FIRMWARE_CHIP_ID 0x0000
#define CONFIG_PARTITION_TABLE_CUSTOM_FILENAME "partitions.csv"
#define CONFIG_MBEDTLS_HAVE_TIME 1
#define CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY 1
#define CONFIG_TCP_QUEUE_OOSEQ 1
#define CONFIG_FATFS_ALLOC_PREFER_EXTRAM 1
#define CONFIG_GATTS_ENABLE 1
#define CONFIG_CXX_EXCEPTIONS_EMG_POOL_SIZE 0
#define CONFIG_ADC_CAL_EFUSE_VREF_ENABLE 1
#define CONFIG_MBEDTLS_TLS_SERVER 1
#define CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_SUPPORTED 1
#define CONFIG_FREERTOS_ISR_STACKSIZE 1536
#define CONFIG_SUPPORT_TERMIOS 1
#define CONFIG_CLASSIC_BT_ENABLED 1
#define CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA_PSK 1
#define CONFIG_OPENSSL_ASSERT_DO_NOTHING 1
#define CONFIG_IDF_TARGET "esp32"
#define CONFIG_WL_SECTOR_SIZE_4096 1
#define CONFIG_OPTIMIZATION_LEVEL_DEBUG 1
#define CONFIG_FREERTOS_NO_AFFINITY 0x7FFFFFFF
#define CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED 1
#define CONFIG_HTTPD_ERR_RESP_NO_DELAY 1
#define CONFIG_MB_TIMER_INDEX 0
#define CONFIG_SCAN_DUPLICATE_TYPE 0
#define CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED 1
#define CONFIG_HFP_CLIENT_ENABLE 1
#define CONFIG_NT99141_SUPPORT 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA 1
#define CONFIG_SPI_SLAVE_ISR_IN_IRAM 1
#define CONFIG_SYSTEM_EVENT_QUEUE_SIZE 32
#define CONFIG_BT_ACL_CONNECTIONS 4
#define CONFIG_FATFS_MAX_LFN 255
#define CONFIG_ESP32_WIFI_TX_BUFFER_TYPE 1
#define CONFIG_ESPTOOLPY_BAUD_921600B 1
#define CONFIG_BOOTLOADER_WDT_ENABLE 1
#define CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED 1
#define CONFIG_LWIP_LOOPBACK_MAX_PBUFS 8
#define CONFIG_A2DP_ENABLE 1
#define CONFIG_MB_TIMER_GROUP 0
#define CONFIG_SPI_FLASH_ROM_DRIVER_PATCH 1
#define CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS 5
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE 1
#define CONFIG_SPIFFS_PAGE_SIZE 256
#define CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED 1
#define CONFIG_ESP32_DPORT_WORKAROUND 1
#define CONFIG_GATTS_BLUFI_ENABLE 1
#define CONFIG_PPP_MSCHAP_SUPPORT 1
#define CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU0 1
#define CONFIG_ESP32_PTHREAD_TASK_STACK_SIZE_DEFAULT 2048
#define CONFIG_LWIP_SO_RCVBUF 1
#define CONFIG_MB_TIMER_PORT_ENABLED 1
#define CONFIG_DUPLICATE_SCAN_CACHE_SIZE 20
#define CONFIG_ARDUINO_UDP_RUNNING_CORE 1
#define CONFIG_MONITOR_BAUD_OTHER_VAL 115200
#define CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF 1
#define CONFIG_ESPTOOLPY_PORT "/dev/cu.usbserial-DO00EAB0"
#define CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS 1
#define CONFIG_BTDM_CTRL_BR_EDR_SCO_DATA_PATH_EFF 0
#define CONFIG_LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 1
#define CONFIG_TASK_WDT_PANIC 1
#define CONFIG_OV3660_SUPPORT 1
#define CONFIG_UNITY_ENABLE_DOUBLE 1
#define CONFIG_BLE_ADV_REPORT_DISCARD_THRSHOLD 20
#define CONFIG_BLUEDROID_PINNED_TO_CORE 0
#define CONFIG_HD_NANO1 1
#define CONFIG_BTDM_MODEM_SLEEP_MODE_ORIG 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_FATFS_API_ENCODING_ANSI_OEM 1
#define CONFIG_ARDUINO_IDF_COMMIT "7e63061fa"
#define CONFIG_ARDUINO_IDF_BRANCH "release/v3.3"
# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/esp32/rom/ets_sys.h" 1













# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h" 2


extern "C" {









# 31 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
typedef enum {
    ESP_LOG_NONE, 
    ESP_LOG_ERROR, 
    ESP_LOG_WARN, 
    ESP_LOG_INFO, 
    ESP_LOG_DEBUG, 
    ESP_LOG_VERBOSE 
} esp_log_level_t;

typedef int (*vprintf_like_t)(const char *, va_list);




































# 60 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
void esp_log_level_set(const char* tag, esp_log_level_t level);






















# 73 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
vprintf_like_t esp_log_set_vprintf(vprintf_like_t func);
























# 87 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
uint32_t esp_log_timestamp(void);
















# 97 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
uint32_t esp_log_early_timestamp(void);
















# 107 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
void esp_log_write(esp_log_level_t level, const char* tag, const char* format, ...) __attribute__ ((format (printf, 3, 4)));
















# 118 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
void esp_log_writev(esp_log_level_t level, const char* tag, const char* format, va_list args);

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log_internal.h" 1















#define __ESP_LOG_INTERNAL_H__ 


void esp_log_buffer_hex_internal(const char *tag, const void *buffer, uint16_t buff_len, esp_log_level_t level);
void esp_log_buffer_char_internal(const char *tag, const void *buffer, uint16_t buff_len, esp_log_level_t level);
void esp_log_buffer_hexdump_internal( const char *tag, const void *buffer, uint16_t buff_len, esp_log_level_t log_level);
# 121 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h" 2



#define LOG_LOCAL_LEVEL CONFIG_LOG_DEFAULT_LEVEL
























# 141 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
#define ESP_LOG_BUFFER_HEX_LEVEL(tag,buffer,buff_len,level) do { if ( LOG_LOCAL_LEVEL >= (level) ) { esp_log_buffer_hex_internal( tag, buffer, buff_len, level ); } } while(0)























# 157 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
#define ESP_LOG_BUFFER_CHAR_LEVEL(tag,buffer,buff_len,level) do { if ( LOG_LOCAL_LEVEL >= (level) ) { esp_log_buffer_char_internal( tag, buffer, buff_len, level ); } } while(0)





































# 180 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
#define ESP_LOG_BUFFER_HEXDUMP(tag,buffer,buff_len,level) do { if ( LOG_LOCAL_LEVEL >= (level) ) { esp_log_buffer_hexdump_internal( tag, buffer, buff_len, level); } } while(0)

























# 197 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
#define ESP_LOG_BUFFER_HEX(tag,buffer,buff_len) do { if (LOG_LOCAL_LEVEL >= ESP_LOG_INFO) { ESP_LOG_BUFFER_HEX_LEVEL( tag, buffer, buff_len, ESP_LOG_INFO ); } } while(0)

























# 214 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
#define ESP_LOG_BUFFER_CHAR(tag,buffer,buff_len) do { if (LOG_LOCAL_LEVEL >= ESP_LOG_INFO) { ESP_LOG_BUFFER_CHAR_LEVEL( tag, buffer, buff_len, ESP_LOG_INFO ); } } while(0)









#define esp_log_buffer_hex ESP_LOG_BUFFER_HEX
#define esp_log_buffer_char ESP_LOG_BUFFER_CHAR
# 245 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
#define LOG_COLOR_E 
#define LOG_COLOR_W 
#define LOG_COLOR_I 
#define LOG_COLOR_D 
#define LOG_COLOR_V 
#define LOG_RESET_COLOR 


#define LOG_FORMAT(letter,format) LOG_COLOR_ ## letter #letter " (%d) %s: " format LOG_RESET_COLOR "\n"




#define ESP_EARLY_LOGE(tag,format,...) ESP_LOG_EARLY_IMPL(tag, format, ESP_LOG_ERROR, E, ##__VA_ARGS__)

#define ESP_EARLY_LOGW(tag,format,...) ESP_LOG_EARLY_IMPL(tag, format, ESP_LOG_WARN, W, ##__VA_ARGS__)

#define ESP_EARLY_LOGI(tag,format,...) ESP_LOG_EARLY_IMPL(tag, format, ESP_LOG_INFO, I, ##__VA_ARGS__)

#define ESP_EARLY_LOGD(tag,format,...) ESP_LOG_EARLY_IMPL(tag, format, ESP_LOG_DEBUG, D, ##__VA_ARGS__)

#define ESP_EARLY_LOGV(tag,format,...) ESP_LOG_EARLY_IMPL(tag, format, ESP_LOG_VERBOSE, V, ##__VA_ARGS__)

#define ESP_LOG_EARLY_IMPL(tag,format,log_level,log_tag_letter,...) do { if (LOG_LOCAL_LEVEL >= log_level) { ets_printf(LOG_FORMAT(log_tag_letter, format), esp_log_timestamp(), tag, ##__VA_ARGS__); }} while(0)





#define ESP_LOGE(tag,format,...) ESP_LOG_LEVEL_LOCAL(ESP_LOG_ERROR, tag, format, ##__VA_ARGS__)
#define ESP_LOGW(tag,format,...) ESP_LOG_LEVEL_LOCAL(ESP_LOG_WARN, tag, format, ##__VA_ARGS__)
#define ESP_LOGI(tag,format,...) ESP_LOG_LEVEL_LOCAL(ESP_LOG_INFO, tag, format, ##__VA_ARGS__)
#define ESP_LOGD(tag,format,...) ESP_LOG_LEVEL_LOCAL(ESP_LOG_DEBUG, tag, format, ##__VA_ARGS__)
#define ESP_LOGV(tag,format,...) ESP_LOG_LEVEL_LOCAL(ESP_LOG_VERBOSE, tag, format, ##__VA_ARGS__)
# 298 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"

















# 307 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
#define ESP_LOG_LEVEL(level,tag,format,...) do { if (level==ESP_LOG_ERROR ) { esp_log_write(ESP_LOG_ERROR, tag, LOG_FORMAT(E, format), esp_log_timestamp(), tag, ##__VA_ARGS__); } else if (level==ESP_LOG_WARN ) { esp_log_write(ESP_LOG_WARN, tag, LOG_FORMAT(W, format), esp_log_timestamp(), tag, ##__VA_ARGS__); } else if (level==ESP_LOG_DEBUG ) { esp_log_write(ESP_LOG_DEBUG, tag, LOG_FORMAT(D, format), esp_log_timestamp(), tag, ##__VA_ARGS__); } else if (level==ESP_LOG_VERBOSE ) { esp_log_write(ESP_LOG_VERBOSE, tag, LOG_FORMAT(V, format), esp_log_timestamp(), tag, ##__VA_ARGS__); } else { esp_log_write(ESP_LOG_INFO, tag, LOG_FORMAT(I, format), esp_log_timestamp(), tag, ##__VA_ARGS__); } } while(0)














# 319 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/log/esp_log.h"
#define ESP_LOG_LEVEL_LOCAL(level,tag,format,...) do { if ( LOG_LOCAL_LEVEL >= level ) ESP_LOG_LEVEL(level, tag, format, ##__VA_ARGS__); } while(0)




}
# 129 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-log.h" 2


#undef ESP_LOGE
#undef ESP_LOGW
#undef ESP_LOGI
#undef ESP_LOGD
#undef ESP_LOGV
#undef ESP_EARLY_LOGE
#undef ESP_EARLY_LOGW
#undef ESP_EARLY_LOGI
#undef ESP_EARLY_LOGD
#undef ESP_EARLY_LOGV

#define ESP_LOGE(tag,...) log_e(__VA_ARGS__)
#define ESP_LOGW(tag,...) log_w(__VA_ARGS__)
#define ESP_LOGI(tag,...) log_i(__VA_ARGS__)
#define ESP_LOGD(tag,...) log_d(__VA_ARGS__)
#define ESP_LOGV(tag,...) log_v(__VA_ARGS__)
#define ESP_EARLY_LOGE(tag,...) isr_log_e(__VA_ARGS__)
#define ESP_EARLY_LOGW(tag,...) isr_log_w(__VA_ARGS__)
#define ESP_EARLY_LOGI(tag,...) isr_log_i(__VA_ARGS__)
#define ESP_EARLY_LOGD(tag,...) isr_log_d(__VA_ARGS__)
#define ESP_EARLY_LOGV(tag,...) isr_log_v(__VA_ARGS__)



}
# 51 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-matrix.h" 1















#define _ESP32_HAL_MATRIX_H_ 



extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 1



































# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-matrix.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_sig_map.h" 1













# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-matrix.h" 2

void pinMatrixOutAttach(uint8_t pin, uint8_t function, bool invertOut, bool invertEnable);
void pinMatrixOutDetach(uint8_t pin, bool invertOut, bool invertEnable);
void pinMatrixInAttach(uint8_t pin, uint8_t signal, bool inverted);
void pinMatrixInDetach(uint8_t signal, bool high, bool inverted);


}
# 52 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-uart.h" 1















#define MAIN_ESP32_HAL_UART_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-uart.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-uart.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h"









# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-uart.h" 2

#define SERIAL_5N1 0x8000010
#define SERIAL_6N1 0x8000014
#define SERIAL_7N1 0x8000018
#define SERIAL_8N1 0x800001c
#define SERIAL_5N2 0x8000030
#define SERIAL_6N2 0x8000034
#define SERIAL_7N2 0x8000038
#define SERIAL_8N2 0x800003c
#define SERIAL_5E1 0x8000012
#define SERIAL_6E1 0x8000016
#define SERIAL_7E1 0x800001a
#define SERIAL_8E1 0x800001e
#define SERIAL_5E2 0x8000032
#define SERIAL_6E2 0x8000036
#define SERIAL_7E2 0x800003a
#define SERIAL_8E2 0x800003e
#define SERIAL_5O1 0x8000013
#define SERIAL_6O1 0x8000017
#define SERIAL_7O1 0x800001b
#define SERIAL_8O1 0x800001f
#define SERIAL_5O2 0x8000033
#define SERIAL_6O2 0x8000037
#define SERIAL_7O2 0x800003b
#define SERIAL_8O2 0x800003f

struct uart_struct_t;
typedef struct uart_struct_t uart_t;

uart_t* uartBegin(uint8_t uart_nr, uint32_t baudrate, uint32_t config, int8_t rxPin, int8_t txPin, uint16_t queueLen, bool inverted);
void uartEnd(uart_t* uart, uint8_t rxPin, uint8_t txPin);

uint32_t uartAvailable(uart_t* uart);
uint32_t uartAvailableForWrite(uart_t* uart);
uint8_t uartRead(uart_t* uart);
uint8_t uartPeek(uart_t* uart);

void uartWrite(uart_t* uart, uint8_t c);
void uartWriteBuf(uart_t* uart, const uint8_t * data, size_t len);

void uartFlush(uart_t* uart);
void uartFlushTxOnly(uart_t* uart, bool txOnly );

void uartSetBaudRate(uart_t* uart, uint32_t baud_rate);
uint32_t uartGetBaudRate(uart_t* uart);

size_t uartResizeRxBuffer(uart_t* uart, size_t new_size);

void uartSetRxInvert(uart_t* uart, bool invert);

void uartSetDebug(uart_t* uart);
int uartGetDebug();

void uartStartDetectBaudrate(uart_t *uart);
unsigned long uartDetectBaudrate(uart_t *uart);

bool uartRxActive(uart_t* uart);


}
# 53 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-gpio.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-gpio.h"
#define MAIN_ESP32_HAL_GPIO_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 1



































# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-gpio.h" 2

#define LOW 0x0
#define HIGH 0x1


#define INPUT 0x01
#define OUTPUT 0x02
#define PULLUP 0x04
#define INPUT_PULLUP 0x05
#define PULLDOWN 0x08
#define INPUT_PULLDOWN 0x09
#define OPEN_DRAIN 0x10
#define OUTPUT_OPEN_DRAIN 0x12
#define SPECIAL 0xF0
#define FUNCTION_1 0x00
#define FUNCTION_2 0x20
#define FUNCTION_3 0x40
#define FUNCTION_4 0x60
#define FUNCTION_5 0x80
#define FUNCTION_6 0xA0
#define ANALOG 0xC0


#define DISABLED 0x00
#define RISING 0x01
#define FALLING 0x02
#define CHANGE 0x03
#define ONLOW 0x04
#define ONHIGH 0x05
#define ONLOW_WE 0x0C
#define ONHIGH_WE 0x0D

typedef struct {
    uint8_t reg; 
    int8_t rtc; 
    int8_t adc; 
    int8_t touch; 
} esp32_gpioMux_t;

extern const esp32_gpioMux_t esp32_gpioMux[40];
extern const int8_t esp32_adc2gpio[20];

#define digitalPinIsValid(pin) ((pin) < 40 && esp32_gpioMux[(pin)].reg)
#define digitalPinCanOutput(pin) ((pin) < 34 && esp32_gpioMux[(pin)].reg)
#define digitalPinToRtcPin(pin) (((pin) < 40)?esp32_gpioMux[(pin)].rtc:-1)
#define digitalPinToAnalogChannel(pin) (((pin) < 40)?esp32_gpioMux[(pin)].adc:-1)
#define digitalPinToTouchChannel(pin) (((pin) < 40)?esp32_gpioMux[(pin)].touch:-1)
#define digitalPinToDacChannel(pin) (((pin) == 25)?0:((pin) == 26)?1:-1)

void pinMode(uint8_t pin, uint8_t mode);
void digitalWrite(uint8_t pin, uint8_t val);
int digitalRead(uint8_t pin);

void attachInterrupt(uint8_t pin, void (*)(void), int mode);
void attachInterruptArg(uint8_t pin, void (*)(void*), void * arg, int mode);
void detachInterrupt(uint8_t pin);


}
# 54 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-touch.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-touch.h"
#define MAIN_ESP32_HAL_TOUCH_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 1



































# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-touch.h" 2














# 36 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-touch.h"
void touchSetCycles(uint16_t measure, uint16_t sleep);










# 43 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-touch.h"
uint16_t touchRead(uint8_t pin);










# 50 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-touch.h"
void touchAttachInterrupt(uint8_t pin, void (*userFunc)(void), uint16_t threshold);


}
# 55 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-dac.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-dac.h"
#define MAIN_ESP32_HAL_DAC_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 1



































# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-dac.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/driver/driver/gpio.h" 1













# 29 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-dac.h" 2

void dacWrite(uint8_t pin, uint8_t value);


}
# 56 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h"
#define MAIN_ESP32_HAL_ADC_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 1



































# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h" 2

typedef enum {
    ADC_0db,
    ADC_2_5db,
    ADC_6db,
    ADC_11db
} adc_attenuation_t;






# 39 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h"
uint16_t analogRead(uint8_t pin);














# 48 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h"
void analogReadResolution(uint8_t bits);










# 55 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h"
void analogSetWidth(uint8_t bits);










# 62 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h"
void analogSetClockDiv(uint8_t clockDiv);








# 68 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h"
void analogSetAttenuation(adc_attenuation_t attenuation);








# 74 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h"
void analogSetPinAttenuation(uint8_t pin, adc_attenuation_t attenuation);








# 80 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h"
int hallRead();






# 85 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h"
bool adcAttachPin(uint8_t pin);






# 90 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h"
void analogSetVRefPin(uint8_t pin);






# 95 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-adc.h"
uint32_t analogReadMilliVolts(uint8_t pin);


}
# 57 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-spi.h" 1















#define MAIN_ESP32_HAL_SPI_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-spi.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-spi.h" 2

#define SPI_HAS_TRANSACTION 

#define FSPI 1 
#define HSPI 2 
#define VSPI 3 


# 31 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-spi.h"


#define SPI_CLOCK_DIV2 0x00101001 
#define SPI_CLOCK_DIV4 0x00241001 
#define SPI_CLOCK_DIV8 0x004c1001 
#define SPI_CLOCK_DIV16 0x009c1001 
#define SPI_CLOCK_DIV32 0x013c1001 
#define SPI_CLOCK_DIV64 0x027c1001 
#define SPI_CLOCK_DIV128 0x04fc1001 

#define SPI_MODE0 0
#define SPI_MODE1 1
#define SPI_MODE2 2
#define SPI_MODE3 3

#define SPI_CS0 0
#define SPI_CS1 1
#define SPI_CS2 2
#define SPI_CS_MASK_ALL 0x7

#define SPI_LSBFIRST 0
#define SPI_MSBFIRST 1

struct spi_struct_t;
typedef struct spi_struct_t spi_t;

spi_t * spiStartBus(uint8_t spi_num, uint32_t clockDiv, uint8_t dataMode, uint8_t bitOrder);
void spiStopBus(spi_t * spi);


void spiAttachSCK(spi_t * spi, int8_t sck);
void spiAttachMISO(spi_t * spi, int8_t miso);
void spiAttachMOSI(spi_t * spi, int8_t mosi);
void spiDetachSCK(spi_t * spi, int8_t sck);
void spiDetachMISO(spi_t * spi, int8_t miso);
void spiDetachMOSI(spi_t * spi, int8_t mosi);


void spiAttachSS(spi_t * spi, uint8_t cs_num, int8_t ss);
void spiDetachSS(spi_t * spi, int8_t ss);


void spiEnableSSPins(spi_t * spi, uint8_t cs_mask);
void spiDisableSSPins(spi_t * spi, uint8_t cs_mask);


void spiSSEnable(spi_t * spi);
void spiSSDisable(spi_t * spi);


void spiSSSet(spi_t * spi);

void spiSSClear(spi_t * spi);

void spiWaitReady(spi_t * spi);

uint32_t spiGetClockDiv(spi_t * spi);
uint8_t spiGetDataMode(spi_t * spi);
uint8_t spiGetBitOrder(spi_t * spi);







# 95 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-spi.h"
void spiSetClockDiv(spi_t * spi, uint32_t clockDiv);
void spiSetDataMode(spi_t * spi, uint8_t dataMode);
void spiSetBitOrder(spi_t * spi, uint8_t bitOrder);

void spiWrite(spi_t * spi, const uint32_t *data, uint8_t len);
void spiWriteByte(spi_t * spi, uint8_t data);
void spiWriteWord(spi_t * spi, uint16_t data);
void spiWriteLong(spi_t * spi, uint32_t data);

void spiTransfer(spi_t * spi, uint32_t *out, uint8_t len);
uint8_t spiTransferByte(spi_t * spi, uint8_t data);
uint16_t spiTransferWord(spi_t * spi, uint16_t data);
uint32_t spiTransferLong(spi_t * spi, uint32_t data);
void spiTransferBytes(spi_t * spi, const uint8_t * data, uint8_t * out, uint32_t size);
void spiTransferBits(spi_t * spi, uint32_t data, uint32_t * out, uint8_t bits);






# 114 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-spi.h"
void spiTransaction(spi_t * spi, uint32_t clockDiv, uint8_t dataMode, uint8_t bitOrder);
void spiSimpleTransaction(spi_t * spi);
void spiEndTransaction(spi_t * spi);

void spiWriteNL(spi_t * spi, const void * data_in, uint32_t len);
void spiWriteByteNL(spi_t * spi, uint8_t data);
void spiWriteShortNL(spi_t * spi, uint16_t data);
void spiWriteLongNL(spi_t * spi, uint32_t data);
void spiWritePixelsNL(spi_t * spi, const void * data_in, uint32_t len);

#define spiTransferNL(spi,data,len) spiTransferBytesNL(spi, data, data, len)
uint8_t spiTransferByteNL(spi_t * spi, uint8_t data);
uint16_t spiTransferShortNL(spi_t * spi, uint16_t data);
uint32_t spiTransferLongNL(spi_t * spi, uint32_t data);
void spiTransferBytesNL(spi_t * spi, const void * data_in, uint8_t * data_out, uint32_t len);
void spiTransferBitsNL(spi_t * spi, uint32_t data_in, uint32_t * data_out, uint8_t bits);






# 134 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-spi.h"
uint32_t spiFrequencyToClockDiv(uint32_t freq);
uint32_t spiClockDivToFrequency(uint32_t freq);


}
# 58 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-i2c.h" 1
















#define _ESP32_HAL_I2C_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-i2c.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-i2c.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h"







































































































































# 26 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-i2c.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h" 1







































































































































# 71 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
#define EVENT_GROUPS_H 





# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h" 1







































































































































# 72 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
#define TIMERS_H 








# 80 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/task.h" 1







































































































































# 81 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h" 2



extern "C" {







# 91 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"









# 96 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
#define tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR ( ( BaseType_t ) -2 )
#define tmrCOMMAND_EXECUTE_CALLBACK ( ( BaseType_t ) -1 )
#define tmrCOMMAND_START_DONT_TRACE ( ( BaseType_t ) 0 )
#define tmrCOMMAND_START ( ( BaseType_t ) 1 )
#define tmrCOMMAND_RESET ( ( BaseType_t ) 2 )
#define tmrCOMMAND_STOP ( ( BaseType_t ) 3 )
#define tmrCOMMAND_CHANGE_PERIOD ( ( BaseType_t ) 4 )
#define tmrCOMMAND_DELETE ( ( BaseType_t ) 5 )

#define tmrFIRST_FROM_ISR_COMMAND ( ( BaseType_t ) 6 )
#define tmrCOMMAND_START_FROM_ISR ( ( BaseType_t ) 6 )
#define tmrCOMMAND_RESET_FROM_ISR ( ( BaseType_t ) 7 )
#define tmrCOMMAND_STOP_FROM_ISR ( ( BaseType_t ) 8 )
#define tmrCOMMAND_CHANGE_PERIOD_FROM_ISR ( ( BaseType_t ) 9 )













# 118 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
typedef void * TimerHandle_t;






# 123 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
typedef void (*TimerCallbackFunction_t)( TimerHandle_t xTimer );








# 129 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
typedef void (*PendedFunction_t)( void *, uint32_t );






































































































































































































































































# 263 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
 TimerHandle_t xTimerCreate( const char * const pcTimerName,
        const TickType_t xTimerPeriodInTicks,
        const UBaseType_t uxAutoReload,
        void * const pvTimerID,
        TimerCallbackFunction_t pxCallbackFunction ) ; 


 




































































































































































































































# 394 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"



































# 412 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
void *pvTimerGetTimerID( TimerHandle_t xTimer ) ;


































# 431 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID ) ;






































































# 468 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer ) ;














# 477 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
TaskHandle_t xTimerGetTimerDaemonTaskHandle( void );














# 486 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
TickType_t xTimerGetPeriod( TimerHandle_t xTimer ) ;






















# 499 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer ) ;
































































































# 549 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
#define xTimerStart(xTimer,xTicksToWait) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCount() ), NULL, ( xTicksToWait ) )












































































# 589 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
#define xTimerStop(xTimer,xTicksToWait) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xTicksToWait ) )




















































































































































# 665 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
#define xTimerChangePeriod(xTimer,xNewPeriod,xTicksToWait) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD, ( xNewPeriod ), NULL, ( xTicksToWait ) )




































































# 701 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
#define xTimerDelete(xTimer,xTicksToWait) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xTicksToWait ) )
















































































































































































































































# 823 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
#define xTimerReset(xTimer,xTicksToWait) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESET, ( xTaskGetTickCount() ), NULL, ( xTicksToWait ) )


































































































































































# 906 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
#define xTimerStartFromISR(xTimer,pxHigherPriorityTaskWoken) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )




















































































































# 966 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
#define xTimerStopFromISR(xTimer,pxHigherPriorityTaskWoken) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP_FROM_ISR, 0, ( pxHigherPriorityTaskWoken ), 0U )






































































































































# 1035 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
#define xTimerChangePeriodFromISR(xTimer,xNewPeriod,pxHigherPriorityTaskWoken) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD_FROM_ISR, ( xNewPeriod ), ( pxHigherPriorityTaskWoken ), 0U )


































































































































































# 1118 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
#define xTimerResetFromISR(xTimer,pxHigherPriorityTaskWoken) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESET_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )





































































































































































# 1203 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken );

 


















































# 1231 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait );














# 1240 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
const char * pcTimerGetTimerName( TimerHandle_t xTimer ); 









# 1247 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/timers.h"
BaseType_t xTimerCreateTimerTask( void ) ;
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait ) ;




}
# 78 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h" 2


extern "C" {



















































# 111 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"

















# 120 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
typedef void * EventGroupHandle_t;














# 129 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
typedef TickType_t EventBits_t;




























































































# 178 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
 EventGroupHandle_t xEventGroupCreate( void ) ;

























































































# 229 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"



































































































































































# 311 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait ) ;


































































































# 362 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear ) ;






























































































# 414 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
#define xEventGroupClearBitsFromISR(xEventGroup,uxBitsToClear) xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL )





































































































































# 483 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet ) ;




































































































































# 554 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
#define xEventGroupSetBitsFromISR(xEventGroup,uxBitsToSet,pxHigherPriorityTaskWoken) xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken )







































































































































































































































# 672 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait ) ;





















# 685 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
#define xEventGroupGetBits(xEventGroup) xEventGroupClearBits( xEventGroup, 0 )


















# 696 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup );
















# 706 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/event_groups.h"
void vEventGroupDelete( EventGroupHandle_t xEventGroup );




void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet );
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear );








}
# 27 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-i2c.h" 2


typedef enum {
    I2C_ERROR_OK=0,
    I2C_ERROR_DEV,
    I2C_ERROR_ACK,
    I2C_ERROR_TIMEOUT,
    I2C_ERROR_BUS,
    I2C_ERROR_BUSY,
    I2C_ERROR_MEMORY,
    I2C_ERROR_CONTINUE,
    I2C_ERROR_NO_BEGIN
} i2c_err_t;

struct i2c_struct_t;
typedef struct i2c_struct_t i2c_t;

i2c_t * i2cInit(uint8_t i2c_num, int8_t sda, int8_t scl, uint32_t clk_speed);
void i2cRelease(i2c_t *i2c); 
i2c_err_t i2cWrite(i2c_t * i2c, uint16_t address, uint8_t* buff, uint16_t size, bool sendStop, uint16_t timeOutMillis);
i2c_err_t i2cRead(i2c_t * i2c, uint16_t address, uint8_t* buff, uint16_t size, bool sendStop, uint16_t timeOutMillis, uint32_t *readCount);
i2c_err_t i2cFlush(i2c_t *i2c);
i2c_err_t i2cSetFrequency(i2c_t * i2c, uint32_t clk_speed);
uint32_t i2cGetFrequency(i2c_t * i2c);
uint32_t i2cGetStatus(i2c_t * i2c); 



i2c_err_t i2cAttachSCL(i2c_t * i2c, int8_t scl);
i2c_err_t i2cDetachSCL(i2c_t * i2c, int8_t scl);
i2c_err_t i2cAttachSDA(i2c_t * i2c, int8_t sda);
i2c_err_t i2cDetachSDA(i2c_t * i2c, int8_t sda);


i2c_err_t i2cProcQueue(i2c_t *i2c, uint32_t *readCount, uint16_t timeOutMillis);
i2c_err_t i2cAddQueueWrite(i2c_t *i2c, uint16_t i2cDeviceAddr, uint8_t *dataPtr, uint16_t dataLen, bool SendStop, EventGroupHandle_t event);
i2c_err_t i2cAddQueueRead(i2c_t *i2c, uint16_t i2cDeviceAddr, uint8_t *dataPtr, uint16_t dataLen, bool SendStop, EventGroupHandle_t event);


uint32_t i2cDebug(i2c_t *, uint32_t setBits, uint32_t resetBits);












}
# 59 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-ledc.h" 1















#define _ESP32_HAL_LEDC_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-ledc.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-ledc.h" 2


# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-ledc.h"
typedef enum {
    NOTE_C, NOTE_Cs, NOTE_D, NOTE_Eb, NOTE_E, NOTE_F, NOTE_Fs, NOTE_G, NOTE_Gs, NOTE_A, NOTE_Bb, NOTE_B, NOTE_MAX
} note_t;


double ledcSetup(uint8_t channel, double freq, uint8_t resolution_bits);
void ledcWrite(uint8_t channel, uint32_t duty);
double ledcWriteTone(uint8_t channel, double freq);
double ledcWriteNote(uint8_t channel, note_t note, uint8_t octave);
uint32_t ledcRead(uint8_t channel);
double ledcReadFreq(uint8_t channel);
void ledcAttachPin(uint8_t pin, uint8_t channel);
void ledcDetachPin(uint8_t pin);



}
# 60 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h" 1















#define MAIN_ESP32_HAL_RMT_H_ 


extern "C" {



#define RMT_FLAG_TX_DONE (1)
#define RMT_FLAG_RX_DONE (2)
#define RMT_FLAG_ERROR (4)
#define RMT_FLAGS_ALL (RMT_FLAG_TX_DONE | RMT_FLAG_RX_DONE | RMT_FLAG_ERROR)

struct rmt_obj_s;

typedef enum {
    RMT_MEM_64 = 1,
    RMT_MEM_128 = 2,
    RMT_MEM_192 = 3,
    RMT_MEM_256 = 4,
    RMT_MEM_320 = 5,
    RMT_MEM_384 = 6,
    RMT_MEM_448 = 7,
    RMT_MEM_512 = 8,
} rmt_reserve_memsize_t;

typedef struct rmt_obj_s rmt_obj_t;

typedef void (*rmt_rx_data_cb_t)(uint32_t *data, size_t len, void *arg);

typedef struct {
    union {
        struct {
            uint32_t duration0 :15;
            uint32_t level0 :1;
            uint32_t duration1 :15;
            uint32_t level1 :1;
        };
        uint32_t val;
    };
} rmt_data_t;








# 61 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
rmt_obj_t* rmtInit(int pin, bool tx_not_rx, rmt_reserve_memsize_t memsize);








# 67 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
float rmtSetTick(rmt_obj_t* rmt, float tick);










# 74 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtWrite(rmt_obj_t* rmt, rmt_data_t* data, size_t size);








# 80 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtLoop(rmt_obj_t* rmt, rmt_data_t* data, size_t size);








# 86 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtReadAsync(rmt_obj_t* rmt, rmt_data_t* data, size_t size, void* eventFlag, bool waitForData, uint32_t timeout);










# 93 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtRead(rmt_obj_t* rmt, rmt_rx_data_cb_t cb, void * arg);








# 99 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtEnd(rmt_obj_t* rmt);










# 107 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtBeginReceive(rmt_obj_t* rmt);








# 113 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtReceiveCompleted(rmt_obj_t* rmt);








# 119 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtReadData(rmt_obj_t* rmt, uint32_t* data, size_t size);






# 124 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtSetRxThreshold(rmt_obj_t* rmt, uint32_t value);






# 129 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtSetCarrier(rmt_obj_t* rmt, bool carrier_en, bool carrier_level, uint32_t low, uint32_t high);






# 134 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtSetFilter(rmt_obj_t* rmt, bool filter_en, uint32_t filter_level);






# 139 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-rmt.h"
bool rmtDeinit(rmt_obj_t *rmt);









}
# 61 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-sigmadelta.h" 1















#define _ESP32_HAL_SD_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-sigmadelta.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-sigmadelta.h" 2


# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-sigmadelta.h"

uint32_t sigmaDeltaSetup(uint8_t channel, uint32_t freq);
void sigmaDeltaWrite(uint8_t channel, uint8_t duty);
uint8_t sigmaDeltaRead(uint8_t channel);
void sigmaDeltaAttachPin(uint8_t pin, uint8_t channel);
void sigmaDeltaDetachPin(uint8_t pin);



}
# 62 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-timer.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-timer.h"
#define MAIN_ESP32_HAL_TIMER_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 1



































# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-timer.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/freertos/freertos/FreeRTOS.h" 1







































































































































# 29 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-timer.h" 2

struct hw_timer_s;
typedef struct hw_timer_s hw_timer_t;

hw_timer_t * timerBegin(uint8_t timer, uint16_t divider, bool countUp);
void timerEnd(hw_timer_t *timer);

void timerSetConfig(hw_timer_t *timer, uint32_t config);
uint32_t timerGetConfig(hw_timer_t *timer);

void timerAttachInterrupt(hw_timer_t *timer, void (*fn)(void), bool edge);
void timerDetachInterrupt(hw_timer_t *timer);

void timerStart(hw_timer_t *timer);
void timerStop(hw_timer_t *timer);
void timerRestart(hw_timer_t *timer);
void timerWrite(hw_timer_t *timer, uint64_t val);
void timerSetDivider(hw_timer_t *timer, uint16_t divider);
void timerSetCountUp(hw_timer_t *timer, bool countUp);
void timerSetAutoReload(hw_timer_t *timer, bool autoreload);

bool timerStarted(hw_timer_t *timer);
uint64_t timerRead(hw_timer_t *timer);
uint64_t timerReadMicros(hw_timer_t *timer);
double timerReadSeconds(hw_timer_t *timer);
uint16_t timerGetDivider(hw_timer_t *timer);
bool timerGetCountUp(hw_timer_t *timer);
bool timerGetAutoReload(hw_timer_t *timer);

void timerAlarmEnable(hw_timer_t *timer);
void timerAlarmDisable(hw_timer_t *timer);
void timerAlarmWrite(hw_timer_t *timer, uint64_t interruptAt, bool autoreload);

bool timerAlarmEnabled(hw_timer_t *timer);
uint64_t timerAlarmRead(hw_timer_t *timer);
uint64_t timerAlarmReadMicros(hw_timer_t *timer);
double timerAlarmReadSeconds(hw_timer_t *timer);



}
# 63 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-bt.h" 1















#define _ESP32_ESP32_HAL_BT_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 1



































# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-bt.h" 2


extern "C" {


bool btStarted();
bool btStart();
bool btStop();


}
# 64 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-psram.h" 1















#define _ESP32_HAL_PSRAM_H_ 


extern "C" {


bool psramInit();
bool psramFound();

void *ps_malloc(size_t size);
void *ps_calloc(size_t n, size_t size);
void *ps_realloc(void *ptr, size_t size);


}
# 65 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-cpu.h" 1















#define _ESP32_HAL_CPU_H_ 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-cpu.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-cpu.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h"









# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal-cpu.h" 2

typedef enum { APB_BEFORE_CHANGE, APB_AFTER_CHANGE } apb_change_ev_t;

typedef void (* apb_change_cb_t)(void * arg, apb_change_ev_t ev_type, uint32_t old_apb, uint32_t new_apb);

bool addApbChangeCallback(void * arg, apb_change_cb_t cb);
bool removeApbChangeCallback(void * arg, apb_change_cb_t cb);






bool setCpuFrequencyMhz(uint32_t cpu_freq_mhz);

uint32_t getCpuFrequencyMhz(); 
uint32_t getXtalFrequencyMhz(); 
uint32_t getApbFrequency(); 


}
# 66 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 2



#undef CONFIG_SPIRAM_SUPPORT




float temperatureRead();



void enableLoopWDT();
void disableLoopWDT();

void feedLoopWDT();



void enableCore0WDT();
void disableCore0WDT();


void enableCore1WDT();
void disableCore1WDT();




BaseType_t xTaskCreateUniversal( TaskFunction_t pxTaskCode,
                        const char * const pcName,
                        const uint32_t usStackDepth,
                        void * const pvParameters,
                        UBaseType_t uxPriority,
                        TaskHandle_t * const pxCreatedTask,
                        const BaseType_t xCoreID );

unsigned long micros();
unsigned long millis();
void delay(uint32_t);
void delayMicroseconds(uint32_t us);


void arduino_phy_init();







}
# 36 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp8266-compat.h" 1

















#define _ESP8266_COMPAT_H_ 

#define ICACHE_FLASH_ATTR 
#define ICACHE_RAM_ATTR IRAM_ATTR
# 37 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/soc/soc/gpio_reg.h" 1













# 38 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/stdlib_noniso.h" 1





































# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/stdlib_noniso.h"
#define STDLIB_NONISO_H 


extern "C" {


int atoi(const char *s);

long atol(const char* s);

double atof(const char* s);

char* itoa (int val, char *s, int radix);

char* ltoa (long val, char *s, int radix);

char* utoa (unsigned int val, char *s, int radix);

char* ultoa (unsigned long val, char *s, int radix);

char* dtostrf (double val, signed char width, unsigned char prec, char *s);


} 
# 40 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/binary.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/binary.h"
#define Binary_h 

#define B0 0
#define B00 0
#define B000 0
#define B0000 0
#define B00000 0
#define B000000 0
#define B0000000 0
#define B00000000 0
#define B1 1
#define B01 1
#define B001 1
#define B0001 1
#define B00001 1
#define B000001 1
#define B0000001 1
#define B00000001 1
#define B10 2
#define B010 2
#define B0010 2
#define B00010 2
#define B000010 2
#define B0000010 2
#define B00000010 2
#define B11 3
#define B011 3
#define B0011 3
#define B00011 3
#define B000011 3
#define B0000011 3
#define B00000011 3
#define B100 4
#define B0100 4
#define B00100 4
#define B000100 4
#define B0000100 4
#define B00000100 4
#define B101 5
#define B0101 5
#define B00101 5
#define B000101 5
#define B0000101 5
#define B00000101 5
#define B110 6
#define B0110 6
#define B00110 6
#define B000110 6
#define B0000110 6
#define B00000110 6
#define B111 7
#define B0111 7
#define B00111 7
#define B000111 7
#define B0000111 7
#define B00000111 7
#define B1000 8
#define B01000 8
#define B001000 8
#define B0001000 8
#define B00001000 8
#define B1001 9
#define B01001 9
#define B001001 9
#define B0001001 9
#define B00001001 9
#define B1010 10
#define B01010 10
#define B001010 10
#define B0001010 10
#define B00001010 10
#define B1011 11
#define B01011 11
#define B001011 11
#define B0001011 11
#define B00001011 11
#define B1100 12
#define B01100 12
#define B001100 12
#define B0001100 12
#define B00001100 12
#define B1101 13
#define B01101 13
#define B001101 13
#define B0001101 13
#define B00001101 13
#define B1110 14
#define B01110 14
#define B001110 14
#define B0001110 14
#define B00001110 14
#define B1111 15
#define B01111 15
#define B001111 15
#define B0001111 15
#define B00001111 15
#define B10000 16
#define B010000 16
#define B0010000 16
#define B00010000 16
#define B10001 17
#define B010001 17
#define B0010001 17
#define B00010001 17
#define B10010 18
#define B010010 18
#define B0010010 18
#define B00010010 18
#define B10011 19
#define B010011 19
#define B0010011 19
#define B00010011 19
#define B10100 20
#define B010100 20
#define B0010100 20
#define B00010100 20
#define B10101 21
#define B010101 21
#define B0010101 21
#define B00010101 21
#define B10110 22
#define B010110 22
#define B0010110 22
#define B00010110 22
#define B10111 23
#define B010111 23
#define B0010111 23
#define B00010111 23
#define B11000 24
#define B011000 24
#define B0011000 24
#define B00011000 24
#define B11001 25
#define B011001 25
#define B0011001 25
#define B00011001 25
#define B11010 26
#define B011010 26
#define B0011010 26
#define B00011010 26
#define B11011 27
#define B011011 27
#define B0011011 27
#define B00011011 27
#define B11100 28
#define B011100 28
#define B0011100 28
#define B00011100 28
#define B11101 29
#define B011101 29
#define B0011101 29
#define B00011101 29
#define B11110 30
#define B011110 30
#define B0011110 30
#define B00011110 30
#define B11111 31
#define B011111 31
#define B0011111 31
#define B00011111 31
#define B100000 32
#define B0100000 32
#define B00100000 32
#define B100001 33
#define B0100001 33
#define B00100001 33
#define B100010 34
#define B0100010 34
#define B00100010 34
#define B100011 35
#define B0100011 35
#define B00100011 35
#define B100100 36
#define B0100100 36
#define B00100100 36
#define B100101 37
#define B0100101 37
#define B00100101 37
#define B100110 38
#define B0100110 38
#define B00100110 38
#define B100111 39
#define B0100111 39
#define B00100111 39
#define B101000 40
#define B0101000 40
#define B00101000 40
#define B101001 41
#define B0101001 41
#define B00101001 41
#define B101010 42
#define B0101010 42
#define B00101010 42
#define B101011 43
#define B0101011 43
#define B00101011 43
#define B101100 44
#define B0101100 44
#define B00101100 44
#define B101101 45
#define B0101101 45
#define B00101101 45
#define B101110 46
#define B0101110 46
#define B00101110 46
#define B101111 47
#define B0101111 47
#define B00101111 47
#define B110000 48
#define B0110000 48
#define B00110000 48
#define B110001 49
#define B0110001 49
#define B00110001 49
#define B110010 50
#define B0110010 50
#define B00110010 50
#define B110011 51
#define B0110011 51
#define B00110011 51
#define B110100 52
#define B0110100 52
#define B00110100 52
#define B110101 53
#define B0110101 53
#define B00110101 53
#define B110110 54
#define B0110110 54
#define B00110110 54
#define B110111 55
#define B0110111 55
#define B00110111 55
#define B111000 56
#define B0111000 56
#define B00111000 56
#define B111001 57
#define B0111001 57
#define B00111001 57
#define B111010 58
#define B0111010 58
#define B00111010 58
#define B111011 59
#define B0111011 59
#define B00111011 59
#define B111100 60
#define B0111100 60
#define B00111100 60
#define B111101 61
#define B0111101 61
#define B00111101 61
#define B111110 62
#define B0111110 62
#define B00111110 62
#define B111111 63
#define B0111111 63
#define B00111111 63
#define B1000000 64
#define B01000000 64
#define B1000001 65
#define B01000001 65
#define B1000010 66
#define B01000010 66
#define B1000011 67
#define B01000011 67
#define B1000100 68
#define B01000100 68
#define B1000101 69
#define B01000101 69
#define B1000110 70
#define B01000110 70
#define B1000111 71
#define B01000111 71
#define B1001000 72
#define B01001000 72
#define B1001001 73
#define B01001001 73
#define B1001010 74
#define B01001010 74
#define B1001011 75
#define B01001011 75
#define B1001100 76
#define B01001100 76
#define B1001101 77
#define B01001101 77
#define B1001110 78
#define B01001110 78
#define B1001111 79
#define B01001111 79
#define B1010000 80
#define B01010000 80
#define B1010001 81
#define B01010001 81
#define B1010010 82
#define B01010010 82
#define B1010011 83
#define B01010011 83
#define B1010100 84
#define B01010100 84
#define B1010101 85
#define B01010101 85
#define B1010110 86
#define B01010110 86
#define B1010111 87
#define B01010111 87
#define B1011000 88
#define B01011000 88
#define B1011001 89
#define B01011001 89
#define B1011010 90
#define B01011010 90
#define B1011011 91
#define B01011011 91
#define B1011100 92
#define B01011100 92
#define B1011101 93
#define B01011101 93
#define B1011110 94
#define B01011110 94
#define B1011111 95
#define B01011111 95
#define B1100000 96
#define B01100000 96
#define B1100001 97
#define B01100001 97
#define B1100010 98
#define B01100010 98
#define B1100011 99
#define B01100011 99
#define B1100100 100
#define B01100100 100
#define B1100101 101
#define B01100101 101
#define B1100110 102
#define B01100110 102
#define B1100111 103
#define B01100111 103
#define B1101000 104
#define B01101000 104
#define B1101001 105
#define B01101001 105
#define B1101010 106
#define B01101010 106
#define B1101011 107
#define B01101011 107
#define B1101100 108
#define B01101100 108
#define B1101101 109
#define B01101101 109
#define B1101110 110
#define B01101110 110
#define B1101111 111
#define B01101111 111
#define B1110000 112
#define B01110000 112
#define B1110001 113
#define B01110001 113
#define B1110010 114
#define B01110010 114
#define B1110011 115
#define B01110011 115
#define B1110100 116
#define B01110100 116
#define B1110101 117
#define B01110101 117
#define B1110110 118
#define B01110110 118
#define B1110111 119
#define B01110111 119
#define B1111000 120
#define B01111000 120
#define B1111001 121
#define B01111001 121
#define B1111010 122
#define B01111010 122
#define B1111011 123
#define B01111011 123
#define B1111100 124
#define B01111100 124
#define B1111101 125
#define B01111101 125
#define B1111110 126
#define B01111110 126
#define B1111111 127
#define B01111111 127
#define B10000000 128
#define B10000001 129
#define B10000010 130
#define B10000011 131
#define B10000100 132
#define B10000101 133
#define B10000110 134
#define B10000111 135
#define B10001000 136
#define B10001001 137
#define B10001010 138
#define B10001011 139
#define B10001100 140
#define B10001101 141
#define B10001110 142
#define B10001111 143
#define B10010000 144
#define B10010001 145
#define B10010010 146
#define B10010011 147
#define B10010100 148
#define B10010101 149
#define B10010110 150
#define B10010111 151
#define B10011000 152
#define B10011001 153
#define B10011010 154
#define B10011011 155
#define B10011100 156
#define B10011101 157
#define B10011110 158
#define B10011111 159
#define B10100000 160
#define B10100001 161
#define B10100010 162
#define B10100011 163
#define B10100100 164
#define B10100101 165
#define B10100110 166
#define B10100111 167
#define B10101000 168
#define B10101001 169
#define B10101010 170
#define B10101011 171
#define B10101100 172
#define B10101101 173
#define B10101110 174
#define B10101111 175
#define B10110000 176
#define B10110001 177
#define B10110010 178
#define B10110011 179
#define B10110100 180
#define B10110101 181
#define B10110110 182
#define B10110111 183
#define B10111000 184
#define B10111001 185
#define B10111010 186
#define B10111011 187
#define B10111100 188
#define B10111101 189
#define B10111110 190
#define B10111111 191
#define B11000000 192
#define B11000001 193
#define B11000010 194
#define B11000011 195
#define B11000100 196
#define B11000101 197
#define B11000110 198
#define B11000111 199
#define B11001000 200
#define B11001001 201
#define B11001010 202
#define B11001011 203
#define B11001100 204
#define B11001101 205
#define B11001110 206
#define B11001111 207
#define B11010000 208
#define B11010001 209
#define B11010010 210
#define B11010011 211
#define B11010100 212
#define B11010101 213
#define B11010110 214
#define B11010111 215
#define B11011000 216
#define B11011001 217
#define B11011010 218
#define B11011011 219
#define B11011100 220
#define B11011101 221
#define B11011110 222
#define B11011111 223
#define B11100000 224
#define B11100001 225
#define B11100010 226
#define B11100011 227
#define B11100100 228
#define B11100101 229
#define B11100110 230
#define B11100111 231
#define B11101000 232
#define B11101001 233
#define B11101010 234
#define B11101011 235
#define B11101100 236
#define B11101101 237
#define B11101110 238
#define B11101111 239
#define B11110000 240
#define B11110001 241
#define B11110010 242
#define B11110011 243
#define B11110100 244
#define B11110101 245
#define B11110110 246
#define B11110111 247
#define B11111000 248
#define B11111001 249
#define B11111010 250
#define B11111011 251
#define B11111100 252
#define B11111101 253
#define B11111110 254
#define B11111111 255
# 41 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2

#define PI 3.1415926535897932384626433832795
#define HALF_PI 1.5707963267948966192313216916398
#define TWO_PI 6.283185307179586476925286766559
#define DEG_TO_RAD 0.017453292519943295769236907684886
#define RAD_TO_DEG 57.295779513082320876798154814105
#define EULER 2.718281828459045235360287471352

#define SERIAL 0x0
#define DISPLAY 0x1

#define LSBFIRST 0
#define MSBFIRST 1


#define RISING 0x01
#define FALLING 0x02
#define CHANGE 0x03
#define ONLOW 0x04
#define ONHIGH 0x05
#define ONLOW_WE 0x0C
#define ONHIGH_WE 0x0D

#define DEFAULT 1
#define EXTERNAL 0





#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))
#define radians(deg) ((deg)*DEG_TO_RAD)
#define degrees(rad) ((rad)*RAD_TO_DEG)
#define sq(x) ((x)*(x))

#define sei() 
#define cli() 
#define interrupts() sei()
#define noInterrupts() cli()

#define clockCyclesPerMicrosecond() ( (long int)getCpuFrequencyMhz() )
#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )
#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )

#define lowByte(w) ((uint8_t) ((w) & 0xff))
#define highByte(w) ((uint8_t) ((w) >> 8))

#define bitRead(value,bit) (((value) >> (bit)) & 0x01)
#define bitSet(value,bit) ((value) |= (1UL << (bit)))
#define bitClear(value,bit) ((value) &= ~(1UL << (bit)))
#define bitWrite(value,bit,bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))



#define _NOP() do { __asm__ volatile ("nop"); } while (0)


#define bit(b) (1UL << (b))
#define _BV(b) (1UL << (b))

#define digitalPinToPort(pin) (((pin)>31)?1:0)
#define digitalPinToBitMask(pin) (1UL << (((pin)>31)?((pin)-32):(pin)))
#define digitalPinToTimer(pin) (0)
#define analogInPinToBit(P) (P)
#define portOutputRegister(port) ((volatile uint32_t*)((port)?GPIO_OUT1_REG:GPIO_OUT_REG))
#define portInputRegister(port) ((volatile uint32_t*)((port)?GPIO_IN1_REG:GPIO_IN_REG))
#define portModeRegister(port) ((volatile uint32_t*)((port)?GPIO_ENABLE1_REG:GPIO_ENABLE_REG))

#define NOT_A_PIN -1
#define NOT_A_PORT -1
#define NOT_AN_INTERRUPT -1
#define NOT_ON_TIMER 0

typedef bool boolean;
typedef uint8_t byte;
typedef unsigned int word;

void setup(void);
void loop(void);

long random(long, long);
void randomSeed(unsigned long);
long map(long, long, long, long, long);


extern "C" {


void init(void);
void initVariant(void);
void initArduino(void);

unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);
unsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);


}

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\algorithm" 1 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\algorithm" 3























































#define _GLIBCXX_ALGORITHM 1

       
# 59 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\algorithm" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\utility" 1 3























































#define _GLIBCXX_UTILITY 1

       
# 59 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\utility" 3









# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3






























#define _GLIBCXX_CXX_CONFIG_H 1


#define __GLIBCXX__ 20150716








#define _GLIBCXX_PURE __attribute__ ((__pure__))



#define _GLIBCXX_CONST __attribute__ ((__const__))



#define _GLIBCXX_NORETURN __attribute__ ((__noreturn__))












#define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY 1


#define _GLIBCXX_VISIBILITY(V) __attribute__ ((__visibility__ (#V)))










#define _GLIBCXX_USE_DEPRECATED 1



#define _GLIBCXX_DEPRECATED __attribute__ ((__deprecated__))






#define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ ("cxx11")))








#define _GLIBCXX_CONSTEXPR constexpr
#define _GLIBCXX_USE_CONSTEXPR constexpr
# 110 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 3
#define _GLIBCXX14_CONSTEXPR 






#define _GLIBCXX_NOEXCEPT noexcept
#define _GLIBCXX_USE_NOEXCEPT noexcept
#define _GLIBCXX_THROW(_EXC) 
# 128 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 3
#define _GLIBCXX_NOTHROW _GLIBCXX_USE_NOEXCEPT




#define _GLIBCXX_THROW_OR_ABORT(_EXC) (throw (_EXC))















#define _GLIBCXX_EXTERN_TEMPLATE 1












































namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}

#define _GLIBCXX_USE_DUAL_ABI 1







#define _GLIBCXX_USE_CXX11_ABI 1



namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
#define _GLIBCXX_NAMESPACE_CXX11 __cxx11::
#define _GLIBCXX_BEGIN_NAMESPACE_CXX11 namespace __cxx11 {
#define _GLIBCXX_END_NAMESPACE_CXX11 }
#define _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_ABI_TAG_CXX11
# 236 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 3

#define _GLIBCXX_INLINE_VERSION 0


# 279 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 3
#define _GLIBCXX_BEGIN_NAMESPACE_VERSION 
#define _GLIBCXX_END_NAMESPACE_VERSION 




# 335 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 3










# 364 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 3
#define _GLIBCXX_STD_A std



#define _GLIBCXX_STD_C std



#define _GLIBCXX_BEGIN_NAMESPACE_ALGO 



#define _GLIBCXX_END_NAMESPACE_ALGO 



#define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER 



#define _GLIBCXX_END_NAMESPACE_CONTAINER 




#undef _GLIBCXX_LONG_DOUBLE_COMPAT


# 401 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 3
#define _GLIBCXX_NAMESPACE_LDBL 
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL 
#define _GLIBCXX_END_NAMESPACE_LDBL 


#define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_CXX11
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11
#define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_CXX11








#define __glibcxx_assert(_Condition) 
# 441 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 3






















#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A) 


#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A) 



#define _GLIBCXX_BEGIN_EXTERN_C extern "C" {
#define _GLIBCXX_END_EXTERN_C }










# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\os_defines.h" 1 3






























#define _GLIBCXX_OS_DEFINES 1



# 57 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\os_defines.h" 3
#define _GLIBCXX_GTHREAD_USE_WEAK 0
#define _GTHREAD_USE_MUTEX_INIT_FUNC 1
#define _GTHREAD_USE_COND_INIT_FUNC 1
#define _GLIBCXX_USE_SCHED_YIELD 1
# 483 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 2 3


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\cpu_defines.h" 1 3






























#define _GLIBCXX_CPU_DEFINES 1
# 486 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 2 3




#define _GLIBCXX_PSEUDO_VISIBILITY(V) 






#define _GLIBCXX_WEAK_DEFINITION 










#define _GLIBCXX_FAST_MATH 0






#define __N(msgid) (msgid)


#undef min
#undef max






#define _GLIBCXX_HAVE_ACOSF 1





#define _GLIBCXX_HAVE_ASINF 1





#define _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE 1


#define _GLIBCXX_HAVE_ATAN2F 1





#define _GLIBCXX_HAVE_ATANF 1











#define _GLIBCXX_HAVE_CEILF 1





#define _GLIBCXX_HAVE_COMPLEX_H 1


#define _GLIBCXX_HAVE_COSF 1


#define _GLIBCXX_HAVE_COSHF 1











#define _GLIBCXX_HAVE_EBADMSG 1


#define _GLIBCXX_HAVE_ECANCELED 1


#define _GLIBCXX_HAVE_ECHILD 1


#define _GLIBCXX_HAVE_EIDRM 1





#define _GLIBCXX_HAVE_ENODATA 1


#define _GLIBCXX_HAVE_ENOLINK 1


#define _GLIBCXX_HAVE_ENOSPC 1


#define _GLIBCXX_HAVE_ENOSR 1


#define _GLIBCXX_HAVE_ENOSTR 1


#define _GLIBCXX_HAVE_ENOTRECOVERABLE 1


#define _GLIBCXX_HAVE_ENOTSUP 1


#define _GLIBCXX_HAVE_EOVERFLOW 1


#define _GLIBCXX_HAVE_EOWNERDEAD 1


#define _GLIBCXX_HAVE_EPERM 1


#define _GLIBCXX_HAVE_EPROTO 1


#define _GLIBCXX_HAVE_ETIME 1


#define _GLIBCXX_HAVE_ETIMEDOUT 1


#define _GLIBCXX_HAVE_ETXTBSY 1


#define _GLIBCXX_HAVE_EWOULDBLOCK 1





#define _GLIBCXX_HAVE_EXPF 1





#define _GLIBCXX_HAVE_FABSF 1





#define _GLIBCXX_HAVE_FENV_H 1











#define _GLIBCXX_HAVE_FLOAT_H 1


#define _GLIBCXX_HAVE_FLOORF 1





#define _GLIBCXX_HAVE_FMODF 1











#define _GLIBCXX_HAVE_FREXPF 1





#define _GLIBCXX_HAVE_GETIPINFO 1


#define _GLIBCXX_HAVE_GETS 1


#define _GLIBCXX_HAVE_HYPOT 1








#define _GLIBCXX_HAVE_ICONV 1


#define _GLIBCXX_HAVE_IEEEFP_H 1


#define _GLIBCXX_HAVE_INT64_T 1





#define _GLIBCXX_HAVE_INT64_T_LONG_LONG 1


#define _GLIBCXX_HAVE_INTTYPES_H 1




















#define _GLIBCXX_HAVE_ISWBLANK 1


#define _GLIBCXX_HAVE_LC_MESSAGES 1


#define _GLIBCXX_HAVE_LDEXPF 1


























#define _GLIBCXX_HAVE_LOCALE_H 1


#define _GLIBCXX_HAVE_LOG10F 1





#define _GLIBCXX_HAVE_LOGF 1





#define _GLIBCXX_HAVE_MACHINE_ENDIAN_H 1


#define _GLIBCXX_HAVE_MACHINE_PARAM_H 1


#define _GLIBCXX_HAVE_MBSTATE_T 1








#define _GLIBCXX_HAVE_MODFF 1











#define _GLIBCXX_HAVE_POWF 1























#define _GLIBCXX_HAVE_SINF 1


#define _GLIBCXX_HAVE_SINHF 1








#define _GLIBCXX_HAVE_SLEEP 1


#define _GLIBCXX_HAVE_SQRTF 1





#define _GLIBCXX_HAVE_STDALIGN_H 1


#define _GLIBCXX_HAVE_STDBOOL_H 1


#define _GLIBCXX_HAVE_STDINT_H 1


#define _GLIBCXX_HAVE_STDLIB_H 1





#define _GLIBCXX_HAVE_STRERROR_R 1


#define _GLIBCXX_HAVE_STRINGS_H 1


#define _GLIBCXX_HAVE_STRING_H 1


#define _GLIBCXX_HAVE_STRTOF 1



























#define _GLIBCXX_HAVE_SYS_PARAM_H 1


#define _GLIBCXX_HAVE_SYS_RESOURCE_H 1








#define _GLIBCXX_HAVE_SYS_STAT_H 1





#define _GLIBCXX_HAVE_SYS_TIME_H 1


#define _GLIBCXX_HAVE_SYS_TYPES_H 1








#define _GLIBCXX_HAVE_S_ISREG 1


#define _GLIBCXX_HAVE_TANF 1


#define _GLIBCXX_HAVE_TANHF 1








#define _GLIBCXX_HAVE_TGMATH_H 1





#define _GLIBCXX_HAVE_UNISTD_H 1


#define _GLIBCXX_HAVE_USLEEP 1


#define _GLIBCXX_HAVE_VFWSCANF 1


#define _GLIBCXX_HAVE_VSWSCANF 1


#define _GLIBCXX_HAVE_VWSCANF 1


#define _GLIBCXX_HAVE_WCHAR_H 1


#define _GLIBCXX_HAVE_WCSTOF 1


#define _GLIBCXX_HAVE_WCTYPE_H 1









































































































































































































#define LT_OBJDIR ".libs/"





#define _GLIBCXX_PACKAGE_BUGREPORT ""


#define _GLIBCXX_PACKAGE_NAME "package-unused"


#define _GLIBCXX_PACKAGE_STRING "package-unused version-unused"


#define _GLIBCXX_PACKAGE_TARNAME "libstdc++"


#define _GLIBCXX_PACKAGE_URL ""


#define _GLIBCXX_PACKAGE__GLIBCXX_VERSION "version-unused"

















#define STDC_HEADERS 1





#define _GLIBCXX_ATOMIC_BUILTINS 1






#define _GLIBCXX_FULLY_DYNAMIC_STRING 0


#define _GLIBCXX_HAS_GTHREADS 1


#define _GLIBCXX_HOSTED 1




#define _GLIBCXX_PTRDIFF_T_IS_INT 1





#define _GLIBCXX_SIZE_T_IS_UINT 1





#define _GLIBCXX_STDIO_EOF -1


#define _GLIBCXX_STDIO_SEEK_CUR 1


#define _GLIBCXX_STDIO_SEEK_END 2
































#define _GLIBCXX_USE_C99_CTYPE_TR1 1



#define _GLIBCXX_USE_C99_FENV_TR1 1



#define _GLIBCXX_USE_C99_INTTYPES_TR1 1



#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 1



#define _GLIBCXX_USE_C99_MATH 1







#define _GLIBCXX_USE_C99_STDINT_TR1 1



















#define _GLIBCXX_USE_GETTIMEOFDAY 1











#define _GLIBCXX_USE_LONG_LONG 1





















#define _GLIBCXX_USE_SC_NPROCESSORS_ONLN 1








#define _GLIBCXX_USE_TMPNAM 1


#define _GLIBCXX_USE_WCHAR_T 1


#define _GLIBCXX_VERBOSE 0





#define _GTHREAD_USE_MUTEX_TIMEDLOCK 0
# 69 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\utility" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_relops.h" 1 3
































































#define _STL_RELOPS_H 1

namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
 

    



    







    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }

    







    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }

    







    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }

    







    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }

 
  } 

} 
# 70 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\utility" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_pair.h" 1 3
























































#define _STL_PAIR_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 1 3






























#define _MOVE_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\concept_check.h" 1 3






























#define _CONCEPT_CHECK_H 1

       
# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\concept_check.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\concept_check.h" 2 3











#define __glibcxx_function_requires(...) 
#define __glibcxx_class_requires(_a,_b) 
#define __glibcxx_class_requires2(_a,_b,_c) 
#define __glibcxx_class_requires3(_a,_b,_c,_d) 
#define __glibcxx_class_requires4(_a,_b,_c,_d,_e) 
# 35 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  
  



  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) noexcept
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


} 


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 1 3





























#define _GLIBCXX_TYPE_TRAITS 1

       
# 33 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3





# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 39 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 2 3
# 48 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdint" 1 3





























#define _GLIBCXX_CSTDINT 1

       
# 33 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdint" 3





# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 39 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdint" 2 3


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1 3













# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
} 
# 49 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  










  
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const { return value; }






    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;

  
  typedef integral_constant<bool, true> true_type;

  
  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;

  

  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public integral_constant<bool, !_Pp::value>
    { };

  
  
  
  

  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };

  

  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };

  
  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };

  
  
# 287 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3
  
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };







  
  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };

  
  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };

  
  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };

  
  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };

  
  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };

  
  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };

  
  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  
  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };

  
  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };

  
  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };

  
  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...)>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......)>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile &&>
    : public true_type { };

#define __cpp_lib_is_null_pointer 201309

  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };

  
  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };

  
  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };

  

  
  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };

  
  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };

  
  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };

  
  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;

  
  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };

  
  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };

  
  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };

  

  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args>
    struct __is_referenceable<_Res(_Args...)>
    : public true_type
    { };

  template<typename _Res, typename... _Args>
    struct __is_referenceable<_Res(_Args......)>
    : public true_type
    { };

  

  
  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };

  
  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };

  
  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };

  
  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };

  
  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };

  
  
  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };

  
  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };

  
  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };

  
  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };
# 687 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3
  
  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };

  
  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };

  
  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>::type
    { };


  

  template<typename>
    struct add_rvalue_reference;

  



  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>::type
    { };

  
  
  
  
  
  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };

  
  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };

  
  
  
  
  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };

  
  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>::type
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;

  
  
  
  
  
  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>::type
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };

  
  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };


  

  
  
  
  
  
  
  
  
  
  struct __do_is_static_castable_impl
  {
    template<typename _From, typename _To, typename
             = decltype(static_cast<_To>(declval<_From>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _From, typename _To>
    struct __is_static_castable_impl
    : public __do_is_static_castable_impl
    {
      typedef decltype(__test<_From, _To>(0)) type;
    };

  template<typename _From, typename _To>
    struct __is_static_castable_safe
    : public __is_static_castable_impl<_From, _To>::type
    { };

  
  template<typename _From, typename _To>
    struct __is_static_castable
    : public integral_constant<bool, (__is_static_castable_safe<
          _From, _To>::value)>
    { };

  
  
  
  
  
  struct __do_is_direct_constructible_impl
  {
    template<typename _Tp, typename _Arg, typename
      = decltype(::new _Tp(declval<_Arg>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_impl
    : public __do_is_direct_constructible_impl
    {
      typedef decltype(__test<_Tp, _Arg>(0)) type;
    };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new_safe
    : public __and_<is_destructible<_Tp>,
                    __is_direct_constructible_impl<_Tp, _Arg>>::type
    { };

  template<typename, typename>
    struct is_same;

  template<typename, typename>
    struct is_base_of;

  template<typename>
    struct remove_reference;

  template<typename _From, typename _To, bool
           = __not_<__or_<is_void<_From>,
                          is_function<_From>>>::value>
    struct __is_base_to_derived_ref;

  
  
  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<_From
        >::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<_To
        >::type>::type __dst_t;
      typedef __and_<__not_<is_same<__src_t, __dst_t>>,
       is_base_of<__src_t, __dst_t>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, false>
    : public false_type
    { };

  template<typename _From, typename _To, bool
           = __and_<is_lvalue_reference<_From>,
                    is_rvalue_reference<_To>>::value>
    struct __is_lvalue_to_rvalue_ref;

  
  
  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<
        _From>::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<
        _To>::type>::type __dst_t;
      typedef __and_<__not_<is_function<__src_t>>,
        __or_<is_same<__src_t, __dst_t>,
      is_base_of<__dst_t, __src_t>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, false>
    : public false_type
    { };

  
  
  
  
  
  
  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_ref_cast
    : public __and_<__is_static_castable<_Arg, _Tp>,
                    __not_<__or_<__is_base_to_derived_ref<_Arg, _Tp>,
                                 __is_lvalue_to_rvalue_ref<_Arg, _Tp>
                   >>>::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new
    : public conditional<is_reference<_Tp>::value,
    __is_direct_constructible_ref_cast<_Tp, _Arg>,
    __is_direct_constructible_new_safe<_Tp, _Arg>
    >::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible
    : public __is_direct_constructible_new<_Tp, _Arg>::type
    { };

  
  
  
  
  
  struct __do_is_nary_constructible_impl
  {
    template<typename _Tp, typename... _Args, typename
             = decltype(_Tp(declval<_Args>()...))>
      static true_type __test(int);

    template<typename, typename...>
      static false_type __test(...);
  };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible_impl
    : public __do_is_nary_constructible_impl
    {
      typedef decltype(__test<_Tp, _Args...>(0)) type;
    };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible
    : public __is_nary_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(sizeof...(_Args) > 1,
                    "Only useful for > 1 arguments");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __is_nary_constructible<_Tp, _Args...>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_constructible_impl<_Tp, _Arg>
    : public __is_direct_constructible<_Tp, _Arg>
    { };

  template<typename _Tp>
    struct __is_constructible_impl<_Tp>
    : public is_default_constructible<_Tp>
    { };

  
  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public __is_constructible_impl<_Tp, _Args...>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };

  
  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };

  
  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>::type
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };

  
  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>::type
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };

  
  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };

  
  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };

  
  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    class __is_assignable_helper
    {
      template<typename _Tp1, typename _Up1,
        typename = decltype(declval<_Tp1>() = declval<_Up1>())>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };

  
  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __is_assignable_helper<_Tp, _Up>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };

  
  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };

  
  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };

  
  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };

  
  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };

  
  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };

  
  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __and_<is_constructible<_Tp, _Args...>, integral_constant<bool,
   __is_trivially_constructible(_Tp, _Args...)>>::type
    { };

  
  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  
  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>::type
    { };

  
  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>::type
    { };

  
  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp, _Up)>>::type
    { };

  
  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>::type
    { };

  
  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>::type
    { };

  
  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>::type
    { };

  
  template<typename _Tp>
    struct has_trivial_default_constructor
    : public integral_constant<bool, __has_trivial_constructor(_Tp)>
    { } __attribute__ ((__deprecated__));

  
  template<typename _Tp>
    struct has_trivial_copy_constructor
    : public integral_constant<bool, __has_trivial_copy(_Tp)>
    { } __attribute__ ((__deprecated__));

  
  template<typename _Tp>
    struct has_trivial_copy_assign
    : public integral_constant<bool, __has_trivial_assign(_Tp)>
    { } __attribute__ ((__deprecated__));

  
  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };


  

  
  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };

  
  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  
  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };


  

  
  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };

  
  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };


  
  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };


  

  
  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };

  
  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };

  
  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };

  
  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };

  
  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };

  
  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };
# 1571 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3
  

  
  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };

  
  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };

  
  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };
# 1628 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3
  

  
  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };

  
  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };
# 1717 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3
  
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {
      
      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      typedef conditional<__b2, unsigned int, unsigned long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };

  
  
  
  
  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };

  
  template<>
    struct make_unsigned<bool>;


  
  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<wchar_t> : __make_signed<short unsigned int>
    { };



  template<>
    struct __make_signed<char16_t> : __make_signed<uint_least16_t>
    { };
  template<>
    struct __make_signed<char32_t> : __make_signed<uint_least32_t>
    { };
# 1829 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3
  
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      
      typedef signed char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);
      typedef conditional<__b2, signed int, signed long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, signed short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };

  
  
  
  
  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };

  
  template<>
    struct make_signed<bool>;
# 1885 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3
  

  
  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };

  
  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };
# 1923 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3
  

  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };

  
  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };

  
  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };
# 1964 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3
  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };

  









  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };

  









  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:
      
      static const size_t alignment_value = __strictest::_S_alignment;
      
      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;

  
  
  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;

  
  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };

  
  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;

  
  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };


  
  
  template<bool, typename _Tp = void>
    struct enable_if
    { };

  
  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;

  
  
  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };

  
  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };

  
  template<typename... _Tp>
    struct common_type;

  

  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };

  
  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }

  
  template<typename _Signature>
    class result_of;

  

#define __cpp_lib_result_of_sfinae 201210

  
  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __success_type<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };

  
  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __success_type<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };

  
  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __success_type<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      )> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  
  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __success_type<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      )> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type, _Arg>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type, _Arg, _Args...>
    { };

  
  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __success_type<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
     _Functor, _ArgTypes...
      >::type
    { };
# 2407 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3
  template<typename...> using __void_t = void;

  

  



#define _GLIBCXX_HAS_NESTED_TYPE(_NTYPE) template<typename _Tp, typename = __void_t<>> struct __has_ ##_NTYPE : false_type { }; template<typename _Tp> struct __has_ ##_NTYPE<_Tp, __void_t<typename _Tp::_NTYPE>> : true_type { };
# 2425 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 3

} 
# 58 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  




  





  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }

  





  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }

  




  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };

  







  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }

  

  






  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }

  
  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }

  

} 

#define _GLIBCXX_MOVE(__val) std::move(__val)
#define _GLIBCXX_FORWARD(_Tp,__val) std::forward<_Tp>(__val)





namespace std __attribute__ ((__visibility__ ("default")))
{


  




  





  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)

    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)

    {
      
     

      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }

  
  
  
  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])

    noexcept(noexcept(swap(*__a, *__b)))

    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }

  

} 
# 60 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_pair.h" 2 3


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 1 3



























# 63 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_pair.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  





  
  struct piecewise_construct_t { };

  
  constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();

  
  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;


 





  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type; 
      typedef _T2 second_type; 

      _T1 first; 
      _T2 second; 

      
      
      

      constexpr pair()
      : first(), second() { }

      
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }

      





      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<const _U1&, _T1>,
    is_convertible<const _U2&, _T2>>::value>::type>
 constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;

      
      template<class _U1, class = typename
        enable_if<is_convertible<_U1, _T1>::value>::type>
 constexpr pair(_U1&& __x, const _T2& __y)
 : first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
        enable_if<is_convertible<_U2, _T2>::value>::type>
 constexpr pair(const _T1& __x, _U2&& __y)
 : first(__x), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(const pair& __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(pair&& __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
               is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<class _U1, class _U2>
 pair&
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<class _U1, class _U2>
 pair&
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(noexcept(swap(first, __p.first))
        && noexcept(swap(second, __p.second)))
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };

  
  template<class _T1, class _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }

  
  template<class _T1, class _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }

  
  template<class _T1, class _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }

  
  template<class _T1, class _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }

  
  template<class _T1, class _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }

  
  template<class _T1, class _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }


  
  
  
  template<class _T1, class _T2>
    inline void
    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  









  
  

  
  template<class _T1, class _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }







  


} 
# 71 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\utility" 2 3



# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 1 3




























# 75 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\utility" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\initializer_list" 1 3






























#define _INITIALIZER_LIST 

       
# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\initializer_list" 3





#pragma GCC visibility push(default)

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\initializer_list" 2 3

namespace std
{
  
  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;

      
      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      
      constexpr size_type
      size() const noexcept { return _M_len; }

      
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };

  




  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }

  




  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 76 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\utility" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<class _Tp>
    class tuple_size;

  template<std::size_t _Int, class _Tp>
    class tuple_element;

   

  
  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };

  
  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };

  
  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }
# 203 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\utility" 3
  
  
  template<size_t... _Indexes>
    struct _Index_tuple
    {
      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;
    };

  
  template<size_t _Num>
    struct _Build_index_tuple
    {
      typedef typename _Build_index_tuple<_Num - 1>::__type::__next __type;
    };

  template<>
    struct _Build_index_tuple<0>
    {
      typedef _Index_tuple<> __type;
    };
# 267 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\utility" 3

} 
# 61 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\algorithm" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 1 3
























































#define _STL_ALGOBASE_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 60 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\functexcept.h" 1 3




































#define _FUNCTEXCEPT_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\functexcept.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\exception_defines.h" 1 3






























#define _EXCEPTION_DEFINES_H 1








#define __try try
#define __catch(X) catch(X)
#define __throw_exception_again throw
# 41 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  
  void
  __throw_bad_exception(void) __attribute__((__noreturn__));

  
  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));

  
  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));

  
  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));

  
  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));

  
  void
  __throw_bad_function_call() __attribute__((__noreturn__));


} 
# 61 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cpp_type_traits.h" 1 3
































#define _CPP_TYPE_TRAITS_H 1

       
# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cpp_type_traits.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 38 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cpp_type_traits.h" 2 3






























namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


} 

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };

  
  
  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };

  
  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  
  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  
  
  
  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  
  
  
  
  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

#define __INT_N(TYPE) template<> struct __is_integer<TYPE> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned TYPE> { enum { __value = 1 }; typedef __true_type __type; };
# 282 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cpp_type_traits.h" 3
#undef __INT_N

  
  
  
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  
  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  
  
  
  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  
  
  
  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  
  
  
  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };

  
  
  
  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };

  
  
  
  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  
  
  
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<typename _Iterator>
    class move_iterator;

  template<typename _Iterator>
    struct __is_move_iterator< move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



} 
# 62 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\type_traits.h" 1 3





























#define _EXT_TYPE_TRAITS 1

       
# 33 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\type_traits.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 35 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\type_traits.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cpp_type_traits.h" 1 3






























# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\type_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  
  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };


  
  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };


  
  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };

  
  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;


  
  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };

  
  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;


  
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }


  
  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };

  
  
  
  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


} 
# 63 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\numeric_traits.h" 1 3





























#define _EXT_NUMERIC_TRAITS 1

       
# 33 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\numeric_traits.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cpp_type_traits.h" 1 3






























# 35 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\numeric_traits.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\type_traits.h" 1 3



























# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\numeric_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  
  
#define __glibcxx_signed(_Tp) ((_Tp)(-1) < 0)
#define __glibcxx_digits(_Tp) (sizeof(_Tp) * __CHAR_BIT__ - __glibcxx_signed(_Tp))


#define __glibcxx_min(_Tp) (__glibcxx_signed(_Tp) ? (_Tp)1 << __glibcxx_digits(_Tp) : (_Tp)0)


#define __glibcxx_max(_Tp) (__glibcxx_signed(_Tp) ? (((((_Tp)1 << (__glibcxx_digits(_Tp) - 1)) - 1) << 1) + 1) : ~(_Tp)0)



  template<typename _Value>
    struct __numeric_traits_integer
    {
      
      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);

      
      
      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;

#undef __glibcxx_signed
#undef __glibcxx_digits
#undef __glibcxx_min
#undef __glibcxx_max

#define __glibcxx_floating(_Tp,_Fval,_Dval,_LDval) (std::__are_same<_Tp, float>::__value ? _Fval : std::__are_same<_Tp, double>::__value ? _Dval : _LDval)



#define __glibcxx_max_digits10(_Tp) (2 + __glibcxx_floating(_Tp, __FLT_MANT_DIG__, __DBL_MANT_DIG__, __LDBL_MANT_DIG__) * 643L / 2136)



#define __glibcxx_digits10(_Tp) __glibcxx_floating(_Tp, __FLT_DIG__, __DBL_DIG__, __LDBL_DIG__)


#define __glibcxx_max_exponent10(_Tp) __glibcxx_floating(_Tp, __FLT_MAX_10_EXP__, __DBL_MAX_10_EXP__, __LDBL_MAX_10_EXP__)



  template<typename _Value>
    struct __numeric_traits_floating
    {
      
      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 53) * 643L / 2136);

      
      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 15);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 308);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


} 

#undef __glibcxx_floating
#undef __glibcxx_max_digits10
#undef __glibcxx_digits10
#undef __glibcxx_max_exponent10
# 64 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_pair.h" 1 3






















































# 65 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_types.h" 1 3



























































#define _STL_ITERATOR_BASE_TYPES_H 1

       
# 63 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_types.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 65 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_types.h" 2 3


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 1 3



























# 68 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_types.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  



  

  






  
  
  struct input_iterator_tag { };

  
  struct output_iterator_tag { };

  
  struct forward_iterator_tag : public input_iterator_tag { };

  
  
  struct bidirectional_iterator_tag : public forward_iterator_tag { };

  
  
  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
  

  









  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {
      
      typedef _Category iterator_category;
      
      typedef _Tp value_type;
      
      typedef _Distance difference_type;
      
      typedef _Pointer pointer;
      
      typedef _Reference reference;
    };

  








  
  
  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 176 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_types.h" 3
  
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };

  
  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };

  



  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }

  

  
  
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };


  template<typename _InIter>
    using _RequireInputIter = typename
      enable_if<is_convertible<typename
  iterator_traits<_InIter>::iterator_category,
          input_iterator_tag>::value>::type;



} 
# 66 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_funcs.h" 1 3



























































#define _STL_ITERATOR_BASE_FUNCS_H 1

       
# 63 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_funcs.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\concept_check.h" 1 3




























# 65 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_funcs.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\debug\\debug.h" 1 3





























#define _GLIBCXX_DEBUG_MACRO_SWITCH_H 1















namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}



#define _GLIBCXX_DEBUG_ASSERT(_Condition) 
#define _GLIBCXX_DEBUG_PEDASSERT(_Condition) 
#define _GLIBCXX_DEBUG_ONLY(_Statement) ;
#define __glibcxx_requires_cond(_Cond,_Msg) 
#define __glibcxx_requires_valid_range(_First,_Last) 
#define __glibcxx_requires_non_empty_range(_First,_Last) 
#define __glibcxx_requires_sorted(_First,_Last) 
#define __glibcxx_requires_sorted_pred(_First,_Last,_Pred) 
#define __glibcxx_requires_sorted_set(_First1,_Last1,_First2) 
#define __glibcxx_requires_sorted_set_pred(_First1,_Last1,_First2,_Pred) 
#define __glibcxx_requires_partitioned_lower(_First,_Last,_Value) 
#define __glibcxx_requires_partitioned_upper(_First,_Last,_Value) 
#define __glibcxx_requires_partitioned_lower_pred(_First,_Last,_Value,_Pred) 
#define __glibcxx_requires_partitioned_upper_pred(_First,_Last,_Value,_Pred) 
#define __glibcxx_requires_heap(_First,_Last) 
#define __glibcxx_requires_heap_pred(_First,_Last,_Pred) 
#define __glibcxx_requires_nonempty() 
#define __glibcxx_requires_string(_String) 
#define __glibcxx_requires_string_len(_String,_Len) 
#define __glibcxx_requires_subscript(_N) 
# 66 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {
      
     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {
      
     

      return __last - __first;
    }

  












  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {
      
      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {
      
     
      ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {
      
     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {
      
     

      __i += __n;
    }

  











  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {
      
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _ForwardIterator>
    inline _ForwardIterator
    next(_ForwardIterator __x, typename
  iterator_traits<_ForwardIterator>::difference_type __n = 1)
    {
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {
      std::advance(__x, -__n);
      return __x;
    }




} 
# 67 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator.h" 1 3




























































#define _STL_ITERATOR_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cpp_type_traits.h" 1 3






























# 64 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\type_traits.h" 1 3



























# 65 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 1 3




























# 66 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\ptr_traits.h" 1 3






























#define _PTR_TRAITS_H 1



# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 1 3



























# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\ptr_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


template<typename _Tp, typename = __void_t<>> struct __has_element_type : false_type { }; template<typename _Tp> struct __has_element_type<_Tp, __void_t<typename _Tp::element_type>> : true_type { };
template<typename _Tp, typename = __void_t<>> struct __has_difference_type : false_type { }; template<typename _Tp> struct __has_difference_type<_Tp, __void_t<typename _Tp::difference_type>> : true_type { };

  template<typename _Tp, bool = __has_element_type<_Tp>::value>
    struct __ptrtr_elt_type;

  template<typename _Tp>
    struct __ptrtr_elt_type<_Tp, true>
    {
      typedef typename _Tp::element_type __type;
    };

  template<template<typename, typename...> class _SomePtr, typename _Tp,
            typename... _Args>
    struct __ptrtr_elt_type<_SomePtr<_Tp, _Args...>, false>
    {
      typedef _Tp __type;
    };

  template<typename _Tp, bool = __has_difference_type<_Tp>::value>
    struct __ptrtr_diff_type
    {
      typedef typename _Tp::difference_type __type;
    };

  template<typename _Tp>
    struct __ptrtr_diff_type<_Tp, false>
    {
      typedef ptrdiff_t __type;
    };

  template<typename _Ptr, typename _Up>
    class __ptrtr_rebind_helper
    {
      template<typename _Ptr2, typename _Up2>
 static constexpr true_type
 _S_chk(typename _Ptr2::template rebind<_Up2>*);

      template<typename, typename>
 static constexpr false_type
 _S_chk(...);

    public:
      using __type = decltype(_S_chk<_Ptr, _Up>(nullptr));
    };

  template<typename _Tp, typename _Up,
           bool = __ptrtr_rebind_helper<_Tp, _Up>::__type::value>
    struct __ptrtr_rebind;

  template<typename _Tp, typename _Up>
    struct __ptrtr_rebind<_Tp, _Up, true>
    {
      typedef typename _Tp::template rebind<_Up> __type;
    };

  template<template<typename, typename...> class _SomePtr, typename _Up,
            typename _Tp, typename... _Args>
    struct __ptrtr_rebind<_SomePtr<_Tp, _Args...>, _Up, false>
    {
      typedef _SomePtr<_Up, _Args...> __type;
    };

  template<typename _Tp, typename = typename remove_cv<_Tp>::type>
    struct __ptrtr_not_void
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __ptrtr_not_void<_Tp, void>
    {
      struct __type { };
    };

  template<typename _Ptr>
    class __ptrtr_pointer_to
    {
      typedef typename __ptrtr_elt_type<_Ptr>::__type __orig_type;
      typedef typename __ptrtr_not_void<__orig_type>::__type __element_type;

    public:
      static _Ptr pointer_to(__element_type& __e)
      { return _Ptr::pointer_to(__e); }
    };

  



  template<typename _Ptr>
    struct pointer_traits : __ptrtr_pointer_to<_Ptr>
    {
      
      typedef _Ptr pointer;
      
      typedef typename __ptrtr_elt_type<_Ptr>::__type element_type;
      
      typedef typename __ptrtr_diff_type<_Ptr>::__type difference_type;

      template<typename _Up>
        using rebind = typename __ptrtr_rebind<_Ptr, _Up>::__type;
    };

  



  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {
      
      typedef _Tp* pointer;
      
      typedef _Tp element_type;
      
      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;

      




      static pointer
      pointer_to(typename __ptrtr_not_void<element_type>::__type& __r) noexcept
      { return std::addressof(__r); }
    };


} 
# 67 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  




  
  

















  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;

      



      
      
      reverse_iterator() : current() { }

      


      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }

      


      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }

      



      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }

      


      iterator_type
      base() const
      { return current; }

      









      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }

      




      pointer
      operator->() const
      { return &(operator*()); }

      




      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }

      




      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }

      




      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }

      




      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }

      




      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }

      





      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }

      




      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }

      





      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }

      




      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };

  
  








  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }

  
  
  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>

    
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())





    { return __y.base() - __x.base(); }
  
# 403 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator.h" 3
  
  









  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:
      
      typedef _Container container_type;

      
      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }

      










# 448 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }


      
      back_insert_iterator&
      operator*()
      { return *this; }

      
      back_insert_iterator&
      operator++()
      { return *this; }

      
      back_insert_iterator
      operator++(int)
      { return *this; }
    };

  










  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }

  









  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:
      
      typedef _Container container_type;

      
      explicit front_insert_iterator(_Container& __x) : container(&__x) { }

      










# 538 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }


      
      front_insert_iterator&
      operator*()
      { return *this; }

      
      front_insert_iterator&
      operator++()
      { return *this; }

      
      front_insert_iterator
      operator++(int)
      { return *this; }
    };

  










  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }

  













  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:
      
      typedef _Container container_type;

      



      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}

      






















# 650 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }


      
      insert_iterator&
      operator*()
      { return *this; }

      
      insert_iterator&
      operator++()
      { return *this; }

      
      insert_iterator&
      operator++(int)
      { return *this; }
    };

  










  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }

  


} 

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  
  
  
  
  
  
  
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }

      
      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }

      
      reference
      operator*() const noexcept
      { return *_M_current; }

      pointer
      operator->() const noexcept
      { return _M_current; }

      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }

      
      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }

      
      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };

  
  
  
  
  
  
  

  
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  
  
  
  
  template<typename _IteratorL, typename _IteratorR, typename _Container>

    
    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


} 



namespace std __attribute__ ((__visibility__ ("default")))
{


  




  
  







  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;
      typedef typename __traits_type::reference __base_ref;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      
      typedef _Iterator pointer;
      
      
      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>
 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return static_cast<reference>(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };

  
  
  
  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  
  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline auto
    operator-(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(__i); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }

  


} 

#define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) std::make_move_iterator(_Iter)
#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) std::__make_move_if_noexcept_iterator(_Iter)
# 68 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\concept_check.h" 1 3




























# 69 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\debug\\debug.h" 1 3



























# 70 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 1 3




























# 71 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\predefined_ops.h" 1 3






























#define _GLIBCXX_PREDEFINED_OPS_H 1

namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
     
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };
 
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
    };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {
    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
    };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
    };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
    };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;
     
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator1, typename _Iterator2>
       
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
   
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      _Iter_comp_val(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(__comp); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(__comp._M_comp); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      _Val_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(__comp._M_comp); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_equals_iter(_Iterator1 __it1)
 : _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == _M_ref; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      _Iter_pred(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(__pred); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(__comp), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    { return _Iter_comp_to_val<_Compare, _Value>(__comp, __val); }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(__comp), _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, _M_ref)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    { return _Iter_comp_to_iter<_Compare, _Iterator>(__comp._M_comp, __it); }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      _Iter_negate(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(__pred._M_pred); }

} 
} 
# 72 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 108 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 3
  









  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      
     

     
# 148 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 3
      swap(*__a, *__b);

    }

  











  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {
      
     

     

      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }

  










  template<typename _Tp>
   
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {
      
     
      
      if (__b < __a)
 return __b;
      return __a;
    }

  










  template<typename _Tp>
   
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {
      
     
      
      if (__a < __b)
 return __b;
      return __a;
    }

  










  template<typename _Tp, typename _Compare>
   
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      
      if (__comp(__b, __a))
 return __b;
      return __a;
    }

  










  template<typename _Tp, typename _Compare>
   
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      
      if (__comp(__a, __b))
 return __b;
      return __a;
    }

  
  
  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }

  
  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }

  
  
  
  
  

  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {

   
   static_assert( is_copy_assignable<_Tp>::value,
                  "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }

  
  
  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }

  
















  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {
      
     
     

      ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }


  
















  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {
      
     
     

      ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }

#define _GLIBCXX_MOVE3(_Tp,_Up,_Vp) std::move(_Tp, _Up, _Vp)




  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {

   
   static_assert( is_copy_assignable<_Tp>::value,
                  "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }

  

















  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      
     
     
     


      ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }


  

















  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      
     
     
     


      ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }

#define _GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp) std::move_backward(_Tp, _Up, _Vp)




  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }

  
  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }

  











  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {
      
     

      ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }

  














  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {
      
     

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }

  










  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      
     
     

      ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }

  
  
  inline constexpr int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }





  











  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      
     
     
     


      ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }

  














  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {
      
     
     
      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1196 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 3
  














  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }

  












  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      
     
     
      ;
      ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }

  












  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {
      
     
     
     


      ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }

  















  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      
     
     
      ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 1423 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 3

} 




# 62 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\algorithm" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algo.h" 1 3
























































#define _STL_ALGO_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdlib" 1 3






































       
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdlib" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdlib" 2 3


#define _GLIBCXX_CSTDLIB 1
# 72 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdlib" 3
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 1 3









# 73 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdlib" 2 3


#undef abort
#undef abs
#undef atexit





#undef atof
#undef atoi
#undef atol
#undef bsearch
#undef calloc
#undef div
#undef exit
#undef free
#undef getenv
#undef labs
#undef ldiv
#undef malloc
#undef mblen
#undef mbstowcs
#undef mbtowc
#undef qsort





#undef rand
#undef realloc
#undef srand
#undef strtod
#undef strtol
#undef strtoul
#undef system
#undef wcstombs
#undef wctomb

namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline long
  abs(long __i) { return __builtin_labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 195 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdlib" 3

} 
# 60 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algo.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\algorithmfwd.h" 1 3






























#define _GLIBCXX_ALGORITHMFWD_H 1

       
# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\algorithmfwd.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\algorithmfwd.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_pair.h" 1 3






















































# 37 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\algorithmfwd.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_types.h" 1 3

























































# 38 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\algorithmfwd.h" 2 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\initializer_list" 1 3




























# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\algorithmfwd.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  




















































































  








  




  




  




  








  


























  


  template<typename _IIter, typename _Predicate>
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
    _OIter
    copy_n(_IIter, _Size, _OIter);


  
  

  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);

  

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  
  


  template<typename _IIter, typename _Predicate>
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);


  
  
  

  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
   
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
   
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);

  
  

  template<typename _Tp>
   
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
   
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);

  


  template<typename _Tp>
   
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
   
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
   
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
   
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
   
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
   
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
   
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
   
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
   
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
   
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);


  

  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
    bool
    none_of(_IIter, _IIter, _Predicate);


  
  

  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);

  


  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);

  

  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);

  

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);

  

  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  inline namespace _V2
  {
    template<typename _FIter>
      _FIter
      rotate(_FIter, _FIter, _FIter);
  }

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);

  
  
  
  
  
  


  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&)

    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)

    ;

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])

    noexcept(noexcept(swap(*__a, *__b)))

    ;

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);

  

  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);

  

  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
   
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
   
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
   
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
   
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);




  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


} 
# 61 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algo.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_heap.h" 1 3























































#define _STL_HEAP_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\debug\\debug.h" 1 3



























# 59 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_heap.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 1 3




























# 60 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_heap.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\predefined_ops.h" 1 3




























# 61 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_heap.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  




  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first + __parent, __first + __child))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }

  
  
  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    {
      return std::__is_heap_until(__first, __n,
   __gnu_cxx::__ops::__iter_less_iter()) == __n;
    }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    {
      return std::__is_heap_until(__first, __n,
 __gnu_cxx::__ops::__iter_comp_iter(__comp)) == __n;
    }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }

  
  

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value,
  _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }

  









  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      
     

     
      ;
      ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value),
         __gnu_cxx::__ops::__iter_less_val());
    }

  











  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      
     

      ;
      ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value),
         __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(__first + __secondChild,
       __first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)))
                                  ;
   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value),
         __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }

  










  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      
     

     
      ;
      ;
      ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last,
     __gnu_cxx::__ops::__iter_less_iter());
 }
    }

  










  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      
     

      ;
      ;
      ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
 }
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }

  







  template<typename _RandomAccessIterator>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      
     

     

      ;

      std::__make_heap(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }

  









  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      
     

      ;

      std::__make_heap(__first, __last,
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }

  







  template<typename _RandomAccessIterator>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      
     

     

      ;
      ;

      std::__sort_heap(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }

  









  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      
     

      ;
      ;

      std::__sort_heap(__first, __last,
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  









  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      
     

     

      ;

      return __first +
 std::__is_heap_until(__first, std::distance(__first, __last),
        __gnu_cxx::__ops::__iter_less_iter());
    }

  










  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      
     

      ;

      return __first
 + std::__is_heap_until(__first, std::distance(__first, __last),
          __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  






  template<typename _RandomAccessIterator>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }

  







  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    { return std::is_heap_until(__first, __last, __comp) == __last; }



} 
# 62 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algo.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_tempbuf.h" 1 3
























































#define _STL_TEMPBUF_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 1 3






















































# 60 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_tempbuf.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_construct.h" 1 3
























































#define _STL_CONSTRUCT_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\new" 1 3


































#define _NEW 

       
# 38 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\new" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\new" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\exception" 1 3






























#define __EXCEPTION__ 

       
# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\exception" 3

#pragma GCC visibility push(default)

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 38 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\exception" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\atomic_lockfree_defines.h" 1 3






























#define _GLIBCXX_ATOMIC_LOCK_FREE_H 1

       
# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\atomic_lockfree_defines.h" 3















#define ATOMIC_BOOL_LOCK_FREE __GCC_ATOMIC_BOOL_LOCK_FREE
#define ATOMIC_CHAR_LOCK_FREE __GCC_ATOMIC_CHAR_LOCK_FREE
#define ATOMIC_WCHAR_T_LOCK_FREE __GCC_ATOMIC_WCHAR_T_LOCK_FREE
#define ATOMIC_CHAR16_T_LOCK_FREE __GCC_ATOMIC_CHAR16_T_LOCK_FREE
#define ATOMIC_CHAR32_T_LOCK_FREE __GCC_ATOMIC_CHAR32_T_LOCK_FREE
#define ATOMIC_SHORT_LOCK_FREE __GCC_ATOMIC_SHORT_LOCK_FREE
#define ATOMIC_INT_LOCK_FREE __GCC_ATOMIC_INT_LOCK_FREE
#define ATOMIC_LONG_LOCK_FREE __GCC_ATOMIC_LONG_LOCK_FREE
#define ATOMIC_LLONG_LOCK_FREE __GCC_ATOMIC_LLONG_LOCK_FREE
#define ATOMIC_POINTER_LOCK_FREE __GCC_ATOMIC_POINTER_LOCK_FREE



# 39 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\exception" 2 3

extern "C++" {

namespace std
{
  







  







  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;

    

    virtual const char* what() const noexcept;
  };

  

  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }

    
    
    virtual ~bad_exception() noexcept;

    
    virtual const char* what() const noexcept;
  };

  
  typedef void (*terminate_handler) ();

  
  typedef void (*unexpected_handler) ();

  
  terminate_handler set_terminate(terminate_handler) noexcept;


  
  terminate_handler get_terminate() noexcept;


  

  void terminate() noexcept __attribute__ ((__noreturn__));

  
  unexpected_handler set_unexpected(unexpected_handler) noexcept;


  
  unexpected_handler get_unexpected() noexcept;


  

  void unexpected() __attribute__ ((__noreturn__));

  










  bool uncaught_exception() noexcept __attribute__ ((__pure__));

  
} 

namespace __gnu_cxx
{


  















  void __verbose_terminate_handler();


} 

} 

#pragma GCC visibility pop


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\exception_ptr.h" 1 3































#define _EXCEPTION_PTR_H 

#pragma GCC visibility push(default)

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 37 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\exception_ptr.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\exception_defines.h" 1 3




























# 38 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\exception_ptr.h" 2 3





extern "C++" {

namespace std
{
  class type_info;

  



  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;

  



  exception_ptr current_exception() noexcept;

  
  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    



    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 111 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 138 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

  } 


  
  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {

      try
 {
   throw __ex;
 }
      catch(...)
 {
   return current_exception();
 }



    }

  
  
  
  
  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept __attribute__ ((__deprecated__));

  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept
    { return std::make_exception_ptr<_Ex>(__ex); }

  
} 

} 

#pragma GCC visibility pop
# 163 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\exception" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\nested_exception.h" 1 3






























#define _GLIBCXX_NESTED_EXCEPTION_H 1

#pragma GCC visibility push(default)





# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\nested_exception.h" 2 3





extern "C++" {

namespace std
{
  




  
  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };

  template<typename _Tp,
    bool __with_nested = !__is_base_of(nested_exception, _Tp)>
    struct _Throw_with_nested_impl
    {
      template<typename _Up>
 static void _S_throw(_Up&& __t)
 { throw _Nested_exception<_Tp>{static_cast<_Up&&>(__t)}; }
    };

  template<typename _Tp>
    struct _Throw_with_nested_impl<_Tp, false>
    {
      template<typename _Up>
 static void _S_throw(_Up&& __t)
 { throw static_cast<_Up&&>(__t); }
    };

  template<typename _Tp, bool = __is_class(_Tp) && !__is_final(_Tp)>
    struct _Throw_with_nested_helper : _Throw_with_nested_impl<_Tp>
    { };

  template<typename _Tp>
    struct _Throw_with_nested_helper<_Tp, false>
    : _Throw_with_nested_impl<_Tp, false>
    { };

  template<typename _Tp>
    struct _Throw_with_nested_helper<_Tp&, false>
    : _Throw_with_nested_helper<_Tp>
    { };

  template<typename _Tp>
    struct _Throw_with_nested_helper<_Tp&&, false>
    : _Throw_with_nested_helper<_Tp>
    { };

  
  
  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      _Throw_with_nested_helper<_Tp>::_S_throw(static_cast<_Tp&&>(__t));
    }

  template<typename _Tp, bool = __is_polymorphic(_Tp)>
    struct _Rethrow_if_nested_impl
    {
      static void _S_rethrow(const _Tp& __t)
      {
 if (auto __tp = dynamic_cast<const nested_exception*>(&__t))
   __tp->rethrow_nested();
      }
    };

  template<typename _Tp>
    struct _Rethrow_if_nested_impl<_Tp, false>
    {
      static void _S_rethrow(const _Tp&) { }
    };

  
  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      _Rethrow_if_nested_impl<_Ex>::_S_rethrow(__ex);
    }

  
} 

} 



#pragma GCC visibility pop
# 164 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\exception" 2 3
# 41 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{
  





  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }

    
    
    virtual ~bad_alloc() throw();

    
    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { };

    
    
    virtual ~bad_array_new_length() throw();

    
    virtual const char* what() const throw();
  };


  struct nothrow_t { };

  extern const nothrow_t nothrow;

  

  typedef void (*new_handler)();

  
  
  new_handler set_new_handler(new_handler) throw();


  
  new_handler get_new_handler() noexcept;

} 












void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

} 

#pragma GCC visibility pop
# 60 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_construct.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 1 3




























# 61 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_construct.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\alloc_traits.h" 1 3





























#define _EXT_ALLOC_TRAITS_H 1

       
# 33 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\alloc_traits.h" 3


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 1 3




























# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\alloc_traits.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\alloc_traits.h" 1 3






























#define _ALLOC_TRAITS_H 1



# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\memoryfwd.h" 1 3











































#define _MEMORYFWD_H 1

       
# 47 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\memoryfwd.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 49 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\memoryfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  








  template<typename>
    class allocator;

  template<>
    class allocator<void>;

  
  template<typename, typename>
    struct uses_allocator;

  


} 
# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\alloc_traits.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\ptr_traits.h" 1 3




























# 37 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\alloc_traits.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\numeric_traits.h" 1 3



























# 38 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\alloc_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc, typename _Tp>
    class __alloctr_rebind_helper
    {
      template<typename _Alloc2, typename _Tp2>
 static constexpr true_type
 _S_chk(typename _Alloc2::template rebind<_Tp2>::other*);

      template<typename, typename>
 static constexpr false_type
 _S_chk(...);

    public:
      using __type = decltype(_S_chk<_Alloc, _Tp>(nullptr));
    };

  template<typename _Alloc, typename _Tp,
    bool = __alloctr_rebind_helper<_Alloc, _Tp>::__type::value>
    struct __alloctr_rebind;

  template<typename _Alloc, typename _Tp>
    struct __alloctr_rebind<_Alloc, _Tp, true>
    {
      typedef typename _Alloc::template rebind<_Tp>::other __type;
    };

  template<template<typename, typename...> class _Alloc, typename _Tp,
    typename _Up, typename... _Args>
    struct __alloctr_rebind<_Alloc<_Up, _Args...>, _Tp, false>
    {
      typedef _Alloc<_Tp, _Args...> __type;
    };

  template<typename _Alloc, typename _Tp>
    using __alloc_rebind = typename __alloctr_rebind<_Alloc, _Tp>::__type;

  



  template<typename _Alloc>
    struct allocator_traits
    {
      
      typedef _Alloc allocator_type;
      
      typedef typename _Alloc::value_type value_type;

#define _GLIBCXX_ALLOC_TR_NESTED_TYPE(_NTYPE,_ALT) private: template<typename _Tp> static typename _Tp::_NTYPE _S_ ##_NTYPE ##_helper(_Tp*); static _ALT _S_ ##_NTYPE ##_helper(...); typedef decltype(_S_ ##_NTYPE ##_helper((_Alloc*)0)) __ ##_NTYPE; public:







private: template<typename _Tp> static typename _Tp::pointer _S_pointer_helper(_Tp*); static value_type* _S_pointer_helper(...); typedef decltype(_S_pointer_helper((_Alloc*)0)) __pointer; public:

      




      typedef __pointer pointer;

private: template<typename _Tp> static typename _Tp::const_pointer _S_const_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<const value_type> _S_const_pointer_helper(...); typedef decltype(_S_const_pointer_helper((_Alloc*)0)) __const_pointer; public:


      





      typedef __const_pointer const_pointer;

private: template<typename _Tp> static typename _Tp::void_pointer _S_void_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<void> _S_void_pointer_helper(...); typedef decltype(_S_void_pointer_helper((_Alloc*)0)) __void_pointer; public:


      





      typedef __void_pointer void_pointer;

private: template<typename _Tp> static typename _Tp::const_void_pointer _S_const_void_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<const void> _S_const_void_pointer_helper(...); typedef decltype(_S_const_void_pointer_helper((_Alloc*)0)) __const_void_pointer; public:


      





      typedef __const_void_pointer const_void_pointer;

private: template<typename _Tp> static typename _Tp::difference_type _S_difference_type_helper(_Tp*); static typename pointer_traits<pointer>::difference_type _S_difference_type_helper(...); typedef decltype(_S_difference_type_helper((_Alloc*)0)) __difference_type; public:


      





      typedef __difference_type difference_type;

private: template<typename _Tp> static typename _Tp::size_type _S_size_type_helper(_Tp*); static typename make_unsigned<difference_type>::type _S_size_type_helper(...); typedef decltype(_S_size_type_helper((_Alloc*)0)) __size_type; public:


      





      typedef __size_type size_type;

private: template<typename _Tp> static typename _Tp::propagate_on_container_copy_assignment _S_propagate_on_container_copy_assignment_helper(_Tp*); static false_type _S_propagate_on_container_copy_assignment_helper(...); typedef decltype(_S_propagate_on_container_copy_assignment_helper((_Alloc*)0)) __propagate_on_container_copy_assignment; public:


      





      typedef __propagate_on_container_copy_assignment
 propagate_on_container_copy_assignment;

private: template<typename _Tp> static typename _Tp::propagate_on_container_move_assignment _S_propagate_on_container_move_assignment_helper(_Tp*); static false_type _S_propagate_on_container_move_assignment_helper(...); typedef decltype(_S_propagate_on_container_move_assignment_helper((_Alloc*)0)) __propagate_on_container_move_assignment; public:


      





      typedef __propagate_on_container_move_assignment
 propagate_on_container_move_assignment;

private: template<typename _Tp> static typename _Tp::propagate_on_container_swap _S_propagate_on_container_swap_helper(_Tp*); static false_type _S_propagate_on_container_swap_helper(...); typedef decltype(_S_propagate_on_container_swap_helper((_Alloc*)0)) __propagate_on_container_swap; public:


      





      typedef __propagate_on_container_swap propagate_on_container_swap;

#undef _GLIBCXX_ALLOC_TR_NESTED_TYPE

      template<typename _Tp>
 using rebind_alloc = typename __alloctr_rebind<_Alloc, _Tp>::__type;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 struct __allocate_helper
 {
   template<typename _Alloc3,
     typename = decltype(std::declval<_Alloc3*>()->allocate(
    std::declval<size_type>(),
    std::declval<const_void_pointer>()))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Alloc2>
 using __has_allocate = typename __allocate_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_allocate<_Alloc2>>>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint)
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2, typename _UnusedHint,
        typename = _Require<__not_<__has_allocate<_Alloc2>>>>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, _UnusedHint)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }

      template<typename _Tp>
 struct __destroy_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->destroy(
    std::declval<_Tp*>()))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp>
 using __has_destroy = typename __destroy_helper<_Tp>::type;

      template<typename _Tp>
 static _Require<__has_destroy<_Tp>>
 _S_destroy(_Alloc& __a, _Tp* __p)
 { __a.destroy(__p); }

      template<typename _Tp>
 static _Require<__not_<__has_destroy<_Tp>>>
 _S_destroy(_Alloc&, _Tp* __p)
 { __p->~_Tp(); }

      template<typename _Alloc2>
 struct __maxsize_helper
 {
   template<typename _Alloc3,
     typename = decltype(std::declval<_Alloc3*>()->max_size())>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc2>(0));
 };

      template<typename _Alloc2>
 using __has_max_size = typename __maxsize_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_max_size<_Alloc2>>>
 static size_type
 _S_max_size(_Alloc2& __a, int)
 { return __a.max_size(); }

      template<typename _Alloc2,
        typename = _Require<__not_<__has_max_size<_Alloc2>>>>
 static size_type
 _S_max_size(_Alloc2&, ...)
 { return __gnu_cxx::__numeric_traits<size_type>::__max; }

      template<typename _Alloc2>
 struct __select_helper
 {
   template<typename _Alloc3, typename
     = decltype(std::declval<_Alloc3*>()
  ->select_on_container_copy_construction())>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc2>(0));
 };

      template<typename _Alloc2>
 using __has_soccc = typename __select_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_soccc<_Alloc2>>>
 static _Alloc2
 _S_select(_Alloc2& __a, int)
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2,
        typename = _Require<__not_<__has_soccc<_Alloc2>>>>
 static _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:

      






      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }

      










      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint); }

      







      static void deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }

      










      template<typename _Tp, typename... _Args>
 static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }

      







      template <class _Tp>
 static void destroy(_Alloc& __a, _Tp* __p)
 { _S_destroy(__a, __p); }

      







      static size_type max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }

      







      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
    }

  template<typename _Alloc>
    inline _Alloc __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
    }

  template<typename _Alloc>
    class __is_copy_insertable_impl
    {
      typedef allocator_traits<_Alloc> _Traits;

      template<typename _Up, typename
        = decltype(_Traits::construct(std::declval<_Alloc&>(),
          std::declval<_Up*>(),
          std::declval<const _Up&>()))>
 static true_type
 _M_select(int);

      template<typename _Up>
 static false_type
 _M_select(...);

    public:
      typedef decltype(_M_select<typename _Alloc::value_type>(0)) type;
    };

  
  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_copy_insertable_impl<_Alloc>::type
    { };

  
  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };


} 
# 37 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\alloc_traits.h" 2 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _Alloc>
    struct __allocator_always_compares_equal : std::false_type { };

  template<typename _Tp>
    struct __allocator_always_compares_equal<std::allocator<_Tp>>
    : std::true_type { };

  template<typename, typename> struct array_allocator;

  template<typename _Tp, typename _Array>
    struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>
    : std::true_type { };

  template<typename> struct bitmap_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<bitmap_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct malloc_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<malloc_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct mt_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<mt_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct new_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<new_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct pool_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<pool_allocator<_Tp>>
    : std::true_type { };






template<typename _Alloc>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;
    
    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:
    
    template<typename _Ptr, typename... _Args>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      {
 _Base_type::construct(__a, std::addressof(*__p),
         std::forward<_Args>(__args)...);
      }

    
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return __allocator_always_compares_equal<_Alloc>::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    static constexpr bool _S_nothrow_swap()
    {
      using std::swap;
      return !_S_propagate_on_swap()
        || noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));
    }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 210 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\alloc_traits.h" 3
  };


} 
# 62 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_construct.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  




  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 87 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_construct.h" 3
  


  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };

  




  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }

  





  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


} 
# 61 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_tempbuf.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  
















  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len) noexcept
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }

  






  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }


  




  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {
      
     

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:
      
      size_type
      size() const
      { return _M_len; }

      
      size_type
      requested_size() const
      { return _M_original_len; }

      
      iterator
      begin()
      { return _M_buffer; }

      
      iterator
      end()
      { return _M_buffer + _M_len; }

      



      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:
      
      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if(__first == __last)
     return;

   _Pointer __cur = __first;
   try
     {
       std::_Construct(std::__addressof(*__first),
         std::move(*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       *__seed = std::move(*__prev);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };

  
  
  
  
  
  
  
  
  
  
  template<typename _Pointer, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,
      _ForwardIterator __seed)
    {
      typedef typename std::iterator_traits<_Pointer>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      try
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            __first);
 }
      catch(...)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }


} 
# 63 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algo.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\predefined_ops.h" 1 3




























# 64 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algo.h" 2 3


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 1 3





























#define _GLIBCXX_RANDOM 1

       
# 33 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 3





# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 1 3






































       
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cpp_type_traits.h" 1 3






























# 43 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\type_traits.h" 1 3



























# 44 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 2 3



#define _GLIBCXX_CMATH 1


#undef abs
#undef div
#undef acos
#undef asin
#undef atan
#undef atan2
#undef ceil
#undef cos
#undef cosh
#undef exp
#undef fabs
#undef floor
#undef fmod
#undef frexp
#undef ldexp
#undef log
#undef log10
#undef modf
#undef pow
#undef sin
#undef sinh
#undef sqrt
#undef tan
#undef tanh

namespace std __attribute__ ((__visibility__ ("default")))
{



  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }



  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 431 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


} 





#undef fpclassify
#undef isfinite
#undef isinf
#undef isnan
#undef isnormal
#undef signbit
#undef isgreater
#undef isgreaterequal
#undef isless
#undef islessequal
#undef islessgreater
#undef isunordered

namespace std __attribute__ ((__visibility__ ("default")))
{



  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(
# 562 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                               0
# 562 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                                     , 
# 562 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                                       1
# 562 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                                                  , 
# 562 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                                                    4
# 562 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                                                             ,
    
# 563 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
   3
# 563 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
               , 
# 563 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                 2
# 563 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                        , __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(
# 567 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                               0
# 567 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                                     , 
# 567 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                                       1
# 567 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                                                  , 
# 567 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                                                    4
# 567 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                                                             ,
    
# 568 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
   3
# 568 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
               , 
# 568 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                 2
# 568 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                        , __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(
# 572 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                               0
# 572 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                                     , 
# 572 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                                       1
# 572 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                                                  , 
# 572 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                                                    4
# 572 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                                                             ,
    
# 573 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
   3
# 573 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
               , 
# 573 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                 2
# 573 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                        , __x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 
# 579 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                       4 
# 579 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                                 : 
# 579 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath"
                                   2
# 579 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3
                                          ; }

  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }

  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }

  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }

  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }

  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }

  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }

  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }

  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }

  
  constexpr bool
  signbit(float __x)
  { return __builtin_signbitf(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbitl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }

  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }

  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }

  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }

  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }

  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }

  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 917 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3

} 
# 39 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdlib" 1 3






































       
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdlib" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdlib" 2 3
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 1 3

































#define _GLIBCXX_STRING 1

       
# 37 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 39 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stringfwd.h" 1 3


































#define _STRINGFWD_H 1

       
# 38 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stringfwd.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stringfwd.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\memoryfwd.h" 1 3









































# 41 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  





  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;




  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  
  typedef basic_string<char> string;


  
  typedef basic_string<wchar_t> wstring;




  
  typedef basic_string<char16_t> u16string;

  
  typedef basic_string<char32_t> u32string;


}

  


} 
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\char_traits.h" 1 3


































#define _CHAR_TRAITS_H 1

       
# 38 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\char_traits.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 1 3






















































# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\char_traits.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\postypes.h" 1 3



































#define _GLIBCXX_POSTYPES_H 1

       
# 39 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\postypes.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cwchar" 1 3






































       
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cwchar" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cwchar" 2 3


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 1 3

#define _WCHAR_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1 3

















# 5 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 2 3

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 1 3







# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 2 3

#define __need_size_t 
#define __need_wchar_t 
#define __need_wint_t 
#define __need_NULL 
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4



































# 46 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

















# 92 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4












# 117 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4










# 160 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

#undef __need_ptrdiff_t







# 238 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_size_t










# 347 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 359 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_wint_t






# 398 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



#undef NULL

#define NULL __null
# 412 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 13 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 2 3

#define __need___va_list 
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdarg.h" 1 3 4


























# 16 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 2 3


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h" 1 3











# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 2 3
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h" 1 3







































































# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 2 3

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h" 1 3





































# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 2 3


#define WEOF ((wint_t)-1)



# 38 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3

# 49 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3

# 49 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
extern "C" {


# 51 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3

typedef __FILE FILE;




# 56 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
struct tm;


#define _MBSTATE_T 
typedef _mbstate_t mbstate_t;


wint_t btowc (int);
int wctob (wint_t);
size_t mbrlen (const char *, size_t, mbstate_t *);
size_t mbrtowc (wchar_t *, const char *, size_t, mbstate_t *)
                             ;
size_t _mbrtowc_r (struct _reent *, wchar_t * , const char * , size_t, mbstate_t *)
                        ;
int mbsinit (const mbstate_t *);
size_t mbsnrtowcs (wchar_t *, const char **, size_t, size_t, mbstate_t *)
                                           ;
size_t _mbsnrtowcs_r (struct _reent *, wchar_t * , const char ** , size_t, size_t, mbstate_t *)
                                ;
size_t mbsrtowcs (wchar_t *, const char **, size_t, mbstate_t *)
                           ;
size_t _mbsrtowcs_r (struct _reent *, wchar_t * , const char ** , size_t, mbstate_t *);
size_t wcrtomb (char *, wchar_t, mbstate_t *);
size_t _wcrtomb_r (struct _reent *, char * , wchar_t, mbstate_t *);
size_t wcsnrtombs (char *, const wchar_t **, size_t, size_t, mbstate_t *)
                                           ;
size_t _wcsnrtombs_r (struct _reent *, char * , const wchar_t ** , size_t, size_t, mbstate_t *)
                                ;
size_t wcsrtombs (char *, const wchar_t **, size_t, mbstate_t *)
                                   ;
size_t _wcsrtombs_r (struct _reent *, char * , const wchar_t ** , size_t, mbstate_t *)
                        ;
int wcscasecmp (const wchar_t *, const wchar_t *);
wchar_t *wcscat (wchar_t *, const wchar_t *);
wchar_t *wcschr (const wchar_t *, wchar_t);
int wcscmp (const wchar_t *, const wchar_t *);
int wcscoll (const wchar_t *, const wchar_t *);
wchar_t *wcscpy (wchar_t *, const wchar_t *);
wchar_t *wcpcpy (wchar_t *, const wchar_t *)
                                ;
wchar_t *wcsdup (const wchar_t *);
wchar_t *_wcsdup_r (struct _reent *, const wchar_t * );
size_t wcscspn (const wchar_t *, const wchar_t *);
size_t wcsftime (wchar_t *, size_t, const wchar_t *, const struct tm *)
                                                            ;
size_t wcslcat (wchar_t *, const wchar_t *, size_t);
size_t wcslcpy (wchar_t *, const wchar_t *, size_t);
size_t wcslen (const wchar_t *);
int wcsncasecmp (const wchar_t *, const wchar_t *, size_t);
wchar_t *wcsncat (wchar_t *, const wchar_t *, size_t)
                                        ;
int wcsncmp (const wchar_t *, const wchar_t *, size_t);
wchar_t *wcsncpy (wchar_t *, const wchar_t *, size_t)
                                        ;
wchar_t *wcpncpy (wchar_t *, const wchar_t *, size_t)
                                        ;
size_t wcsnlen (const wchar_t *, size_t);
wchar_t *wcspbrk (const wchar_t *, const wchar_t *);
wchar_t *wcsrchr (const wchar_t *, wchar_t);
size_t wcsspn (const wchar_t *, const wchar_t *);
wchar_t *wcsstr (const wchar_t *, const wchar_t *)
                                ;
wchar_t *wcstok (wchar_t *, const wchar_t *, wchar_t **)
                           ;
double wcstod (const wchar_t *, wchar_t **);
double _wcstod_r (struct _reent *, const wchar_t *, wchar_t **);
float wcstof (const wchar_t *, wchar_t **);
float _wcstof_r (struct _reent *, const wchar_t *, wchar_t **);

long double wcstold (const wchar_t *, wchar_t **);

int wcswidth (const wchar_t *, size_t);
size_t wcsxfrm (wchar_t *, const wchar_t *, size_t)
            ;
int wcwidth (const wchar_t);
wchar_t *wmemchr (const wchar_t *, wchar_t, size_t);
int wmemcmp (const wchar_t *, const wchar_t *, size_t);
wchar_t *wmemcpy (wchar_t *, const wchar_t *, size_t)
             ;
wchar_t *wmemmove (wchar_t *, const wchar_t *, size_t);
wchar_t *wmemset (wchar_t *, wchar_t, size_t);

long wcstol (const wchar_t *, wchar_t **, int);
long long wcstoll (const wchar_t *, wchar_t **, int)
           ;
unsigned long wcstoul (const wchar_t *, wchar_t **, int)
            ;
unsigned long long wcstoull (const wchar_t *, wchar_t **, int)
                                    ;
long _wcstol_r (struct _reent *, const wchar_t *, wchar_t **, int);
long long _wcstoll_r (struct _reent *, const wchar_t *, wchar_t **, int);
unsigned long _wcstoul_r (struct _reent *, const wchar_t *, wchar_t **, int);
unsigned long long _wcstoull_r (struct _reent *, const wchar_t *, wchar_t **, int);


long double wcstold (const wchar_t *, wchar_t **);


wint_t fgetwc (__FILE *);
wchar_t *fgetws (wchar_t *, int, __FILE *);
wint_t fputwc (wchar_t, __FILE *);
int fputws (const wchar_t *, __FILE *);
int fwide (__FILE *, int);
wint_t getwc (__FILE *);
wint_t getwchar (void);
wint_t putwc (wchar_t, __FILE *);
wint_t putwchar (wchar_t);
wint_t ungetwc (wint_t wc, __FILE *);

wint_t _fgetwc_r (struct _reent *, __FILE *);
wint_t _fgetwc_unlocked_r (struct _reent *, __FILE *);
wchar_t *_fgetws_r (struct _reent *, wchar_t *, int, __FILE *);
wchar_t *_fgetws_unlocked_r (struct _reent *, wchar_t *, int, __FILE *);
wint_t _fputwc_r (struct _reent *, wchar_t, __FILE *);
wint_t _fputwc_unlocked_r (struct _reent *, wchar_t, __FILE *);
int _fputws_r (struct _reent *, const wchar_t *, __FILE *);
int _fputws_unlocked_r (struct _reent *, const wchar_t *, __FILE *);
int _fwide_r (struct _reent *, __FILE *, int);
wint_t _getwc_r (struct _reent *, __FILE *);
wint_t _getwc_unlocked_r (struct _reent *, __FILE *);
wint_t _getwchar_r (struct _reent *ptr);
wint_t _getwchar_unlocked_r (struct _reent *ptr);
wint_t _putwc_r (struct _reent *, wchar_t, __FILE *);
wint_t _putwc_unlocked_r (struct _reent *, wchar_t, __FILE *);
wint_t _putwchar_r (struct _reent *, wchar_t);
wint_t _putwchar_unlocked_r (struct _reent *, wchar_t);
wint_t _ungetwc_r (struct _reent *, wint_t wc, __FILE *);
# 195 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
__FILE *open_wmemstream (wchar_t **, size_t *);
__FILE *_open_wmemstream_r (struct _reent *, wchar_t **, size_t *);
# 206 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
int fwprintf (__FILE *, const wchar_t *, ...);
int swprintf (wchar_t *, size_t, const wchar_t *, ...)
                                   ;
int vfwprintf (__FILE *, const wchar_t *, 
# 209 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 209 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   )
             ;
int vswprintf (wchar_t *, size_t, const wchar_t *, 
# 211 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 211 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   )
                                        ;
int vwprintf (const wchar_t *, 
# 213 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 213 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   );
int wprintf (const wchar_t *, ...);

int _fwprintf_r (struct _reent *, __FILE *, const wchar_t *, ...);
int _swprintf_r (struct _reent *, wchar_t *, size_t, const wchar_t *, ...);
int _vfwprintf_r (struct _reent *, __FILE *, const wchar_t *, 
# 218 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 218 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   );
int _vswprintf_r (struct _reent *, wchar_t *, size_t, const wchar_t *, 
# 219 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 219 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   );
int _vwprintf_r (struct _reent *, const wchar_t *, 
# 220 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 220 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   );
int _wprintf_r (struct _reent *, const wchar_t *, ...);

int fwscanf (__FILE *, const wchar_t *, ...);
int swscanf (const wchar_t *, const wchar_t *, ...)
                                   ;
int vfwscanf (__FILE *, const wchar_t *, 
# 226 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 226 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   )
             ;
int vswscanf (const wchar_t *, const wchar_t *, 
# 228 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 228 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   )
             ;
int vwscanf (const wchar_t *, 
# 230 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 230 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   );
int wscanf (const wchar_t *, ...);

int _fwscanf_r (struct _reent *, __FILE *, const wchar_t *, ...);
int _swscanf_r (struct _reent *, const wchar_t *, const wchar_t *, ...);
int _vfwscanf_r (struct _reent *, __FILE *, const wchar_t *, 
# 235 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 235 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   );
int _vswscanf_r (struct _reent *, const wchar_t *, const wchar_t *, 
# 236 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 236 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   );
int _vwscanf_r (struct _reent *, const wchar_t *, 
# 237 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
   __gnuc_va_list
# 237 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3
   );
int _wscanf_r (struct _reent *, const wchar_t *, ...);

#define getwc(fp) fgetwc(fp)
#define putwc(wc,fp) fputwc((wc), (fp))
#define getwchar() fgetwc(_REENT->_stdin)
#define putwchar(wc) fputwc((wc), _REENT->_stdout)
# 252 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h" 3

# 252 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/wchar.h"
}
# 45 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cwchar" 2 3



#define _GLIBCXX_CWCHAR 1


# 50 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cwchar" 3


# 62 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cwchar" 3
namespace std
{
  using ::mbstate_t;
} 


#undef btowc
#undef fgetwc
#undef fgetws
#undef fputwc
#undef fputws
#undef fwide
#undef fwprintf
#undef fwscanf
#undef getwc
#undef getwchar
#undef mbrlen
#undef mbrtowc
#undef mbsinit
#undef mbsrtowcs
#undef putwc
#undef putwchar
#undef swprintf
#undef swscanf
#undef ungetwc
#undef vfwprintf

#undef vfwscanf

#undef vswprintf

#undef vswscanf

#undef vwprintf

#undef vwscanf

#undef wcrtomb
#undef wcscat
#undef wcschr
#undef wcscmp
#undef wcscoll
#undef wcscpy
#undef wcscspn
#undef wcsftime
#undef wcslen
#undef wcsncat
#undef wcsncmp
#undef wcsncpy
#undef wcspbrk
#undef wcsrchr
#undef wcsrtombs
#undef wcsspn
#undef wcsstr
#undef wcstod

#undef wcstof

#undef wcstok
#undef wcstol
#undef wcstoul
#undef wcsxfrm
#undef wctob
#undef wmemchr
#undef wmemcmp
#undef wmemcpy
#undef wmemmove
#undef wmemset
#undef wprintf
#undef wscanf



namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



} 
# 277 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;







} 
# 41 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\postypes.h" 2 3




# 68 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  
  
  
  
  
  

  










  typedef long long streamoff;






  
  typedef ptrdiff_t streamsize; 

  










  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:
      
      
      
      
      fpos()
      : _M_off(0), _M_state() { }

      
      
      
      
      
      
      
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }

      
      operator streamoff() const { return _M_off; }

      
      void
      state(_StateT __st)
      { _M_state = __st; }

      
      _StateT
      state() const
      { return _M_state; }

      
      
      
      
      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }

      
      
      
      
      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }

      
      
      
      
      
      
      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }

      
      
      
      
      
      
      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }

      
      
      
      
      
      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };

  
  
  
  
  
  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }

  
  
  
  
  typedef fpos<mbstate_t> streampos;
  
  typedef fpos<mbstate_t> wstreampos;


  
  typedef fpos<mbstate_t> u16streampos;
  
  typedef fpos<mbstate_t> u32streampos;



} 
# 41 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\char_traits.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cwchar" 1 3






































       
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cwchar" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cwchar" 2 3
# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  









  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };


  














  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      
      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {
      
      std::fill_n(__s, __n, __a);
      return __s;
    }


} 

namespace std __attribute__ ((__visibility__ ("default")))
{


  
  











  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };


  
  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {
 
 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }

      
      
      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };



  
  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(((wint_t)-1)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



} 




# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdint" 1 3



























# 381 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\char_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


} 
# 41 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\allocator.h" 1 3











































#define _ALLOCATOR_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++allocator.h" 1 3






























#define _GLIBCXX_CXX_ALLOCATOR_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\new_allocator.h" 1 3





























#define _NEW_ALLOCATOR_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 33 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\new_allocator.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\new" 1 3
































# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\new_allocator.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\functexcept.h" 1 3


































# 35 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\new_allocator.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 1 3




























# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\new_allocator.h" 2 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 1 3



























# 38 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\new_allocator.h" 2 3


namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;

  









  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };


      
      
      typedef std::true_type propagate_on_container_move_assignment;


      new_allocator() noexcept { }

      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) noexcept { }

      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }

      
      
      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const noexcept
      { return size_t(-1) / sizeof(_Tp); }


      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void
        destroy(_Up* __p) { __p->~_Up(); }
# 135 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\new_allocator.h" 3
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


} 
# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++allocator.h" 2 3


namespace std
{
  








  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\allocator.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\memoryfwd.h" 1 3









































# 48 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\allocator.h" 2 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 1 3



























# 50 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\allocator.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  




  
  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };


      
      
      typedef true_type propagate_on_container_move_assignment;

    };

  







  template<typename _Tp>
    class allocator: public __allocator_base<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };


      
      
      typedef true_type propagate_on_container_move_assignment;


      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }

      
    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return false; }

  

  
  

  extern template class allocator<char>;
  extern template class allocator<wchar_t>;


  
#undef __allocator_base

  
  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {
 
 if (__one != __two)
   swap(__one, __two);
      }
    };

  
  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {
 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }
      }
    };



} 
# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cpp_type_traits.h" 1 3






























# 43 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\localefwd.h" 1 3


































#define _LOCALE_FWD_H 1

       
# 38 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\localefwd.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\localefwd.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++locale.h" 1 3




































#define _GLIBCXX_CXX_LOCALE_H 1

       
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++locale.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\clocale" 1 3






































       
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\clocale" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\clocale" 2 3
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/locale.h" 1 3









# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/locale.h" 3
#define _LOCALE_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1 3

















# 11 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/locale.h" 2 3

#define __need_NULL 
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4



































# 46 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

















# 92 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4












# 117 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4










# 160 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

#undef __need_ptrdiff_t







# 238 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_size_t










# 347 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 362 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4




# 398 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



#undef NULL

#define NULL __null
# 412 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 14 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/locale.h" 2 3

#define LC_ALL 0
#define LC_COLLATE 1
#define LC_CTYPE 2
#define LC_MONETARY 3
#define LC_NUMERIC 4
#define LC_TIME 5
#define LC_MESSAGES 6


# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/locale.h"
extern "C" {


# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/locale.h" 3
struct lconv
{
  char *decimal_point;
  char *thousands_sep;
  char *grouping;
  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
  char int_n_cs_precedes;
  char int_n_sep_by_space;
  char int_n_sign_posn;
  char int_p_cs_precedes;
  char int_p_sep_by_space;
  char int_p_sign_posn;
};


char *setlocale (int category, const char *locale);
struct lconv *localeconv (void);


struct _reent;
char *_setlocale_r (struct _reent *, int category, const char *locale);
struct lconv *_localeconv_r (struct _reent *);


# 62 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/locale.h"
}
# 43 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\clocale" 2 3


#define _GLIBCXX_CLOCALE 1


# 47 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\clocale" 3

#undef setlocale
#undef localeconv

namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
} 
# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++locale.h" 2 3

#define _GLIBCXX_NUM_CATEGORIES 0

namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef int* __c_locale;

  
  
  
  
  inline int
  __convert_from_v(const __c_locale&, char* __out,
     const int __size __attribute__((__unused__)),
     const char* __fmt, ...)
  {
    char* __old = std::setlocale(4, 0);
    char* __sav = 0;
    if (__builtin_strcmp(__old, "C"))
      {
 const size_t __len = __builtin_strlen(__old) + 1;
 __sav = new char[__len];
 __builtin_memcpy(__sav, __old, __len);
 std::setlocale(4, "C");
      }

    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);




    const int __ret = __builtin_vsprintf(__out, __fmt, __args);


    __builtin_va_end(__args);

    if (__sav)
      {
 std::setlocale(4, __sav);
 delete [] __sav;
      }
    return __ret;
  }


} 
# 41 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\localefwd.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\iosfwd" 1 3

































#define _GLIBCXX_IOSFWD 1

       
# 37 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\iosfwd" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 39 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\iosfwd" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stringfwd.h" 1 3
































# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\iosfwd" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\postypes.h" 1 3

































# 41 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  



























  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;


  
  typedef basic_ios<char> ios;

  
  typedef basic_streambuf<char> streambuf;

  
  typedef basic_istream<char> istream;

  
  typedef basic_ostream<char> ostream;

  
  typedef basic_iostream<char> iostream;

  
  typedef basic_stringbuf<char> stringbuf;

  
  typedef basic_istringstream<char> istringstream;

  
  typedef basic_ostringstream<char> ostringstream;

  
  typedef basic_stringstream<char> stringstream;

  
  typedef basic_filebuf<char> filebuf;

  
  typedef basic_ifstream<char> ifstream;

  
  typedef basic_ofstream<char> ofstream;

  
  typedef basic_fstream<char> fstream;


  
  typedef basic_ios<wchar_t> wios;

  
  typedef basic_streambuf<wchar_t> wstreambuf;

  
  typedef basic_istream<wchar_t> wistream;

  
  typedef basic_ostream<wchar_t> wostream;

  
  typedef basic_iostream<wchar_t> wiostream;

  
  typedef basic_stringbuf<wchar_t> wstringbuf;

  
  typedef basic_istringstream<wchar_t> wistringstream;

  
  typedef basic_ostringstream<wchar_t> wostringstream;

  
  typedef basic_stringstream<wchar_t> wstringstream;

  
  typedef basic_filebuf<wchar_t> wfilebuf;

  
  typedef basic_ifstream<wchar_t> wifstream;

  
  typedef basic_ofstream<wchar_t> wofstream;

  
  typedef basic_fstream<wchar_t> wfstream;

  


} 
# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\localefwd.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cctype" 1 3






































       
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cctype" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cctype" 2 3
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h" 1 3

#define _CTYPE_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1 3

















# 5 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h" 2 3


# 6 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h"
extern "C" {


# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h" 3
int isalnum (int __c);
int isalpha (int __c);
int iscntrl (int __c);
int isdigit (int __c);
int isgraph (int __c);
int islower (int __c);
int isprint (int __c);
int ispunct (int __c);
int isspace (int __c);
int isupper (int __c);
int isxdigit (int __c);
int tolower (int __c);
int toupper (int __c);


int isblank (int __c);



int isascii (int __c);
int toascii (int __c);
#define _tolower(__c) ((unsigned char)(__c) - 'A' + 'a')
#define _toupper(__c) ((unsigned char)(__c) - 'a' + 'A')


#define _U 01
#define _L 02
#define _N 04
#define _S 010
#define _P 020
#define _C 040
#define _X 0100
#define _B 0200



# 43 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h"
const


# 45 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h" 3
extern char * 
# 45 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h"
                      const 
# 45 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h" 3
                             __ctype_ptr__;
# 104 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h" 3
#define isascii(__c) ((unsigned)(__c)<=0177)
#define toascii(__c) ((__c)&0177)



extern 
# 109 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h"
               const 
# 109 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h" 3
                      char _ctype_[];


# 111 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/ctype.h"
}
# 43 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cctype" 2 3


#define _GLIBCXX_CCTYPE 1


# 47 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cctype" 3

#undef isalnum
#undef isalpha
#undef iscntrl
#undef isdigit
#undef isgraph
#undef islower
#undef isprint
#undef ispunct
#undef isspace
#undef isupper
#undef isxdigit
#undef tolower
#undef toupper

namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
} 





#undef isblank

namespace std
{
  using ::isblank;
} 
# 43 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  





  
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);

  
  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);

  
  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;
  

  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;

  

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {
  
  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}

  
  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;

  
  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}

  
  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


} 
# 44 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\ostream_insert.h" 1 3






























#define _OSTREAM_INSERT_H 1

       
# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\ostream_insert.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\iosfwd" 1 3































# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\ostream_insert.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cxxabi_forced.h" 1 3































#define _CXXABI_FORCED_H 1

       
# 35 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{
  






  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();

    
    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }

  
  

  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




} 
# 45 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_types.h" 1 3

























































# 46 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_funcs.h" 1 3

























































# 47 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator.h" 1 3


























































# 48 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_function.h" 1 3
























































#define _STL_FUNCTION_H 1





namespace std __attribute__ ((__visibility__ ("default")))
{


  
  
































  


  template<typename _Arg, typename _Result>
    struct unary_function
    {
      
      typedef _Arg argument_type;

      
      typedef _Result result_type;
    };

  


  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {
      
      typedef _Arg1 first_argument_type;

      
      typedef _Arg2 second_argument_type;

      
      typedef _Result result_type;
    };
  

  
  









# 165 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_function.h" 3
  
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };

  
  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };

  
  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };

  
  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };

  
  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };

  
  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 319 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_function.h" 3
  

  
  







# 350 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_function.h" 3
  
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };

  
  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };

  
  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };

  
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };

  
  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };

  
  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 501 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_function.h" 3
  

  
  







# 523 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_function.h" 3
  
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };

  
  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };

  
  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };
# 599 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_function.h" 3
  
# 615 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_function.h" 3
  
  
  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
   
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };
# 711 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_function.h" 3
  
  



























  
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
     
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

     
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };

  
  template<typename _Predicate>
   
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }

  
  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
     
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

     
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };

  
  template<typename _Predicate>
   
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
  

  
  




















  
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };

  
  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }

  
  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };

  
  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }
  

  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };

  
  














  
  
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };

  
  
  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };

  
  
  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };

  
  
  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };

  
  
  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };

  
  
  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };

  
  
  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };

  
  
  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };

  
  
  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  


} 


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\backward\\binders.h" 1 3
























































#define _BACKWARD_BINDERS_H 1


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{


  
  





































  
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }

      
      
      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));

  
  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }

  
  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }

      
      
      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));

  
  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }
  


} 

#pragma GCC diagnostic pop
# 1129 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_function.h" 2 3
# 49 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\numeric_traits.h" 1 3



























# 50 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 1 3






















































# 51 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\range_access.h" 1 3






























#define _GLIBCXX_RANGE_ACCESS_H 1

       
# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\range_access.h" 3


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\initializer_list" 1 3




























# 37 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\range_access.h" 2 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  




  template<class _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }

  




  template<class _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }

  




  template<class _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }

  




  template<class _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }

  



  template<class _Tp, size_t _Nm>
    inline _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }

  




  template<class _Tp, size_t _Nm>
    inline _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }
# 225 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\range_access.h" 3

} 
# 52 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 1 3


































#define _BASIC_STRING_H 1

       
# 38 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\atomicity.h" 1 3





























#define _GLIBCXX_ATOMICITY_H 1

       
# 33 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\atomicity.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 35 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\atomicity.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr.h" 1 3


























#define _GLIBCXX_GCC_GTHR_H 


#pragma GCC visibility push(default)












































































































# 148 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr.h" 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr-default.h" 1 3


























#define _GLIBCXX_GCC_GTHR_POSIX_H 




#define __GTHREADS 1
#define __GTHREADS_CXX0X 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 1 3





































# 22 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
#define __PTHREAD_h 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/unistd.h" 1 3

#define _UNISTD_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 1 3

#define _SYS_UNISTD_H 


extern "C" {


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1 3

















# 9 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 2 3
#define __need_size_t 
#define __need_ptrdiff_t 
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h" 1 3







































































# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 2 3
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h" 1 3































# 13 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 2 3
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/_types.h" 1 3











# 14 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4



































# 46 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

















# 92 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4












# 117 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4










# 160 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

#undef __need_ptrdiff_t







# 238 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_size_t










# 347 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 362 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4




# 398 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



#undef NULL

#define NULL __null
# 412 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 15 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 2 3

extern char **environ;

void _exit (int __status ) 
# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h"
    __attribute__ (
# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 3
    (__noreturn__)
# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h"
    )
# 18 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 3
                                                              ;

int access (const char *__path, int __amode );
unsigned alarm (unsigned __secs );
int chdir (const char *__path );
int chmod (const char *__path, mode_t __mode );

int chown (const char *__path, uid_t __owner, gid_t __group );




int close (int __fildes );



char * ctermid (char *__s );
char * cuserid (char *__s );



int dup (int __fildes );
int dup2 (int __fildes, int __fildes2 );






int execl (const char *__path, const char *, ... );
int execle (const char *__path, const char *, ... );
int execlp (const char *__file, const char *, ... );



int execv (const char *__path, char * const __argv[] );
int execve (const char *__path, char * const __argv[], char * const __envp[] );
int execvp (const char *__file, char * const __argv[] );




int faccessat (int __dirfd, const char *__path, int __mode, int __flags);




int fchmod (int __fildes, mode_t __mode );

int fchown (int __fildes, uid_t __owner, gid_t __group );


int fchownat (int __dirfd, const char *__path, uid_t __owner, gid_t __group, int __flags);




pid_t fork (void );
long fpathconf (int __fd, int __name );
int fsync (int __fd);
int fdatasync (int __fd);



char * getcwd (char *__buf, size_t __size );




gid_t getegid (void );
uid_t geteuid (void );
gid_t getgid (void );

int getgroups (int __gidsetsize, gid_t __grouplist[] );



char * getlogin (void );



char * getpass (const char *__prompt);
int getpagesize (void);



pid_t getpgid (pid_t);
pid_t getpgrp (void );
pid_t getpid (void );
pid_t getppid (void );




uid_t getuid (void );






int isatty (int __fildes );

int lchown (const char *__path, uid_t __owner, gid_t __group );

int link (const char *__path1, const char *__path2 );

int linkat (int __dirfd1, const char *__path1, int __dirfd2, const char *__path2, int __flags );

int nice (int __nice_value );

off_t lseek (int __fildes, off_t __offset, int __whence );
# 138 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 3
long pathconf (const char *__path, int __name );
int pause (void );



int pipe (int __fildes[2] );



ssize_t pread (int __fd, void *__buf, size_t __nbytes, off_t __offset);
ssize_t pwrite (int __fd, const void *__buf, size_t __nbytes, off_t __offset);

# 149 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h"
int 
# 149 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 3
                       read (int __fd, void *__buf, size_t __nbyte );




int rmdir (const char *__path );



void * sbrk (ptrdiff_t __incr);





int setgid (gid_t __gid );





int sethostname (const char *, size_t);

int setpgid (pid_t __pid, pid_t __pgid );
int setpgrp (void );




pid_t setsid (void );

int setuid (uid_t __uid );




unsigned sleep (unsigned int __seconds );
void swab (const void *, void *, ssize_t);
long sysconf (int __name );
pid_t tcgetpgrp (int __fildes );
int tcsetpgrp (int __fildes, pid_t __pgrp_id );
char * ttyname (int __fildes );



int unlink (const char *__path );
int usleep (useconds_t __useconds);
int vhangup (void );

# 197 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h"
int 
# 197 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 3
                       write (int __fd, const void *__buf, size_t __nbyte );






extern char *optarg; 
extern int optind, opterr, optopt;
int getopt(int, char * const [], const char *);
extern int optreset; 



pid_t vfork (void );
# 255 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 3
ssize_t readlink (const char * __path, char * __buf, size_t __buflen)
                                                                   ;

ssize_t readlinkat (int __dirfd1, const char * __path, char * __buf, size_t __buflen)
                                                                     ;

int symlink (const char *__name1, const char *__name2);

int symlinkat (const char *, int, const char *);
int unlinkat (int, const char *, int);


#define F_OK 0
#define R_OK 4
#define W_OK 2
#define X_OK 1

#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h" 1 3





































# 277 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 2 3

#define STDIN_FILENO 0 
#define STDOUT_FILENO 1 
#define STDERR_FILENO 2 






# 286 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 3
#define _SC_ARG_MAX 0
#define _SC_CHILD_MAX 1
#define _SC_CLK_TCK 2
#define _SC_NGROUPS_MAX 3
#define _SC_OPEN_MAX 4
#define _SC_JOB_CONTROL 5
#define _SC_SAVED_IDS 6
#define _SC_VERSION 7
#define _SC_PAGESIZE 8
#define _SC_PAGE_SIZE _SC_PAGESIZE



# 298 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 3
#define _SC_NPROCESSORS_CONF 9
#define _SC_NPROCESSORS_ONLN 10
#define _SC_PHYS_PAGES 11
#define _SC_AVPHYS_PAGES 12

#define _SC_MQ_OPEN_MAX 13
#define _SC_MQ_PRIO_MAX 14
#define _SC_RTSIG_MAX 15
#define _SC_SEM_NSEMS_MAX 16
#define _SC_SEM_VALUE_MAX 17
#define _SC_SIGQUEUE_MAX 18
#define _SC_TIMER_MAX 19
#define _SC_TZNAME_MAX 20
#define _SC_ASYNCHRONOUS_IO 21
#define _SC_FSYNC 22
#define _SC_MAPPED_FILES 23
#define _SC_MEMLOCK 24
#define _SC_MEMLOCK_RANGE 25
#define _SC_MEMORY_PROTECTION 26
#define _SC_MESSAGE_PASSING 27
#define _SC_PRIORITIZED_IO 28
#define _SC_REALTIME_SIGNALS 29
#define _SC_SEMAPHORES 30
#define _SC_SHARED_MEMORY_OBJECTS 31
#define _SC_SYNCHRONIZED_IO 32
#define _SC_TIMERS 33
#define _SC_AIO_LISTIO_MAX 34
#define _SC_AIO_MAX 35
#define _SC_AIO_PRIO_DELTA_MAX 36
#define _SC_DELAYTIMER_MAX 37
#define _SC_THREAD_KEYS_MAX 38
#define _SC_THREAD_STACK_MIN 39
#define _SC_THREAD_THREADS_MAX 40
#define _SC_TTY_NAME_MAX 41
#define _SC_THREADS 42
#define _SC_THREAD_ATTR_STACKADDR 43
#define _SC_THREAD_ATTR_STACKSIZE 44
#define _SC_THREAD_PRIORITY_SCHEDULING 45
#define _SC_THREAD_PRIO_INHERIT 46

#define _SC_THREAD_PRIO_PROTECT 47
#define _SC_THREAD_PRIO_CEILING _SC_THREAD_PRIO_PROTECT
#define _SC_THREAD_PROCESS_SHARED 48
#define _SC_THREAD_SAFE_FUNCTIONS 49
#define _SC_GETGR_R_SIZE_MAX 50
#define _SC_GETPW_R_SIZE_MAX 51
#define _SC_LOGIN_NAME_MAX 52
#define _SC_THREAD_DESTRUCTOR_ITERATIONS 53
#define _SC_ADVISORY_INFO 54
#define _SC_ATEXIT_MAX 55
#define _SC_BARRIERS 56
#define _SC_BC_BASE_MAX 57
#define _SC_BC_DIM_MAX 58
#define _SC_BC_SCALE_MAX 59
#define _SC_BC_STRING_MAX 60
#define _SC_CLOCK_SELECTION 61
#define _SC_COLL_WEIGHTS_MAX 62
#define _SC_CPUTIME 63
#define _SC_EXPR_NEST_MAX 64
#define _SC_HOST_NAME_MAX 65
#define _SC_IOV_MAX 66
#define _SC_IPV6 67
#define _SC_LINE_MAX 68
#define _SC_MONOTONIC_CLOCK 69
#define _SC_RAW_SOCKETS 70
#define _SC_READER_WRITER_LOCKS 71
#define _SC_REGEXP 72
#define _SC_RE_DUP_MAX 73
#define _SC_SHELL 74
#define _SC_SPAWN 75
#define _SC_SPIN_LOCKS 76
#define _SC_SPORADIC_SERVER 77
#define _SC_SS_REPL_MAX 78
#define _SC_SYMLOOP_MAX 79
#define _SC_THREAD_CPUTIME 80
#define _SC_THREAD_SPORADIC_SERVER 81
#define _SC_TIMEOUTS 82
#define _SC_TRACE 83
#define _SC_TRACE_EVENT_FILTER 84
#define _SC_TRACE_EVENT_NAME_MAX 85
#define _SC_TRACE_INHERIT 86
#define _SC_TRACE_LOG 87
#define _SC_TRACE_NAME_MAX 88
#define _SC_TRACE_SYS_MAX 89
#define _SC_TRACE_USER_EVENT_MAX 90
#define _SC_TYPED_MEMORY_OBJECTS 91
#define _SC_V7_ILP32_OFF32 92
#define _SC_V6_ILP32_OFF32 _SC_V7_ILP32_OFF32
#define _SC_XBS5_ILP32_OFF32 _SC_V7_ILP32_OFF32
#define _SC_V7_ILP32_OFFBIG 93
#define _SC_V6_ILP32_OFFBIG _SC_V7_ILP32_OFFBIG
#define _SC_XBS5_ILP32_OFFBIG _SC_V7_ILP32_OFFBIG
#define _SC_V7_LP64_OFF64 94
#define _SC_V6_LP64_OFF64 _SC_V7_LP64_OFF64
#define _SC_XBS5_LP64_OFF64 _SC_V7_LP64_OFF64
#define _SC_V7_LPBIG_OFFBIG 95
#define _SC_V6_LPBIG_OFFBIG _SC_V7_LPBIG_OFFBIG
#define _SC_XBS5_LPBIG_OFFBIG _SC_V7_LPBIG_OFFBIG
#define _SC_XOPEN_CRYPT 96
#define _SC_XOPEN_ENH_I18N 97
#define _SC_XOPEN_LEGACY 98
#define _SC_XOPEN_REALTIME 99
#define _SC_STREAM_MAX 100
#define _SC_PRIORITY_SCHEDULING 101
#define _SC_XOPEN_REALTIME_THREADS 102
#define _SC_XOPEN_SHM 103
#define _SC_XOPEN_STREAMS 104
#define _SC_XOPEN_UNIX 105
#define _SC_XOPEN_VERSION 106
#define _SC_2_CHAR_TERM 107
#define _SC_2_C_BIND 108
#define _SC_2_C_DEV 109
#define _SC_2_FORT_DEV 110
#define _SC_2_FORT_RUN 111
#define _SC_2_LOCALEDEF 112
#define _SC_2_PBS 113
#define _SC_2_PBS_ACCOUNTING 114
#define _SC_2_PBS_CHECKPOINT 115
#define _SC_2_PBS_LOCATE 116
#define _SC_2_PBS_MESSAGE 117
#define _SC_2_PBS_TRACK 118
#define _SC_2_SW_DEV 119
#define _SC_2_UPE 120
#define _SC_2_VERSION 121
#define _SC_THREAD_ROBUST_PRIO_INHERIT 122
#define _SC_THREAD_ROBUST_PRIO_PROTECT 123
#define _SC_XOPEN_UUCP 124






# 430 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 3
#define _PC_LINK_MAX 0
#define _PC_MAX_CANON 1
#define _PC_MAX_INPUT 2
#define _PC_NAME_MAX 3
#define _PC_PATH_MAX 4
#define _PC_PIPE_BUF 5
#define _PC_CHOWN_RESTRICTED 6
#define _PC_NO_TRUNC 7
#define _PC_VDISABLE 8
#define _PC_ASYNC_IO 9
#define _PC_PRIO_IO 10
#define _PC_SYNC_IO 11
#define _PC_FILESIZEBITS 12
#define _PC_2_SYMLINKS 13
#define _PC_SYMLINK_MAX 14
#define _PC_ALLOC_SIZE_MIN 15
#define _PC_REC_INCR_XFER_SIZE 16
#define _PC_REC_MAX_XFER_SIZE 17
#define _PC_REC_MIN_XFER_SIZE 18
#define _PC_REC_XFER_ALIGN 19
#define _PC_TIMESTAMP_RESOLUTION 20












# 514 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/unistd.h" 3
}
# 5 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/unistd.h" 2 3



#define L_SET SEEK_SET
#define L_INCR SEEK_CUR
#define L_XTND SEEK_END
# 29 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 2 3



# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h" 1 3































# 33 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 2 3
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 1 3









# 8 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 3
#define _TIME_H_ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/_ansi.h" 1 3

















# 11 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 2 3
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/reent.h" 1 3







# 12 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 2 3

#define __need_size_t 
#define __need_NULL 
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4



































# 46 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

















# 92 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4












# 117 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4










# 160 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4

#undef __need_ptrdiff_t







# 238 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_size_t










# 347 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 362 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4




# 398 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4



#undef NULL

#define NULL __null
# 412 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 16 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 2 3


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/machine/time.h" 1 3

#define _MACHTIME_H_ 
# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 2 3


#define _CLOCKS_PER_SEC_ 1000


#define CLOCKS_PER_SEC _CLOCKS_PER_SEC_
#define CLK_TCK CLOCKS_PER_SEC

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/types.h" 1 3































# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 2 3


# 29 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h"
extern "C" {


# 31 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 3
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;






};

clock_t clock (void);
double difftime (time_t _time2, time_t _time1);
time_t mktime (struct tm *_timeptr);
time_t time (time_t *_timer);

char *asctime (const struct tm *_tblock);
char *ctime (const time_t *_time);
struct tm *gmtime (const time_t *_timer);
struct tm *localtime (const time_t *_timer);

size_t strftime (char * _s, size_t _maxsize, const char * _fmt, const struct tm * _t)

                                        ;

char *asctime_r (const struct tm *, char *)
                       ;
char *ctime_r (const time_t *, char *);
struct tm *gmtime_r (const time_t *, struct tm *)
                            ;
struct tm *localtime_r (const time_t *, struct tm *)
                            ;


# 72 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h"
}



# 75 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 3
extern "C" {



char *strptime (const char *, const char *, struct tm *)

                            ;

# 82 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h"
void 
# 82 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 3
          tzset (
# 82 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h"
          void
# 82 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 3
          );

# 83 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h"
void 
# 83 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 3
          _tzset_r (struct _reent *);

typedef struct __tzrule_struct
{
  char ch;
  int m;
  int n;
  int d;
  int s;
  time_t change;
  long offset; 
} __tzrule_type;

typedef struct __tzinfo_struct
{
  int __tznorth;
  int __tzyear;
  __tzrule_type __tzrule[2];
} __tzinfo_type;

__tzinfo_type *__gettzinfo (
# 103 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h"
              void
# 103 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 3
              );


# 128 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 3

extern long _timezone;
extern int _daylight;
extern char *_tzname[2];



#define tzname _tzname




}


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/features.h" 1 3





































# 144 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 2 3
# 209 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 3
extern "C" {






#define CLOCK_ENABLED 1 
#define CLOCK_DISABLED 0 



#define CLOCK_ALLOWED 1 
                           
                           
#define CLOCK_DISALLOWED 0 
                           
                           



#define CLOCK_REALTIME (clockid_t)1




#define TIMER_ABSTIME 4


# 287 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/time.h" 3
}
# 34 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 2 3
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/sched.h" 1 3



































# 68 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/sched.h" 3

# 35 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 2 3
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/sys/cdefs.h" 1 3







































































# 36 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 2 3

struct _pthread_cleanup_context {
  void (*_routine)(void *);
  void *_arg;
  int _canceltype;
  struct _pthread_cleanup_context *_previous;
};


int pthread_atfork (void (*prepare)(void), void (*parent)(void), void (*child)(void))
                                        ;



int pthread_mutexattr_init (pthread_mutexattr_t *__attr);
int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr);
int pthread_mutexattr_getpshared (
# 52 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 52 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_mutexattr_t *__attr, int *__pshared)
                                                        ;
int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr, int __pshared)
                                               ;





int pthread_mutexattr_gettype (
# 61 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 61 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_mutexattr_t *__attr, int *__kind)
                                                    ;
int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
                                            ;





int pthread_mutex_init (pthread_mutex_t *__mutex, 
# 70 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 70 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_mutexattr_t *__attr)
                                                                ;
int pthread_mutex_destroy (pthread_mutex_t *__mutex);








# 79 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
#define PTHREAD_MUTEX_INITIALIZER ((pthread_mutex_t) 0xFFFFFFFF)




int pthread_mutex_lock (pthread_mutex_t *__mutex);
int pthread_mutex_trylock (pthread_mutex_t *__mutex);
int pthread_mutex_unlock (pthread_mutex_t *__mutex);
# 95 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3


int pthread_condattr_init (pthread_condattr_t *__attr);
int pthread_condattr_destroy (pthread_condattr_t *__attr);
int pthread_condattr_getpshared (
# 99 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 99 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_condattr_t *__attr, int *__pshared)
                                                      ;
int pthread_condattr_setpshared (pthread_condattr_t *__attr, int __pshared)
                                              ;



int pthread_cond_init (pthread_cond_t *__cond, 
# 106 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 106 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_condattr_t *__attr)
                                                             ;
int pthread_cond_destroy (pthread_cond_t *__mutex);








# 115 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
#define PTHREAD_COND_INITIALIZER ((pthread_cond_t) 0xFFFFFFFF)



int pthread_cond_signal (pthread_cond_t *__cond);
int pthread_cond_broadcast (pthread_cond_t *__cond);



int pthread_cond_wait (pthread_cond_t *__cond, pthread_mutex_t *__mutex)
                                                    ;

int pthread_cond_timedwait (pthread_cond_t *__cond, pthread_mutex_t *__mutex, 
# 127 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 127 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   struct timespec *__abstime)

                                     ;
# 150 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
int pthread_attr_setschedparam (pthread_attr_t *__attr, 
# 150 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 150 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   struct sched_param *__param)
                                                              ;
int pthread_attr_getschedparam (
# 152 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 152 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_attr_t *__attr, struct sched_param *__param)
                                                              ;
# 192 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3


int pthread_attr_init (pthread_attr_t *__attr);
int pthread_attr_destroy (pthread_attr_t *__attr);
int pthread_attr_setstack (pthread_attr_t *attr, void *__stackaddr, size_t __stacksize)
                                        ;
int pthread_attr_getstack (
# 198 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 198 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_attr_t *attr, void **__stackaddr, size_t *__stacksize)
                                          ;
int pthread_attr_getstacksize (
# 200 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 200 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_attr_t *__attr, size_t *__stacksize)
                                                      ;
int pthread_attr_setstacksize (pthread_attr_t *__attr, size_t __stacksize)
                                              ;
int pthread_attr_getstackaddr (
# 204 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 204 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_attr_t *__attr, void **__stackaddr)
                                                     ;
int pthread_attr_setstackaddr (pthread_attr_t *__attr, void *__stackaddr)
                                              ;
int pthread_attr_getdetachstate (
# 208 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 208 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_attr_t *__attr, int *__detachstate)
                                                     ;
int pthread_attr_setdetachstate (pthread_attr_t *__attr, int __detachstate)
                                             ;
int pthread_attr_getguardsize (
# 212 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 212 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_attr_t *__attr, size_t *__guardsize)
                                                      ;
int pthread_attr_setguardsize (pthread_attr_t *__attr, size_t __guardsize)
                                              ;








# 240 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3


int pthread_create (pthread_t *__pthread, 
# 242 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 242 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   pthread_attr_t *__attr, void *(*__start_routine)( void * ), void *__arg)

                                                  ;



int pthread_join (pthread_t __pthread, void **__value_ptr);



int pthread_detach (pthread_t __pthread);



void pthread_exit (void *__value_ptr);



pthread_t pthread_self (void);



int pthread_equal (pthread_t __t1, pthread_t __t2);












# 274 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
#define PTHREAD_ONCE_INIT { 1, 0 } 

int pthread_once (pthread_once_t *__once_control, void (*__init_routine)(void))
                                                                ;



int pthread_key_create (pthread_key_t *__key, void (*__destructor)( void * ))
                                                        ;



int pthread_setspecific (pthread_key_t __key, 
# 286 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h"
   const 
# 286 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
   void *__value)
                                             ;
void * pthread_getspecific (pthread_key_t __key);



int pthread_key_delete (pthread_key_t __key);



#define PTHREAD_CANCEL_ENABLE 0
#define PTHREAD_CANCEL_DISABLE 1

#define PTHREAD_CANCEL_DEFERRED 0
#define PTHREAD_CANCEL_ASYNCHRONOUS 1

#define PTHREAD_CANCELED ((void *) -1)

int pthread_cancel (pthread_t __pthread);



int pthread_setcancelstate (int __state, int *__oldstate);
int pthread_setcanceltype (int __type, int *__oldtype);
void pthread_testcancel (void);



void _pthread_cleanup_push (struct _pthread_cleanup_context *_context, void (*_routine)(void *), void *_arg)

                                       ;

void _pthread_cleanup_pop (struct _pthread_cleanup_context *_context, int _execute)

               ;


#define pthread_cleanup_push(_routine,_arg) do { struct _pthread_cleanup_context _pthread_clup_ctx; _pthread_cleanup_push(&_pthread_clup_ctx, (_routine), (_arg))




#define pthread_cleanup_pop(_execute) _pthread_cleanup_pop(&_pthread_clup_ctx, (_execute)); } while (0)
# 427 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/pthread.h" 3
}




# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr-default.h" 2 3
# 47 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;



#define __GTHREAD_HAS_COND 1

#define __GTHREAD_MUTEX_INIT PTHREAD_MUTEX_INITIALIZER
#define __GTHREAD_MUTEX_INIT_FUNCTION __gthread_mutex_init_function
#define __GTHREAD_ONCE_INIT PTHREAD_ONCE_INIT





#define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION __gthread_recursive_mutex_init_function

#define __GTHREAD_COND_INIT PTHREAD_COND_INITIALIZER
#define __GTHREAD_TIME_INIT {0,0}


#undef __GTHREAD_MUTEX_INIT







#undef __GTHREAD_COND_INIT
#define __GTHREAD_COND_INIT_FUNCTION __gthread_cond_init_function
# 94 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr-default.h" 3
#define __gthrw2(name,name2,type) 
#define __gthrw_(name) name



#define __gthrw(name) __gthrw2(__gthrw_ ## name,name,name)




































# 258 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr-default.h" 3
















# 298 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  return 1;
}
# 658 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_trylock (__mutex);
  else
    return 0;
}
# 774 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr-default.h" 3
static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_unlock (__mutex);
  else
    return 0;
}



static inline int
__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    {
      pthread_mutexattr_t __attr;
      int __r;

      __r = pthread_mutexattr_init (&__attr);
      if (!__r)
 __r = pthread_mutexattr_settype (&__attr,
         
# 796 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr-default.h"
        1
# 796 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr-default.h" 3
                               );
      if (!__r)
 __r = pthread_mutex_init (__mutex, &__attr);
      if (!__r)
 __r = pthread_mutexattr_destroy (&__attr);
      return __r;
    }
  return 0;
}


static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}
# 828 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr-default.h" 3
static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}


static inline void
__gthread_cond_init_function (__gthread_cond_t *__cond)
{
  if (__gthread_active_p ())
    pthread_cond_init (__cond, __null);
}


static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return pthread_cond_destroy (__cond);
}
# 149 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\gthr.h" 2 3


#pragma GCC visibility pop
# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\atomicity.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\atomic_word.h" 1 3





























#define _GLIBCXX_ATOMIC_WORD_H 1

typedef int _Atomic_word;













# 37 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  
  
  
  

  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


} 





#define _GLIBCXX_READ_MEM_BARRIER __asm __volatile ("":::"memory")


#define _GLIBCXX_WRITE_MEM_BARRIER __asm __volatile ("":::"memory")
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\alloc_traits.h" 1 3



























# 41 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\debug\\debug.h" 1 3



























# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 2 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\initializer_list" 1 3




























# 44 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{



namespace __cxx11 {
  

















  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;

      
    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

      
      static const size_type npos = static_cast<size_type>(-1);

    private:
      



      typedef const_iterator __const_iterator;


      
      struct _Alloc_hider : allocator_type 
      {
 _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 : allocator_type(__a), _M_p(__dat) { }

 pointer _M_p; 
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }

      
      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }

      
      
      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }

      
      
      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }

      
      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);

      
      
      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 257 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)")
                                         ,
       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      
      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }

      
      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }

      
      
      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }

      
      
      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 noexcept
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1); 
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string& __rcs);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:
      
      
      

      


      basic_string()

      noexcept(is_nothrow_default_constructible<_Alloc>::value)

      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }

      


      explicit
      basic_string(const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }

      



      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(), __str._M_get_allocator()) 
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }

      





      
      
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }

      






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }

      








      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }

      




      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }

      





      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }


      






      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }

 
 
 
 _M_length(__str.length());
 __str._M_data(__str._M_local_data());
 __str._M_set_length(0);
      }

      




      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end()); }

      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end()); }

      basic_string(basic_string&& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str.get_allocator() == __a)
   *this = std::move(__str);
 else
   _M_construct(__str.begin(), __str.end());
      }



      






      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }

      


      ~basic_string()
      { _M_dispose(); }

      



      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }

      



      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }

      






      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }


      






      
      
      
      basic_string&
      operator=(basic_string&& __str)
      {
 this->swap(__str);
 return *this;
      }

      



      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }


      
      



      iterator
      begin() noexcept
      { return iterator(_M_data()); }

      



      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }

      



      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }

      



      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }

      




      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }

      




      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }

      




      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }

      




      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }


      



      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }

      



      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }

      




      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }

      




      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:
      
      
      
      size_type
      size() const noexcept
      { return _M_string_length; }

      
      
      size_type
      length() const noexcept
      { return _M_string_length; }

      
      size_type
      max_size() const noexcept
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }

      









      void
      resize(size_type __n, _CharT __c);

      









      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }


      
      void
      shrink_to_fit() noexcept
      {
 if (capacity() > size())
   {
     try
       { reserve(0); }
     catch(...)
       { }
   }
      }


      



      size_type
      capacity() const noexcept
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }

      
















      void
      reserve(size_type __res_arg = 0);

      


      void
      clear() noexcept
      { _M_set_length(0); }

      



      bool
      empty() const noexcept
      { return this->size() == 0; }

      
      









      const_reference
      operator[] (size_type __pos) const noexcept
      {
 ;
 return _M_data()[__pos];
      }

      









      reference
      operator[](size_type __pos)
      {
        
 
 ;
        
 ;
 return _M_data()[__pos];
      }

      









      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }

      









      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }


      



      reference
      front() noexcept
      { return operator[](0); }

      



      const_reference
      front() const noexcept
      { return operator[](0); }

      



      reference
      back() noexcept
      { return operator[](this->size() - 1); }

      



      const_reference
      back() const noexcept
      { return operator[](this->size() - 1); }


      
      




      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }

      




      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }

      




      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }


      




      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }


      




      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }

      












      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }

      





      basic_string&
      append(const _CharT* __s, size_type __n)
      {
 ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }

      




      basic_string&
      append(const _CharT* __s)
      {
 ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }

      







      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }


      




      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }


      








      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }

      



      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }

      




      basic_string&
      assign(const basic_string& __str)
      {
 this->_M_assign(__str);
 return *this;
      }


      







      basic_string&
      assign(basic_string&& __str)
      {
 
 
 return *this = std::move(__str);
      }


      












      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }

      









      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }

      








      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }

      








      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }

      








      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }


      




      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }



      














      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 1255 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 3
      













      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
   ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 1299 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 3
      





      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
 ;
 this->insert(__p - begin(), __l.begin(), __l.size());
      }


      











      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }

      

















      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }

      















      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }

      














      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }

      















      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }

      












      iterator
      insert(__const_iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }

      














      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 this->_M_erase(_M_check(__pos, "basic_string::erase"),
         _M_limit(__pos, __n));
 return *this;
      }

      







      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }

      








      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }


      




      void
      pop_back() noexcept
      { _M_erase(size()-1, 1); }


      
















      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }

      

















      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }

      

















      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
 ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }

      















      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }

      
















      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }

      












      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }

      














      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }

      












      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }

      













      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }

      















      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                        ;
   ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 1761 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 3
      
      
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }


      













      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }


    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:

      











      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;

      






      void
      swap(basic_string& __s) noexcept;

      
      





      const _CharT*
      c_str() const noexcept
      { return _M_data(); }

      





      const _CharT*
      data() const noexcept
      { return _M_data(); }

      


      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }

      











      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;

      









      size_type
      find(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find(__str.data(), __pos, __str.size()); }

      









      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }

      









      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;

      









      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }

      











      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;

      









      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }

      









      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;

      










      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }

      











      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;

      









      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }

      











      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }

      










      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }

      











      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;

      









      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }

      











      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }

      









      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }

      











      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;

      









      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }

      









      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
 noexcept;

      










      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }

      











      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
      










      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }

      









      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
 noexcept;

      











      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }

      













      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }

      


















      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;

      






















      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;

      













      int
      compare(const _CharT* __s) const;

      
      
      


















      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;

      























      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
}
# 4772 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 3
  
  





  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }


  
  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }

  
  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }

  
  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }

  
  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }

  
  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }

  
  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }

  





  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }

  






  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }


  











  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);

  








  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      
      
      return __ostream_insert(__os, __str.data(), __str.size());
    }

  












  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);

  











  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }


  
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }

  
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



} 
# 5469 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\functional_hash.h" 1 3






























#define _FUNCTIONAL_HASH_H 1

       
# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\functional_hash.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\hash_bytes.h" 1 3






























#define _HASH_BYTES_H 1

       
# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\hash_bytes.h" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\hash_bytes.h" 2 3

namespace std
{


  
  
  
  
  
  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);

  
  
  
  
  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


} 
# 36 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\functional_hash.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  







  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type;
      typedef _Arg argument_type;
    };

  
  template<typename _Tp>
    struct hash;

  
  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };

  
#define _Cxx_hashtable_define_trivial_hash(_Tp) template<> struct hash<_Tp> : public __hash_base<size_t, _Tp> { size_t operator()(_Tp __val) const noexcept { return static_cast<size_t>(__val); } };
# 79 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\functional_hash.h" 3
  
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };

  
  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };

#undef _Cxx_hashtable_define_trivial_hash

  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };

  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };

  
  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {
 
 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };

  
  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {
 
 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };

  
  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };

  

  
  
  
  
  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


} 
# 5470 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  


  
  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };


  
  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };




  
  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };

  
  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };
# 5580 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.h" 3

} 
# 53 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.tcc" 1 3







































#define _BASIC_STRING_TCC 1

       
# 43 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.tcc" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cxxabi_forced.h" 1 3





























# 45 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.tcc" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == &__s)
 return;

      
      
      
      std::__alloc_swap<allocator_type>::_S_do_it(_M_get_allocator(),
        __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {
      
      
      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));

      
      
      
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;
   
   if (__capacity > max_size())
     __capacity = max_size();
 }

      
      
      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }

  
  
  
  
  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 try
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {
      
      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {
 
 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid")
                                         );

 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }

 
 try
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      
      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_erase(__n, __size - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   _CharT* __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   _CharT* __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {
       
       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);
      
      return __n;
    }
# 1149 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {
       
       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {
       
       
       
       __in._M_setstate(__ios_base::badbit);
     }
 }
      
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {
       
       
       
       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  
  

  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




} 
# 54 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\string" 2 3
# 41 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\iosfwd" 1 3































# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\limits" 1 3





































#define _GLIBCXX_NUMERIC_LIMITS 1

       
# 41 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\limits" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 43 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\limits" 2 3





































#define __glibcxx_integral_traps true








#define __glibcxx_float_has_denorm_loss false


#define __glibcxx_float_traps false


#define __glibcxx_float_tinyness_before false







#define __glibcxx_double_has_denorm_loss false


#define __glibcxx_double_traps false


#define __glibcxx_double_tinyness_before false







#define __glibcxx_long_double_has_denorm_loss false


#define __glibcxx_long_double_traps false


#define __glibcxx_long_double_tinyness_before false




#define __glibcxx_signed_b(T,B) ((T)(-1) < 0)

#define __glibcxx_min_b(T,B) (__glibcxx_signed_b (T,B) ? -__glibcxx_max_b (T,B) - 1 : (T)0)


#define __glibcxx_max_b(T,B) (__glibcxx_signed_b (T,B) ? (((((T)1 << (__glibcxx_digits_b (T,B) - 1)) - 1) << 1) + 1) : ~(T)0)



#define __glibcxx_digits_b(T,B) (B - __glibcxx_signed_b (T,B))



#define __glibcxx_digits10_b(T,B) (__glibcxx_digits_b (T,B) * 643L / 2136)


#define __glibcxx_signed(T) __glibcxx_signed_b (T, sizeof(T) * __CHAR_BIT__)

#define __glibcxx_min(T) __glibcxx_min_b (T, sizeof(T) * __CHAR_BIT__)

#define __glibcxx_max(T) __glibcxx_max_b (T, sizeof(T) * __CHAR_BIT__)

#define __glibcxx_digits(T) __glibcxx_digits_b (T, sizeof(T) * __CHAR_BIT__)

#define __glibcxx_digits10(T) __glibcxx_digits10_b (T, sizeof(T) * __CHAR_BIT__)


#define __glibcxx_max_digits10(T) (2 + (T) * 643L / 2136)


namespace std __attribute__ ((__visibility__ ("default")))
{


  




  enum float_round_style
  {
    round_indeterminate = -1, 
    round_toward_zero = 0, 
    round_to_nearest = 1, 
    round_toward_infinity = 2, 
    round_toward_neg_infinity = 3 
  };

  





  enum float_denorm_style
  {
    
    denorm_indeterminate = -1,
    
    denorm_absent = 0,
    
    denorm_present = 1
  };

  









  struct __numeric_limits_base
  {
    

    static constexpr bool is_specialized = false;

    


    static constexpr int digits = 0;

    
    static constexpr int digits10 = 0;


    

    static constexpr int max_digits10 = 0;


    
    static constexpr bool is_signed = false;

    
    static constexpr bool is_integer = false;

    


    static constexpr bool is_exact = false;

    

    static constexpr int radix = 0;

    

    static constexpr int min_exponent = 0;

    

    static constexpr int min_exponent10 = 0;

    


    static constexpr int max_exponent = 0;

    

    static constexpr int max_exponent10 = 0;

    
    static constexpr bool has_infinity = false;

    

    static constexpr bool has_quiet_NaN = false;

    

    static constexpr bool has_signaling_NaN = false;

    
    static constexpr float_denorm_style has_denorm = denorm_absent;

    

    static constexpr bool has_denorm_loss = false;

    

    static constexpr bool is_iec559 = false;

    


    static constexpr bool is_bounded = false;

    






    static constexpr bool is_modulo = false;

    
    static constexpr bool traps = false;

    
    static constexpr bool tinyness_before = false;

    


    static constexpr float_round_style round_style =
          round_toward_zero;
  };

  










  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {
      

      static constexpr _Tp
      min() noexcept { return _Tp(); }

      
      static constexpr _Tp
      max() noexcept { return _Tp(); }


      

      static constexpr _Tp
      lowest() noexcept { return _Tp(); }


      

      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }

      
      static constexpr _Tp
      round_error() noexcept { return _Tp(); }

      
      static constexpr _Tp
      infinity() noexcept { return _Tp(); }

      

      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }

      

      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }

      


      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };


  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };


  
  

  
  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      
      
      
      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -0x7f - 1; }

      static constexpr signed char
      max() noexcept { return 0x7f; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 0x7f * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  
  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  
  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -0x7fff - 1; }

      static constexpr short
      max() noexcept { return 0x7fff; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 0x7fff * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -0x7fffffff - 1; }

      static constexpr int
      max() noexcept { return 0x7fffffff; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 0x7fffffff * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -0x7fffffffL - 1; }

      static constexpr long
      max() noexcept { return 0x7fffffffL; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 0x7fffffffL * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -0x7fffffffffffffffLL - 1; }

      static constexpr long long
      max() noexcept { return 0x7fffffffffffffffLL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

  
  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 0x7fffffffffffffffLL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



#define __INT_N(TYPE,BITSIZE,EXT,UEXT) template<> struct numeric_limits<TYPE> { static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true; static _GLIBCXX_CONSTEXPR TYPE min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min_b (TYPE, BITSIZE); } static _GLIBCXX_CONSTEXPR TYPE max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max_b (TYPE, BITSIZE); } static _GLIBCXX_USE_CONSTEXPR int digits = BITSIZE - 1; static _GLIBCXX_USE_CONSTEXPR int digits10 = (BITSIZE - 1) * 643L / 2136; static _GLIBCXX_USE_CONSTEXPR bool is_signed = true; static _GLIBCXX_USE_CONSTEXPR bool is_integer = true; static _GLIBCXX_USE_CONSTEXPR bool is_exact = true; static _GLIBCXX_USE_CONSTEXPR int radix = 2; static _GLIBCXX_CONSTEXPR TYPE epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; } static _GLIBCXX_CONSTEXPR TYPE round_error() _GLIBCXX_USE_NOEXCEPT { return 0; } EXT static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0; static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0; static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0; static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0; static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false; static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false; static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false; static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm = denorm_absent; static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false; static _GLIBCXX_CONSTEXPR TYPE infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<TYPE>(0); } static _GLIBCXX_CONSTEXPR TYPE quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<TYPE>(0); } static _GLIBCXX_CONSTEXPR TYPE signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<TYPE>(0); } static _GLIBCXX_CONSTEXPR TYPE denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<TYPE>(0); } static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false; static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false; static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps; static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; static _GLIBCXX_USE_CONSTEXPR float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits<unsigned TYPE> { static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true; static _GLIBCXX_CONSTEXPR unsigned TYPE min() _GLIBCXX_USE_NOEXCEPT { return 0; } static _GLIBCXX_CONSTEXPR unsigned TYPE max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max_b (unsigned TYPE, BITSIZE); } UEXT static _GLIBCXX_USE_CONSTEXPR int digits = BITSIZE; static _GLIBCXX_USE_CONSTEXPR int digits10 = BITSIZE * 643L / 2136; static _GLIBCXX_USE_CONSTEXPR bool is_signed = false; static _GLIBCXX_USE_CONSTEXPR bool is_integer = true; static _GLIBCXX_USE_CONSTEXPR bool is_exact = true; static _GLIBCXX_USE_CONSTEXPR int radix = 2; static _GLIBCXX_CONSTEXPR unsigned TYPE epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; } static _GLIBCXX_CONSTEXPR unsigned TYPE round_error() _GLIBCXX_USE_NOEXCEPT { return 0; } static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0; static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0; static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0; static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0; static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false; static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false; static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false; static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm = denorm_absent; static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false; static _GLIBCXX_CONSTEXPR unsigned TYPE infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned TYPE>(0); } static _GLIBCXX_CONSTEXPR unsigned TYPE quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned TYPE>(0); } static _GLIBCXX_CONSTEXPR unsigned TYPE signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned TYPE>(0); } static _GLIBCXX_CONSTEXPR unsigned TYPE denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned TYPE>(0); } static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false; static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true; static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps; static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; static _GLIBCXX_USE_CONSTEXPR float_round_style round_style = round_toward_zero; };
# 1553 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\limits" 3
#define __INT_N_201103(TYPE) static constexpr TYPE lowest() noexcept { return min(); } static constexpr int max_digits10 = 0;




#define __INT_N_U201103(TYPE) static constexpr unsigned TYPE lowest() noexcept { return min(); } static constexpr int max_digits10 = 0;
# 1585 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\limits" 3
#undef __INT_N
#undef __INT_N_201103
#undef __INT_N_U201103



  
  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.1754943508222875e-38F; }

      static constexpr float
      max() noexcept { return 3.4028234663852886e+38F; }


      static constexpr float
      lowest() noexcept { return -3.4028234663852886e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.1920928955078125e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.4012984643248171e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };

#undef __glibcxx_float_has_denorm_loss
#undef __glibcxx_float_traps
#undef __glibcxx_float_tinyness_before

  
  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return double(2.2250738585072014e-308L); }

      static constexpr double
      max() noexcept { return double(1.7976931348623157e+308L); }


      static constexpr double
      lowest() noexcept { return -double(1.7976931348623157e+308L); }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return double(2.2204460492503131e-16L); }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return double(4.9406564584124654e-324L); }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };

#undef __glibcxx_double_has_denorm_loss
#undef __glibcxx_double_traps
#undef __glibcxx_double_tinyness_before

  
  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 2.2250738585072014e-308L; }

      static constexpr long double
      max() noexcept { return 1.7976931348623157e+308L; }


      static constexpr long double
      lowest() noexcept { return -1.7976931348623157e+308L; }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 2.2204460492503131e-16L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 4.9406564584124654e-324L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };

#undef __glibcxx_long_double_has_denorm_loss
#undef __glibcxx_long_double_traps
#undef __glibcxx_long_double_tinyness_before


} 

#undef __glibcxx_signed
#undef __glibcxx_min
#undef __glibcxx_max
#undef __glibcxx_digits
#undef __glibcxx_digits10
#undef __glibcxx_max_digits10
# 43 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\debug\\debug.h" 1 3



























# 44 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\type_traits" 1 3



























# 45 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 2 3



# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cstdint" 1 3



























# 49 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\random.h" 1 3































#define _RANDOM_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\vector" 1 3























































#define _GLIBCXX_VECTOR 1

       
# 59 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\vector" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algobase.h" 1 3






















































# 61 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\vector" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\allocator.h" 1 3









































# 62 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\vector" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_construct.h" 1 3






















































# 63 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\vector" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_uninitialized.h" 1 3
























































#define _STL_UNINITIALIZED_H 1

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };

  








  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;



      
      typedef typename iterator_traits<_InputIterator>::reference _RefType1;
      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;


      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };

  








  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;



      
      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { return std::fill_n(__first, __n, __x); }
    };

   
   
  








  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;



      
      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }

  
  
  
  
  

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }


  
  
  
  

  
  
  
  
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }

  
  
  
  
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }

  
  
  
  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }

  
  
  
  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }


  
  

  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur));
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   return std::fill_n(__first, __n, _ValueType());
 }
    };

  
  
  
  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      
      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }

  
  
  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      
      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_default_n_1<__is_trivial(_ValueType)
           && __assignable>::
 __uninit_default_n(__first, __n);
    }


  
  
  
  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }


  
  
  
  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }


  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }

  








  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }



} 
# 64 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\vector" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 1 3
























































#define _STL_VECTOR_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_funcs.h" 1 3

























































# 60 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\functexcept.h" 1 3


































# 61 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\concept_check.h" 1 3




























# 62 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 2 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\initializer_list" 1 3




























# 64 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  
  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Vector_impl(_Tp_alloc_type const& __a) noexcept
 : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Vector_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a)),
   _M_start(), _M_finish(), _M_end_of_storage()
 { }


 void _M_swap_data(_Vector_impl& __x) noexcept
 {
   std::swap(_M_start, __x._M_start);
   std::swap(_M_finish, __x._M_finish);
   std::swap(_M_end_of_storage, __x._M_end_of_storage);
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a) noexcept
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }


      _Vector_base(_Tp_alloc_type&& __a) noexcept
      : _M_impl(std::move(__a)) { }

      _Vector_base(_Vector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_swap_data(__x._M_impl); }

      _Vector_base(_Vector_base&& __x, const allocator_type& __a)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_impl._M_swap_data(__x._M_impl);
 else
   {
     size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
     _M_create_storage(__n);
   }
      }


      ~_Vector_base() noexcept
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };


  




















  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {
      
      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:
      
      

      


      vector()

      noexcept(is_nothrow_default_constructible<_Alloc>::value)

      : _Base() { }

      



      explicit
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }


      







      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_default_initialize(__n); }

      







      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 309 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 3
      








      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }


      






      vector(vector&& __x) noexcept
      : _Base(std::move(__x)) { }

      
      vector(const vector& __x, const allocator_type& __a)
      : _Base(__x.size(), __a)
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }

      
      vector(vector&& __rv, const allocator_type& __m)
      noexcept(_Alloc_traits::_S_always_equal())
      : _Base(std::move(__rv), __m)
      {
 if (__rv.get_allocator() != __m)
   {
     this->_M_impl._M_finish =
       std::__uninitialized_move_a(__rv.begin(), __rv.end(),
       this->_M_impl._M_start,
       _M_get_Tp_allocator());
     __rv.clear();
   }
      }

      










      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }


      
















      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        { _M_initialize_dispatch(__first, __last, __false_type()); }
# 417 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 3
      





      ~vector() noexcept
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }

      







      vector&
      operator=(const vector& __x);


      







      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
        constexpr bool __move_storage =
          _Alloc_traits::_S_propagate_on_move_assign()
          || _Alloc_traits::_S_always_equal();
        _M_move_assign(std::move(__x),
                       integral_constant<bool, __move_storage>());
 return *this;
      }

      










      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }


      









      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }

      












      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        void
        assign(_InputIterator __first, _InputIterator __last)
        { _M_assign_dispatch(__first, __last, __false_type()); }
# 521 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 3
      










      void
      assign(initializer_list<value_type> __l)
      { this->assign(__l.begin(), __l.end()); }


      
      using _Base::get_allocator;

      
      




      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start); }

      




      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }

      




      iterator
      end() noexcept
      { return iterator(this->_M_impl._M_finish); }

      




      const_iterator
      end() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }

      




      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      




      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      




      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      




      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }


      




      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }

      




      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }

      




      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      




      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      
      
      size_type
      size() const noexcept
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }

      
      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }


      








      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }

      










      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 723 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 3
      
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }


      



      size_type
      capacity() const noexcept
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }

      



      bool
      empty() const noexcept
      { return begin() == end(); }

      
















      void
      reserve(size_type __n);

      
      










      reference
      operator[](size_type __n) noexcept
      { return *(this->_M_impl._M_start + __n); }

      










      const_reference
      operator[](size_type __n) const noexcept
      { return *(this->_M_impl._M_start + __n); }

    protected:
      
      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
      










      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }

      










      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }

      



      reference
      front() noexcept
      { return *begin(); }

      



      const_reference
      front() const noexcept
      { return *begin(); }

      



      reference
      back() noexcept
      { return *(end() - 1); }

      



      const_reference
      back() const noexcept
      { return *(end() - 1); }

      
      
      
      




      _Tp*



      data() noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }


      const _Tp*



      data() const noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }

      
      









      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
                              __x);
     ++this->_M_impl._M_finish;
   }
 else

   _M_emplace_back_aux(__x);



      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args);


      








      void
      pop_back() noexcept
      {
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      }


      











      template<typename... _Args>
        iterator
        emplace(const_iterator __position, _Args&&... __args);

      










      iterator
      insert(const_iterator __position, const value_type& __x);
# 1002 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 3
      










      iterator
      insert(const_iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }

      












      iterator
      insert(const_iterator __position, initializer_list<value_type> __l)
      { return this->insert(__position, __l.begin(), __l.end()); }



      













      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(begin() + __offset, __n, __x);
 return begin() + __offset;
      }
# 1077 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 3
      














      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        iterator
        insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
        {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(begin() + __offset,
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1129 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 3
      














      iterator

      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }





      

















      iterator

      erase(const_iterator __first, const_iterator __last)
      {
 const auto __beg = begin();
 const auto __cbeg = cbegin();
 return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
      }





      








      void
      swap(vector& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      {
 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
                           __x._M_get_Tp_allocator());
      }

      





      void
      clear() noexcept
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:
      



      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }


      

      

      
      
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }

      
      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }

      
      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)

     emplace_back(*__first);



 }

      
      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }

      
      
      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
      }


      
      void
      _M_default_initialize(size_type __n)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
        _M_get_Tp_allocator());
      }


      
      

      

      
      
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }

      
      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }

      
      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);

      
      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);

      
      
      void
      _M_fill_assign(size_type __n, const value_type& __val);


      

      

      
      
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }

      
      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }

      
      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);

      
      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);

      
      
      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);


      
      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();


      




      template<typename... _Args>
        void
        _M_insert_aux(iterator __position, _Args&&... __args);

      template<typename... _Args>
        void
        _M_emplace_back_aux(_Args&&... __args);


      
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      

      
      
      void
      _M_erase_at_end(pointer __pos) noexcept
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __position);

      iterator
      _M_erase(iterator __first, iterator __last);


    private:
      
      
      
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
      {
 vector __tmp(get_allocator());
 this->_M_impl._M_swap_data(__tmp._M_impl);
 this->_M_impl._M_swap_data(__x._M_impl);
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }

      
      
      void
      _M_move_assign(vector&& __x, std::false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   _M_move_assign(std::move(__x), std::true_type());
 else
   {
     
     
     this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),
    std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
      }



      template<typename _Up>
 _Up*
 _M_data_ptr(_Up* __ptr) const
 { return __ptr; }

      template<typename _Ptr>
 typename std::pointer_traits<_Ptr>::element_type*
 _M_data_ptr(_Ptr __ptr) const
 { return empty() ? nullptr : std::__addressof(*__ptr); }






    };


  









  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }

  










  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }

  
  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }

  
  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }

  
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }

  
  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }

  
  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


} 
# 65 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\vector" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_bvector.h" 1 3
























































#define _STL_BVECTOR_H 1


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\initializer_list" 1 3




























# 61 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_bvector.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() noexcept : _M_p(0), _M_mask(0) { }

    operator bool() const noexcept
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x) noexcept
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x) noexcept
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip() noexcept
    { *_M_p ^= _M_mask; }
  };


  inline void
  swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(_Bit_reference __x, bool& __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(bool& __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }


  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Bit_type>::other _Bit_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type>
 _Bit_alloc_traits;
      typedef typename _Bit_alloc_traits::pointer _Bit_pointer;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_pointer _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Bvector_impl(_Bit_alloc_type&& __a)
 : _Bit_alloc_type(std::move(__a)), _M_start(), _M_finish(),
   _M_end_of_storage()
 { }


 _Bit_type*
 _M_end_addr() const noexcept
 {
   if (_M_end_of_storage)
     return std::__addressof(_M_end_of_storage[-1]) + 1;
   return 0;
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator() noexcept
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const noexcept
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Bit_allocator()))
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = _Bit_iterator();
 __x._M_impl._M_finish = _Bit_iterator();
 __x._M_impl._M_end_of_storage = nullptr;
      }


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_pointer
      _M_allocate(size_t __n)
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   {
     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
     _Bit_alloc_traits::deallocate(_M_impl,
       _M_impl._M_end_of_storage - __n,
       __n);
   }
      }

      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };


} 


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_vector.h" 1 3






















































# 516 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_bvector.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  


















template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;
    typedef typename _Base::_Bit_pointer _Bit_pointer;
    typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;


    template<typename> friend struct hash;


  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_S_nword;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()

      noexcept(is_nothrow_default_constructible<allocator_type>::value)

    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }


    explicit
    vector(size_type __n, const allocator_type& __a = allocator_type())
    : vector(__n, false, __a)
    { }

    vector(size_type __n, const bool& __value,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_addr(),
  __value ? ~0 : 0);
    }
# 611 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_bvector.h" 3
    vector(const vector& __x)
    : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }


    vector(vector&& __x) noexcept
    : _Base(std::move(__x)) { }

    vector(vector&& __x, const allocator_type& __a)
    noexcept(_Bit_alloc_traits::_S_always_equal())
    : _Base(__a)
    {
      if (__x.get_allocator() == __a)
 {
   this->_M_impl._M_start = __x._M_impl._M_start;
   this->_M_impl._M_finish = __x._M_impl._M_finish;
   this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
   __x._M_impl._M_start = _Bit_iterator();
   __x._M_impl._M_finish = _Bit_iterator();
   __x._M_impl._M_end_of_storage = nullptr;
 }
      else
 {
   _M_initialize(__x.size());
   _M_copy_aligned(__x.begin(), __x.end(), begin());
   __x.clear();
 }
    }

    vector(const vector& __x, const allocator_type& __a)
    : _Base(__a)
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }

    vector(initializer_list<bool> __l,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize_range(__l.begin(), __l.end(),
     random_access_iterator_tag());
    }



    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      { _M_initialize_dispatch(__first, __last, __false_type()); }
# 677 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_bvector.h" 3
    ~vector() noexcept { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;

      if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
 {
   if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator())
     {
       this->_M_deallocate();
       std::__alloc_on_copy(_M_get_Bit_allocator(),
       __x._M_get_Bit_allocator());
       _M_initialize(__x.size());
     }
   else
     std::__alloc_on_copy(_M_get_Bit_allocator(),
     __x._M_get_Bit_allocator());
 }

      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }


    vector&
    operator=(vector&& __x) noexcept(_Bit_alloc_traits::_S_nothrow_move())
    {
      if (_Bit_alloc_traits::_S_propagate_on_move_assign()
   || this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())
 {
   this->_M_deallocate();
   this->_M_impl._M_start = __x._M_impl._M_start;
   this->_M_impl._M_finish = __x._M_impl._M_finish;
   this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
   __x._M_impl._M_start = _Bit_iterator();
   __x._M_impl._M_finish = _Bit_iterator();
   __x._M_impl._M_end_of_storage = nullptr;
   std::__alloc_on_move(_M_get_Bit_allocator(),
          __x._M_get_Bit_allocator());
 }
      else
 {
   if (__x.size() > capacity())
     {
       this->_M_deallocate();
       _M_initialize(__x.size());
     }
   this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
          begin());
   __x.clear();
 }
      return *this;
    }

    vector&
    operator=(initializer_list<bool> __l)
    {
      this->assign (__l.begin(), __l.end());
      return *this;
    }


    
    
    
    
    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      void
      assign(_InputIterator __first, _InputIterator __last)
      { _M_assign_dispatch(__first, __last, __false_type()); }
# 773 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_bvector.h" 3
    void
    assign(initializer_list<bool> __l)
    { this->assign(__l.begin(), __l.end()); }


    iterator
    begin() noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const noexcept
    { return this->_M_impl._M_start; }

    iterator
    end() noexcept
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const noexcept
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin() noexcept
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const noexcept
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend() noexcept
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const noexcept
    { return const_reverse_iterator(begin()); }


    const_iterator
    cbegin() const noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    cend() const noexcept
    { return this->_M_impl._M_finish; }

    const_reverse_iterator
    crbegin() const noexcept
    { return const_reverse_iterator(end()); }

    const_reverse_iterator
    crend() const noexcept
    { return const_reverse_iterator(begin()); }


    size_type
    size() const noexcept
    { return size_type(end() - begin()); }

    size_type
    max_size() const noexcept
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize
 = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const noexcept
    { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
         - begin()); }

    bool
    empty() const noexcept
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
 __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                          ,
     __n, this->size());
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n)
    {
      if (__n > max_size())
 __throw_length_error(("vector::reserve"));
      if (capacity() < __n)
 _M_reallocate(__n);
    }

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }

    
    
    
    
    
    void
    data() noexcept { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)

      noexcept(_Bit_alloc_traits::_S_nothrow_swap())

    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);
      _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
        __x._M_get_Bit_allocator());
    }

    
    static void
    swap(reference __x, reference __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator

    insert(const_iterator __position, const bool& __x = bool())



    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr()
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position._M_const_cast(), __x);
      return begin() + __n;
    }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      iterator
      insert(const_iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 difference_type __offset = __position - cbegin();
 _M_insert_dispatch(__position._M_const_cast(),
      __first, __last, __false_type());
 return begin() + __offset;
      }
# 992 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_bvector.h" 3
    iterator
    insert(const_iterator __position, size_type __n, const bool& __x)
    {
      difference_type __offset = __position - cbegin();
      _M_fill_insert(__position._M_const_cast(), __n, __x);
      return begin() + __offset;
    }







    iterator
    insert(const_iterator __p, initializer_list<bool> __l)
    { return this->insert(__p, __l.begin(), __l.end()); }


    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator

    erase(const_iterator __position)



    { return _M_erase(__position._M_const_cast()); }

    iterator

    erase(const_iterator __first, const_iterator __last)



    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }


    void
    shrink_to_fit()
    { _M_shrink_to_fit(); }


    void
    flip() noexcept
    {
      _Bit_type * const __end = this->_M_impl._M_end_addr();
      for (_Bit_type * __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
        *__p = ~*__p;
    }

    void
    clear() noexcept
    { _M_erase_at_end(begin()); }


    template<typename... _Args>
      void
      emplace_back(_Args&&... __args)
      { push_back(bool(__args...)); }

    template<typename... _Args>
      iterator
      emplace(const_iterator __pos, _Args&&... __args)
      { return insert(__pos, bool(__args...)); }


  protected:
    
    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
      this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }

    void
    _M_reallocate(size_type __n);


    bool
    _M_shrink_to_fit();


    

    
    
    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_addr(), __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }

    
    
    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }

    

    
    
    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }

    iterator
    _M_erase(iterator __pos);

    iterator
    _M_erase(iterator __first, iterator __last);
  };


} 



# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\functional_hash.h" 1 3




























# 1266 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_bvector.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  
  
  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>&) const noexcept;
    };


}
# 66 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\vector" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\range_access.h" 1 3




























# 67 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\vector" 2 3


# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\vector.tcc" 1 3
























































#define _VECTOR_TCC 1

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_emplace_back_aux(std::forward<_Args>(__args)...);
      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {

   const auto __pos = begin() + (__position - cbegin());
   if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     {
       _Tp __x_copy = __x;
       _M_insert_aux(__pos, std::move(__x_copy));
     }
   else
     _M_insert_aux(__pos, __x);



 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {
    
    this->clear();
    _M_deallocate(this->_M_impl._M_start,
    this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start);
    this->_M_impl._M_start = nullptr;
    this->_M_impl._M_finish = nullptr;
    this->_M_impl._M_end_of_storage = nullptr;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   this->_M_impl._M_finish =
     std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
       __n - size(), __val,
       _M_get_Tp_allocator());
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename vector<_Tp, _Alloc>::iterator
      vector<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
 const size_type __n = __position - begin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
     && __position == end())
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(begin() + (__position - cbegin()),
   std::forward<_Args>(__args)...);
 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Args&&... __args)






    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
              std::move(*(this->_M_impl._M_finish - 1))
                            );
   ++this->_M_impl._M_finish;



   std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1)

                                  ;



   *__position = _Tp(std::forward<_Args>(__args)...);

 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   try
     {
       
       
       
       
       _Alloc_traits::construct(this->_M_impl,
                         __new_start + __elems_before,

           std::forward<_Args>(__args)...);



       __new_finish = pointer();

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (this->_M_impl._M_start, __position.base(),
   __new_start, _M_get_Tp_allocator());

       ++__new_finish;

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (__position.base(), this->_M_impl._M_finish,
   __new_finish, _M_get_Tp_allocator());
     }
          catch(...)
     {
       if (!__new_finish)
  _Alloc_traits::destroy(this->_M_impl,
                         __new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
       throw;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_emplace_back_aux(_Args&&... __args)
      {
 const size_type __len =
   _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
 pointer __new_start(this->_M_allocate(__len));
 pointer __new_finish(__new_start);
 try
   {
     _Alloc_traits::construct(this->_M_impl, __new_start + size(),
         std::forward<_Args>(__args)...);
     __new_finish = pointer();

     __new_finish
       = std::__uninitialized_move_if_noexcept_a
       (this->_M_impl._M_start, this->_M_impl._M_finish,
        __new_start, _M_get_Tp_allocator());

     ++__new_finish;
   }
 catch(...)
   {
     if (!__new_finish)
       _Alloc_traits::destroy(this->_M_impl, __new_start + size());
     else
       std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
     _M_deallocate(__new_start, __len);
     throw;
   }
 std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator());
 _M_deallocate(this->_M_impl._M_start,
        this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start);
 this->_M_impl._M_start = __new_start;
 this->_M_impl._M_finish = __new_finish;
 this->_M_impl._M_end_of_storage = __new_start + __len;
      }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                        ;
    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    this->_M_impl._M_finish =
      std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
        __n - __elems_after,
        __x_copy,
        _M_get_Tp_allocator());
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {
    
    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = pointer();

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       this->_M_impl._M_finish =
  std::__uninitialized_default_n_a(this->_M_impl._M_finish,
       __n, _M_get_Tp_allocator());
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       const size_type __old_size = this->size();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {
    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, this->_M_impl._M_finish,
       __new_start, _M_get_Tp_allocator());
    __new_finish =
      std::__uninitialized_default_n_a(__new_finish, __n,
           _M_get_Tp_allocator());
  }
       catch(...)
  {
    std::_Destroy(__new_start, __new_finish,
    _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    bool
    vector<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() == size())
 return false;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                          ;
      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }


  
  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      iterator __start(std::__addressof(*__q), 0);
      this->_M_impl._M_finish = _M_copy_aligned(begin(), end(), __start);
      this->_M_deallocate();
      this->_M_impl._M_start = __start;
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_pointer __q = this->_M_allocate(__len);
  iterator __start(std::__addressof(*__q), 0);
  iterator __i = _M_copy_aligned(begin(), __position, __start);
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = __start;
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
 }
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }


  template<typename _Alloc>
    bool
    vector<bool, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() - size() < int(_S_word_bit))
 return false;
      try
 {
   _M_reallocate(size());
   return true;
 }
      catch(...)
 { return false; }
    }



} 



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const noexcept
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


} 
# 70 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\vector" 2 3
# 35 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\random.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  

  







  




  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __g);



  


  namespace __detail
  {
 

    template<typename _UIntType, size_t __w,
      bool = __w < static_cast<size_t>
     (std::numeric_limits<_UIntType>::digits)>
      struct _Shift
      { static const _UIntType __value = 0; };

    template<typename _UIntType, size_t __w>
      struct _Shift<_UIntType, __w, true>
      { static const _UIntType __value = _UIntType(1) << __w; };

    template<int __s,
      int __which = ((__s <= 8 * sizeof (int))
       + (__s <= 8 * sizeof (long))
       + (__s <= 8 * sizeof (long long))
       
       + (__s <= 128))>
      struct _Select_uint_least_t
      {
 static_assert(__which < 0, 
        "sorry, would be too much trouble for a slow result");
      };

    template<int __s>
      struct _Select_uint_least_t<__s, 4>
      { typedef unsigned int type; };

    template<int __s>
      struct _Select_uint_least_t<__s, 3>
      { typedef unsigned long type; };

    template<int __s>
      struct _Select_uint_least_t<__s, 2>
      { typedef unsigned long long type; };







    
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c,
      bool __big_enough = (!(__m & (__m - 1))
      || (_Tp(-1) - __c) / __a >= __m - 1),
             bool __schrage_ok = __m % __a < __m / __a>
      struct _Mod
      {
 typedef typename _Select_uint_least_t<std::__lg(__a)
           + std::__lg(__m) + 2>::type _Tp2;
 static _Tp
 __calc(_Tp __x)
 { return static_cast<_Tp>((_Tp2(__a) * __x + __c) % __m); }
      };

    
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      struct _Mod<_Tp, __m, __a, __c, false, true>
      {
 static _Tp
 __calc(_Tp __x);
      };

    
    
    
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
 static _Tp
 __calc(_Tp __x)
 {
   _Tp __res = __a * __x + __c;
   if (__m)
     __res %= __m;
   return __res;
 }
      };

    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      inline _Tp
      __mod(_Tp __x)
      { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }

    
    template<typename _Tp>
      inline bool
      _Power_of_2(_Tp __x)
      {
 return ((__x - 1) & __x) == 0;
      };

    



    template<typename _Engine, typename _DInputType>
      struct _Adaptor
      {
 static_assert(std::is_floating_point<_DInputType>::value,
        "template argument not a floating point type");

      public:
 _Adaptor(_Engine& __g)
 : _M_g(__g) { }

 _DInputType
 min() const
 { return _DInputType(0); }

 _DInputType
 max() const
 { return _DInputType(1); }

 




 _DInputType
 operator()()
 {
   return std::generate_canonical<_DInputType,
                             std::numeric_limits<_DInputType>::digits,
                             _Engine>(_M_g);
 }

      private:
 _Engine& _M_g;
      };

 
  } 



  




















  
















  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    class linear_congruential_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(__m == 0u || (__a < __m && __c < __m),
      "template argument substituting __m out of bounds");

    public:
      
      typedef _UIntType result_type;

      
      static constexpr result_type multiplier = __a;
      
      static constexpr result_type increment = __c;
      
      static constexpr result_type modulus = __m;
      static constexpr result_type default_seed = 1u;

      






      explicit
      linear_congruential_engine(result_type __s = default_seed)
      { seed(__s); }

      





      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, linear_congruential_engine>::value>
        ::type>
        explicit
        linear_congruential_engine(_Sseq& __q)
        { seed(__q); }

      





      void
      seed(result_type __s = default_seed);

      






      template<typename _Sseq>
        typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);

      





      static constexpr result_type
      min()
      { return __c == 0u ? 1u : 0u; }

      


      static constexpr result_type
      max()
      { return __m - 1u; }

      


      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }

      


      result_type
      operator()()
      {
 _M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
 return _M_x;
      }

      










      friend bool
      operator==(const linear_congruential_engine& __lhs,
   const linear_congruential_engine& __rhs)
      { return __lhs._M_x == __rhs._M_x; }

      







      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::linear_congruential_engine<_UIntType1,
     __a1, __c1, __m1>& __lcr);

      












      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::linear_congruential_engine<_UIntType1, __a1,
     __c1, __m1>& __lcr);

    private:
      _UIntType _M_x;
    };

  










  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    inline bool
    operator!=(const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __lhs,
        const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __rhs)
    { return !(__lhs == __rhs); }


  



























  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    class mersenne_twister_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(1u <= __m && __m <= __n,
      "template argument substituting __m out of bounds");
      static_assert(__r <= __w, "template argument substituting "
      "__r out of bound");
      static_assert(__u <= __w, "template argument substituting "
      "__u out of bound");
      static_assert(__s <= __w, "template argument substituting "
      "__s out of bound");
      static_assert(__t <= __w, "template argument substituting "
      "__t out of bound");
      static_assert(__l <= __w, "template argument substituting "
      "__l out of bound");
      static_assert(__w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bound");
      static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __a out of bound");
      static_assert(__b <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __b out of bound");
      static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __c out of bound");
      static_assert(__d <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __d out of bound");
      static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __f out of bound");

    public:
      
      typedef _UIntType result_type;

      
      static constexpr size_t word_size = __w;
      static constexpr size_t state_size = __n;
      static constexpr size_t shift_size = __m;
      static constexpr size_t mask_bits = __r;
      static constexpr result_type xor_mask = __a;
      static constexpr size_t tempering_u = __u;
      static constexpr result_type tempering_d = __d;
      static constexpr size_t tempering_s = __s;
      static constexpr result_type tempering_b = __b;
      static constexpr size_t tempering_t = __t;
      static constexpr result_type tempering_c = __c;
      static constexpr size_t tempering_l = __l;
      static constexpr result_type initialization_multiplier = __f;
      static constexpr result_type default_seed = 5489u;

      
      explicit
      mersenne_twister_engine(result_type __sd = default_seed)
      { seed(__sd); }

      





      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, mersenne_twister_engine>::value>
        ::type>
        explicit
        mersenne_twister_engine(_Sseq& __q)
        { seed(__q); }

      void
      seed(result_type __sd = default_seed);

      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);

      


      static constexpr result_type
      min()
      { return 0; };

      


      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }

      


      void
      discard(unsigned long long __z);

      result_type
      operator()();

      











      friend bool
      operator==(const mersenne_twister_engine& __lhs,
   const mersenne_twister_engine& __rhs)
      { return (std::equal(__lhs._M_x, __lhs._M_x + state_size, __rhs._M_x)
  && __lhs._M_p == __rhs._M_p); }

      











      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::mersenne_twister_engine<_UIntType1, __w1, __n1,
     __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>& __x);

      











      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::mersenne_twister_engine<_UIntType1, __w1, __n1, __m1,
     __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>& __x);

    private:
      void _M_gen_rand();

      _UIntType _M_x[state_size];
      size_t _M_p;
    };

  











  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    inline bool
    operator!=(const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __lhs,
        const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __rhs)
    { return !(__lhs == __rhs); }


  














  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    class subtract_with_carry_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __s && __s < __r,
      "template argument substituting __s out of bounds");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:
      
      typedef _UIntType result_type;

      
      static constexpr size_t word_size = __w;
      static constexpr size_t short_lag = __s;
      static constexpr size_t long_lag = __r;
      static constexpr result_type default_seed = 19780503u;

      



      explicit
      subtract_with_carry_engine(result_type __sd = default_seed)
      { seed(__sd); }

      





      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, subtract_with_carry_engine>::value>
        ::type>
        explicit
        subtract_with_carry_engine(_Sseq& __q)
        { seed(__q); }

      











      void
      seed(result_type __sd = default_seed);

      



      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);

      



      static constexpr result_type
      min()
      { return 0; }

      



      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }

      


      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }

      


      result_type
      operator()();

      











      friend bool
      operator==(const subtract_with_carry_engine& __lhs,
   const subtract_with_carry_engine& __rhs)
      { return (std::equal(__lhs._M_x, __lhs._M_x + long_lag, __rhs._M_x)
  && __lhs._M_carry == __rhs._M_carry
  && __lhs._M_p == __rhs._M_p); }

      











      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>& __x);

      











      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>& __x);

    private:
      
      _UIntType _M_x[long_lag];
      _UIntType _M_carry; 
      size_t _M_p; 
    };

  











  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    inline bool
    operator!=(const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __lhs,
        const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __rhs)
    { return !(__lhs == __rhs); }


  





  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    class discard_block_engine
    {
      static_assert(1 <= __r && __r <= __p,
      "template argument substituting __r out of bounds");

    public:
      
      typedef typename _RandomNumberEngine::result_type result_type;

      
      static constexpr size_t block_size = __p;
      static constexpr size_t used_block = __r;

      




      discard_block_engine()
      : _M_b(), _M_n(0) { }

      





      explicit
      discard_block_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng), _M_n(0) { }

      





      explicit
      discard_block_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng)), _M_n(0) { }

      





      explicit
      discard_block_engine(result_type __s)
      : _M_b(__s), _M_n(0) { }

      




      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, discard_block_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        discard_block_engine(_Sseq& __q)
 : _M_b(__q), _M_n(0)
        { }

      



      void
      seed()
      {
 _M_b.seed();
 _M_n = 0;
      }

      



      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_n = 0;
      }

      




      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_n = 0;
 }

      



      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }

      


      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }

      


      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }

      


      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }

      


      result_type
      operator()();

      










      friend bool
      operator==(const discard_block_engine& __lhs,
   const discard_block_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b && __lhs._M_n == __rhs._M_n; }

      










      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>& __x);

      










      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>& __x);

    private:
      _RandomNumberEngine _M_b;
      size_t _M_n;
    };

  










  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    inline bool
    operator!=(const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __lhs,
        const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __rhs)
    { return !(__lhs == __rhs); }


  



  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    class independent_bits_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:
      
      typedef _UIntType result_type;

      




      independent_bits_engine()
      : _M_b() { }

      





      explicit
      independent_bits_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng) { }

      





      explicit
      independent_bits_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng)) { }

      





      explicit
      independent_bits_engine(result_type __s)
      : _M_b(__s) { }

      




      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, independent_bits_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
               ::type>
        explicit
        independent_bits_engine(_Sseq& __q)
        : _M_b(__q)
        { }

      



      void
      seed()
      { _M_b.seed(); }

      



      void
      seed(result_type __s)
      { _M_b.seed(__s); }

      




      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        { _M_b.seed(__q); }

      



      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }

      


      static constexpr result_type
      min()
      { return 0U; }

      


      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }

      


      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }

      


      result_type
      operator()();

      











      friend bool
      operator==(const independent_bits_engine& __lhs,
   const independent_bits_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }

      











      template<typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::independent_bits_engine<_RandomNumberEngine,
     __w, _UIntType>& __x)
 {
   __is >> __x._M_b;
   return __is;
 }

    private:
      _RandomNumberEngine _M_b;
    };

  











  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    inline bool
    operator!=(const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __lhs,
        const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __rhs)
    { return !(__lhs == __rhs); }

  









  template<typename _RandomNumberEngine, size_t __w, typename _UIntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::independent_bits_engine<_RandomNumberEngine,
        __w, _UIntType>& __x)
    {
      __os << __x.base();
      return __os;
    }


  




  template<typename _RandomNumberEngine, size_t __k>
    class shuffle_order_engine
    {
      static_assert(1u <= __k, "template argument substituting "
      "__k out of bound");

    public:
      
      typedef typename _RandomNumberEngine::result_type result_type;

      static constexpr size_t table_size = __k;

      




      shuffle_order_engine()
      : _M_b()
      { _M_initialize(); }

      





      explicit
      shuffle_order_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng)
      { _M_initialize(); }

      





      explicit
      shuffle_order_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng))
      { _M_initialize(); }

      





      explicit
      shuffle_order_engine(result_type __s)
      : _M_b(__s)
      { _M_initialize(); }

      




      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, shuffle_order_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        shuffle_order_engine(_Sseq& __q)
        : _M_b(__q)
        { _M_initialize(); }

      



      void
      seed()
      {
 _M_b.seed();
 _M_initialize();
      }

      



      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_initialize();
      }

      




      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_initialize();
 }

      


      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }

      


      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }

      


      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }

      


      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }

      


      result_type
      operator()();

      










      friend bool
      operator==(const shuffle_order_engine& __lhs,
   const shuffle_order_engine& __rhs)
      { return (__lhs._M_b == __rhs._M_b
  && std::equal(__lhs._M_v, __lhs._M_v + __k, __rhs._M_v)
  && __lhs._M_y == __rhs._M_y); }

      










      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::shuffle_order_engine<_RandomNumberEngine1,
     __k1>& __x);

      










      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::shuffle_order_engine<_RandomNumberEngine1, __k1>& __x);

    private:
      void _M_initialize()
      {
 for (size_t __i = 0; __i < __k; ++__i)
   _M_v[__i] = _M_b();
 _M_y = _M_b();
      }

      _RandomNumberEngine _M_b;
      result_type _M_v[__k];
      result_type _M_y;
    };

  










  template<typename _RandomNumberEngine, size_t __k>
    inline bool
    operator!=(const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __lhs,
        const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __rhs)
    { return !(__lhs == __rhs); }


  


  typedef linear_congruential_engine<uint_fast32_t, 16807UL, 0UL, 2147483647UL>
  minstd_rand0;

  


  typedef linear_congruential_engine<uint_fast32_t, 48271UL, 0UL, 2147483647UL>
  minstd_rand;

  







  typedef mersenne_twister_engine<
    uint_fast32_t,
    32, 624, 397, 31,
    0x9908b0dfUL, 11,
    0xffffffffUL, 7,
    0x9d2c5680UL, 15,
    0xefc60000UL, 18, 1812433253UL> mt19937;

  


  typedef mersenne_twister_engine<
    uint_fast64_t,
    64, 312, 156, 31,
    0xb5026f5aa96619e9ULL, 29,
    0x5555555555555555ULL, 17,
    0x71d67fffeda60000ULL, 37,
    0xfff7eee000000000ULL, 43,
    6364136223846793005ULL> mt19937_64;

  typedef subtract_with_carry_engine<uint_fast32_t, 24, 10, 24>
    ranlux24_base;

  typedef subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>
    ranlux48_base;

  typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;

  typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;

  typedef shuffle_order_engine<minstd_rand0, 256> knuth_b;

  typedef minstd_rand0 default_random_engine;

  



  class random_device
  {
  public:
    
    typedef unsigned int result_type;

    
# 1595 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\random.h" 3
    explicit
    random_device(const std::string& __token = "mt19937")
    { _M_init_pretr1(__token); }

  public:



    static constexpr result_type
    min()
    { return std::numeric_limits<result_type>::min(); }

    static constexpr result_type
    max()
    { return std::numeric_limits<result_type>::max(); }

    double
    entropy() const noexcept
    { return 0.0; }

    result_type
    operator()()
    {



      return this->_M_getval_pretr1();

    }

    
    random_device(const random_device&) = delete;
    void operator=(const random_device&) = delete;

  private:

    void _M_init(const std::string& __token);
    void _M_init_pretr1(const std::string& __token);
    void _M_fini();

    result_type _M_getval();
    result_type _M_getval_pretr1();

    union
    {
      void* _M_file;
      mt19937 _M_mt;
    };
  };

   

  





  





  




  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:
      
      typedef _IntType result_type;
      
      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __a = 0,
     _IntType __b = std::numeric_limits<_IntType>::max())
 : _M_a(__a), _M_b(__b)
 {
   ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:
      


      explicit
      uniform_int_distribution(_IntType __a = 0,
      _IntType __b = std::numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }

      




      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return this->a(); }

      


      result_type
      max() const
      { return this->b(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      



      friend bool
      operator==(const uniform_int_distribution& __d1,
   const uniform_int_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  



  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }

  









  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_int_distribution<_IntType>&);

  








  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_int_distribution<_IntType>&);


  






  template<typename _RealType = double>
    class uniform_real_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef uniform_real_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 {
   ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

    public:
      





      explicit
      uniform_real_distribution(_RealType __a = _RealType(0),
    _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      uniform_real_distribution(const param_type& __p)
      : _M_param(__p)
      { }

      




      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return this->a(); }

      


      result_type
      max() const
      { return this->b(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return (__aurng() * (__p.b() - __p.a())) + __p.a();
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      



      friend bool
      operator==(const uniform_real_distribution& __d1,
   const uniform_real_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  



  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }

  









  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_real_distribution<_RealType>&);

  








  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_real_distribution<_RealType>&);

   

  





  








  template<typename _RealType = double>
    class normal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef normal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __mean = _RealType(0),
     _RealType __stddev = _RealType(1))
 : _M_mean(__mean), _M_stddev(__stddev)
 {
   ;
 }

 _RealType
 mean() const
 { return _M_mean; }

 _RealType
 stddev() const
 { return _M_stddev; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_mean == __p2._M_mean
    && __p1._M_stddev == __p2._M_stddev); }

      private:
 _RealType _M_mean;
 _RealType _M_stddev;
      };

    public:
      



      explicit
      normal_distribution(result_type __mean = result_type(0),
     result_type __stddev = result_type(1))
      : _M_param(__mean, __stddev), _M_saved_available(false)
      { }

      explicit
      normal_distribution(const param_type& __p)
      : _M_param(__p), _M_saved_available(false)
      { }

      


      void
      reset()
      { _M_saved_available = false; }

      


      _RealType
      mean() const
      { return _M_param.mean(); }

      


      _RealType
      stddev() const
      { return _M_param.stddev(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      




      template<typename _RealType1>
 friend bool
        operator==(const std::normal_distribution<_RealType1>& __d1,
     const std::normal_distribution<_RealType1>& __d2);

      









      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::normal_distribution<_RealType1>& __x);

      









      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::normal_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
      result_type _M_saved;
      bool _M_saved_available;
    };

  


  template<typename _RealType>
    inline bool
    operator!=(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }


  








  template<typename _RealType = double>
    class lognormal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef lognormal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(0),
     _RealType __s = _RealType(1))
 : _M_m(__m), _M_s(__s)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 s() const
 { return _M_s; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_s == __p2._M_s; }

      private:
 _RealType _M_m;
 _RealType _M_s;
      };

      explicit
      lognormal_distribution(_RealType __m = _RealType(0),
        _RealType __s = _RealType(1))
      : _M_param(__m, __s), _M_nd()
      { }

      explicit
      lognormal_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }

      


      void
      reset()
      { _M_nd.reset(); }

      


      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      s() const
      { return _M_param.s(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return result_type(0); }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      




      friend bool
      operator==(const lognormal_distribution& __d1,
   const lognormal_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd); }

      









      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::lognormal_distribution<_RealType1>& __x);

      









      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::lognormal_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };

  


  template<typename _RealType>
    inline bool
    operator!=(const std::lognormal_distribution<_RealType>& __d1,
        const std::lognormal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }


  








  template<typename _RealType = double>
    class gamma_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef gamma_distribution<_RealType> distribution_type;
 friend class gamma_distribution<_RealType>;

 explicit
 param_type(_RealType __alpha_val = _RealType(1),
     _RealType __beta_val = _RealType(1))
 : _M_alpha(__alpha_val), _M_beta(__beta_val)
 {
   ;
   _M_initialize();
 }

 _RealType
 alpha() const
 { return _M_alpha; }

 _RealType
 beta() const
 { return _M_beta; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_alpha == __p2._M_alpha
    && __p1._M_beta == __p2._M_beta); }

      private:
 void
 _M_initialize();

 _RealType _M_alpha;
 _RealType _M_beta;

 _RealType _M_malpha, _M_a2;
      };

    public:
      



      explicit
      gamma_distribution(_RealType __alpha_val = _RealType(1),
    _RealType __beta_val = _RealType(1))
      : _M_param(__alpha_val, __beta_val), _M_nd()
      { }

      explicit
      gamma_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }

      


      void
      reset()
      { _M_nd.reset(); }

      


      _RealType
      alpha() const
      { return _M_param.alpha(); }

      


      _RealType
      beta() const
      { return _M_param.beta(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return result_type(0); }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      




      friend bool
      operator==(const gamma_distribution& __d1,
   const gamma_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd); }

      









      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::gamma_distribution<_RealType1>& __x);

      








      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::gamma_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };

  


   template<typename _RealType>
     inline bool
     operator!=(const std::gamma_distribution<_RealType>& __d1,
  const std::gamma_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }


  





  template<typename _RealType = double>
    class chi_squared_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef chi_squared_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      chi_squared_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_gd(__n / 2)
      { }

      explicit
      chi_squared_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.n() / 2)
      { }

      


      void
      reset()
      { _M_gd.reset(); }

      


      _RealType
      n() const
      { return _M_param.n(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return result_type(0); }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return 2 * _M_gd(__urng); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return 2 * _M_gd(__urng, param_type(__p.n() / 2));
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
        { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { typename std::gamma_distribution<result_type>::param_type
     __p2(__p.n() / 2);
   this->__generate_impl(__f, __t, __urng, __p2); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
        { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { typename std::gamma_distribution<result_type>::param_type
     __p2(__p.n() / 2);
   this->__generate_impl(__f, __t, __urng, __p2); }

      




      friend bool
      operator==(const chi_squared_distribution& __d1,
   const chi_squared_distribution& __d2)
      { return __d1._M_param == __d2._M_param && __d1._M_gd == __d2._M_gd; }

      









      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::chi_squared_distribution<_RealType1>& __x);

      









      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::chi_squared_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const typename
   std::gamma_distribution<result_type>::param_type& __p);

      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd;
    };

  


  template<typename _RealType>
    inline bool
    operator!=(const std::chi_squared_distribution<_RealType>& __d1,
        const std::chi_squared_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }


  





  template<typename _RealType = double>
    class cauchy_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef cauchy_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      cauchy_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      cauchy_distribution(const param_type& __p)
      : _M_param(__p)
      { }

      


      void
      reset()
      { }

      


      _RealType
      a() const
      { return _M_param.a(); }

      _RealType
      b() const
      { return _M_param.b(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      



      friend bool
      operator==(const cauchy_distribution& __d1,
   const cauchy_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  



  template<typename _RealType>
    inline bool
    operator!=(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }

  









  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::cauchy_distribution<_RealType>& __x);

  









  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::cauchy_distribution<_RealType>& __x);


  









  template<typename _RealType = double>
    class fisher_f_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef fisher_f_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(1),
     _RealType __n = _RealType(1))
 : _M_m(__m), _M_n(__n)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_m;
 _RealType _M_n;
      };

      explicit
      fisher_f_distribution(_RealType __m = _RealType(1),
       _RealType __n = _RealType(1))
      : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2)
      { }

      explicit
      fisher_f_distribution(const param_type& __p)
      : _M_param(__p), _M_gd_x(__p.m() / 2), _M_gd_y(__p.n() / 2)
      { }

      


      void
      reset()
      {
 _M_gd_x.reset();
 _M_gd_y.reset();
      }

      


      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      n() const
      { return _M_param.n(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return result_type(0); }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return (_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return ((_M_gd_x(__urng, param_type(__p.m() / 2)) * n())
    / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      




      friend bool
      operator==(const fisher_f_distribution& __d1,
   const fisher_f_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_gd_x == __d2._M_gd_x
  && __d1._M_gd_y == __d2._M_gd_y); }

      









      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::fisher_f_distribution<_RealType1>& __x);

      









      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::fisher_f_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;
    };

  


  template<typename _RealType>
    inline bool
    operator!=(const std::fisher_f_distribution<_RealType>& __d1,
        const std::fisher_f_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }

  








  template<typename _RealType = double>
    class student_t_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef student_t_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      student_t_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2)
      { }

      explicit
      student_t_distribution(const param_type& __p)
      : _M_param(__p), _M_nd(), _M_gd(__p.n() / 2, 2)
      { }

      


      void
      reset()
      {
 _M_nd.reset();
 _M_gd.reset();
      }

      


      _RealType
      n() const
      { return _M_param.n(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng)
        { return _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng)); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;

   const result_type __g = _M_gd(__urng, param_type(__p.n() / 2, 2));
   return _M_nd(__urng) * std::sqrt(__p.n() / __g);
        }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      




      friend bool
      operator==(const student_t_distribution& __d1,
   const student_t_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd && __d1._M_gd == __d2._M_gd); }

      









      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::student_t_distribution<_RealType1>& __x);

      









      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::student_t_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
      std::gamma_distribution<result_type> _M_gd;
    };

  


  template<typename _RealType>
    inline bool
    operator!=(const std::student_t_distribution<_RealType>& __d1,
        const std::student_t_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }


   

  





  





  class bernoulli_distribution
  {
  public:
    
    typedef bool result_type;
    
    struct param_type
    {
      typedef bernoulli_distribution distribution_type;

      explicit
      param_type(double __p = 0.5)
      : _M_p(__p)
      {
 ;
      }

      double
      p() const
      { return _M_p; }

      friend bool
      operator==(const param_type& __p1, const param_type& __p2)
      { return __p1._M_p == __p2._M_p; }

    private:
      double _M_p;
    };

  public:
    





    explicit
    bernoulli_distribution(double __p = 0.5)
    : _M_param(__p)
    { }

    explicit
    bernoulli_distribution(const param_type& __p)
    : _M_param(__p)
    { }

    




    void
    reset() { }

    


    double
    p() const
    { return _M_param.p(); }

    


    param_type
    param() const
    { return _M_param; }

    



    void
    param(const param_type& __param)
    { _M_param = __param; }

    


    result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }

    


    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }

    


    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng)
      { return this->operator()(__urng, _M_param); }

    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);
 if ((__aurng() - __aurng.min())
      < __p.p() * (__aurng.max() - __aurng.min()))
   return true;
 return false;
      }

    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng)
      { this->__generate(__f, __t, __urng, _M_param); }

    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng, const param_type& __p)
      { this->__generate_impl(__f, __t, __urng, __p); }

    template<typename _UniformRandomNumberGenerator>
      void
      __generate(result_type* __f, result_type* __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      { this->__generate_impl(__f, __t, __urng, __p); }

    



    friend bool
    operator==(const bernoulli_distribution& __d1,
        const bernoulli_distribution& __d2)
    { return __d1._M_param == __d2._M_param; }

  private:
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p);

    param_type _M_param;
  };

  



  inline bool
  operator!=(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return !(__d1 == __d2); }

  









  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::bernoulli_distribution& __x);

  








  template<typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::bernoulli_distribution& __x)
    {
      double __p;
      __is >> __p;
      __x.param(bernoulli_distribution::param_type(__p));
      return __is;
    }


  






  template<typename _IntType = int>
    class binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:
      
      typedef _IntType result_type;
      
      struct param_type
      {
 typedef binomial_distribution<_IntType> distribution_type;
 friend class binomial_distribution<_IntType>;

 explicit
 param_type(_IntType __t = _IntType(1), double __p = 0.5)
 : _M_t(__t), _M_p(__p)
 {
  

                     ;
   _M_initialize();
 }

 _IntType
 t() const
 { return _M_t; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize();

 _IntType _M_t;
 double _M_p;

 double _M_q;




 bool _M_easy;
      };

      
      explicit
      binomial_distribution(_IntType __t = _IntType(1),
       double __p = 0.5)
      : _M_param(__t, __p), _M_nd()
      { }

      explicit
      binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }

      


      void
      reset()
      { _M_nd.reset(); }

      


      _IntType
      t() const
      { return _M_param.t(); }

      


      double
      p() const
      { return _M_param.p(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return 0; }

      


      result_type
      max() const
      { return _M_param.t(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      




 friend bool
        operator==(const binomial_distribution& __d1,
     const binomial_distribution& __d2)



        { return __d1._M_param == __d2._M_param; }


      









      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::binomial_distribution<_IntType1>& __x);

      









      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::binomial_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      template<typename _UniformRandomNumberGenerator>
 result_type
 _M_waiting(_UniformRandomNumberGenerator& __urng,
     _IntType __t, double __q);

      param_type _M_param;

      
      std::normal_distribution<double> _M_nd;
    };

  


  template<typename _IntType>
    inline bool
    operator!=(const std::binomial_distribution<_IntType>& __d1,
        const std::binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }


  






  template<typename _IntType = int>
    class geometric_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:
      
      typedef _IntType result_type;
      
      struct param_type
      {
 typedef geometric_distribution<_IntType> distribution_type;
 friend class geometric_distribution<_IntType>;

 explicit
 param_type(double __p = 0.5)
 : _M_p(__p)
 {
   ;
   _M_initialize();
 }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize()
 { _M_log_1_p = std::log(1.0 - _M_p); }

 double _M_p;

 double _M_log_1_p;
      };

      
      explicit
      geometric_distribution(double __p = 0.5)
      : _M_param(__p)
      { }

      explicit
      geometric_distribution(const param_type& __p)
      : _M_param(__p)
      { }

      




      void
      reset() { }

      


      double
      p() const
      { return _M_param.p(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return 0; }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      



      friend bool
      operator==(const geometric_distribution& __d1,
   const geometric_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  



  template<typename _IntType>
    inline bool
    operator!=(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }

  









  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::geometric_distribution<_IntType>& __x);

  








  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::geometric_distribution<_IntType>& __x);


  






  template<typename _IntType = int>
    class negative_binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:
      
      typedef _IntType result_type;
      
      struct param_type
      {
 typedef negative_binomial_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __k = 1, double __p = 0.5)
 : _M_k(__k), _M_p(__p)
 {
   ;
 }

 _IntType
 k() const
 { return _M_k; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }

      private:
 _IntType _M_k;
 double _M_p;
      };

      explicit
      negative_binomial_distribution(_IntType __k = 1, double __p = 0.5)
      : _M_param(__k, __p), _M_gd(__k, (1.0 - __p) / __p)
      { }

      explicit
      negative_binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.k(), (1.0 - __p.p()) / __p.p())
      { }

      


      void
      reset()
      { _M_gd.reset(); }

      


      _IntType
      k() const
      { return _M_param.k(); }

      


      double
      p() const
      { return _M_param.p(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return result_type(0); }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng);

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      




      friend bool
      operator==(const negative_binomial_distribution& __d1,
   const negative_binomial_distribution& __d2)
      { return __d1._M_param == __d2._M_param && __d1._M_gd == __d2._M_gd; }

      










      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::negative_binomial_distribution<_IntType1>& __x);

      









      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::negative_binomial_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::gamma_distribution<double> _M_gd;
    };

  


  template<typename _IntType>
    inline bool
    operator!=(const std::negative_binomial_distribution<_IntType>& __d1,
        const std::negative_binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }


   

  





  






  template<typename _IntType = int>
    class poisson_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:
      
      typedef _IntType result_type;
      
      struct param_type
      {
 typedef poisson_distribution<_IntType> distribution_type;
 friend class poisson_distribution<_IntType>;

 explicit
 param_type(double __mean = 1.0)
 : _M_mean(__mean)
 {
   ;
   _M_initialize();
 }

 double
 mean() const
 { return _M_mean; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_mean == __p2._M_mean; }

      private:
 
 void
 _M_initialize();

 double _M_mean;

 double _M_lm_thr;



      };

      
      explicit
      poisson_distribution(double __mean = 1.0)
      : _M_param(__mean), _M_nd()
      { }

      explicit
      poisson_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }

      


      void
      reset()
      { _M_nd.reset(); }

      


      double
      mean() const
      { return _M_param.mean(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return 0; }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

       




      friend bool
      operator==(const poisson_distribution& __d1,
   const poisson_distribution& __d2)



      { return __d1._M_param == __d2._M_param; }


      









      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::poisson_distribution<_IntType1>& __x);

      









      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::poisson_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      
      std::normal_distribution<double> _M_nd;
    };

  


  template<typename _IntType>
    inline bool
    operator!=(const std::poisson_distribution<_IntType>& __d1,
        const std::poisson_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }


  














  template<typename _RealType = double>
    class exponential_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef exponential_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __lambda = _RealType(1))
 : _M_lambda(__lambda)
 {
   ;
 }

 _RealType
 lambda() const
 { return _M_lambda; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_lambda == __p2._M_lambda; }

      private:
 _RealType _M_lambda;
      };

    public:
      



      explicit
      exponential_distribution(const result_type& __lambda = result_type(1))
      : _M_param(__lambda)
      { }

      explicit
      exponential_distribution(const param_type& __p)
      : _M_param(__p)
      { }

      




      void
      reset() { }

      


      _RealType
      lambda() const
      { return _M_param.lambda(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return result_type(0); }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return -std::log(result_type(1) - __aurng()) / __p.lambda();
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      



      friend bool
      operator==(const exponential_distribution& __d1,
   const exponential_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  



  template<typename _RealType>
    inline bool
    operator!=(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }

  









  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::exponential_distribution<_RealType>& __x);

  









  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::exponential_distribution<_RealType>& __x);


  








  template<typename _RealType = double>
    class weibull_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef weibull_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(1),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      weibull_distribution(_RealType __a = _RealType(1),
      _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      weibull_distribution(const param_type& __p)
      : _M_param(__p)
      { }

      


      void
      reset()
      { }

      


      _RealType
      a() const
      { return _M_param.a(); }

      


      _RealType
      b() const
      { return _M_param.b(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return result_type(0); }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      



      friend bool
      operator==(const weibull_distribution& __d1,
   const weibull_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

   



  template<typename _RealType>
    inline bool
    operator!=(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }

  









  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::weibull_distribution<_RealType>& __x);

  









  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::weibull_distribution<_RealType>& __x);


  








  template<typename _RealType = double>
    class extreme_value_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef extreme_value_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      extreme_value_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      extreme_value_distribution(const param_type& __p)
      : _M_param(__p)
      { }

      


      void
      reset()
      { }

      


      _RealType
      a() const
      { return _M_param.a(); }

      


      _RealType
      b() const
      { return _M_param.b(); }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }

      


      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      



      friend bool
      operator==(const extreme_value_distribution& __d1,
   const extreme_value_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  



  template<typename _RealType>
    inline bool
    operator!=(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }

  









  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::extreme_value_distribution<_RealType>& __x);

  









  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::extreme_value_distribution<_RealType>& __x);


  





  template<typename _IntType = int>
    class discrete_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:
      
      typedef _IntType result_type;
      
      struct param_type
      {
 typedef discrete_distribution<_IntType> distribution_type;
 friend class discrete_distribution<_IntType>;

 param_type()
 : _M_prob(), _M_cp()
 { }

 template<typename _InputIterator>
   param_type(_InputIterator __wbegin,
       _InputIterator __wend)
   : _M_prob(__wbegin, __wend), _M_cp()
   { _M_initialize(); }

 param_type(initializer_list<double> __wil)
 : _M_prob(__wil.begin(), __wil.end()), _M_cp()
 { _M_initialize(); }

 template<typename _Func>
   param_type(size_t __nw, double __xmin, double __xmax,
       _Func __fw);

 
 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<double>
 probabilities() const
 { return _M_prob.empty() ? std::vector<double>(1, 1.0) : _M_prob; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_prob == __p2._M_prob; }

      private:
 void
 _M_initialize();

 std::vector<double> _M_prob;
 std::vector<double> _M_cp;
      };

      discrete_distribution()
      : _M_param()
      { }

      template<typename _InputIterator>
 discrete_distribution(_InputIterator __wbegin,
         _InputIterator __wend)
 : _M_param(__wbegin, __wend)
 { }

      discrete_distribution(initializer_list<double> __wl)
      : _M_param(__wl)
      { }

      template<typename _Func>
 discrete_distribution(size_t __nw, double __xmin, double __xmax,
         _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      discrete_distribution(const param_type& __p)
      : _M_param(__p)
      { }

      


      void
      reset()
      { }

      


      std::vector<double>
      probabilities() const
      {
 return _M_param._M_prob.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_prob;
      }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      { return result_type(0); }

      


      result_type
      max() const
      {
 return _M_param._M_prob.empty()
   ? result_type(0) : result_type(_M_param._M_prob.size() - 1);
      }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      



      friend bool
      operator==(const discrete_distribution& __d1,
   const discrete_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

      









      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::discrete_distribution<_IntType1>& __x);

      










      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::discrete_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  



  template<typename _IntType>
    inline bool
    operator!=(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }


  





  template<typename _RealType = double>
    class piecewise_constant_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef piecewise_constant_distribution<_RealType> distribution_type;
 friend class piecewise_constant_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bi, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);

 
 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(1, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
      };

      explicit
      piecewise_constant_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_constant_distribution(_InputIteratorB __bfirst,
     _InputIteratorB __bend,
     _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_constant_distribution(initializer_list<_RealType> __bl,
     _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_constant_distribution(size_t __nw,
     _RealType __xmin, _RealType __xmax,
     _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_constant_distribution(const param_type& __p)
      : _M_param(__p)
      { }

      


      void
      reset()
      { }

      


      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }

      


      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_den;
      }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }

      


      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      



      friend bool
      operator==(const piecewise_constant_distribution& __d1,
   const piecewise_constant_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

      










      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::piecewise_constant_distribution<_RealType1>& __x);

      










      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::piecewise_constant_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  



  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }


  





  template<typename _RealType = double>
    class piecewise_linear_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:
      
      typedef _RealType result_type;
      
      struct param_type
      {
 typedef piecewise_linear_distribution<_RealType> distribution_type;
 friend class piecewise_linear_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp(), _M_m()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bl, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);

 
 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(2, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_int == __p2._M_int
    && __p1._M_den == __p2._M_den); }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
 std::vector<double> _M_m;
      };

      explicit
      piecewise_linear_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_linear_distribution(_InputIteratorB __bfirst,
          _InputIteratorB __bend,
          _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_linear_distribution(initializer_list<_RealType> __bl,
          _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_linear_distribution(size_t __nw,
          _RealType __xmin, _RealType __xmax,
          _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_linear_distribution(const param_type& __p)
      : _M_param(__p)
      { }

      


      void
      reset()
      { }

      


      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }

      



      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(2, 1.0) : _M_param._M_den;
      }

      


      param_type
      param() const
      { return _M_param; }

      



      void
      param(const param_type& __param)
      { _M_param = __param; }

      


      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }

      


      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }

      


      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      



      friend bool
      operator==(const piecewise_linear_distribution& __d1,
   const piecewise_linear_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

      










      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::piecewise_linear_distribution<_RealType1>& __x);

      










      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::piecewise_linear_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  



  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }


   

   

  





  



  class seed_seq
  {

  public:
    
    typedef uint_least32_t result_type;

    
    seed_seq()
    : _M_v()
    { }

    template<typename _IntType>
      seed_seq(std::initializer_list<_IntType> il);

    template<typename _InputIterator>
      seed_seq(_InputIterator __begin, _InputIterator __end);

    
    template<typename _RandomAccessIterator>
      void
      generate(_RandomAccessIterator __begin, _RandomAccessIterator __end);

    
    size_t size() const
    { return _M_v.size(); }

    template<typename OutputIterator>
      void
      param(OutputIterator __dest) const
      { std::copy(_M_v.begin(), _M_v.end(), __dest); }

  private:
    
    std::vector<result_type> _M_v;
  };

   

   


} 
# 50 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\opt_random.h" 1 3






























#define _BITS_OPT_RANDOM_H 1

       
# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\opt_random.h" 3
# 51 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\random.tcc" 1 3






























#define _RANDOM_TCC 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\numeric" 1 3























































#define _GLIBCXX_NUMERIC 1

       
# 59 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\numeric" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 61 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\numeric" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_iterator_base_types.h" 1 3

























































# 62 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\numeric" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_numeric.h" 1 3
























































#define _STL_NUMERIC_H 1

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\concept_check.h" 1 3




























# 60 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_numeric.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\debug\\debug.h" 1 3



























# 61 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_numeric.h" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\move.h" 1 3




























# 62 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_numeric.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  










  template<typename _ForwardIterator, typename _Tp>
    void
    iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)
    {
      
     

     

      ;

      for (; __first != __last; ++__first)
 {
   *__first = __value;
   ++__value;
 }
    }


} 



namespace std __attribute__ ((__visibility__ ("default")))
{


  










  template<typename _InputIterator, typename _Tp>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
    {
      
     
      ;

      for (; __first != __last; ++__first)
 __init = __init + *__first;
      return __init;
    }

  












  template<typename _InputIterator, typename _Tp, typename _BinaryOperation>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,
        _BinaryOperation __binary_op)
    {
      
     
      ;

      for (; __first != __last; ++__first)
 __init = __binary_op(__init, *__first);
      return __init;
    }

  













  template<typename _InputIterator1, typename _InputIterator2, typename _Tp>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init)
    {
      
     
     
      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __init + (*__first1 * *__first2);
      return __init;
    }

  















  template<typename _InputIterator1, typename _InputIterator2, typename _Tp,
    typename _BinaryOperation1, typename _BinaryOperation2>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init,
    _BinaryOperation1 __binary_op1,
    _BinaryOperation2 __binary_op2)
    {
      
     
     
      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __binary_op1(__init, __binary_op2(*__first1, *__first2));
      return __init;
    }

  













  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;

      
     
     

      ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __value + *__first;
   *++__result = __value;
 }
      return ++__result;
    }

  














  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;

      
     
     

      ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __binary_op(__value, *__first);
   *++__result = __value;
 }
      return ++__result;
    }

  













  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    adjacent_difference(_InputIterator __first,
   _InputIterator __last, _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;

      
     
     

      ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __tmp - __value;
   __value = std::move(__tmp);
 }
      return ++__result;
    }

  















  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    adjacent_difference(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;

      
     
     

      ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __binary_op(__tmp, __value);
   __value = std::move(__tmp);
 }
      return ++__result;
    }


} 
# 63 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\numeric" 2 3













# 34 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\random.tcc" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
  


  namespace __detail
  {
 

    
    
    
    
    
    
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      _Tp
      _Mod<_Tp, __m, __a, __c, false, true>::
      __calc(_Tp __x)
      {
 if (__a == 1)
   __x %= __m;
 else
   {
     static const _Tp __q = __m / __a;
     static const _Tp __r = __m % __a;

     _Tp __t1 = __a * (__x % __q);
     _Tp __t2 = __r * (__x / __q);
     if (__t1 >= __t2)
       __x = __t1 - __t2;
     else
       __x = __m - __t2 + __t1;
   }

 if (__c != 0)
   {
     const _Tp __d = __m - __x;
     if (__d > __c)
       __x += __c;
     else
       __x = __c - __d;
   }
 return __x;
      }

    template<typename _InputIterator, typename _OutputIterator,
      typename _Tp>
      _OutputIterator
      __normalize(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, const _Tp& __factor)
      {
 for (; __first != __last; ++__first, ++__result)
   *__result = *__first / __factor;
 return __result;
      }

 
  } 



  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::multiplier;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::increment;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::modulus;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::default_seed;

  



  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    void
    linear_congruential_engine<_UIntType, __a, __c, __m>::
    seed(result_type __s)
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
   && (__detail::__mod<_UIntType, __m>(__s) == 0))
 _M_x = 1;
      else
 _M_x = __detail::__mod<_UIntType, __m>(__s);
    }

  


  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      linear_congruential_engine<_UIntType, __a, __c, __m>::
      seed(_Sseq& __q)
      {
 const _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits
                                 : std::__lg(__m);
 const _UIntType __k = (__k0 + 31) / 32;
 uint_least32_t __arr[__k + 3];
 __q.generate(__arr + 0, __arr + __k + 3);
 _UIntType __factor = 1u;
 _UIntType __sum = 0u;
 for (size_t __j = 0; __j < __k; ++__j)
   {
     __sum += __arr[__j + 3] * __factor;
     __factor *= __detail::_Shift<_UIntType, 32>::__value;
   }
 seed(__sum);
      }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const linear_congruential_engine<_UIntType,
      __a, __c, __m>& __lcr)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__os.widen(' '));

      __os << __lcr._M_x;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        linear_congruential_engine<_UIntType, __a, __c, __m>& __lcr)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec);

      __is >> __lcr._M_x;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::word_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::state_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::shift_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::mask_bits;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::xor_mask;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_u;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_d;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_s;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_b;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_t;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_c;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_l;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
                                              initialization_multiplier;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::default_seed;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
 __detail::_Shift<_UIntType, __w>::__value>(__sd);

      for (size_t __i = 1; __i < state_size; ++__i)
 {
   _UIntType __x = _M_x[__i - 1];
   __x ^= __x >> (__w - 2);
   __x *= __f;
   __x += __detail::__mod<_UIntType, __n>(__i);
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__x);
 }
      _M_p = state_size;
    }

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
         __s, __b, __t, __c, __l, __f>::
      seed(_Sseq& __q)
      {
 const _UIntType __upper_mask = (~_UIntType()) << __r;
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__n * __k];
 __q.generate(__arr + 0, __arr + __n * __k);

 bool __zero = true;
 for (size_t __i = 0; __i < state_size; ++__i)
   {
     _UIntType __factor = 1u;
     _UIntType __sum = 0u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);

     if (__zero)
       {
  if (__i == 0)
    {
      if ((_M_x[0] & __upper_mask) != 0u)
        __zero = false;
    }
  else if (_M_x[__i] != 0u)
    __zero = false;
       }
   }
        if (__zero)
          _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;
 _M_p = state_size;
      }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    _M_gen_rand(void)
    {
      const _UIntType __upper_mask = (~_UIntType()) << __r;
      const _UIntType __lower_mask = ~__upper_mask;

      for (size_t __k = 0; __k < (__n - __m); ++__k)
        {
   _UIntType __y = ((_M_x[__k] & __upper_mask)
      | (_M_x[__k + 1] & __lower_mask));
   _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
        }

      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
 {
   _UIntType __y = ((_M_x[__k] & __upper_mask)
      | (_M_x[__k + 1] & __lower_mask));
   _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
 }

      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
         | (_M_x[0] & __lower_mask));
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    discard(unsigned long long __z)
    {
      while (__z > state_size - _M_p)
 {
   __z -= state_size - _M_p;
   _M_gen_rand();
 }
      _M_p += __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    typename
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::result_type
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    operator()()
    {
      
      if (_M_p >= state_size)
 _M_gen_rand();

      
      result_type __z = _M_x[_M_p++];
      __z ^= (__z >> __u) & __d;
      __z ^= (__z << __s) & __b;
      __z ^= (__z << __t) & __c;
      __z ^= (__z >> __l);

      return __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __n; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_p;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __n; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_p;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::word_size;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::short_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::long_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr _UIntType
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::default_seed;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    void
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    seed(result_type __value)
    {
      std::linear_congruential_engine<result_type, 40014u, 0u, 2147483563u>
 __lcg(__value == 0u ? default_seed : __value);

      const size_t __n = (__w + 31) / 32;

      for (size_t __i = 0; __i < long_lag; ++__i)
 {
   _UIntType __sum = 0u;
   _UIntType __factor = 1u;
   for (size_t __j = 0; __j < __n; ++__j)
     {
       __sum += __detail::__mod<uint_least32_t,
         __detail::_Shift<uint_least32_t, 32>::__value>
    (__lcg()) * __factor;
       __factor *= __detail::_Shift<_UIntType, 32>::__value;
     }
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__sum);
 }
      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      seed(_Sseq& __q)
      {
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__r * __k];
 __q.generate(__arr + 0, __arr + __r * __k);

 for (size_t __i = 0; __i < long_lag; ++__i)
   {
     _UIntType __sum = 0u;
     _UIntType __factor = 1u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);
   }
 _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
 _M_p = 0;
      }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    typename subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      result_type
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    operator()()
    {
      
      long __ps = _M_p - short_lag;
      if (__ps < 0)
 __ps += long_lag;

      
      
      
      _UIntType __xi;
      if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)
 {
   __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;
   _M_carry = 0;
 }
      else
 {
   __xi = (__detail::_Shift<_UIntType, __w>::__value
    - _M_x[_M_p] - _M_carry + _M_x[__ps]);
   _M_carry = 1;
 }
      _M_x[_M_p] = __xi;

      
      if (++_M_p >= long_lag)
 _M_p = 0;

      return __xi;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const subtract_with_carry_engine<_UIntType,
      __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __r; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_carry << __space << __x._M_p;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        subtract_with_carry_engine<_UIntType, __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __r; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_carry;
      __is >> __x._M_p;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::block_size;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::used_block;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    typename discard_block_engine<_RandomNumberEngine,
      __p, __r>::result_type
    discard_block_engine<_RandomNumberEngine, __p, __r>::
    operator()()
    {
      if (_M_n >= used_block)
 {
   _M_b.discard(block_size - _M_n);
   _M_n = 0;
 }
      ++_M_n;
      return _M_b();
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discard_block_engine<_RandomNumberEngine,
        __p, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base() << __space << __x._M_n;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discard_block_engine<_RandomNumberEngine, __p, __r>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b >> __x._M_n;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    typename independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
      result_type
    independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
    operator()()
    {
      typedef typename _RandomNumberEngine::result_type _Eresult_type;
      const _Eresult_type __r
 = (_M_b.max() - _M_b.min() < std::numeric_limits<_Eresult_type>::max()
    ? _M_b.max() - _M_b.min() + 1 : 0);
      const unsigned __edig = std::numeric_limits<_Eresult_type>::digits;
      const unsigned __m = __r ? std::__lg(__r) : __edig;

      typedef typename std::common_type<_Eresult_type, result_type>::type
 __ctype;
      const unsigned __cdig = std::numeric_limits<__ctype>::digits;

      unsigned __n, __n0;
      __ctype __s0, __s1, __y0, __y1;

      for (size_t __i = 0; __i < 2; ++__i)
 {
   __n = (__w + __m - 1) / __m + __i;
   __n0 = __n - __w % __n;
   const unsigned __w0 = __w / __n; 

   __s0 = 0;
   __s1 = 0;
   if (__w0 < __cdig)
     {
       __s0 = __ctype(1) << __w0;
       __s1 = __s0 << 1;
     }

   __y0 = 0;
   __y1 = 0;
   if (__r)
     {
       __y0 = __s0 * (__r / __s0);
       if (__s1)
  __y1 = __s1 * (__r / __s1);

       if (__r - __y0 <= __y0 / __n)
  break;
     }
   else
     break;
 }

      result_type __sum = 0;
      for (size_t __k = 0; __k < __n0; ++__k)
 {
   __ctype __u;
   do
     __u = _M_b() - _M_b.min();
   while (__y0 && __u >= __y0);
   __sum = __s0 * __sum + (__s0 ? __u % __s0 : __u);
 }
      for (size_t __k = __n0; __k < __n; ++__k)
 {
   __ctype __u;
   do
     __u = _M_b() - _M_b.min();
   while (__y1 && __u >= __y1);
   __sum = __s1 * __sum + (__s1 ? __u % __s1 : __u);
 }
      return __sum;
    }


  template<typename _RandomNumberEngine, size_t __k>
    constexpr size_t
    shuffle_order_engine<_RandomNumberEngine, __k>::table_size;

  template<typename _RandomNumberEngine, size_t __k>
    typename shuffle_order_engine<_RandomNumberEngine, __k>::result_type
    shuffle_order_engine<_RandomNumberEngine, __k>::
    operator()()
    {
      size_t __j = __k * ((_M_y - _M_b.min())
     / (_M_b.max() - _M_b.min() + 1.0L));
      _M_y = _M_v[__j];
      _M_v[__j] = _M_b();

      return _M_y;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base();
      for (size_t __i = 0; __i < __k; ++__i)
 __os << __space << __x._M_v[__i];
      __os << __space << __x._M_y;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b;
      for (size_t __i = 0; __i < __k; ++__i)
 __is >> __x._M_v[__i];
      __is >> __x._M_y;

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {
     
     const __uctype __uerange = __urange + 1; 
     const __uctype __scaling = __urngrange / __uerange;
     const __uctype __past = __uerange * __scaling;
     do
       __ret = __uctype(__urng()) - __urngmin;
     while (__ret >= __past);
     __ret /= __scaling;
   }
 else if (__urngrange < __urange)
   {
     
     













     __uctype __tmp; 
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }


  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      uniform_int_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {
     if (__detail::_Power_of_2(__urngrange + 1)
  && __detail::_Power_of_2(__urange + 1))
       {
  while (__f != __t)
    {
      __ret = __uctype(__urng()) - __urngmin;
      *__f++ = (__ret & __urange) + __param.a();
    }
       }
     else
       {
  
  const __uctype __uerange = __urange + 1; 
  const __uctype __scaling = __urngrange / __uerange;
  const __uctype __past = __uerange * __scaling;
  while (__f != __t)
    {
      do
        __ret = __uctype(__urng()) - __urngmin;
      while (__ret >= __past);
      *__f++ = __ret / __scaling + __param.a();
    }
       }
   }
 else if (__urngrange < __urange)
   {
     
     













     __uctype __tmp; 
     while (__f != __t)
       {
  do
    {
      const __uctype __uerngrange = __urngrange + 1;
      __tmp = (__uerngrange * operator()
        (__urng, param_type(0, __urange / __uerngrange)));
      __ret = __tmp + (__uctype(__urng()) - __urngmin);
    }
  while (__ret > __urange || __ret < __tmp);
  *__f++ = __ret;
       }
   }
 else
   while (__f != __t)
     *__f++ = __uctype(__urng()) - __urngmin + __param.a();
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_int_distribution<_IntType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      uniform_real_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 auto __range = __p.b() - __p.a();
 while (__f != __t)
   *__f++ = __aurng() * __range + __p.a();
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_real_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _ForwardIterator,
    typename _UniformRandomNumberGenerator>
    void
    std::bernoulli_distribution::
    __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
      _UniformRandomNumberGenerator& __urng,
      const param_type& __p)
    {
     
      __detail::_Adaptor<_UniformRandomNumberGenerator, double>
 __aurng(__urng);
      auto __limit = __p.p() * (__aurng.max() - __aurng.min());

      while (__f != __t)
 *__f++ = (__aurng() - __aurng.min()) < __limit;
    }

  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const bernoulli_distribution& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename geometric_distribution<_IntType>::result_type
      geometric_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 
 
 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;
 
 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 double __cand;
 do
   __cand = std::floor(std::log(1.0 - __aurng()) / __param._M_log_1_p);
 while (__cand >= __thr);

 return result_type(__cand + __naf);
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      geometric_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 
 
 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;
 
 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 while (__f != __t)
   {
     double __cand;
     do
       __cand = std::floor(std::log(1.0 - __aurng())
      / __param._M_log_1_p);
     while (__cand >= __thr);

     *__f++ = __cand + __naf;
   }
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __p;
      __is >> __p;
      __x.param(typename geometric_distribution<_IntType>::param_type(__p));

      __is.flags(__flags);
      return __is;
    }

  
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng)
      {
 const double __y = _M_gd(__urng);

 
 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 typedef typename std::gamma_distribution<double>::param_type
   param_type;

 const double __y =
   _M_gd(__urng, param_type(__p.k(), (1.0 - __p.p()) / __p.p()));

 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      negative_binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   {
     const double __y = _M_gd(__urng);

     
     std::poisson_distribution<result_type> __poisson(__y);
     *__f++ = __poisson(__urng);
   }
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      negative_binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typename std::gamma_distribution<result_type>::param_type
   __p2(__p.k(), (1.0 - __p.p()) / __p.p());

 while (__f != __t)
   {
     const double __y = _M_gd(__urng, __p2);

     std::poisson_distribution<result_type> __poisson(__y);
     *__f++ = __poisson(__urng);
   }
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.k() << __space << __x.p()
    << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _IntType __k;
      double __p;
      __is >> __k >> __p >> __x._M_gd;
      __x.param(typename negative_binomial_distribution<_IntType>::
  param_type(__k, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    poisson_distribution<_IntType>::param_type::
    _M_initialize()
    {
# 1419 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\random.tcc" 3
 _M_lm_thr = std::exp(-_M_mean);
      }

  









  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename poisson_distribution<_IntType>::result_type
      poisson_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);
# 1519 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\random.tcc" 3
   {
     _IntType __x = 0;
     double __prod = 1.0;

     do
       {
  __prod *= __aurng();
  __x += 1;
       }
     while (__prod > __param._M_lm_thr);

     return __x - 1;
   }
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      poisson_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 
 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.mean() << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __mean;
      __is >> __mean >> __x._M_nd;
      __x.param(typename poisson_distribution<_IntType>::param_type(__mean));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    binomial_distribution<_IntType>::param_type::
    _M_initialize()
    {
      const double __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;

      _M_easy = true;
# 1644 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\random.tcc" 3
 _M_q = -std::log(1 - __p12);
    }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      _M_waiting(_UniformRandomNumberGenerator& __urng,
   _IntType __t, double __q)
      {
 _IntType __x = 0;
 double __sum = 0.0;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 do
   {
     if (__t == __x)
       return __x;
     const double __e = -std::log(1.0 - __aurng());
     __sum += __e / (__t - __x);
     __x += 1;
   }
 while (__sum <= __q);

 return __x - 1;
      }

  









  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 const _IntType __t = __param.t();
 const double __p = __param.p();
 const double __p12 = __p <= 0.5 ? __p : 1.0 - __p;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);
# 1794 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\random.tcc" 3
   __ret = _M_waiting(__urng, __t, __param._M_q);

 if (__p12 != __p)
   __ret = __t - __ret;
 return __ret;
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 
 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.t() << __space << __x.p()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __t;
      double __p;
      __is >> __t >> __p >> __x._M_nd;
      __x.param(typename binomial_distribution<_IntType>::
  param_type(__t, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::exponential_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 while (__f != __t)
   *__f++ = -std::log(result_type(1) - __aurng()) / __p.lambda();
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.lambda();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __lambda;
      __is >> __lambda;
      __x.param(typename exponential_distribution<_RealType>::
  param_type(__lambda));

      __is.flags(__flags);
      return __is;
    }


  





  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename normal_distribution<_RealType>::result_type
      normal_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 if (_M_saved_available)
   {
     _M_saved_available = false;
     __ret = _M_saved;
   }
 else
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     __ret = __y * __mult;
   }

 __ret = __ret * __param.stddev() + __param.mean();
 return __ret;
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      normal_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 if (__f == __t)
   return;

 if (_M_saved_available)
   {
     _M_saved_available = false;
     *__f++ = _M_saved * __param.stddev() + __param.mean();

     if (__f == __t)
       return;
   }

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 while (__f + 1 < __t)
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     *__f++ = __y * __mult * __param.stddev() + __param.mean();
     *__f++ = __x * __mult * __param.stddev() + __param.mean();
   }

 if (__f != __t)
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     *__f = __y * __mult * __param.stddev() + __param.mean();
   }
      }

  template<typename _RealType>
    bool
    operator==(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    {
      if (__d1._M_param == __d2._M_param
   && __d1._M_saved_available == __d2._M_saved_available)
 {
   if (__d1._M_saved_available
       && __d1._M_saved == __d2._M_saved)
     return true;
   else if(!__d1._M_saved_available)
     return true;
   else
     return false;
 }
      else
 return false;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const normal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.mean() << __space << __x.stddev()
    << __space << __x._M_saved_available;
      if (__x._M_saved_available)
 __os << __space << __x._M_saved;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        normal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      double __mean, __stddev;
      __is >> __mean >> __stddev
    >> __x._M_saved_available;
      if (__x._M_saved_available)
 __is >> __x._M_saved;
      __x.param(typename normal_distribution<_RealType>::
  param_type(__mean, __stddev));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      lognormal_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

   while (__f != __t)
     *__f++ = std::exp(__p.s() * _M_nd(__urng) + __p.m());
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.s()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __s;
      __is >> __m >> __s >> __x._M_nd;
      __x.param(typename lognormal_distribution<_RealType>::
  param_type(__m, __s));

      __is.flags(__flags);
      return __is;
    }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::chi_squared_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = 2 * _M_gd(__urng);
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::chi_squared_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const typename
        std::gamma_distribution<result_type>::param_type& __p)
      {

 while (__f != __t)
   *__f++ = 2 * _M_gd(__urng, __p);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_gd;
      __x.param(typename chi_squared_distribution<_RealType>::
  param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename cauchy_distribution<_RealType>::result_type
      cauchy_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 _RealType __u;
 do
   __u = __aurng();
 while (__u == 0.5);

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 return __p.a() + __p.b() * std::tan(__pi * __u);
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      cauchy_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 while (__f != __t)
   {
     _RealType __u;
     do
       __u = __aurng();
     while (__u == 0.5);

     *__f++ = __p.a() + __p.b() * std::tan(__pi * __u);
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename cauchy_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::fisher_f_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = ((_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::fisher_f_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typedef typename std::gamma_distribution<result_type>::param_type
   param_type;
 param_type __p1(__p.m() / 2);
 param_type __p2(__p.n() / 2);
 while (__f != __t)
   *__f++ = ((_M_gd_x(__urng, __p1) * n())
      / (_M_gd_y(__urng, __p2) * m()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.n()
    << __space << __x._M_gd_x << __space << __x._M_gd_y;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __n;
      __is >> __m >> __n >> __x._M_gd_x >> __x._M_gd_y;
      __x.param(typename fisher_f_distribution<_RealType>::
  param_type(__m, __n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::student_t_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::student_t_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typename std::gamma_distribution<result_type>::param_type
   __p2(__p.n() / 2, 2);
 while (__f != __t)
   *__f++ = _M_nd(__urng) * std::sqrt(__p.n() / _M_gd(__urng, __p2));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_nd << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_nd >> __x._M_gd;
      __x.param(typename student_t_distribution<_RealType>::param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    gamma_distribution<_RealType>::param_type::
    _M_initialize()
    {
      _M_malpha = _M_alpha < 1.0 ? _M_alpha + _RealType(1.0) : _M_alpha;

      const _RealType __a1 = _M_malpha - _RealType(1.0) / _RealType(3.0);
      _M_a2 = _RealType(1.0) / std::sqrt(_RealType(9.0) * __a1);
    }

  




  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename gamma_distribution<_RealType>::result_type
      gamma_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 do
   {
     do
       {
  __n = _M_nd(__urng);
  __v = result_type(1.0) + __param._M_a2 * __n;
       }
     while (__v <= 0.0);

     __v = __v * __v * __v;
     __u = __aurng();
   }
 while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
        && (std::log(__u) > (0.5 * __n * __n + __a1
        * (1.0 - __v + std::log(__v)))));

 if (__param.alpha() == __param._M_malpha)
   return __a1 * __v * __param.beta();
 else
   {
     do
       __u = __aurng();
     while (__u == 0.0);

     return (std::pow(__u, result_type(1.0) / __param.alpha())
      * __a1 * __v * __param.beta());
   }
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      gamma_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 if (__param.alpha() == __param._M_malpha)
   while (__f != __t)
     {
       do
  {
    do
      {
        __n = _M_nd(__urng);
        __v = result_type(1.0) + __param._M_a2 * __n;
      }
    while (__v <= 0.0);

    __v = __v * __v * __v;
    __u = __aurng();
  }
       while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
       && (std::log(__u) > (0.5 * __n * __n + __a1
       * (1.0 - __v + std::log(__v)))));

       *__f++ = __a1 * __v * __param.beta();
     }
 else
   while (__f != __t)
     {
       do
  {
    do
      {
        __n = _M_nd(__urng);
        __v = result_type(1.0) + __param._M_a2 * __n;
      }
    while (__v <= 0.0);

    __v = __v * __v * __v;
    __u = __aurng();
  }
       while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
       && (std::log(__u) > (0.5 * __n * __n + __a1
       * (1.0 - __v + std::log(__v)))));

       do
  __u = __aurng();
       while (__u == 0.0);

       *__f++ = (std::pow(__u, result_type(1.0) / __param.alpha())
   * __a1 * __v * __param.beta());
     }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.alpha() << __space << __x.beta()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __alpha_val, __beta_val;
      __is >> __alpha_val >> __beta_val >> __x._M_nd;
      __x.param(typename gamma_distribution<_RealType>::
  param_type(__alpha_val, __beta_val));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename weibull_distribution<_RealType>::result_type
      weibull_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.b() * std::pow(-std::log(result_type(1) - __aurng()),
      result_type(1) / __p.a());
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      weibull_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 auto __inv_a = result_type(1) / __p.a();

 while (__f != __t)
   *__f++ = __p.b() * std::pow(-std::log(result_type(1) - __aurng()),
          __inv_a);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename weibull_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename extreme_value_distribution<_RealType>::result_type
      extreme_value_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.a() - __p.b() * std::log(-std::log(result_type(1)
            - __aurng()));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      extreme_value_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 while (__f != __t)
   *__f++ = __p.a() - __p.b() * std::log(-std::log(result_type(1)
         - __aurng()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename extreme_value_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    discrete_distribution<_IntType>::param_type::
    _M_initialize()
    {
      if (_M_prob.size() < 2)
 {
   _M_prob.clear();
   return;
 }

      const double __sum = std::accumulate(_M_prob.begin(),
        _M_prob.end(), 0.0);
      
      __detail::__normalize(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),
       __sum);
      
      _M_cp.reserve(_M_prob.size());
      std::partial_sum(_M_prob.begin(), _M_prob.end(),
         std::back_inserter(_M_cp));
      
      _M_cp[_M_cp.size() - 1] = 1.0;
    }

  template<typename _IntType>
    template<typename _Func>
      discrete_distribution<_IntType>::param_type::
      param_type(size_t __nw, double __xmin, double __xmax, _Func __fw)
      : _M_prob(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const double __delta = (__xmax - __xmin) / __n;

 _M_prob.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_prob.push_back(__fw(__xmin + __k * __delta + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename discrete_distribution<_IntType>::result_type
      discrete_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 if (__param._M_cp.empty())
   return result_type(0);

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);

 return __pos - __param._M_cp.begin();
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      discrete_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 if (__param._M_cp.empty())
   {
     while (__f != __t)
       *__f++ = result_type(0);
     return;
   }

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 while (__f != __t)
   {
     const double __p = __aurng();
     auto __pos = std::lower_bound(__param._M_cp.begin(),
       __param._M_cp.end(), __p);

     *__f++ = __pos - __param._M_cp.begin();
   }
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      std::vector<double> __prob = __x.probabilities();
      __os << __prob.size();
      for (auto __dit = __prob.begin(); __dit != __prob.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<double> __prob_vec;
      __prob_vec.reserve(__n);
      for (; __n != 0; --__n)
 {
   double __prob;
   __is >> __prob;
   __prob_vec.push_back(__prob);
 }

      __x.param(typename discrete_distribution<_IntType>::
  param_type(__prob_vec.begin(), __prob_vec.end()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_constant_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      const double __sum = std::accumulate(_M_den.begin(),
        _M_den.end(), 0.0);

      __detail::__normalize(_M_den.begin(), _M_den.end(), _M_den.begin(),
       __sum);

      _M_cp.reserve(_M_den.size());
      std::partial_sum(_M_den.begin(), _M_den.end(),
         std::back_inserter(_M_cp));

      
      _M_cp[_M_cp.size() - 1] = 1.0;

      for (size_t __k = 0; __k < _M_den.size(); ++__k)
 _M_den[__k] /= _M_int[__k + 1] - _M_int[__k];
    }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp()
      {
 if (__bbegin != __bend)
   {
     for (;;)
       {
  _M_int.push_back(*__bbegin);
  ++__bbegin;
  if (__bbegin == __bend)
    break;

  _M_den.push_back(*__wbegin);
  ++__wbegin;
       }
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 _M_int.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   _M_int.push_back(*__biter);

 _M_den.reserve(_M_int.size() - 1);
 for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
   _M_den.push_back(__fw(0.5 * (_M_int[__k + 1] + _M_int[__k])));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   _M_int.push_back(__xmin + __k * __delta);

 _M_den.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_den.push_back(__fw(_M_int[__k] + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_constant_distribution<_RealType>::result_type
      piecewise_constant_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 return __param._M_int[__i] + (__p - __pref) / __param._M_den[__i];
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      piecewise_constant_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 if (__param._M_cp.empty())
   {
     while (__f != __t)
       *__f++ = __aurng();
     return;
   }

 while (__f != __t)
   {
     const double __p = __aurng();

     auto __pos = std::lower_bound(__param._M_cp.begin(),
       __param._M_cp.end(), __p);
     const size_t __i = __pos - __param._M_cp.begin();

     const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

     *__f++ = (__param._M_int[__i]
        + (__p - __pref) / __param._M_den[__i]);
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n);
      for (size_t __i = 0; __i < __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_constant_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_linear_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)
       && _M_den[0] == _M_den[1]))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      double __sum = 0.0;
      _M_cp.reserve(_M_int.size() - 1);
      _M_m.reserve(_M_int.size() - 1);
      for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
 {
   const _RealType __delta = _M_int[__k + 1] - _M_int[__k];
   __sum += 0.5 * (_M_den[__k + 1] + _M_den[__k]) * __delta;
   _M_cp.push_back(__sum);
   _M_m.push_back((_M_den[__k + 1] - _M_den[__k]) / __delta);
 }

      
      __detail::__normalize(_M_den.begin(), _M_den.end(), _M_den.begin(),
       __sum);
      
      __detail::__normalize(_M_cp.begin(), _M_cp.end(), _M_cp.begin(), __sum);
      
      __detail::__normalize(_M_m.begin(), _M_m.end(), _M_m.begin(), __sum);

      
      _M_cp[_M_cp.size() - 1] = 1.0;
     }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 for (; __bbegin != __bend; ++__bbegin, ++__wbegin)
   {
     _M_int.push_back(*__bbegin);
     _M_den.push_back(*__wbegin);
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 _M_int.reserve(__bl.size());
 _M_den.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   {
     _M_int.push_back(*__biter);
     _M_den.push_back(__fw(*__biter));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 _M_den.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   {
     _M_int.push_back(__xmin + __k * __delta);
     _M_den.push_back(__fw(_M_int[__k] + __delta));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_linear_distribution<_RealType>::result_type
      piecewise_linear_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 const double __a = 0.5 * __param._M_m[__i];
 const double __b = __param._M_den[__i];
 const double __cm = __p - __pref;

 _RealType __x = __param._M_int[__i];
 if (__a == 0)
   __x += __cm / __b;
 else
   {
     const double __d = __b * __b + 4.0 * __a * __cm;
     __x += 0.5 * (std::sqrt(__d) - __b) / __a;
          }

        return __x;
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      piecewise_linear_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 
 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_linear_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    seed_seq::seed_seq(std::initializer_list<_IntType> __il)
    {
      for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _InputIterator>
    seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end)
    {
      for (_InputIterator __iter = __begin; __iter != __end; ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _RandomAccessIterator>
    void
    seed_seq::generate(_RandomAccessIterator __begin,
         _RandomAccessIterator __end)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
        _Type;

      if (__begin == __end)
 return;

      std::fill(__begin, __end, _Type(0x8b8b8b8bu));

      const size_t __n = __end - __begin;
      const size_t __s = _M_v.size();
      const size_t __t = (__n >= 623) ? 11
         : (__n >= 68) ? 7
         : (__n >= 39) ? 5
         : (__n >= 7) ? 3
         : (__n - 1) / 2;
      const size_t __p = (__n - __t) / 2;
      const size_t __q = __p + __t;
      const size_t __m = std::max(size_t(__s + 1), __n);

      for (size_t __k = 0; __k < __m; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    ^ __begin[(__k + __p) % __n]
    ^ __begin[(__k - 1) % __n]);
   _Type __r1 = __arg ^ (__arg >> 27);
   __r1 = __detail::__mod<_Type,
      __detail::_Shift<_Type, 32>::__value>(1664525u * __r1);
   _Type __r2 = __r1;
   if (__k == 0)
     __r2 += __s;
   else if (__k <= __s)
     __r2 += __k % __n + _M_v[__k - 1];
   else
     __r2 += __k % __n;
   __r2 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r2);
   __begin[(__k + __p) % __n] += __r1;
   __begin[(__k + __q) % __n] += __r2;
   __begin[__k % __n] = __r2;
 }

      for (size_t __k = __m; __k < __m + __n; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    + __begin[(__k + __p) % __n]
    + __begin[(__k - 1) % __n]);
   _Type __r3 = __arg ^ (__arg >> 27);
   __r3 = __detail::__mod<_Type,
     __detail::_Shift<_Type, 32>::__value>(1566083941u * __r3);
   _Type __r4 = __r3 - __k % __n;
   __r4 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r4);
   __begin[(__k + __p) % __n] ^= __r3;
   __begin[(__k + __q) % __n] ^= __r4;
   __begin[__k % __n] = __r4;
 }
    }

  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __urng)
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

      const size_t __b
 = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
                   __bits);
      const long double __r = static_cast<long double>(__urng.max())
       - static_cast<long double>(__urng.min()) + 1.0L;
      const size_t __log2r = std::log(__r) / std::log(2.0L);
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
 {
   __sum += _RealType(__urng() - __urng.min()) * __tmp;
   __tmp *= __r;
 }
      return __sum / __tmp;
    }


} 
# 52 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\random" 2 3
# 67 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algo.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{


  
  template<typename _Iterator, typename _Compare>
    void
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
      _Iterator __c, _Compare __comp)
    {
      if (__comp(__a, __b))
 {
   if (__comp(__b, __c))
     std::iter_swap(__result, __b);
   else if (__comp(__a, __c))
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (__comp(__a, __c))
 std::iter_swap(__result, __a);
      else if (__comp(__b, __c))
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }

  
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }

  
  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }

  template<typename _Iterator, typename _Predicate>
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
      return __find_if(__first, __last, __pred,
         std::__iterator_category(__first));
    }

  
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred)
    {
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__negate(__pred),
       std::__iterator_category(__first));
    }

  
  
  
  template<typename _InputIterator, typename _Predicate, typename _Distance>
    _InputIterator
    __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
    {
      for (; __len; --__len, ++__first)
 if (!__pred(__first))
   break;
      return __first;
    }

  
  
  
  
  
  
  
  
  
  
  
  

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __predicate)
    {
      
      if (__first1 == __last1 || __first2 == __last2)
 return __first1;

      
      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));

      
      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 =
     std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));

   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(__current, __p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }

  

  


  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
    _ForwardIterator
    __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::forward_iterator_tag)
    {
      __first = std::__find_if(__first, __last, __unary_pred);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && __unary_pred(__i))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::__find_if(++__i, __last, __unary_pred);
 }
      return __last;
    }

  



  template<typename _RandomAccessIter, typename _Integer,
    typename _UnaryPredicate>
    _RandomAccessIter
    __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::random_access_iterator_tag)
    {
      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize) 
 {
   __first += __remainder;
   __tailSize -= __remainder;
   
   
   _RandomAccessIter __backTrack = __first;
   while (__unary_pred(--__backTrack))
     {
       if (--__remainder == 0)
         return (__first - __count); 
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last; 
    }

  template<typename _ForwardIterator, typename _Integer,
           typename _UnaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count,
        _UnaryPredicate __unary_pred)
    {
      if (__count <= 0)
 return __first;

      if (__count == 1)
 return std::__find_if(__first, __last, __unary_pred);

      return std::__search_n_aux(__first, __last, __count, __unary_pred,
     std::__iterator_category(__first));
    }

  
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;

      _ForwardIterator1 __result = __last1;
      while (1)
 {
   _ForwardIterator1 __new_result
     = std::__search(__first1, __last1, __first2, __last2, __comp);
   if (__new_result == __last1)
     return __result;
   else
     {
       __result = __new_result;
       __first1 = __new_result;
       ++__first1;
     }
 }
    }

  
  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {
      
     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
           _RevIterator2(__last2), __rlast2,
           __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }

  

























  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {
      
     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }

  



























  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {
      
     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  











  template<typename _InputIterator, typename _Predicate>
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }

  











  template<typename _InputIterator, typename _Predicate>
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }

  












  template<typename _InputIterator, typename _Predicate>
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }

  









  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {
      
     
     

      ;
      return std::__find_if_not(__first, __last,
    __gnu_cxx::__ops::__pred_iter(__pred));
    }

  









  template<typename _InputIterator, typename _Predicate>
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      return std::none_of(__first, __last, __pred);
    }

  








  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {
      
     
     


      
      ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }


  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    __remove_copy_if(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _Predicate __pred)
    {
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }

  













  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {
      
     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
 __gnu_cxx::__ops::__iter_equals_val(__value));
    }

  














  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    inline _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {
      
     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }


  














  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {
      
     
     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }

  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    _OutputIterator
    __copy_n(_InputIterator __first, _Size __n,
      _OutputIterator __result, input_iterator_tag)
    {
      if (__n > 0)
 {
   while (true)
     {
       *__result = *__first;
       ++__result;
       if (--__n > 0)
  ++__first;
       else
  break;
     }
 }
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _OutputIterator>
    inline _OutputIterator
    __copy_n(_RandomAccessIterator __first, _Size __n,
      _OutputIterator __result, random_access_iterator_tag)
    { return std::copy(__first, __first + __n, __result); }

  












  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {
      
     
     


      return std::__copy_n(__first, __n, __result,
      std::__iterator_category(__first));
    }

  














  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {
      
     
     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
      if (__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for (; __first != __last; ++__first)
        if (!__pred(__first))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }

  
















  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {
      
     

     

      ;

      return std::__remove_if(__first, __last,
  __gnu_cxx::__ops::__iter_equals_val(__value));
    }

  
















  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {
      
     

     

      ;

      return std::__remove_if(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while (++__next != __last)
 {
   if (__binary_pred(__first, __next))
     return __first;
   __first = __next;
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __unique(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {
      
      __first = std::__adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;

      
      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!__binary_pred(__dest, __first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }

  













  template<typename _ForwardIterator>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {
      
     

     

      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }

  














  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {
      
     

     


      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }

  





  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {
      
     



      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!__binary_pred(__first, __next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }

  





  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {
      
     



      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
 __rebound_pred
 = __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
      *__result = __value;
      while (++__first != __last)
 if (!__rebound_pred(__first, __value))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }

  





  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {
      
     


      *__result = *__first;
      while (++__first != __last)
 if (!__binary_pred(__result, __first))
   *++__result = *__first;
      return ++__result;
    }

  




  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }

  




  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }

  











  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {
      
     

      ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }

  















  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {
      
     

     

      ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }

  



  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }

  inline namespace _V2
  {

  
  template<typename _ForwardIterator>
    _ForwardIterator
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      _ForwardIterator __ret = __first;

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
      return __ret;
    }

   
  template<typename _BidirectionalIterator>
    _BidirectionalIterator
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      
     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 {
   std::__reverse(__middle, __last, bidirectional_iterator_tag());
   return __last;
 }
      else
 {
   std::__reverse(__first, __middle, bidirectional_iterator_tag());
   return __first;
 }
    }

  
  template<typename _RandomAccessIterator>
    _RandomAccessIterator
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {
      
     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return __middle;
 }

      _RandomAccessIterator __p = __first;
      _RandomAccessIterator __ret = __first + (__last - __middle);

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
     }
 }
    }

   
   
  




















  template<typename _ForwardIterator>
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {
      
     

      ;
      ;

      return std::__rotate(__first, __middle, __last,
      std::__iterator_category(__first));
    }

  } 

  



















  template<typename _ForwardIterator, typename _OutputIterator>
    inline _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {
      
     
     

      ;
      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }

  
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }

  
  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }

  

  
  
  
  
  
  
  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len == 1)
 return __first;

      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;

   
   
   
   *__result2 = std::move(*__first);
   ++__result2;
   ++__first;
   for (; __first != __last; ++__first)
     if (__pred(__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }

   std::move(__buffer, __result2, __result1);
   return __result1;
 }

      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __left_split =
 std::__stable_partition_adaptive(__first, __middle, __pred,
      __len / 2, __buffer,
      __buffer_size);

      
      
      _Distance __right_len = __len - __len / 2;
      _ForwardIterator __right_split =
 std::__find_if_not_n(__middle, __right_len, __pred);

      if (__right_len)
 __right_split =
   std::__stable_partition_adaptive(__right_split, __last, __pred,
        __right_len,
        __buffer, __buffer_size);

      std::rotate(__left_split, __middle, __right_split);
      std::advance(__left_split, std::distance(__middle, __right_split));
      return __left_split;
    }

  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
         _Predicate __pred)
    {
      __first = std::__find_if_not(__first, __last, __pred);

      if (__first == __last)
 return __first;

      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first, __last);
      return
 std::__stable_partition_adaptive(__first, __last, __pred,
      _DistanceType(__buf.requested_size()),
      __buf.begin(),
      _DistanceType(__buf.size()));
    }

  
















  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {
      
     

     

      ;

      return std::__stable_partition(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }

  
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::__make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(__i, __first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }

  

  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    _RandomAccessIterator
    __partial_sort_copy(_InputIterator __first, _InputIterator __last,
   _RandomAccessIterator __result_first,
   _RandomAccessIterator __result_last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef iterator_traits<_RandomAccessIterator> _RItTraits;
      typedef typename _RItTraits::difference_type _DistanceType;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while (__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }

      std::__make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(__first, __result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first), __comp);
   ++__first;
 }
      std::__sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }

  

















  template<typename _InputIterator, typename _RandomAccessIterator>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      
     
     

     

     
      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
          __gnu_cxx::__ops::__iter_less_iter());
    }

  



















  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      
     
     

     

     

     

      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }

  
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(__i, __first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
 }
    }

  
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  



  enum { _S_threshold = 16 };

  
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }

  
  template<typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _RandomAccessIterator __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, __last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }

  
  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
      __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __partial_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __middle,
     _RandomAccessIterator __last,
     _Compare __comp)
    {
      std::__heap_select(__first, __middle, __last, __comp);
      std::__sort_heap(__first, __middle, __comp);
    }

  
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::__partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }

  

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2,
    __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);
       
       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  

  

  















  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      
     
     

     
                    ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, __middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }

  










  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      
     
     
      ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_less_iter());
    }

  














  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      
     
     

     
                    ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Tp,
    typename _CompareItTp, typename _CompareTpIt>
    pair<_ForwardIterator, _ForwardIterator>
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val,
    _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp_it_val(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp_val_it(__val, __middle))
     __len = __half;
   else
     {
       _ForwardIterator __left
  = std::__lower_bound(__first, __middle, __val, __comp_it_val);
       std::advance(__first, __len);
       _ForwardIterator __right
  = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }

  
















  template<typename _ForwardIterator, typename _Tp>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      
     
     
     
      ;
      ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val(),
    __gnu_cxx::__ops::__val_less_iter());
    }

  
















  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      
     
     

     

     
                    ;
     
                    ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp),
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  











  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      
     
     
      ;
      ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_less_val());
      return __i != __last && !(__val < *__i);
    }

  














  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      
     
     

     
                    ;
     
                    ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_comp_val(__comp));
      return __i != __last && !bool(__comp(__val, *__i));
    }

  

  
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }

  
  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(__last2, __last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }

  
  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }

  
  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut
  = std::__lower_bound(__middle, __last, *__first_cut,
         __gnu_cxx::__ops::__iter_comp_val(__comp));
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut
  = std::__upper_bound(__first, __middle, *__second_cut,
         __gnu_cxx::__ops::__val_comp_iter(__comp));
       __len11 = std::distance(__first, __first_cut);
     }

   _BidirectionalIterator __new_middle
     = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
         __len1 - __len11, __len22, __buffer,
         __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }

  
  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;

      if (__len1 + __len2 == 2)
 {
   if (__comp(__middle, __first))
     std::iter_swap(__first, __middle);
   return;
 }

      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut
     = std::__lower_bound(__middle, __last, *__first_cut,
     __gnu_cxx::__ops::__iter_comp_val(__comp));
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut
     = std::__upper_bound(__first, __middle, *__second_cut,
     __gnu_cxx::__ops::__val_comp_iter(__comp));
   __len11 = std::distance(__first, __first_cut);
 }

      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }

  template<typename _BidirectionalIterator, typename _Compare>
    void
    __inplace_merge(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__merge_without_buffer
   (__first, __middle, __last, __len1, __len2, __comp);
      else
 std::__merge_adaptive
   (__first, __middle, __last, __len1, __len2, __buf.begin(),
    _DistanceType(__buf.size()), __comp);
    }

  

















  template<typename _BidirectionalIterator>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {
      
     

     

      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_less_iter());
    }

  





















  template<typename _BidirectionalIterator, typename _Compare>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {
      
     

     


      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  
  template<typename _InputIterator, typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator __first1, _InputIterator __last1,
   _InputIterator __first2, _InputIterator __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result))

                  ;
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }

  
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }

  

  
  
  
  

  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    __includes(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first2, __first1))
   return false;
 else if (__comp(__first1, __first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }

  

















  template<typename _InputIterator1, typename _InputIterator2>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
      
     
     
     


     


      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_less_iter());
    }

  




















  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
      
     
     
     


     


      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  
  
  
  
  
  
  
  
  

  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __next_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__i, __ii))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(__i, --__j))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }

  











  template<typename _BidirectionalIterator>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {
      
     

     

      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }

  














  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {
      
     

     


      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __prev_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__ii, __i))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(--__j, __i))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }

  












  template<typename _BidirectionalIterator>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {
      
     

     

      ;

      return std::__prev_permutation(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }

  














  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {
      
     

     


      ;

      return std::__prev_permutation(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  
  

  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    __replace_copy_if(_InputIterator __first, _InputIterator __last,
        _OutputIterator __result,
        _Predicate __pred, const _Tp& __new_value)
    {
      for (; __first != __last; ++__first, ++__result)
 if (__pred(__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }

  













  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {
      
     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
   __gnu_cxx::__ops::__iter_equals_val(__old_value),
           __new_value);
    }

  














  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    inline _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {
      
     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
    __gnu_cxx::__ops::__pred_iter(__pred),
           __new_value);
    }

  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }


  






  template<typename _ForwardIterator>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }

  








  template<typename _ForwardIterator, typename _Compare>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }

  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
        _Compare __comp)
    {
      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (__comp(__next, __first))
   return __next;
      return __next;
    }

  







  template<typename _ForwardIterator>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {
      
     
     

      ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }

  








  template<typename _ForwardIterator, typename _Compare>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {
      
     
     


      ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  







  template<typename _Tp>
   
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {
      
     

      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
                : pair<const _Tp&, const _Tp&>(__a, __b);
    }

  








  template<typename _Tp, typename _Compare>
   
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
                       : pair<const _Tp&, const _Tp&>(__a, __b);
    }

  template<typename _ForwardIterator, typename _Compare>
   
    pair<_ForwardIterator, _ForwardIterator>
    __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    {
      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min{}, __max{};
      if (__comp(__next, __first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(__first, __min))
  __min = __first;
       else if (!__comp(__first, __max))
  __max = __first;
       break;
     }

   if (__comp(__next, __first))
     {
       if (__comp(__next, __min))
  __min = __next;
       if (!__comp(__first, __max))
  __max = __first;
     }
   else
     {
       if (__comp(__first, __min))
  __min = __first;
       if (!__comp(__next, __max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }

  










  template<typename _ForwardIterator>
   
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {
      
     
     

      ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_less_iter());
    }

  











  template<typename _ForwardIterator, typename _Compare>
   
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {
      
     
     


      ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  
  template<typename _Tp>
   
    inline _Tp
    min(initializer_list<_Tp> __l)
    { return *std::min_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
   
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
   
    inline _Tp
    max(initializer_list<_Tp> __l)
    { return *std::max_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
   
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::max_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
   
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
   
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end(), __comp);
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {
      
      
      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__first1 == __last1)
 return true;

      
      
      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue; 

   auto __matches
     = std::__count_if(__first2, __last2,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches ||
       std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }

  











  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {
      
     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_equal_to_iter());
    }

  













  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {
      
     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }
# 3702 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\stl_algo.h" 3
  











  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {
      
     

      ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;
      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }








  











  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {
      
     
      ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return std::move(__f);
    }

  








  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {
      
     
     

      ;
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__iter_equals_val(__val));
    }

  









  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      
     
     

      ;

      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }

  















  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {
      
     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }

  


















  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {
      
     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }

  








  template<typename _ForwardIterator>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {
      
     
     

      ;

      return std::__adjacent_find(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }

  










  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {
      
     
     


      ;

      return std::__adjacent_find(__first, __last,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }

  








  template<typename _InputIterator, typename _Tp>
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {
      
     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__iter_equals_val(__value));
    }

  








  template<typename _InputIterator, typename _Predicate>
    inline typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      
     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__pred_iter(__pred));
    }

  

























  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {
      
     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }

  




















  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {
      
     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_comp_iter(__predicate));
    }

  














  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {
      
     
     

      ;

      return std::__search_n(__first, __last, __count,
        __gnu_cxx::__ops::__iter_equals_val(__val));
    }


  
















  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {
      
     
     

      ;

      return std::__search_n(__first, __last, __count,
  __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
    }


  















  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {
      
     
     


      ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }

  


















  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {
      
     
     
     


      ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }

  












  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {
      
     

     

     

      ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }

  












  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {
      
     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }

  












  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {
      
     
     

      ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }

  















  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {
      
     



      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }

  




















  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {
      
     
     

     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    __gnu_cxx::__ops::__iter_equal_to_iter(),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }

  


















  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {
      
     
     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }

  










  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      
     

      ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   {
     
     _RandomAccessIterator __j = __first
     + std::rand() % ((__i - __first) + 1);
     if (__i != __j)
       std::iter_swap(__i, __j);
   }
    }

  













  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {
      
     

      ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }


  














  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {
      
     

     

      ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }


  















  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {
      
     

     

      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_less_iter());
    }

  


















  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {
      
     

     


      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  














  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {
      
     

     

      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_less_iter());
    }

  
















  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {
      
     

     


      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  













  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      
     

     

      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }

  














  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      
     

     


      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __merge(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }

  


















  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      
     
     
     

     

     


      ;
      ;

      return std::__merge(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }

  






















  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      
     
     
     

     

     


      ;
      ;

      return std::__merge(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }

  
















  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      
     

     

      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }

  

















  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      
     

     


      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_union(_InputIterator1 __first1, _InputIterator1 __last1,
  _InputIterator2 __first2, _InputIterator2 __last2,
  _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first1, __first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }

  

















  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      
     
     
     

     

     


     


      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_less_iter());
    }

  


















  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      
     
     
     

     

     


     


      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
         _InputIterator2 __first2, _InputIterator2 __last2,
         _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   ++__first1;
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }

  
















  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      
     
     
     

     


     


      ;
      ;

      return std::__set_intersection(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }

  



















  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      
     
     
     

     


     


      ;
      ;

      return std::__set_intersection(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }

  


















  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      
     
     
     

     


     


      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_less_iter());
    }

  





















  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      
     
     
     

     


     


      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_symmetric_difference(_InputIterator1 __first1,
          _InputIterator1 __last1,
          _InputIterator2 __first2,
          _InputIterator2 __last2,
          _OutputIterator __result,
          _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }

  
















  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
      
     
     
     

     

     


     


      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
     __first2, __last2, __result,
     __gnu_cxx::__ops::__iter_less_iter());
    }

  



















  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
      
     
     
     

     

     


     


      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
   
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__first, __result))
   __result = __first;
      return __result;
    }

  






  template<typename _ForwardIterator>
   
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
    {
      
     
     

      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }

  








  template<typename _ForwardIterator, typename _Compare>
   
    inline _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {
      
     
     


      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
   
    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__result, __first))
   __result = __first;
      return __result;
    }

  






  template<typename _ForwardIterator>
   
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {
      
     
     

      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }

  








  template<typename _ForwardIterator, typename _Compare>
   
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {
      
     
     


      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


} 
# 63 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\algorithm" 2 3
# 143 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 1 3






































       
# 40 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 3

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\xtensa-esp32-elf\\bits\\c++config.h" 1 3




























# 42 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\bits\\cpp_type_traits.h" 1 3






























# 43 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 2 3
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\ext\\type_traits.h" 1 3



























# 44 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\xtensa-esp32-elf\\include\\c++\\5.2.0\\cmath" 2 3
# 144 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WCharacter.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WCharacter.h"



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WCharacter.h"
#define Character_h 


#define isascii(__c) ((unsigned)(__c)<=0177)
#define toascii(__c) ((__c)&0177)


inline boolean isAlphaNumeric(int c) __attribute__((always_inline));
inline boolean isAlpha(int c) __attribute__((always_inline));
inline boolean isAscii(int c) __attribute__((always_inline));
inline boolean isWhitespace(int c) __attribute__((always_inline));
inline boolean isControl(int c) __attribute__((always_inline));
inline boolean isDigit(int c) __attribute__((always_inline));
inline boolean isGraph(int c) __attribute__((always_inline));
inline boolean isLowerCase(int c) __attribute__((always_inline));
inline boolean isPrintable(int c) __attribute__((always_inline));
inline boolean isPunct(int c) __attribute__((always_inline));
inline boolean isSpace(int c) __attribute__((always_inline));
inline boolean isUpperCase(int c) __attribute__((always_inline));
inline boolean isHexadecimalDigit(int c) __attribute__((always_inline));
inline int toAscii(int c) __attribute__((always_inline));
inline int toLowerCase(int c) __attribute__((always_inline));
inline int toUpperCase(int c) __attribute__((always_inline));



inline boolean isAlphaNumeric(int c)
{
    return (isalnum(c) == 0 ? false : true);
}



inline boolean isAlpha(int c)
{
    return (isalpha(c) == 0 ? false : true);
}



inline boolean isAscii(int c)
{
    return ( ((unsigned)(c)<=0177) == 0 ? false : true);
}


inline boolean isWhitespace(int c)
{
    return (isblank(c) == 0 ? false : true);
}


inline boolean isControl(int c)
{
    return (iscntrl(c) == 0 ? false : true);
}


inline boolean isDigit(int c)
{
    return (isdigit(c) == 0 ? false : true);
}


inline boolean isGraph(int c)
{
    return (isgraph(c) == 0 ? false : true);
}


inline boolean isLowerCase(int c)
{
    return (islower(c) == 0 ? false : true);
}


inline boolean isPrintable(int c)
{
    return (isprint(c) == 0 ? false : true);
}



inline boolean isPunct(int c)
{
    return (ispunct(c) == 0 ? false : true);
}




inline boolean isSpace(int c)
{
    return (isspace(c) == 0 ? false : true);
}


inline boolean isUpperCase(int c)
{
    return (isupper(c) == 0 ? false : true);
}



inline boolean isHexadecimalDigit(int c)
{
    return (isxdigit(c) == 0 ? false : true);
}



inline int toAscii(int c)
{
    return ((c)&0177);
}







inline int toLowerCase(int c)
{
    return tolower(c);
}


inline int toUpperCase(int c)
{
    return toupper(c);
}
# 146 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WString.h" 1







































# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WString.h"
#define String_class_h 


# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 1









# 27 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WString.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/string.h" 1









# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WString.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/pgmspace.h" 1



































# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/pgmspace.h"
#define PGMSPACE_INCLUDE 

typedef void prog_void;
typedef char prog_char;
typedef unsigned char prog_uchar;
typedef char prog_int8_t;
typedef unsigned char prog_uint8_t;
typedef short prog_int16_t;
typedef unsigned short prog_uint16_t;
typedef long prog_int32_t;
typedef unsigned long prog_uint32_t;

#define PROGMEM 
#define PGM_P const char *
#define PGM_VOID_P const void *
#define PSTR(s) (s)
#define _SFR_BYTE(n) (n)

#define pgm_read_byte(addr) (*(const unsigned char *)(addr))
#define pgm_read_word(addr) ({ typeof(addr) _addr = (addr); *(const unsigned short *)(_addr); })



#define pgm_read_dword(addr) ({ typeof(addr) _addr = (addr); *(const unsigned long *)(_addr); })



#define pgm_read_float(addr) ({ typeof(addr) _addr = (addr); *(const float *)(_addr); })



#define pgm_read_ptr(addr) ({ typeof(addr) _addr = (addr); *(void * const *)(_addr); })




#define pgm_get_far_address(x) ((uint32_t)(&(x)))

#define pgm_read_byte_near(addr) pgm_read_byte(addr)
#define pgm_read_word_near(addr) pgm_read_word(addr)
#define pgm_read_dword_near(addr) pgm_read_dword(addr)
#define pgm_read_float_near(addr) pgm_read_float(addr)
#define pgm_read_ptr_near(addr) pgm_read_ptr(addr)
#define pgm_read_byte_far(addr) pgm_read_byte(addr)
#define pgm_read_word_far(addr) pgm_read_word(addr)
#define pgm_read_dword_far(addr) pgm_read_dword(addr)
#define pgm_read_float_far(addr) pgm_read_float(addr)
#define pgm_read_ptr_far(addr) pgm_read_ptr(addr)

#define memcmp_P memcmp
#define memccpy_P memccpy
#define memmem_P memmem
#define memcpy_P memcpy
#define strcpy_P strcpy
#define strncpy_P strncpy
#define strcat_P strcat
#define strncat_P strncat
#define strcmp_P strcmp
#define strncmp_P strncmp
#define strcasecmp_P strcasecmp
#define strncasecmp_P strncasecmp
#define strlen_P strlen
#define strnlen_P strnlen
#define strstr_P strstr
#define printf_P printf
#define sprintf_P sprintf
#define snprintf_P snprintf
#define vsnprintf_P vsnprintf
# 30 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WString.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 31 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WString.h" 2



class StringSumHelper;



class __FlashStringHelper;
#define FPSTR(pstr_pointer) (reinterpret_cast<const __FlashStringHelper *>(pstr_pointer))
#define F(string_literal) (FPSTR(PSTR(string_literal)))


class String {
        
        
        
        typedef void (String::*StringIfHelperType)() const;
        void StringIfHelper() const {
        }

    public:
        
        
        
        
        
        String(const char *cstr = "");
        String(const String &str);
        String(const __FlashStringHelper *str);

        String(String &&rval);
        String(StringSumHelper &&rval);

        explicit String(char c);
        explicit String(unsigned char, unsigned char base = 10);
        explicit String(int, unsigned char base = 10);
        explicit String(unsigned int, unsigned char base = 10);
        explicit String(long, unsigned char base = 10);
        explicit String(unsigned long, unsigned char base = 10);
        explicit String(float, unsigned char decimalPlaces = 2);
        explicit String(double, unsigned char decimalPlaces = 2);
        ~String(void);

        
        
        
        
        unsigned char reserve(unsigned int size);
        inline unsigned int length(void) const {
            if(buffer()) {
                return len();
            } else {
                return 0;
            }
        }
        inline void clear(void) {
            setLen(0);
        }
        inline bool isEmpty(void) const {
            return length() == 0;
        }

        
        
        
        String & operator =(const String &rhs);
        String & operator =(const char *cstr);
        String & operator = (const __FlashStringHelper *str);

        String & operator =(String &&rval);
        String & operator =(StringSumHelper &&rval);


        

        
        
        
        unsigned char concat(const String &str);
        unsigned char concat(const char *cstr);
        unsigned char concat(char c);
        unsigned char concat(unsigned char c);
        unsigned char concat(int num);
        unsigned char concat(unsigned int num);
        unsigned char concat(long num);
        unsigned char concat(unsigned long num);
        unsigned char concat(float num);
        unsigned char concat(double num);
        unsigned char concat(const __FlashStringHelper * str);

        
        
        String & operator +=(const String &rhs) {
            concat(rhs);
            return (*this);
        }
        String & operator +=(const char *cstr) {
            concat(cstr);
            return (*this);
        }
        String & operator +=(char c) {
            concat(c);
            return (*this);
        }
        String & operator +=(unsigned char num) {
            concat(num);
            return (*this);
        }
        String & operator +=(int num) {
            concat(num);
            return (*this);
        }
        String & operator +=(unsigned int num) {
            concat(num);
            return (*this);
        }
        String & operator +=(long num) {
            concat(num);
            return (*this);
        }
        String & operator +=(unsigned long num) {
            concat(num);
            return (*this);
        }
        String & operator +=(float num) {
            concat(num);
            return (*this);
        }
        String & operator +=(double num) {
            concat(num);
            return (*this);
        }
        String & operator += (const __FlashStringHelper *str){
            concat(str);
            return (*this);
        }

        friend StringSumHelper & operator +(const StringSumHelper &lhs, const String &rhs);
        friend StringSumHelper & operator +(const StringSumHelper &lhs, const char *cstr);
        friend StringSumHelper & operator +(const StringSumHelper &lhs, char c);
        friend StringSumHelper & operator +(const StringSumHelper &lhs, unsigned char num);
        friend StringSumHelper & operator +(const StringSumHelper &lhs, int num);
        friend StringSumHelper & operator +(const StringSumHelper &lhs, unsigned int num);
        friend StringSumHelper & operator +(const StringSumHelper &lhs, long num);
        friend StringSumHelper & operator +(const StringSumHelper &lhs, unsigned long num);
        friend StringSumHelper & operator +(const StringSumHelper &lhs, float num);
        friend StringSumHelper & operator +(const StringSumHelper &lhs, double num);
        friend StringSumHelper & operator +(const StringSumHelper &lhs, const __FlashStringHelper *rhs);

        
        operator StringIfHelperType() const {
            return buffer() ? &String::StringIfHelper : 0;
        }
        int compareTo(const String &s) const;
        unsigned char equals(const String &s) const;
        unsigned char equals(const char *cstr) const;
        unsigned char operator ==(const String &rhs) const {
            return equals(rhs);
        }
        unsigned char operator ==(const char *cstr) const {
            return equals(cstr);
        }
        unsigned char operator !=(const String &rhs) const {
            return !equals(rhs);
        }
        unsigned char operator !=(const char *cstr) const {
            return !equals(cstr);
        }
        unsigned char operator <(const String &rhs) const;
        unsigned char operator >(const String &rhs) const;
        unsigned char operator <=(const String &rhs) const;
        unsigned char operator >=(const String &rhs) const;
        unsigned char equalsIgnoreCase(const String &s) const;
        unsigned char equalsConstantTime(const String &s) const;
        unsigned char startsWith(const String &prefix) const;
        unsigned char startsWith(const char *prefix) const {
            return this->startsWith(String(prefix));
        }
        unsigned char startsWith(const __FlashStringHelper *prefix) const {
            return this->startsWith(String(prefix));
        }
        unsigned char startsWith(const String &prefix, unsigned int offset) const;
        unsigned char endsWith(const String &suffix) const;
        unsigned char endsWith(const char *suffix) const {
            return this->endsWith(String(suffix));
        }
        unsigned char endsWith(const __FlashStringHelper * suffix) const {
            return this->endsWith(String(suffix));
        }

        
        char charAt(unsigned int index) const;
        void setCharAt(unsigned int index, char c);
        char operator [](unsigned int index) const;
        char& operator [](unsigned int index);
        void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index = 0) const;
        void toCharArray(char *buf, unsigned int bufsize, unsigned int index = 0) const {
            getBytes((unsigned char *) buf, bufsize, index);
        }
        const char* c_str() const { return buffer(); }
        char* begin() { return wbuffer(); }
        char* end() { return wbuffer() + length(); }
        const char* begin() const { return c_str(); }
        const char* end() const { return c_str() + length(); }

        
        int indexOf(char ch) const;
        int indexOf(char ch, unsigned int fromIndex) const;
        int indexOf(const String &str) const;
        int indexOf(const String &str, unsigned int fromIndex) const;
        int lastIndexOf(char ch) const;
        int lastIndexOf(char ch, unsigned int fromIndex) const;
        int lastIndexOf(const String &str) const;
        int lastIndexOf(const String &str, unsigned int fromIndex) const;
        String substring(unsigned int beginIndex) const {
            return substring(beginIndex, len());
        }
        ;
        String substring(unsigned int beginIndex, unsigned int endIndex) const;

        
        void replace(char find, char replace);
        void replace(const String &find, const String &replace);
        void replace(const char *find, const String &replace) {
            this->replace(String(find), replace);
        }
        void replace(const __FlashStringHelper *find, const String &replace) {
            this->replace(String(find), replace);
        }
        void replace(const char *find, const char *replace) {
            this->replace(String(find), String(replace));
        }
        void replace(const __FlashStringHelper *find, const char *replace) {
            this->replace(String(find), String(replace));
        }
        void replace(const __FlashStringHelper *find, const __FlashStringHelper *replace) {
            this->replace(String(find), String(replace));
        }
        void remove(unsigned int index);
        void remove(unsigned int index, unsigned int count);
        void toLowerCase(void);
        void toUpperCase(void);
        void trim(void);

        
        long toInt(void) const;
        float toFloat(void) const;
 double toDouble(void) const;

    protected:
        
        struct _ptr {
            char * buff;
            uint16_t cap;
            uint16_t len;
        };
        
        enum { SSOSIZE = sizeof(struct _ptr) + 4 - 1 }; 
        struct _sso {
            char buff[SSOSIZE];
            unsigned char len : 7; 
            unsigned char isSSO : 1;
        } __attribute__((packed)); 
        enum { CAPACITY_MAX = 65535 }; 
        union {
            struct _ptr ptr;
            struct _sso sso;
        };
        
        inline bool isSSO() const { return sso.isSSO; }
        inline unsigned int len() const { return isSSO() ? sso.len : ptr.len; }
        inline unsigned int capacity() const { return isSSO() ? (unsigned int)SSOSIZE - 1 : ptr.cap; } 
        inline void setSSO(bool set) { sso.isSSO = set; }
        inline void setLen(int len) { if (isSSO()) sso.len = len; else ptr.len = len; }
        inline void setCapacity(int cap) { if (!isSSO()) ptr.cap = cap; }
 inline void setBuffer(char *buff) { if (!isSSO()) ptr.buff = buff; }
        
        inline const char *buffer() const { return (const char *)(isSSO() ? sso.buff : ptr.buff); }
        inline char *wbuffer() const { return isSSO() ? const_cast<char *>(sso.buff) : ptr.buff; } 

    protected:
        void init(void);
        void invalidate(void);
        unsigned char changeBuffer(unsigned int maxStrLen);
        unsigned char concat(const char *cstr, unsigned int length);

        
        String & copy(const char *cstr, unsigned int length);
        String & copy(const __FlashStringHelper *pstr, unsigned int length);

        void move(String &rhs);

};

class StringSumHelper: public String {
    public:
        StringSumHelper(const String &s) :
                String(s) {
        }
        StringSumHelper(const char *p) :
                String(p) {
        }
        StringSumHelper(char c) :
                String(c) {
        }
        StringSumHelper(unsigned char num) :
                String(num) {
        }
        StringSumHelper(int num) :
                String(num) {
        }
        StringSumHelper(unsigned int num) :
                String(num) {
        }
        StringSumHelper(long num) :
                String(num) {
        }
        StringSumHelper(unsigned long num) :
                String(num) {
        }
        StringSumHelper(float num) :
                String(num) {
        }
        StringSumHelper(double num) :
                String(num) {
        }
};

extern const String emptyString;
# 147 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Stream.h" 1







































# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Stream.h"
#define Stream_h 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h" 1













# 9 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h"





# 26 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Stream.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h"
#define Print_h 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 3 4


























# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WString.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WString.h"







































# 27 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Printable.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Printable.h"
#define Printable_h 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdlib.h" 1









# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Printable.h" 2

class Print;










# 33 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Printable.h"
class Printable
{
public:
    virtual ~Printable() {}
    virtual size_t printTo(Print& p) const = 0;
};
# 28 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h" 2

#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
protected:
    void setWriteError(int err = 1)
    {
        write_error = err;
    }
public:
    Print() :
        write_error(0)
    {
    }
    virtual ~Print() {}
    int getWriteError()
    {
        return write_error;
    }
    void clearWriteError()
    {
        setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str)
    {
        if(str == 
# 64 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h" 3 4
                 __null
# 64 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h"
                     ) {
            return 0;
        }
        return write((const uint8_t *) str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size)
    {
        return write((const uint8_t *) buffer, size);
    }

    size_t printf(const char * format, ...) __attribute__ ((format (printf, 2, 3)));

    
    
    
    virtual int availableForWrite() { return 0; }
    size_t print(const __FlashStringHelper *);
    size_t print(const String &);
    size_t print(const char[]);
    size_t print(char);
    size_t print(unsigned char, int = 10);
    size_t print(int, int = 10);
    size_t print(unsigned int, int = 10);
    size_t print(long, int = 10);
    size_t print(unsigned long, int = 10);
    size_t print(long long, int = 10);
    size_t print(unsigned long long, int = 10);
    size_t print(double, int = 2);
    size_t print(const Printable&);
    size_t print(struct tm * timeinfo, const char * format = 
# 94 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h" 3 4
                                                            __null
# 94 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h"
                                                                );

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = 10);
    size_t println(int, int = 10);
    size_t println(unsigned int, int = 10);
    size_t println(long, int = 10);
    size_t println(unsigned long, int = 10);
    size_t println(long long, int = 10);
    size_t println(unsigned long long, int = 10);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(struct tm * timeinfo, const char * format = 
# 109 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h" 3 4
                                                              __null
# 109 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h"
                                                                  );
    size_t println(void);
};
# 27 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Stream.h" 2

















# 38 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Stream.h"
class Stream: public Print
{
protected:
    unsigned long _timeout; 
    unsigned long _startMillis; 
    int timedRead(); 
    int timedPeek(); 
    int peekNextDigit(); 

public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream():_startMillis(0)
    {
        _timeout = 1000;
    }
    virtual ~Stream() {}



    void setTimeout(unsigned long timeout); 
    unsigned long getTimeout(void);

    bool find(const char *target); 
    bool find(uint8_t *target)
    {
        return find((char *) target);
    }
    

    bool find(const char *target, size_t length); 
    bool find(const uint8_t *target, size_t length)
    {
        return find((char *) target, length);
    }
    

    bool find(char target)
    {
        return find (&target, 1);
    }

    bool findUntil(const char *target, const char *terminator); 
    bool findUntil(const uint8_t *target, const char *terminator)
    {
        return findUntil((char *) target, terminator);
    }

    bool findUntil(const char *target, size_t targetLen, const char *terminate, size_t termLen); 
    bool findUntil(const uint8_t *target, size_t targetLen, const char *terminate, size_t termLen)
    {
        return findUntil((char *) target, targetLen, terminate, termLen);
    }

    long parseInt(); 
    
    

    float parseFloat(); 

    virtual size_t readBytes(char *buffer, size_t length); 
    virtual size_t readBytes(uint8_t *buffer, size_t length)
    {
        return readBytes((char *) buffer, length);
    }
    
    

    size_t readBytesUntil(char terminator, char *buffer, size_t length); 
    size_t readBytesUntil(char terminator, uint8_t *buffer, size_t length)
    {
        return readBytesUntil(terminator, (char *) buffer, length);
    }
    
    

    
    virtual String readString();
    String readStringUntil(char terminator);

protected:
    long parseInt(char skipChar); 
    
    

    float parseFloat(char skipChar); 

    struct MultiTarget {
      const char *str; 
      size_t len; 
      size_t index; 
    };

  
  
  int findMulti(struct MultiTarget *targets, int tCount);

};
# 148 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Printable.h" 1



































# 149 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h" 1



































# 150 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/IPAddress.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/IPAddress.h"
#define IPAddress_h 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/IPAddress.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/WString.h" 1







































# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/IPAddress.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Printable.h" 1



































# 26 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/IPAddress.h" 2



class IPAddress: public Printable
{
private:
    union {
        uint8_t bytes[4]; 
        uint32_t dword;
    } _address;

    
    
    
    
    uint8_t* raw_address()
    {
        return _address.bytes;
    }

public:
    
    IPAddress();
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t *address);
    virtual ~IPAddress() {}

    bool fromString(const char *address);
    bool fromString(const String &address) { return fromString(address.c_str()); }

    
    
    operator uint32_t() const
    {
        return _address.dword;
    }
    bool operator==(const IPAddress& addr) const
    {
        return _address.dword == addr._address.dword;
    }
    bool operator==(const uint8_t* addr) const;

    
    uint8_t operator[](int index) const
    {
        return _address.bytes[index];
    }
    uint8_t& operator[](int index)
    {
        return _address.bytes[index];
    }

    
    IPAddress& operator=(const uint8_t *address);
    IPAddress& operator=(uint32_t address);

    virtual size_t printTo(Print& p) const;
    String toString() const;

    friend class EthernetClass;
    friend class UDP;
    friend class Client;
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0, 0, 0, 0);
# 151 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Client.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Client.h"
#define client_h 
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h" 1



































# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Client.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Stream.h" 1







































# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Client.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/IPAddress.h" 1



































# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Client.h" 2

class Client: public Stream
{
public:
    virtual int connect(IPAddress ip, uint16_t port) =0;
    virtual int connect(const char *host, uint16_t port) =0;
    virtual size_t write(uint8_t) =0;
    virtual size_t write(const uint8_t *buf, size_t size) =0;
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int read(uint8_t *buf, size_t size) = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;
    virtual void stop() = 0;
    virtual uint8_t connected() = 0;
    virtual operator bool() = 0;
protected:
    uint8_t* rawIPAddress(IPAddress& addr)
    {
        return addr.raw_address();
    }
};
# 152 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Server.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Server.h"
#define server_h 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Print.h" 1



































# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Server.h" 2

class Server: public Print
{
public:
    virtual void begin(uint16_t port=0) =0;
};
# 153 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Udp.h" 1

































































# 36 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Udp.h"
#define udp_h 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Stream.h" 1







































# 39 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Udp.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/IPAddress.h" 1



































# 40 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Udp.h" 2

class UDP: public Stream
{

public:
    virtual uint8_t begin(uint16_t) =0; 
    virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; } 
    virtual void stop() =0; 

    

    
    
    virtual int beginPacket(IPAddress ip, uint16_t port) =0;
    
    
    virtual int beginPacket(const char *host, uint16_t port) =0;
    
    
    virtual int endPacket() =0;
    
    virtual size_t write(uint8_t) =0;
    
    virtual size_t write(const uint8_t *buffer, size_t size) =0;

    
    
    virtual int parsePacket() =0;
    
    virtual int available() =0;
    
    virtual int read() =0;
    
    
    virtual int read(unsigned char* buffer, size_t len) =0;
    
    
    virtual int read(char* buffer, size_t len) =0;
    
    virtual int peek() =0;
    virtual void flush() =0; 

    
    virtual IPAddress remoteIP() =0;
    
    virtual uint16_t remotePort() =0;
protected:
    uint8_t* rawIPAddress(IPAddress& addr)
    {
        return addr.raw_address();
    }
};
# 154 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/HardwareSerial.h" 1





















































































# 46 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/HardwareSerial.h"
#define HardwareSerial_h 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h" 1













# 9 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/inttypes.h"





# 49 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/HardwareSerial.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Stream.h" 1







































# 51 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/HardwareSerial.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/esp32-hal.h" 1



































# 52 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/HardwareSerial.h" 2

class HardwareSerial: public Stream
{
public:
    HardwareSerial(int uart_nr);

    void begin(unsigned long baud, uint32_t config=0x800001c, int8_t rxPin=-1, int8_t txPin=-1, bool invert=false, unsigned long timeout_ms = 20000UL);
    void end();
    void updateBaudRate(unsigned long baud);
    int available(void);
    int availableForWrite(void);
    int peek(void);
    int read(void);
    size_t read(uint8_t *buffer, size_t size);
    inline size_t read(char * buffer, size_t size)
    {
        return read((uint8_t*) buffer, size);
    }
    void flush(void);
    void flush( bool txOnly);
    size_t write(uint8_t);
    size_t write(const uint8_t *buffer, size_t size);
    inline size_t write(const char * buffer, size_t size)
    {
        return write((uint8_t*) buffer, size);
    }
    inline size_t write(const char * s)
    {
        return write((uint8_t*) s, strlen(s));
    }
    inline size_t write(unsigned long n)
    {
        return write((uint8_t) n);
    }
    inline size_t write(long n)
    {
        return write((uint8_t) n);
    }
    inline size_t write(unsigned int n)
    {
        return write((uint8_t) n);
    }
    inline size_t write(int n)
    {
        return write((uint8_t) n);
    }
    uint32_t baudRate();
    operator bool() const;

    size_t setRxBufferSize(size_t);
    void setDebugOutput(bool);

    void setRxInvert(bool);

protected:
    int _uart_nr;
    uart_t* _uart;
    uint8_t _tx_pin;
    uint8_t _rx_pin;
};

extern void serialEventRun(void) __attribute__((weak));


extern HardwareSerial Serial;
extern HardwareSerial Serial1;
extern HardwareSerial Serial2;
# 155 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Esp.h" 1



































# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Esp.h"
#define ESP_H 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Arduino.h" 1



































# 24 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Esp.h" 2
# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h" 1















#define __ESP_PARTITION_H__ 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4


























# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"















#define ESP_SPI_FLASH_H 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 19 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 1 3 4

# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stdbool.h" 3 4


























# 20 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h" 2
# 1 "a:\\program files (x86)\\arduino\\hardware\\espressif\\esp32\\tools\\xtensa-esp32-elf\\lib\\gcc\\xtensa-esp32-elf\\5.2.0\\include\\stddef.h" 1 3 4


























# 21 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h" 2

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h" 1

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h"











# 7 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/config/sdkconfig.h"
#define CONFIG_GATTC_ENABLE 1
#define CONFIG_ESP32_PHY_MAX_TX_POWER 20
#define CONFIG_TRACEMEM_RESERVE_DRAM 0x0
#define CONFIG_FREERTOS_MAX_TASK_NAME_LEN 16
#define CONFIG_MQTT_TRANSPORT_SSL 1
#define CONFIG_BLE_SMP_ENABLE 1
#define CONFIG_SPIRAM_TYPE_AUTO 1
#define CONFIG_STACK_CHECK 1
#define CONFIG_MB_SERIAL_TASK_PRIO 10
#define CONFIG_MQTT_PROTOCOL_311 1
#define CONFIG_TCP_RECVMBOX_SIZE 6
#define CONFIG_LWIP_ETHARP_TRUST_IP_MAC 1
#define CONFIG_BLE_SCAN_DUPLICATE 1
#define CONFIG_STACK_CHECK_NORM 1
#define CONFIG_TCP_WND_DEFAULT 5744
#define CONFIG_PARTITION_TABLE_OFFSET 0x8000
#define CONFIG_SW_COEXIST_ENABLE 1
#define CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE 3
#define CONFIG_SPIFFS_USE_MAGIC_LENGTH 1
#define CONFIG_ESPTOOLPY_FLASHSIZE_4MB 1
#define CONFIG_IPC_TASK_STACK_SIZE 1024
#define CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES 16
#define CONFIG_FATFS_PER_FILE_CACHE 1
#define CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY 1
#define CONFIG_ESPTOOLPY_FLASHFREQ "40m"
#define CONFIG_LWIP_TCP_RTO_TIME 3000
#define CONFIG_SCCB_HARDWARE_I2C_PORT1 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA 1
#define CONFIG_UDP_RECVMBOX_SIZE 6
#define CONFIG_APP_RETRIEVE_LEN_ELF_SHA 16
#define CONFIG_ARDUHAL_PARTITION_SCHEME_DEFAULT 1
#define CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE 0
#define CONFIG_MBEDTLS_AES_C 1
#define CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED 1
#define CONFIG_A2DP_SINK_TASK_STACK_SIZE 2048
#define CONFIG_ESP32_WIFI_SOFTAP_BEACON_MAX_LEN 752
#define CONFIG_MBEDTLS_GCM_C 1
#define CONFIG_ESPTOOLPY_FLASHSIZE "4MB"
#define CONFIG_SPIFFS_CACHE_WR 1
#define CONFIG_SPIRAM_CACHE_WORKAROUND 1
#define CONFIG_BROWNOUT_DET_LVL_SEL_0 1
#define CONFIG_D0WD_PSRAM_CS_IO 16
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER 1
#define CONFIG_EMAC_L2_TO_L3_RX_BUF_MODE 1
#define CONFIG_BTDM_CONTROLLER_MODEM_SLEEP 1
#define CONFIG_SPIFFS_CACHE 1
#define CONFIG_INT_WDT 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN 3
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1 1
#define CONFIG_BT_STACK_NO_LOG 1
#define CONFIG_ESP_GRATUITOUS_ARP 1
#define CONFIG_MBEDTLS_ECDSA_C 1
#define CONFIG_ESPTOOLPY_FLASHFREQ_40M 1
#define CONFIG_HTTPD_MAX_REQ_HDR_LEN 512
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE 0
#define CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS 1
#define CONFIG_MBEDTLS_ECDH_C 1
#define CONFIG_SPIRAM_USE_CAPS_ALLOC 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE 1
#define CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM 16
#define CONFIG_MBEDTLS_SSL_ALPN 1
#define CONFIG_MBEDTLS_PEM_WRITE_C 1
#define CONFIG_BT_SPP_ENABLED 1
#define CONFIG_BT_RESERVE_DRAM 0xdb5c
#define CONFIG_APP_COMPILE_TIME_DATE 1
#define CONFIG_CXX_EXCEPTIONS 1
#define CONFIG_D2WD_PSRAM_CLK_IO 9
#define CONFIG_FATFS_FS_LOCK 0
#define CONFIG_IP_LOST_TIMER_INTERVAL 120
#define CONFIG_SPIFFS_META_LENGTH 4
#define CONFIG_ESP32_PANIC_PRINT_REBOOT 1
#define CONFIG_MB_CONTROLLER_NOTIFY_QUEUE_SIZE 20
#define CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED 1
#define CONFIG_CAMERA_CORE1 1
#define CONFIG_ESP32_DPORT_DIS_INTERRUPT_LVL 5
#define CONFIG_MB_SERIAL_BUF_SIZE 256
#define CONFIG_CONSOLE_UART_BAUDRATE 115200
#define CONFIG_SPIRAM_SUPPORT 1
#define CONFIG_MFN56_1X 1
#define CONFIG_LWIP_MAX_SOCKETS 10
#define CONFIG_LWIP_NETIF_LOOPBACK 1
#define CONFIG_LWIP_TCP_ISN_HOOK 1
#define CONFIG_ESP32_PTHREAD_TASK_NAME_DEFAULT "pthread"
#define CONFIG_EMAC_TASK_PRIORITY 20
#define CONFIG_TIMER_TASK_STACK_DEPTH 2048
#define CONFIG_TCP_MSS 1436
#define CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED 1
#define CONFIG_BTDM_CONTROLLER_MODE_BTDM 1
#define CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN_EFF 3
#define CONFIG_EFUSE_CODE_SCHEME_COMPAT_3_4 1
#define CONFIG_TCPIP_TASK_AFFINITY_CPU0 1
#define CONFIG_FATFS_CODEPAGE 850
#define CONFIG_SPIRAM_SPIWP_SD3_PIN 7
#define CONFIG_ULP_COPROC_RESERVE_MEM 512
#define CONFIG_LWIP_MAX_UDP_PCBS 16
#define CONFIG_ESPTOOLPY_BAUD 921600
#define CONFIG_INT_WDT_CHECK_CPU1 1
#define CONFIG_ADC_CAL_LUT_ENABLE 1
#define CONFIG_FLASHMODE_DIO 1
#define CONFIG_LWIP_ESP_LWIP_ASSERT 1
#define CONFIG_ESPTOOLPY_AFTER_RESET 1
#define CONFIG_OPTIMIZATION_ASSERTIONS_ENABLED 1
#define CONFIG_LWIP_DHCPS_MAX_STATION_NUM 8
#define CONFIG_TOOLPREFIX "xtensa-esp32-elf-"
#define CONFIG_MBEDTLS_ECP_C 1
#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024
#define CONFIG_MBEDTLS_RC4_DISABLED 1
#define CONFIG_FATFS_LFN_STACK 1
#define CONFIG_BTDM_CONTROLLER_FULL_SCAN_SUPPORTED 1
#define CONFIG_CONSOLE_UART_NUM 0
#define CONFIG_ARDUINO_EVENT_RUNNING_CORE 1
#define CONFIG_ESP32_APPTRACE_LOCK_ENABLE 1
#define CONFIG_PTHREAD_STACK_MIN 768
#define CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC 1
#define CONFIG_TCP_OVERSIZE_MSS 1
#define CONFIG_FOUR_UNIVERSAL_MAC_ADDRESS 1
#define CONFIG_CONSOLE_UART_DEFAULT 1
#define CONFIG_A2DP_SOURCE_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN 16384
#define CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS 4
#define CONFIG_ESPTOOLPY_FLASHSIZE_DETECT 1
#define CONFIG_AUTOSTART_ARDUINO 1
#define CONFIG_ARDUINO_RUNNING_CORE 1
#define CONFIG_ESP32_ECO3_CACHE_LOCK_FIX 1
#define CONFIG_PPP_CHAP_SUPPORT 1
#define CONFIG_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_TIMER_TASK_STACK_SIZE 4096
#define CONFIG_ESP32_ENABLE_COREDUMP_TO_NONE 1
#define CONFIG_SPIRAM_BANKSWITCH_ENABLE 1
#define CONFIG_MBEDTLS_X509_CRL_PARSE_C 1
#define CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER 1
#define CONFIG_HTTPD_PURGE_BUF_LEN 32
#define CONFIG_SCAN_DUPLICATE_BY_DEVICE_ADDR 1
#define CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER 1
#define CONFIG_MB_SERIAL_TASK_STACK_SIZE 2048
#define CONFIG_MBEDTLS_PSK_MODES 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_AUTO 1
#define CONFIG_LWIP_DHCPS_LEASE_UNIT 60
#define CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION 1
#define CONFIG_EFUSE_MAX_BLK_LEN 192
#define CONFIG_SPIFFS_USE_MAGIC 1
#define CONFIG_OV7725_SUPPORT 1
#define CONFIG_TCPIP_TASK_STACK_SIZE 2560
#define CONFIG_BLUEDROID_PINNED_TO_CORE_0 1
#define CONFIG_FATFS_CODEPAGE_850 1
#define CONFIG_TASK_WDT 1
#define CONFIG_MTMN_LITE_QUANT 1
#define CONFIG_MAIN_TASK_STACK_SIZE 4096
#define CONFIG_SPIFFS_PAGE_CHECK 1
#define CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_0 1
#define CONFIG_LWIP_MAX_ACTIVE_TCP 16
#define CONFIG_TASK_WDT_TIMEOUT_S 5
#define CONFIG_INT_WDT_TIMEOUT_MS 300
#define CONFIG_ARDUINO_EVENT_RUN_CORE1 1
#define CONFIG_ESPTOOLPY_FLASHMODE "dio"
#define CONFIG_BTC_TASK_STACK_SIZE 8192
#define CONFIG_BLUEDROID_ENABLED 1
#define CONFIG_NEWLIB_STDIN_LINE_ENDING_CR 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA 1
#define CONFIG_ESPTOOLPY_BEFORE "default_reset"
#define CONFIG_ADC2_DISABLE_DAC 1
#define CONFIG_HFP_ENABLE 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_NUM 100
#define CONFIG_ESP32_REV_MIN_0 1
#define CONFIG_LOG_DEFAULT_LEVEL 1
#define CONFIG_TIMER_QUEUE_LENGTH 10
#define CONFIG_ARDUINO_LOOP_STACK_SIZE 8192
#define CONFIG_ESP32_REV_MIN 0
#define CONFIG_SUPPRESS_SELECT_DEBUG_OUTPUT 1
#define CONFIG_GATTS_SEND_SERVICE_CHANGE_MODE 0
#define CONFIG_OV5640_SUPPORT 1
#define CONFIG_MAKE_WARN_UNDEFINED_VARIABLES 1
#define CONFIG_FATFS_TIMEOUT_MS 10000
#define CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM 32
#define CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS 1
#define CONFIG_MBEDTLS_CCM_C 1
#define CONFIG_SPI_MASTER_ISR_IN_IRAM 1
#define CONFIG_ARDUHAL_PARTITION_SCHEME "default"
#define CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER 20
#define CONFIG_ESP32_RTC_CLK_CAL_CYCLES 1024
#define CONFIG_ESP32_WIFI_TX_BA_WIN 6
#define CONFIG_ESP32_WIFI_NVS_ENABLED 1
#define CONFIG_MDNS_MAX_SERVICES 10
#define CONFIG_ULP_COPROC_ENABLED 1
#define CONFIG_HFP_AUDIO_DATA_PATH_PCM 1
#define CONFIG_IDF_TARGET_ESP32 1
#define CONFIG_EMAC_CHECK_LINK_PERIOD_MS 2000
#define CONFIG_BTDM_LPCLK_SEL_MAIN_XTAL 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED 1
#define CONFIG_LWIP_SNTP_UPDATE_DELAY 3600000
#define CONFIG_LIBSODIUM_USE_MBEDTLS_SHA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK 1
#define CONFIG_DMA_RX_BUF_NUM 10
#define CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_PSK 1
#define CONFIG_TCP_SYNMAXRTX 6
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF 0
#define CONFIG_HEAP_POISONING_LIGHT 1
#define CONFIG_PYTHON "python"
#define CONFIG_SPIRAM_BANKSWITCH_RESERVE 8
#define CONFIG_MBEDTLS_ECP_NIST_OPTIM 1
#define CONFIG_ESP32_TIME_SYSCALL_USE_RTC_FRC1 1
#define CONFIG_ESPTOOLPY_COMPRESSED 1
#define CONFIG_PARTITION_TABLE_FILENAME "partitions_singleapp.csv"
#define CONFIG_MB_CONTROLLER_STACK_SIZE 4096
#define CONFIG_TCP_SND_BUF_DEFAULT 5744
#define CONFIG_GARP_TMR_INTERVAL 60
#define CONFIG_LWIP_DHCP_MAX_NTP_SERVERS 1
#define CONFIG_TCP_MSL 60000
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_1 1
#define CONFIG_LWIP_SO_REUSE_RXTOALL 1
#define CONFIG_MB_CONTROLLER_NOTIFY_TIMEOUT 20
#define CONFIG_ESP32_WIFI_MGMT_SBUF_NUM 32
#define CONFIG_PARTITION_TABLE_SINGLE_APP 1
#define CONFIG_XTENSA_IMPL 1
#define CONFIG_UNITY_ENABLE_FLOAT 1
#define CONFIG_ESP32_WIFI_RX_BA_WIN 16
#define CONFIG_MBEDTLS_X509_CSR_PARSE_C 1
#define CONFIG_SPIFFS_USE_MTIME 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN 0
#define CONFIG_LWIP_DHCP_RESTORE_LAST_IP 1
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN 2
#define CONFIG_PICO_PSRAM_CS_IO 10
#define CONFIG_EMAC_TASK_STACK_SIZE 3072
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT 1
#define CONFIG_MB_QUEUE_LENGTH 20
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA 1
#define CONFIG_OV2640_SUPPORT 1
#define CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_PSK 1
#define CONFIG_PPP_SUPPORT 1
#define CONFIG_SPIRAM_SPEED_40M 1
#define CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE 2048
#define CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V 1
#define CONFIG_ESP32_DEEP_SLEEP_WAKEUP_DELAY 2000
#define CONFIG_BROWNOUT_DET_LVL 0
#define CONFIG_MBEDTLS_PEM_PARSE_C 1
#define CONFIG_SPIFFS_GC_MAX_RUNS 10
#define CONFIG_ARDUINO_RUN_CORE1 1
#define CONFIG_ESP32_APPTRACE_DEST_NONE 1
#define CONFIG_HP_NANO1 1
#define CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC 1
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA 1
#define CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM 32
#define CONFIG_HTTPD_MAX_URI_LEN 512
#define CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED 1
#define CONFIG_OV7670_SUPPORT 1
#define CONFIG_ARDUHAL_ESP_LOG 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED 1
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ 240
#define CONFIG_MBEDTLS_HARDWARE_AES 1
#define CONFIG_FREERTOS_HZ 1000
#define CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE 1
#define CONFIG_ADC_CAL_EFUSE_TP_ENABLE 1
#define CONFIG_FREERTOS_ASSERT_FAIL_ABORT 1
#define CONFIG_BROWNOUT_DET 1
#define CONFIG_ESP32_XTAL_FREQ 0
#define CONFIG_MONITOR_BAUD_115200B 1
#define CONFIG_LOG_BOOTLOADER_LEVEL 0
#define CONFIG_D2WD_PSRAM_CS_IO 10
#define CONFIG_MBEDTLS_TLS_ENABLED 1
#define CONFIG_LWIP_MAX_RAW_PCBS 16
#define CONFIG_BTU_TASK_STACK_SIZE 4096
#define CONFIG_SMP_ENABLE 1
#define CONFIG_SPIRAM_SIZE -1
#define CONFIG_ARDUINO_UDP_TASK_PRIORITY 3
#define CONFIG_MBEDTLS_SSL_SESSION_TICKETS 1
#define CONFIG_SPIFFS_MAX_PARTITIONS 3
#define CONFIG_ESP_ERR_TO_NAME_LOOKUP 1
#define CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE_0 1
#define CONFIG_MBEDTLS_SSL_RENEGOTIATION 1
#define CONFIG_ESPTOOLPY_BEFORE_RESET 1
#define CONFIG_MB_EVENT_QUEUE_TIMEOUT 20
#define CONFIG_ESPTOOLPY_BAUD_OTHER_VAL 115200
#define CONFIG_PPP_MPPE_SUPPORT 1
#define CONFIG_ENABLE_ARDUINO_DEPENDS 1
#define CONFIG_WARN_WRITE_STRINGS 1
#define CONFIG_SPIFFS_OBJ_NAME_LEN 32
#define CONFIG_ESP32_PTHREAD_TASK_PRIO_DEFAULT 5
#define CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN_EFF 2
#define CONFIG_LOG_BOOTLOADER_LEVEL_NONE 1
#define CONFIG_PARTITION_TABLE_MD5 1
#define CONFIG_TCPIP_RECVMBOX_SIZE 32
#define CONFIG_ESP32_DEFAULT_CPU_FREQ_240 1
#define CONFIG_ESP32_XTAL_FREQ_AUTO 1
#define CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST 1
#define CONFIG_TCP_MAXRTX 12
#define CONFIG_ESPTOOLPY_AFTER "hard_reset"
#define CONFIG_LWIP_IP4_FRAG 1
#define CONFIG_TCPIP_TASK_AFFINITY 0x0
#define CONFIG_LWIP_SO_REUSE 1
#define CONFIG_ARDUINO_UDP_RUN_CORE1 1
#define CONFIG_DMA_TX_BUF_NUM 10
#define CONFIG_LWIP_MAX_LISTENING_TCP 16
#define CONFIG_FREERTOS_INTERRUPT_BACKTRACE 1
#define CONFIG_WL_SECTOR_SIZE 4096
#define CONFIG_ESP32_DEBUG_OCDAWARE 1
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET 1
#define CONFIG_TIMER_TASK_PRIORITY 1
#define CONFIG_PPP_PAP_SUPPORT 1
#define CONFIG_MBEDTLS_TLS_CLIENT 1
#define CONFIG_BTDM_CONTROLLER_HCI_MODE_VHCI 1
#define CONFIG_BT_ENABLED 1
#define CONFIG_ESP32_DEFAULT_PTHREAD_CORE_NO_AFFINITY 1
#define CONFIG_D0WD_PSRAM_CLK_IO 17
#define CONFIG_BT_SSP_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED 1
#define CONFIG_MONITOR_BAUD 115200
#define CONFIG_ESP32_PTHREAD_TASK_CORE_DEFAULT -1
#define CONFIG_ESP32_DEBUG_STUBS_ENABLE 1
#define CONFIG_BLE_ESTABLISH_LINK_CONNECTION_TIMEOUT 30
#define CONFIG_TCPIP_LWIP 1
#define CONFIG_REDUCE_PHY_TX_POWER 1
#define CONFIG_BOOTLOADER_WDT_TIME_MS 9000
#define CONFIG_FREERTOS_CORETIMER_0 1
#define CONFIG_BTDM_CTRL_LEGACY_AUTH_VENDOR_EVT_EFF 1
#define CONFIG_LWIP_IP6_FRAG 1
#define CONFIG_IDF_FIRMWARE_CHIP_ID 0x0000
#define CONFIG_PARTITION_TABLE_CUSTOM_FILENAME "partitions.csv"
#define CONFIG_MBEDTLS_HAVE_TIME 1
#define CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY 1
#define CONFIG_TCP_QUEUE_OOSEQ 1
#define CONFIG_FATFS_ALLOC_PREFER_EXTRAM 1
#define CONFIG_GATTS_ENABLE 1
#define CONFIG_CXX_EXCEPTIONS_EMG_POOL_SIZE 0
#define CONFIG_ADC_CAL_EFUSE_VREF_ENABLE 1
#define CONFIG_MBEDTLS_TLS_SERVER 1
#define CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT 1
#define CONFIG_BLE_ADV_REPORT_FLOW_CONTROL_SUPPORTED 1
#define CONFIG_FREERTOS_ISR_STACKSIZE 1536
#define CONFIG_SUPPORT_TERMIOS 1
#define CONFIG_CLASSIC_BT_ENABLED 1
#define CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA_PSK 1
#define CONFIG_OPENSSL_ASSERT_DO_NOTHING 1
#define CONFIG_IDF_TARGET "esp32"
#define CONFIG_WL_SECTOR_SIZE_4096 1
#define CONFIG_OPTIMIZATION_LEVEL_DEBUG 1
#define CONFIG_FREERTOS_NO_AFFINITY 0x7FFFFFFF
#define CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED 1
#define CONFIG_HTTPD_ERR_RESP_NO_DELAY 1
#define CONFIG_MB_TIMER_INDEX 0
#define CONFIG_SCAN_DUPLICATE_TYPE 0
#define CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED 1
#define CONFIG_HFP_CLIENT_ENABLE 1
#define CONFIG_NT99141_SUPPORT 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA 1
#define CONFIG_SPI_SLAVE_ISR_IN_IRAM 1
#define CONFIG_SYSTEM_EVENT_QUEUE_SIZE 32
#define CONFIG_BT_ACL_CONNECTIONS 4
#define CONFIG_FATFS_MAX_LFN 255
#define CONFIG_ESP32_WIFI_TX_BUFFER_TYPE 1
#define CONFIG_ESPTOOLPY_BAUD_921600B 1
#define CONFIG_BOOTLOADER_WDT_ENABLE 1
#define CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED 1
#define CONFIG_LWIP_LOOPBACK_MAX_PBUFS 8
#define CONFIG_A2DP_ENABLE 1
#define CONFIG_MB_TIMER_GROUP 0
#define CONFIG_SPI_FLASH_ROM_DRIVER_PATCH 1
#define CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS 5
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE 1
#define CONFIG_SPIFFS_PAGE_SIZE 256
#define CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED 1
#define CONFIG_ESP32_DPORT_WORKAROUND 1
#define CONFIG_GATTS_BLUFI_ENABLE 1
#define CONFIG_PPP_MSCHAP_SUPPORT 1
#define CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU0 1
#define CONFIG_ESP32_PTHREAD_TASK_STACK_SIZE_DEFAULT 2048
#define CONFIG_LWIP_SO_RCVBUF 1
#define CONFIG_MB_TIMER_PORT_ENABLED 1
#define CONFIG_DUPLICATE_SCAN_CACHE_SIZE 20
#define CONFIG_ARDUINO_UDP_RUNNING_CORE 1
#define CONFIG_MONITOR_BAUD_OTHER_VAL 115200
#define CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF 1
#define CONFIG_ESPTOOLPY_PORT "/dev/cu.usbserial-DO00EAB0"
#define CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS 1
#define CONFIG_BTDM_CTRL_BR_EDR_SCO_DATA_PATH_EFF 0
#define CONFIG_LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 1
#define CONFIG_TASK_WDT_PANIC 1
#define CONFIG_OV3660_SUPPORT 1
#define CONFIG_UNITY_ENABLE_DOUBLE 1
#define CONFIG_BLE_ADV_REPORT_DISCARD_THRSHOLD 20
#define CONFIG_BLUEDROID_PINNED_TO_CORE 0
#define CONFIG_HD_NANO1 1
#define CONFIG_BTDM_MODEM_SLEEP_MODE_ORIG 1
#define CONFIG_ARDUHAL_LOG_DEFAULT_LEVEL_ERROR 1
#define CONFIG_FATFS_API_ENCODING_ANSI_OEM 1
#define CONFIG_ARDUINO_IDF_COMMIT "7e63061fa"
#define CONFIG_ARDUINO_IDF_BRANCH "release/v3.3"
# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h" 2


extern "C" {


#define ESP_ERR_FLASH_BASE 0x10010
#define ESP_ERR_FLASH_OP_FAIL (ESP_ERR_FLASH_BASE + 1)
#define ESP_ERR_FLASH_OP_TIMEOUT (ESP_ERR_FLASH_BASE + 2)

#define SPI_FLASH_SEC_SIZE 4096 

#define SPI_FLASH_MMU_PAGE_SIZE 0x10000 


















# 45 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
void spi_flash_init();














# 54 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
size_t spi_flash_get_chip_size();














# 63 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
esp_err_t spi_flash_erase_sector(size_t sector);


















# 74 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
esp_err_t spi_flash_erase_range(size_t start_address, size_t size);

































# 93 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
esp_err_t spi_flash_write(size_t dest_addr, const void *src, size_t size);









































# 116 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
esp_err_t spi_flash_write_encrypted(size_t dest_addr, const void *src, size_t size);










































# 139 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
esp_err_t spi_flash_read(size_t src_addr, void *dest, size_t size);





























# 156 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
esp_err_t spi_flash_read_encrypted(size_t src, void *dest, size_t size);






# 161 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
typedef enum {
    SPI_FLASH_MMAP_DATA, 
    SPI_FLASH_MMAP_INST, 
} spi_flash_mmap_memory_t;






# 169 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
typedef uint32_t spi_flash_mmap_handle_t;












































# 193 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
esp_err_t spi_flash_mmap(size_t src_addr, size_t size, spi_flash_mmap_memory_t memory,
                         const void** out_ptr, spi_flash_mmap_handle_t* out_handle);














































# 219 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
esp_err_t spi_flash_mmap_pages(const int *pages, size_t page_count, spi_flash_mmap_memory_t memory,
                         const void** out_ptr, spi_flash_mmap_handle_t* out_handle);





















# 233 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
void spi_flash_munmap(spi_flash_mmap_handle_t handle);














# 242 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
void spi_flash_mmap_dump();






















# 255 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
uint32_t spi_flash_mmap_get_free_pages(spi_flash_mmap_memory_t memory);


#define SPI_FLASH_CACHE2PHYS_FAIL UINT32_MAX 






















# 271 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
size_t spi_flash_cache2phys(const void *cached);




































# 291 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
const void *spi_flash_phys2cache(size_t phys_offs, spi_flash_mmap_memory_t memory);








# 297 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
bool spi_flash_cache_enabled();








# 303 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
typedef void (*spi_flash_guard_start_func_t)(void);





# 307 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
typedef void (*spi_flash_guard_end_func_t)(void);





# 311 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
typedef void (*spi_flash_op_lock_func_t)(void);





# 315 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
typedef void (*spi_flash_op_unlock_func_t)(void);





# 319 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
typedef bool (*spi_flash_is_safe_write_address_t)(size_t addr, size_t size);





# 323 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
typedef void (*spi_flash_os_yield_t)(void);






























































# 356 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
typedef struct {
    spi_flash_guard_start_func_t start; 
    spi_flash_guard_end_func_t end; 
    spi_flash_op_lock_func_t op_lock; 
    spi_flash_op_unlock_func_t op_unlock; 

    spi_flash_is_safe_write_address_t is_safe_write_address; 

    spi_flash_os_yield_t yield; 
} spi_flash_guard_funcs_t;
















# 375 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
void spi_flash_guard_set(const spi_flash_guard_funcs_t* funcs);












# 383 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
const spi_flash_guard_funcs_t *spi_flash_guard_get();






# 388 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
extern const spi_flash_guard_funcs_t g_flash_guard_default_ops;












# 396 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
extern const spi_flash_guard_funcs_t g_flash_guard_no_os_ops;
# 436 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_spi_flash.h"
}
# 23 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h" 2


extern "C" {









# 34 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"







# 38 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
typedef enum {
    ESP_PARTITION_TYPE_APP = 0x00, 
    ESP_PARTITION_TYPE_DATA = 0x01, 
} esp_partition_type_t;








# 47 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
typedef enum {
    ESP_PARTITION_SUBTYPE_APP_FACTORY = 0x00, 
    ESP_PARTITION_SUBTYPE_APP_OTA_MIN = 0x10, 
    ESP_PARTITION_SUBTYPE_APP_OTA_0 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 0, 
    ESP_PARTITION_SUBTYPE_APP_OTA_1 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 1, 
    ESP_PARTITION_SUBTYPE_APP_OTA_2 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 2, 
    ESP_PARTITION_SUBTYPE_APP_OTA_3 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 3, 
    ESP_PARTITION_SUBTYPE_APP_OTA_4 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 4, 
    ESP_PARTITION_SUBTYPE_APP_OTA_5 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 5, 
    ESP_PARTITION_SUBTYPE_APP_OTA_6 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 6, 
    ESP_PARTITION_SUBTYPE_APP_OTA_7 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 7, 
    ESP_PARTITION_SUBTYPE_APP_OTA_8 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 8, 
    ESP_PARTITION_SUBTYPE_APP_OTA_9 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 9, 
    ESP_PARTITION_SUBTYPE_APP_OTA_10 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 10,
    ESP_PARTITION_SUBTYPE_APP_OTA_11 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 11,
    ESP_PARTITION_SUBTYPE_APP_OTA_12 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 12,
    ESP_PARTITION_SUBTYPE_APP_OTA_13 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 13,
    ESP_PARTITION_SUBTYPE_APP_OTA_14 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 14,
    ESP_PARTITION_SUBTYPE_APP_OTA_15 = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 15,
    ESP_PARTITION_SUBTYPE_APP_OTA_MAX = ESP_PARTITION_SUBTYPE_APP_OTA_MIN + 16,
    ESP_PARTITION_SUBTYPE_APP_TEST = 0x20, 

    ESP_PARTITION_SUBTYPE_DATA_OTA = 0x00, 
    ESP_PARTITION_SUBTYPE_DATA_PHY = 0x01, 
    ESP_PARTITION_SUBTYPE_DATA_NVS = 0x02, 
    ESP_PARTITION_SUBTYPE_DATA_COREDUMP = 0x03, 
    ESP_PARTITION_SUBTYPE_DATA_NVS_KEYS = 0x04, 
    ESP_PARTITION_SUBTYPE_DATA_EFUSE_EM = 0x05, 

    ESP_PARTITION_SUBTYPE_DATA_ESPHTTPD = 0x80, 
    ESP_PARTITION_SUBTYPE_DATA_FAT = 0x81, 
    ESP_PARTITION_SUBTYPE_DATA_SPIFFS = 0x82, 

    ESP_PARTITION_SUBTYPE_ANY = 0xff, 
} esp_partition_subtype_t;






# 86 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
#define ESP_PARTITION_SUBTYPE_OTA(i) ((esp_partition_subtype_t)(ESP_PARTITION_SUBTYPE_APP_OTA_MIN + ((i) & 0xf)))






# 91 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
typedef struct esp_partition_iterator_opaque_* esp_partition_iterator_t;














# 100 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
typedef struct {
    esp_partition_type_t type; 
    esp_partition_subtype_t subtype; 
    uint32_t address; 
    uint32_t size; 
    char label[17]; 
    bool encrypted; 
} esp_partition_t;






























# 124 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
esp_partition_iterator_t esp_partition_find(esp_partition_type_t type, esp_partition_subtype_t subtype, const char* label);


























# 139 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
const esp_partition_t* esp_partition_find_first(esp_partition_type_t type, esp_partition_subtype_t subtype, const char* label);
















# 149 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
const esp_partition_t* esp_partition_get(esp_partition_iterator_t iterator);


















# 160 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
esp_partition_iterator_t esp_partition_next(esp_partition_iterator_t iterator);












# 168 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
void esp_partition_iterator_release(esp_partition_iterator_t iterator);




































# 188 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
const esp_partition_t *esp_partition_verify(const esp_partition_t *partition);


































# 207 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
esp_err_t esp_partition_read(const esp_partition_t* partition,
                             size_t src_offset, void* dst, size_t size);




























































# 240 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
esp_err_t esp_partition_write(const esp_partition_t* partition,
                             size_t dst_offset, const void* src, size_t size);
































# 259 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
esp_err_t esp_partition_erase_range(const esp_partition_t* partition,
                                    uint32_t start_addr, uint32_t size);


















































# 287 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
esp_err_t esp_partition_mmap(const esp_partition_t* partition, uint32_t offset, uint32_t size,
                             spi_flash_mmap_memory_t memory,
                             const void** out_ptr, spi_flash_mmap_handle_t* out_handle);




































# 309 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
esp_err_t esp_partition_get_sha256(const esp_partition_t *partition, uint8_t *sha_256);




















# 321 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/spi_flash/esp_partition.h"
bool esp_partition_check_identity(const esp_partition_t *partition_1, const esp_partition_t *partition_2);


}
# 25 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Esp.h" 2






# 29 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/Esp.h"
typedef enum {
    WDTO_0MS = 0, 
    WDTO_15MS = 15, 
    WDTO_30MS = 30, 
    WDTO_60MS = 60, 
    WDTO_120MS = 120, 
    WDTO_250MS = 250, 
    WDTO_500MS = 500, 
    WDTO_1S = 1000,
    WDTO_2S = 2000,
    WDTO_4S = 4000,
    WDTO_8S = 8000 
} WDTO_t;


typedef enum {
    FM_QIO = 0x00,
    FM_QOUT = 0x01,
    FM_DIO = 0x02,
    FM_DOUT = 0x03,
    FM_FAST_READ = 0x04,
    FM_SLOW_READ = 0x05,
    FM_UNKNOWN = 0xff
} FlashMode_t;

typedef enum {
    SKETCH_SIZE_TOTAL = 0,
    SKETCH_SIZE_FREE = 1
} sketchSize_t;

class EspClass
{
public:
    EspClass() {}
    ~EspClass() {}
    void restart();

    
    uint32_t getHeapSize(); 
    uint32_t getFreeHeap(); 
    uint32_t getMinFreeHeap(); 
    uint32_t getMaxAllocHeap(); 

    
    uint32_t getPsramSize();
    uint32_t getFreePsram();
    uint32_t getMinFreePsram();
    uint32_t getMaxAllocPsram();

    uint8_t getChipRevision();
    const char * getChipModel();
    uint8_t getChipCores();
    uint32_t getCpuFreqMHz(){ return getCpuFrequencyMhz(); }
    inline uint32_t getCycleCount() __attribute__((always_inline));
    const char * getSdkVersion();

    void deepSleep(uint32_t time_us);

    uint32_t getFlashChipSize();
    uint32_t getFlashChipSpeed();
    FlashMode_t getFlashChipMode();

    uint32_t magicFlashChipSize(uint8_t byte);
    uint32_t magicFlashChipSpeed(uint8_t byte);
    FlashMode_t magicFlashChipMode(uint8_t byte);

    uint32_t getSketchSize();
    String getSketchMD5();
    uint32_t getFreeSketchSpace();

    bool flashEraseSector(uint32_t sector);
    bool flashWrite(uint32_t offset, uint32_t *data, size_t size);
    bool flashRead(uint32_t offset, uint32_t *data, size_t size);

    bool partitionEraseRange(const esp_partition_t *partition, uint32_t offset, size_t size);
    bool partitionWrite(const esp_partition_t *partition, uint32_t offset, uint32_t *data, size_t size);
    bool partitionRead(const esp_partition_t *partition, uint32_t offset, uint32_t *data, size_t size);

    uint64_t getEfuseMac();

};

uint32_t __attribute__((section(".iram1" "." "14"))) EspClass::getCycleCount()
{
    uint32_t ccount;
    __asm__ __volatile__("esync; rsr %0,ccount":"=a" (ccount));
    return ccount;
}

extern EspClass ESP;
# 156 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2

using std::abs;
using std::isinf;
using std::isnan;
using std::max;
using std::min;
using ::round;

uint16_t makeWord(uint16_t w);
uint16_t makeWord(byte h, byte l);

#define word(...) makeWord(__VA_ARGS__)

unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);
unsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);

extern "C" bool getLocalTime(struct tm * info, uint32_t ms = 5000);
extern "C" void configTime(long gmtOffset_sec, int daylightOffset_sec,
        const char* server1, const char* server2 = nullptr, const char* server3 = nullptr);
extern "C" void configTzTime(const char* tz,
        const char* server1, const char* server2 = nullptr, const char* server3 = nullptr);


long random(long);


#define _min(a,b) ((a)<(b)?(a):(b))
#define _max(a,b) ((a)>(b)?(a):(b))

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\variants\\esp32/pins_arduino.h" 1

#define Pins_Arduino_h 

# 1 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32/tools/sdk/include/newlib/stdint.h" 1













# 5 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\variants\\esp32/pins_arduino.h" 2

#define EXTERNAL_NUM_INTERRUPTS 16
#define NUM_DIGITAL_PINS 40
#define NUM_ANALOG_INPUTS 16

#define analogInputToDigitalPin(p) (((p)<20)?(esp32_adc2gpio[(p)]):-1)
#define digitalPinToInterrupt(p) (((p)<40)?(p):-1)
#define digitalPinHasPWM(p) (p < 34)

static const uint8_t TX = 1;
static const uint8_t RX = 3;

static const uint8_t SDA = 21;
static const uint8_t SCL = 22;

static const uint8_t SS = 5;
static const uint8_t MOSI = 23;
static const uint8_t MISO = 19;
static const uint8_t SCK = 18;

static const uint8_t A0 = 36;
static const uint8_t A3 = 39;
static const uint8_t A4 = 32;
static const uint8_t A5 = 33;
static const uint8_t A6 = 34;
static const uint8_t A7 = 35;
static const uint8_t A10 = 4;
static const uint8_t A11 = 0;
static const uint8_t A12 = 2;
static const uint8_t A13 = 15;
static const uint8_t A14 = 13;
static const uint8_t A15 = 12;
static const uint8_t A16 = 14;
static const uint8_t A17 = 27;
static const uint8_t A18 = 25;
static const uint8_t A19 = 26;

static const uint8_t T0 = 4;
static const uint8_t T1 = 0;
static const uint8_t T2 = 2;
static const uint8_t T3 = 15;
static const uint8_t T4 = 13;
static const uint8_t T5 = 12;
static const uint8_t T6 = 14;
static const uint8_t T7 = 27;
static const uint8_t T8 = 33;
static const uint8_t T9 = 32;

static const uint8_t DAC1 = 25;
static const uint8_t DAC2 = 26;
# 186 "A:\\Program Files (x86)\\Arduino\\hardware\\espressif\\esp32\\cores\\esp32/arduino.h" 2
# 8 "A:\\Github\\RC-Safety-Suite-Capstone\\Jesse test code projects\\Active\\GroundSpeedSensor\\GroundSpeedSensor.h" 2







namespace MsTimer2 {
 extern unsigned long msecs;
 extern void (*func)();
 extern volatile unsigned long count;
 extern volatile char overflowing;
 extern volatile unsigned int tcnt2;

 void set(unsigned long ms, void (*f)());
 void start();
 void stop();
 void _overflow();
}
# 6 "A:\\Github\\RC-Safety-Suite-Capstone\\Jesse test code projects\\Active\\GroundSpeedSensor\\GroundSpeedSensor.cpp" 2


